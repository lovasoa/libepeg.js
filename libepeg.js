// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['thisProgram'] = process['argv'][1];
  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var stack = 0;
  var JSfuncs = {
    'stackSave' : function() {
      stack = Runtime.stackSave();
    },
    'stackRestore' : function() {
      Runtime.stackRestore(stack);
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        ret = Runtime.stackAlloc(str.length + 1); // +1 for the trailing '\0'
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. A convenient way to call C functions (in C files, or
  // defined with extern "C").
  //
  // Note: ccall/cwrap use the C stack for temporary values. If you pass a string
  //       then it is only alive until the call is complete. If the code being
  //       called saves the pointer to be used later, it may point to invalid
  //       data. If you need a string to live forever, you can create it (and
  //       must later delete it manually!) using malloc and writeStringToMemory,
  //       for example.
  //
  // Note: LLVM optimizations can inline and remove functions, after which you will not be
  //       able to call them. Closure can also do so. To avoid that, add your function to
  //       the exports using something like
  //
  //         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
  //
  // @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
  // @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
  //                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
  // @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
  //                   except that 'array' is not possible (there is no way for us to know the length of the array)
  // @param args       An array of the arguments to the function, as native JS values (as in returnType)
  //                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
  // @return           The return value, as a native JS value (as in returnType)
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
    var func = getCFunc(ident);
    var cArgs = [];
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) JSfuncs['stackRestore']();
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }
  // Returns a native JS wrapper for a C function. This is similar to ccall, but
  // returns a function you can call repeatedly in a normal way. For example:
  //
  //   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
  //   alert(my_function(5, 22));
  //   alert(my_function(99, 12));
  //
  cwrap = function cwrap(ident, returnType, argTypes) {
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    funcstr += "assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 4096;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be more reasonable');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
  runtimeInitialized = false;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + Runtime.alignMemory(11923);
  /* global initializers */ __ATINIT__.push();
  

/* memory initializer */ allocate([114,98,0,0,0,0,0,0,119,98,0,0,0,0,0,0,84,104,117,109,98,58,58,85,82,73,10,102,105,108,101,58,47,47,37,115,0,0,0,0,84,104,117,109,98,58,58,77,84,105,109,101,10,37,108,108,117,0,0,0,0,0,0,0,84,104,117,109,98,58,58,73,109,97,103,101,58,58,87,105,100,116,104,10,37,105,0,0,84,104,117,109,98,58,58,73,109,97,103,101,58,58,72,101,105,103,104,116,10,37,105,0,84,104,117,109,98,58,58,77,105,109,101,116,121,112,101,10,105,109,97,103,101,47,106,112,101,103,0,0,0,0,0,0,84,104,117,109,98,58,58,0,84,104,117,109,98,58,58,85,82,73,0,0,0,0,0,0,84,104,117,109,98,58,58,77,84,105,109,101,0,0,0,0,37,108,108,117,0,0,0,0,84,104,117,109,98,58,58,73,109,97,103,101,58,58,87,105,100,116,104,0,0,0,0,0,84,104,117,109,98,58,58,73,109,97,103,101,58,58,72,101,105,103,104,116,0,0,0,0,84,104,117,109,98,58,58,77,105,109,101,116,121,112,101,0,255,217,0,0,0,0,0,0,129,1,29,90,14,2,134,37,16,3,20,17,18,4,11,8,20,5,216,3,23,6,218,1,25,7,229,0,28,8,111,0,30,9,54,0,33,10,26,0,35,11,13,0,9,12,6,0,10,13,3,0,12,13,1,0,143,15,127,90,36,16,37,63,38,17,242,44,39,18,124,32,40,19,185,23,42,20,130,17,43,21,239,12,45,22,161,9,46,23,47,7,48,24,92,5,49,25,6,4,51,26,3,3,52,27,64,2,54,28,177,1,56,29,68,1,57,30,245,0,59,31,183,0,60,32,138,0,62,33,104,0,63,34,78,0,32,35,59,0,33,9,44,0,165,37,225,90,64,38,76,72,65,39,13,58,67,40,241,46,68,41,31,38,69,42,51,31,70,43,168,25,72,44,24,21,73,45,119,17,74,46,116,14,75,47,251,11,77,48,248,9,78,49,97,8,79,50,6,7,48,51,205,5,50,52,222,4,50,53,15,4,51,54,99,3,52,55,212,2,53,56,92,2,54,57,248,1,55,58,164,1,56,59,96,1,57,60,37,1,58,61,246,0,59,62,203,0,61,63,171,0,61,32,143,0,193,65,18,91,80,66,4,77,81,67,44,65,82,68,216,55,83,69,232,47,84,70,60,41,86,71,121,35,87,72,223,30,87,73,169,26,72,74,78,23,72,75,36,20,74,76,156,17,74,77,107,15,75,78,81,13,77,79,182,11,77,48,64,10,208,81,50,88,88,82,28,77,89,83,142,67,90,84,221,59,91,85,238,52,92,86,174,46,93,87,154,41,86,71,22,37,216,89,112,85,95,90,169,76,96,91,217,68,97,92,34,62,99,93,36,56,99,94,180,50,93,86,23,46,223,96,168,86,101,97,70,79,102,98,229,71,103,99,207,65,104,100,61,60,99,93,94,55,105,102,49,82,106,103,15,76,107,104,57,70,103,99,94,65,233,106,39,86,108,107,231,80,109,103,133,75,110,109,151,85,111,107,79,80,238,111,16,90,112,109,34,85,240,111,235,89,113,113,29,90,0,64,197,88,159,83,66,75,0,64,73,50,163,34,168,17,197,88,33,123,252,115,98,104,197,88,191,69,11,48,126,24,159,83,252,115,65,109,84,98,159,83,179,65,65,45,18,23,66,75,98,104,84,98,126,88,66,75,33,59,186,40,195,20,0,64,197,88,159,83,66,75,0,64,73,50,163,34,168,17,73,50,191,69,179,65,33,59,73,50,130,39,55,27,224,13,163,34,11,48,65,45,186,40,163,34,55,27,191,18,142,9,168,17,126,24,18,23,195,20,168,17,224,13,142,9,223,4,0,0,0,0,0,0,240,63,239,97,72,177,80,49,246,63,202,111,77,145,174,231,244,63,170,17,108,239,98,208,242,63,0,0,0,0,0,0,240,63,59,191,167,192,105,36,233,63,187,32,199,123,122,81,225,63,93,171,114,222,85,168,209,63,16,0,0,0,11,0,0,0,10,0,0,0,16,0,0,0,24,0,0,0,40,0,0,0,51,0,0,0,61,0,0,0,12,0,0,0,12,0,0,0,14,0,0,0,19,0,0,0,26,0,0,0,58,0,0,0,60,0,0,0,55,0,0,0,14,0,0,0,13,0,0,0,16,0,0,0,24,0,0,0,40,0,0,0,57,0,0,0,69,0,0,0,56,0,0,0,14,0,0,0,17,0,0,0,22,0,0,0,29,0,0,0,51,0,0,0,87,0,0,0,80,0,0,0,62,0,0,0,18,0,0,0,22,0,0,0,37,0,0,0,56,0,0,0,68,0,0,0,109,0,0,0,103,0,0,0,77,0,0,0,24,0,0,0,35,0,0,0,55,0,0,0,64,0,0,0,81,0,0,0,104,0,0,0,113,0,0,0,92,0,0,0,49,0,0,0,64,0,0,0,78,0,0,0,87,0,0,0,103,0,0,0,121,0,0,0,120,0,0,0,101,0,0,0,72,0,0,0,92,0,0,0,95,0,0,0,98,0,0,0,112,0,0,0,100,0,0,0,103,0,0,0,99,0,0,0,17,0,0,0,18,0,0,0,24,0,0,0,47,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,18,0,0,0,21,0,0,0,26,0,0,0,66,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,24,0,0,0,26,0,0,0,56,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,47,0,0,0,66,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,99,0,0,0,0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,0,0,0,0,0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,0,0,0,0,0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125,0,0,0,0,0,0,0,1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250,0,0,0,0,0,0,0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119,0,0,0,0,0,0,0,0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250,0,0,0,0,0,0,0,64,197,88,159,83,66,75,0,64,73,50,163,34,168,17,197,88,33,123,252,115,98,104,197,88,191,69,11,48,126,24,159,83,252,115,65,109,84,98,159,83,179,65,65,45,18,23,66,75,98,104,84,98,126,88,66,75,33,59,186,40,195,20,0,64,197,88,159,83,66,75,0,64,73,50,163,34,168,17,73,50,191,69,179,65,33,59,73,50,130,39,55,27,224,13,163,34,11,48,65,45,186,40,163,34,55,27,191,18,142,9,168,17,126,24,18,23,195,20,168,17,224,13,142,9,223,4,0,0,0,0,0,0,240,63,239,97,72,177,80,49,246,63,202,111,77,145,174,231,244,63,170,17,108,239,98,208,242,63,0,0,0,0,0,0,240,63,59,191,167,192,105,36,233,63,187,32,199,123,122,81,225,63,93,171,114,222,85,168,209,63,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,4,0,0,0,6,0,0,0,3,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,12,0,0,0,3,0,0,0,8,0,0,0,11,0,0,0,13,0,0,0,9,0,0,0,10,0,0,0,14,0,0,0,15,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,14,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,13,0,0,0,15,0,0,0,3,0,0,0,8,0,0,0,12,0,0,0,16,0,0,0,21,0,0,0,9,0,0,0,11,0,0,0,17,0,0,0,20,0,0,0,22,0,0,0,10,0,0,0,18,0,0,0,19,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,14,0,0,0,15,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,13,0,0,0,16,0,0,0,25,0,0,0,3,0,0,0,8,0,0,0,12,0,0,0,17,0,0,0,24,0,0,0,26,0,0,0,9,0,0,0,11,0,0,0,18,0,0,0,23,0,0,0,27,0,0,0,32,0,0,0,10,0,0,0,19,0,0,0,22,0,0,0,28,0,0,0,31,0,0,0,33,0,0,0,20,0,0,0,21,0,0,0,29,0,0,0,30,0,0,0,34,0,0,0,35,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,14,0,0,0,15,0,0,0,27,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,13,0,0,0,16,0,0,0,26,0,0,0,28,0,0,0,3,0,0,0,8,0,0,0,12,0,0,0,17,0,0,0,25,0,0,0,29,0,0,0,38,0,0,0,9,0,0,0,11,0,0,0,18,0,0,0,24,0,0,0,30,0,0,0,37,0,0,0,39,0,0,0,10,0,0,0,19,0,0,0,23,0,0,0,31,0,0,0,36,0,0,0,40,0,0,0,45,0,0,0,20,0,0,0,22,0,0,0,32,0,0,0,35,0,0,0,41,0,0,0,44,0,0,0,46,0,0,0,21,0,0,0,33,0,0,0,34,0,0,0,42,0,0,0,43,0,0,0,47,0,0,0,48,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,6,0,0,0,14,0,0,0,15,0,0,0,27,0,0,0,28,0,0,0,2,0,0,0,4,0,0,0,7,0,0,0,13,0,0,0,16,0,0,0,26,0,0,0,29,0,0,0,42,0,0,0,3,0,0,0,8,0,0,0,12,0,0,0,17,0,0,0,25,0,0,0,30,0,0,0,41,0,0,0,43,0,0,0,9,0,0,0,11,0,0,0,18,0,0,0,24,0,0,0,31,0,0,0,40,0,0,0,44,0,0,0,53,0,0,0,10,0,0,0,19,0,0,0,23,0,0,0,32,0,0,0,39,0,0,0,45,0,0,0,52,0,0,0,54,0,0,0,20,0,0,0,22,0,0,0,33,0,0,0,38,0,0,0,46,0,0,0,51,0,0,0,55,0,0,0,60,0,0,0,21,0,0,0,34,0,0,0,37,0,0,0,47,0,0,0,50,0,0,0,56,0,0,0,59,0,0,0,61,0,0,0,35,0,0,0,36,0,0,0,48,0,0,0,49,0,0,0,57,0,0,0,58,0,0,0,62,0,0,0,63,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,76,83,69,0,0,0,0,0,83,79,83,0,0,0,0,0,66,111,103,117,115,32,109,101,115,115,97,103,101,32,99,111,100,101,32,37,100,0,0,0,65,76,73,71,78,95,84,89,80,69,32,105,115,32,119,114,111,110,103,44,32,112,108,101,97,115,101,32,102,105,120,0,77,65,88,95,65,76,76,79,67,95,67,72,85,78,75,32,105,115,32,119,114,111,110,103,44,32,112,108,101,97,115,101,32,102,105,120,0,0,0,0,66,111,103,117,115,32,98,117,102,102,101,114,32,99,111,110,116,114,111,108,32,109,111,100,101,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,99,111,109,112,111,110,101,110,116,32,73,68,32,37,100,32,105,110,32,83,79,83,0,0,73,110,118,97,108,105,100,32,99,114,111,112,32,114,101,113,117,101,115,116,0,0,0,0,68,67,84,32,99,111,101,102,102,105,99,105,101,110,116,32,111,117,116,32,111,102,32,114,97,110,103,101,0,0,0,0,68,67,84,32,115,99,97,108,101,100,32,98,108,111,99,107,32,115,105,122,101,32,37,100,120,37,100,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,67,111,109,112,111,110,101,110,116,32,105,110,100,101,120,32,37,100,58,32,109,105,115,109,97,116,99,104,105,110,103,32,115,97,109,112,108,105,110,103,32,114,97,116,105,111,32,37,100,58,37,100,44,32,37,100,58,37,100,44,32,37,99,0,66,111,103,117,115,32,72,117,102,102,109,97,110,32,116,97,98,108,101,32,100,101,102,105,110,105,116,105,111,110,0,0,66,111,103,117,115,32,105,110,112,117,116,32,99,111,108,111,114,115,112,97,99,101,0,0,66,111,103,117,115,32,74,80,69,71,32,99,111,108,111,114,115,112,97,99,101,0,0,0,66,111,103,117,115,32,109,97,114,107,101,114,32,108,101,110,103,116,104,0,0,0,0,0,87,114,111,110,103,32,74,80,69,71,32,108,105,98,114,97,114,121,32,118,101,114,115,105,111,110,58,32,108,105,98,114,97,114,121,32,105,115,32,37,100,44,32,99,97,108,108,101,114,32,101,120,112,101,99,116,115,32,37,100,0,0,0,0,83,97,109,112,108,105,110,103,32,102,97,99,116,111,114,115,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,105,110,116,101,114,108,101,97,118,101,100,32,115,99,97,110,0,73,110,118,97,108,105,100,32,109,101,109,111,114,121,32,112,111,111,108,32,99,111,100,101,32,37,100,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,74,80,69,71,32,100,97,116,97,32,112,114,101,99,105,115,105,111,110,32,37,100,0,0,0,0,0,0,73,110,118,97,108,105,100,32,112,114,111,103,114,101,115,115,105,118,101,32,112,97,114,97,109,101,116,101,114,115,32,83,115,61,37,100,32,83,101,61,37,100,32,65,104,61,37,100,32,65,108,61,37,100,0,0,73,110,118,97,108,105,100,32,112,114,111,103,114,101,115,115,105,118,101,32,112,97,114,97,109,101,116,101,114,115,32,97,116,32,115,99,97,110,32,115,99,114,105,112,116,32,101,110,116,114,121,32,37,100,0,0,66,111,103,117,115,32,115,97,109,112,108,105,110,103,32,102,97,99,116,111,114,115,0,0,73,110,118,97,108,105,100,32,115,99,97,110,32,115,99,114,105,112,116,32,97,116,32,101,110,116,114,121,32,37,100,0,73,109,112,114,111,112,101,114,32,99,97,108,108,32,116,111,32,74,80,69,71,32,108,105,98,114,97,114,121,32,105,110,32,115,116,97,116,101,32,37,100,0,0,0,0,0,0,0,74,80,69,71,32,112,97,114,97,109,101,116,101,114,32,115,116,114,117,99,116,32,109,105,115,109,97,116,99,104,58,32,108,105,98,114,97,114,121,32,116,104,105,110,107,115,32,115,105,122,101,32,105,115,32,37,117,44,32,99,97,108,108,101,114,32,101,120,112,101,99,116,115,32,37,117,0,0,0,0,66,111,103,117,115,32,118,105,114,116,117,97,108,32,97,114,114,97,121,32,97,99,99,101,115,115,0,0,0,0,0,0,66,117,102,102,101,114,32,112,97,115,115,101,100,32,116,111,32,74,80,69,71,32,108,105,98,114,97,114,121,32,105,115,32,116,111,111,32,115,109,97,108,108,0,0,0,0,0,0,83,117,115,112,101,110,115,105,111,110,32,110,111,116,32,97,108,108,111,119,101,100,32,104,101,114,101,0,0,0,0,0,67,67,73,82,54,48,49,32,115,97,109,112,108,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0,0,0,0,84,111,111,32,109,97,110,121,32,99,111,108,111,114,32,99,111,109,112,111,110,101,110,116,115,58,32,37,100,44,32,109,97,120,32,37,100,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,99,111,108,111,114,32,99,111,110,118,101,114,115,105,111,110,32,114,101,113,117,101,115,116,0,0,0,0,66,111,103,117,115,32,68,65,67,32,105,110,100,101,120,32,37,100,0,0,0,0,0,0,66,111,103,117,115,32,68,65,67,32,118,97,108,117,101,32,48,120,37,120,0,0,0,0,66,111,103,117,115,32,68,72,84,32,105,110,100,101,120,32,37,100,0,0,0,0,0,0,66,111,103,117,115,32,68,81,84,32,105,110,100,101,120,32,37,100,0,0,0,0,0,0,69,109,112,116,121,32,74,80,69,71,32,105,109,97,103,101,32,40,68,78,76,32,110,111,116,32,115,117,112,112,111,114,116,101,100,41,0,0,0,0,82,101,97,100,32,102,114,111,109,32,69,77,83,32,102,97,105,108,101,100,0,0,0,0,87,114,105,116,101,32,116,111,32,69,77,83,32,102,97,105,108,101,100,0,0,0,0,0,68,105,100,110,39,116,32,101,120,112,101,99,116,32,109,111,114,101,32,116,104,97,110,32,111,110,101,32,115,99,97,110,0,0,0,0,0,0,0,0,73,110,112,117,116,32,102,105,108,101,32,114,101,97,100,32,101,114,114,111,114,0,0,0,79,117,116,112,117,116,32,102,105,108,101,32,119,114,105,116,101,32,101,114,114,111,114,32,45,45,45,32,111,117,116,32,111,102,32,100,105,115,107,32,115,112,97,99,101,63,0,0,70,114,97,99,116,105,111,110,97,108,32,115,97,109,112,108,105,110,103,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0,72,117,102,102,109,97,110,32,99,111,100,101,32,115,105,122,101,32,116,97,98,108,101,32,111,118,101,114,102,108,111,119,0,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,72,117,102,102,109,97,110,32,99,111,100,101,32,116,97,98,108,101,32,101,110,116,114,121,0,0,0,0,0,0,0,0,77,97,120,105,109,117,109,32,115,117,112,112,111,114,116,101,100,32,105,109,97,103,101,32,100,105,109,101,110,115,105,111,110,32,105,115,32,37,117,32,112,105,120,101,108,115,0,0,69,109,112,116,121,32,105,110,112,117,116,32,102,105,108,101,0,0,0,0,0,0,0,0,80,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,105,110,112,117,116,32,102,105,108,101,0,0,0,0,0,67,97,110,110,111,116,32,116,114,97,110,115,99,111,100,101,32,100,117,101,32,116,111,32,109,117,108,116,105,112,108,101,32,117,115,101,32,111,102,32,113,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,32,37,100,0,0,0,83,99,97,110,32,115,99,114,105,112,116,32,100,111,101,115,32,110,111,116,32,116,114,97,110,115,109,105,116,32,97,108,108,32,100,97,116,97,0,0,73,110,118,97,108,105,100,32,99,111,108,111,114,32,113,117,97,110,116,105,122,97,116,105,111,110,32,109,111,100,101,32,99,104,97,110,103,101,0,0,78,111,116,32,105,109,112,108,101,109,101,110,116,101,100,32,121,101,116,0,0,0,0,0,82,101,113,117,101,115,116,101,100,32,102,101,97,116,117,114,101,32,119,97,115,32,111,109,105,116,116,101,100,32,97,116,32,99,111,109,112,105,108,101,32,116,105,109,101,0,0,0,65,114,105,116,104,109,101,116,105,99,32,116,97,98,108,101,32,48,120,37,48,50,120,32,119,97,115,32,110,111,116,32,100,101,102,105,110,101,100,0,66,97,99,107,105,110,103,32,115,116,111,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,72,117,102,102,109,97,110,32,116,97,98,108,101,32,48,120,37,48,50,120,32,119,97,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,74,80,69,71,32,100,97,116,97,115,116,114,101,97,109,32,99,111,110,116,97,105,110,115,32,110,111,32,105,109,97,103,101,0,0,0,0,0,0,0,81,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,32,48,120,37,48,50,120,32,119,97,115,32,110,111,116,32,100,101,102,105,110,101,100,0,0,0,0,0,0,0,78,111,116,32,97,32,74,80,69,71,32,102,105,108,101,58,32,115,116,97,114,116,115,32,119,105,116,104,32,48,120,37,48,50,120,32,48,120,37,48,50,120,0,0,0,0,0,0,73,110,115,117,102,102,105,99,105,101,110,116,32,109,101,109,111,114,121,32,40,99,97,115,101,32,37,100,41,0,0,0,67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,109,111,114,101,32,116,104,97,110,32,37,100,32,99,111,108,111,114,32,99,111,109,112,111,110,101,110,116,115,0,0,0,67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,116,111,32,102,101,119,101,114,32,116,104,97,110,32,37,100,32,99,111,108,111,114,115,0,67,97,110,110,111,116,32,113,117,97,110,116,105,122,101,32,116,111,32,109,111,114,101,32,116,104,97,110,32,37,100,32,99,111,108,111,114,115,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,37,115,32,98,101,102,111,114,101,32,83,79,70,0,0,0,0,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,116,119,111,32,83,79,70,32,109,97,114,107,101,114,115,0,0,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,109,105,115,115,105,110,103,32,83,79,83,32,109,97,114,107,101,114,0,85,110,115,117,112,112,111,114,116,101,100,32,74,80,69,71,32,112,114,111,99,101,115,115,58,32,83,79,70,32,116,121,112,101,32,48,120,37,48,50,120,0,0,0,0,0,0,0,73,110,118,97,108,105,100,32,74,80,69,71,32,102,105,108,101,32,115,116,114,117,99,116,117,114,101,58,32,116,119,111,32,83,79,73,32,109,97,114,107,101,114,115,0,0,0,0,70,97,105,108,101,100,32,116,111,32,99,114,101,97,116,101,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0,0,0,0,0,0,82,101,97,100,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,0,0,0,83,101,101,107,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,0,0,0,87,114,105,116,101,32,102,97,105,108,101,100,32,111,110,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,45,45,45,32,111,117,116,32,111,102,32,100,105,115,107,32,115,112,97,99,101,63,0,0,0,65,112,112,108,105,99,97,116,105,111,110,32,116,114,97,110,115,102,101,114,114,101,100,32,116,111,111,32,102,101,119,32,115,99,97,110,108,105,110,101,115,0,0,0,0,0,0,0,85,110,115,117,112,112,111,114,116,101,100,32,109,97,114,107,101,114,32,116,121,112,101,32,48,120,37,48,50,120,0,0,86,105,114,116,117,97,108,32,97,114,114,97,121,32,99,111,110,116,114,111,108,108,101,114,32,109,101,115,115,101,100,32,117,112,0,0,0,0,0,0,73,109,97,103,101,32,116,111,111,32,119,105,100,101,32,102,111,114,32,116,104,105,115,32,105,109,112,108,101,109,101,110,116,97,116,105,111,110,0,0,82,101,97,100,32,102,114,111,109,32,88,77,83,32,102,97,105,108,101,100,0,0,0,0,87,114,105,116,101,32,116,111,32,88,77,83,32,102,97,105,108,101,100,0,0,0,0,0,67,111,112,121,114,105,103,104,116,32,40,67,41,32,50,48,49,52,44,32,84,104,111,109,97,115,32,71,46,32,76,97,110,101,44,32,71,117,105,100,111,32,86,111,108,108,98,101,100,105,110,103,0,0,0,0,57,97,32,32,49,57,45,74,97,110,45,50,48,49,52,0,67,97,117,116,105,111,110,58,32,113,117,97,110,116,105,122,97,116,105,111,110,32,116,97,98,108,101,115,32,97,114,101,32,116,111,111,32,99,111,97,114,115,101,32,102,111,114,32,98,97,115,101,108,105,110,101,32,74,80,69,71,0,0,0,65,100,111,98,101,32,65,80,80,49,52,32,109,97,114,107,101,114,58,32,118,101,114,115,105,111,110,32,37,100,44,32,102,108,97,103,115,32,48,120,37,48,52,120,32,48,120,37,48,52,120,44,32,116,114,97,110,115,102,111,114,109,32,37,100,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,65,80,80,48,32,109,97,114,107,101,114,32,40,110,111,116,32,74,70,73,70,41,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,0,0,85,110,107,110,111,119,110,32,65,80,80,49,52,32,109,97,114,107,101,114,32,40,110,111,116,32,65,100,111,98,101,41,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,68,101,102,105,110,101,32,65,114,105,116,104,109,101,116,105,99,32,84,97,98,108,101,32,48,120,37,48,50,120,58,32,48,120,37,48,50,120,0,0,68,101,102,105,110,101,32,72,117,102,102,109,97,110,32,84,97,98,108,101,32,48,120,37,48,50,120,0,0,0,0,0,68,101,102,105,110,101,32,81,117,97,110,116,105,122,97,116,105,111,110,32,84,97,98,108,101,32,37,100,32,32,112,114,101,99,105,115,105,111,110,32,37,100,0,0,0,0,0,0,68,101,102,105,110,101,32,82,101,115,116,97,114,116,32,73,110,116,101,114,118,97,108,32,37,117,0,0,0,0,0,0,70,114,101,101,100,32,69,77,83,32,104,97,110,100,108,101,32,37,117,0,0,0,0,0,79,98,116,97,105,110,101,100,32,69,77,83,32,104,97,110,100,108,101,32,37,117,0,0,69,110,100,32,79,102,32,73,109,97,103,101,0,0,0,0,32,32,32,32,32,32,32,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,32,37,51,100,0,74,70,73,70,32,65,80,80,48,32,109,97,114,107,101,114,58,32,118,101,114,115,105,111,110,32,37,100,46,37,48,50,100,44,32,100,101,110,115,105,116,121,32,37,100,120,37,100,32,32,37,100,0,0,0,0,87,97,114,110,105,110,103,58,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,32,115,105,122,101,32,100,111,101,115,32,110,111,116,32,109,97,116,99,104,32,100,97,116,97,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,116,121,112,101,32,48,120,37,48,50,120,44,32,108,101,110,103,116,104,32,37,117,0,0,0,32,32,32,32,119,105,116,104,32,37,100,32,120,32,37,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,0,0,0,0,0,0,0,0,77,105,115,99,101,108,108,97,110,101,111,117,115,32,109,97,114,107,101,114,32,48,120,37,48,50,120,44,32,108,101,110,103,116,104,32,37,117,0,0,85,110,101,120,112,101,99,116,101,100,32,109,97,114,107,101,114,32,48,120,37,48,50,120,0,0,0,0,0,0,0,0,32,32,32,32,32,32,32,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,32,37,52,117,0,81,117,97,110,116,105,122,105,110,103,32,116,111,32,37,100,32,61,32,37,100,42,37,100,42,37,100,32,99,111,108,111,114,115,0,0,0,0,0,0,81,117,97,110,116,105,122,105,110,103,32,116,111,32,37,100,32,99,111,108,111,114,115,0,83,101,108,101,99,116,101,100,32,37,100,32,99,111,108,111,114,115,32,102,111,114,32,113,117,97,110,116,105,122,97,116,105,111,110,0,0,0,0,0,65,116,32,109,97,114,107,101,114,32,48,120,37,48,50,120,44,32,114,101,99,111,118,101,114,121,32,97,99,116,105,111,110,32,37,100,0,0,0,0,82,83,84,37,100,0,0,0,83,109,111,111,116,104,105,110,103,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,119,105,116,104,32,110,111,110,115,116,97,110,100,97,114,100,32,115,97,109,112,108,105,110,103,32,114,97,116,105,111,115,0,0,0,0,0,0,0,0,83,116,97,114,116,32,79,102,32,70,114,97,109,101,32,48,120,37,48,50,120,58,32,119,105,100,116,104,61,37,117,44,32,104,101,105,103,104,116,61,37,117,44,32,99,111,109,112,111,110,101,110,116,115,61,37,100,0,0,0,0,0,0,0,32,32,32,32,67,111,109,112,111,110,101,110,116,32,37,100,58,32,37,100,104,120,37,100,118,32,113,61,37,100,0,0,83,116,97,114,116,32,111,102,32,73,109,97,103,101,0,0,83,116,97,114,116,32,79,102,32,83,99,97,110,58,32,37,100,32,99,111,109,112,111,110,101,110,116,115,0,0,0,0,32,32,32,32,67,111,109,112,111,110,101,110,116,32,37,100,58,32,100,99,61,37,100,32,97,99,61,37,100,0,0,0,32,32,83,115,61,37,100,44,32,83,101,61,37,100,44,32,65,104,61,37,100,44,32,65,108,61,37,100,0,0,0,0,67,108,111,115,101,100,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0,0,0,0,0,0,0,0,79,112,101,110,101,100,32,116,101,109,112,111,114,97,114,121,32,102,105,108,101,32,37,115,0,0,0,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,74,80,69,71,45,99,111,109,112,114,101,115,115,101,100,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,112,97,108,101,116,116,101,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0,0,0,0,0,0,0,74,70,73,70,32,101,120,116,101,110,115,105,111,110,32,109,97,114,107,101,114,58,32,82,71,66,32,116,104,117,109,98,110,97,105,108,32,105,109,97,103,101,44,32,108,101,110,103,116,104,32,37,117,0,0,0,85,110,114,101,99,111,103,110,105,122,101,100,32,99,111,109,112,111,110,101,110,116,32,73,68,115,32,37,100,32,37,100,32,37,100,44,32,97,115,115,117,109,105,110,103,32,89,67,98,67,114,0,0,0,0,0,70,114,101,101,100,32,88,77,83,32,104,97,110,100,108,101,32,37,117,0,0,0,0,0,79,98,116,97,105,110,101,100,32,88,77,83,32,104,97,110,100,108,101,32,37,117,0,0,85,110,107,110,111,119,110,32,65,100,111,98,101,32,99,111,108,111,114,32,116,114,97,110,115,102,111,114,109,32,99,111,100,101,32,37,100,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,98,97,100,32,97,114,105,116,104,109,101,116,105,99,32,99,111,100,101,0,0,73,110,99,111,110,115,105,115,116,101,110,116,32,112,114,111,103,114,101,115,115,105,111,110,32,115,101,113,117,101,110,99,101,32,102,111,114,32,99,111,109,112,111,110,101,110,116,32,37,100,32,99,111,101,102,102,105,99,105,101,110,116,32,37,100,0,0,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,37,117,32,101,120,116,114,97,110,101,111,117,115,32,98,121,116,101,115,32,98,101,102,111,114,101,32,109,97,114,107,101,114,32,48,120,37,48,50,120,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,112,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,100,97,116,97,32,115,101,103,109,101,110,116,0,0,0,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,98,97,100,32,72,117,102,102,109,97,110,32,99,111,100,101,0,0,0,0,0,87,97,114,110,105,110,103,58,32,117,110,107,110,111,119,110,32,74,70,73,70,32,114,101,118,105,115,105,111,110,32,110,117,109,98,101,114,32,37,100,46,37,48,50,100,0,0,0,80,114,101,109,97,116,117,114,101,32,101,110,100,32,111,102,32,74,80,69,71,32,102,105,108,101,0,0,0,0,0,0,67,111,114,114,117,112,116,32,74,80,69,71,32,100,97,116,97,58,32,102,111,117,110,100,32,109,97,114,107,101,114,32,48,120,37,48,50,120,32,105,110,115,116,101,97,100,32,111,102,32,82,83,84,37,100,0,73,110,118,97,108,105,100,32,83,79,83,32,112,97,114,97,109,101,116,101,114,115,32,102,111,114,32,115,101,113,117,101,110,116,105,97,108,32,74,80,69,71,0,0,0,0,0,0,65,112,112,108,105,99,97,116,105,111,110,32,116,114,97,110,115,102,101,114,114,101,100,32,116,111,111,32,109,97,110,121,32,115,99,97,110,108,105,110,101,115,0,0,0,0,0,0,176,11,0,0,200,11,0,0,232,11,0,0,16,12,0,0,48,12,0,0,80,12,0,0,104,12,0,0,136,12,0,0,184,12,0,0,248,12,0,0,24,13,0,0,48,13,0,0,72,13,0,0,96,13,0,0,160,13,0,0,208,13,0,0,240,13,0,0,24,14,0,0,80,14,0,0,136,14,0,0,160,14,0,0,192,14,0,0,240,14,0,0,64,15,0,0,96,15,0,0,144,15,0,0,176,15,0,0,216,15,0,0,0,16,0,0,40,16,0,0,64,16,0,0,88,16,0,0,112,16,0,0,136,16,0,0,176,16,0,0,200,16,0,0,224,16,0,0,8,17,0,0,32,17,0,0,80,17,0,0,120,17,0,0,160,17,0,0,200,17,0,0,248,17,0,0,16,18,0,0,48,18,0,0,112,18,0,0,152,18,0,0,192,18,0,0,216,18,0,0,8,19,0,0,48,19,0,0,80,19,0,0,120,19,0,0,160,19,0,0,208,19,0,0,0,20,0,0,32,20,0,0,80,20,0,0,120,20,0,0,160,20,0,0,208,20,0,0,0,21,0,0,48,21,0,0,96,21,0,0,144,21,0,0,184,21,0,0,216,21,0,0,248,21,0,0,48,22,0,0,96,22,0,0,128,22,0,0,168,22,0,0,208,22,0,0,232,22,0,0,0,23,0,0,56,23,0,0,72,23,0,0,136,23,0,0,208,23,0,0,0,24,0,0,48,24,0,0,88,24,0,0,120,24,0,0,168,24,0,0,200,24,0,0,224,24,0,0,248,24,0,0,8,25,0,0,48,25,0,0,104,25,0,0,168,25,0,0,216,25,0,0,0,26,0,0,40,26,0,0,72,26,0,0,112,26,0,0,152,26,0,0,176,26,0,0,216,26,0,0,0,27,0,0,8,27,0,0,72,27,0,0,136,27,0,0,168,27,0,0,184,27,0,0,216,27,0,0,248,27,0,0,24,28,0,0,56,28,0,0,88,28,0,0,160,28,0,0,224,28,0,0,24,29,0,0,80,29,0,0,104,29,0,0,128,29,0,0,168,29,0,0,208,29,0,0,24,30,0,0,88,30,0,0,144,30,0,0,184,30,0,0,232,30,0,0,8,31,0,0,64,31,0,0,112,31,0,0,0,0,0,0,37,115,10,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,192,48,240,12,204,60,252,3,195,51,243,15,207,63,255,128,64,176,112,140,76,188,124,131,67,179,115,143,79,191,127,32,224,16,208,44,236,28,220,35,227,19,211,47,239,31,223,160,96,144,80,172,108,156,92,163,99,147,83,175,111,159,95,8,200,56,248,4,196,52,244,11,203,59,251,7,199,55,247,136,72,184,120,132,68,180,116,139,75,187,123,135,71,183,119,40,232,24,216,36,228,20,212,43,235,27,219,39,231,23,215,168,104,152,88,164,100,148,84,171,107,155,91,167,103,151,87,2,194,50,242,14,206,62,254,1,193,49,241,13,205,61,253,130,66,178,114,142,78,190,126,129,65,177,113,141,77,189,125,34,226,18,210,46,238,30,222,33,225,17,209,45,237,29,221,162,98,146,82,174,110,158,94,161,97,145,81,173,109,157,93,10,202,58,250,6,198,54,246,9,201,57,249,5,197,53,245,138,74,186,122,134,70,182,118,137,73,185,121,133,69,181,117,42,234,26,218,38,230,22,214,41,233,25,217,37,229,21,213,170,106,154,90,166,102,150,86,169,105,153,89,165,101,149,85,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,32,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,4,0,0,0,5,0,0,0,12,0,0,0,19,0,0,0,26,0,0,0,33,0,0,0,40,0,0,0,48,0,0,0,41,0,0,0,34,0,0,0,27,0,0,0,20,0,0,0,13,0,0,0,6,0,0,0,7,0,0,0,14,0,0,0,21,0,0,0,28,0,0,0,35,0,0,0,42,0,0,0,49,0,0,0,56,0,0,0,57,0,0,0,50,0,0,0,43,0,0,0,36,0,0,0,29,0,0,0,22,0,0,0,15,0,0,0,23,0,0,0,30,0,0,0,37,0,0,0,44,0,0,0,51,0,0,0,58,0,0,0,59,0,0,0,52,0,0,0,45,0,0,0,38,0,0,0,31,0,0,0,39,0,0,0,46,0,0,0,53,0,0,0,60,0,0,0,61,0,0,0,54,0,0,0,47,0,0,0,55,0,0,0,62,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,32,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,4,0,0,0,5,0,0,0,12,0,0,0,19,0,0,0,26,0,0,0,33,0,0,0,40,0,0,0,48,0,0,0,41,0,0,0,34,0,0,0,27,0,0,0,20,0,0,0,13,0,0,0,6,0,0,0,14,0,0,0,21,0,0,0,28,0,0,0,35,0,0,0,42,0,0,0,49,0,0,0,50,0,0,0,43,0,0,0,36,0,0,0,29,0,0,0,22,0,0,0,30,0,0,0,37,0,0,0,44,0,0,0,51,0,0,0,52,0,0,0,45,0,0,0,38,0,0,0,46,0,0,0,53,0,0,0,54,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,32,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,4,0,0,0,5,0,0,0,12,0,0,0,19,0,0,0,26,0,0,0,33,0,0,0,40,0,0,0,41,0,0,0,34,0,0,0,27,0,0,0,20,0,0,0,13,0,0,0,21,0,0,0,28,0,0,0,35,0,0,0,42,0,0,0,43,0,0,0,36,0,0,0,29,0,0,0,37,0,0,0,44,0,0,0,45,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,32,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,4,0,0,0,12,0,0,0,19,0,0,0,26,0,0,0,33,0,0,0,34,0,0,0,27,0,0,0,20,0,0,0,28,0,0,0,35,0,0,0,36,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,3,0,0,0,10,0,0,0,17,0,0,0,24,0,0,0,25,0,0,0,18,0,0,0,11,0,0,0,19,0,0,0,26,0,0,0,27,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,16,0,0,0,9,0,0,0,2,0,0,0,10,0,0,0,17,0,0,0,18,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,9,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,63,0,0,0,74,80,69,71,77,69,77,0,37,108,100,37,99,0,0,0,64,6,0,0,128,62,0,0,0,0,0,0,136,19,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (node.contents && node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return Math.floor(Math.random()*256); };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      var stream = FS.getStream(fildes);
      if (stream) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      var fd = _fileno(stream);
      _fsync(fd);
      return _close(fd);
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  var _emscripten_prep_setjmp=true;


  
  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 512;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 64;
        flags |= 1024;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var fd = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return fd === -1 ? 0 : FS.getPtrForStream(FS.getStream(fd));
    }


  var _emscripten_check_longjmp=true;

   
  Module["_strncpy"] = _strncpy;

   
  Module["_i64Add"] = _i64Add;

  function _fabs() {
  return Math_abs.apply(null, arguments)
  }


  
  
  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }function _putchar(c) {
      // int putchar(int c);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/putchar.html
      return _fputc(c, HEAP32[((_stdout)>>2)]);
    } 
  Module["_saveSetjmp"] = _saveSetjmp;

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  var _emscripten_get_longjmp_result=true;

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx) return Module.ctx; // no need to recreate singleton GL context
  
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        }
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
          Module.ctx = ctx;
          if (useWebGL) GLctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = -event.wheelDelta;
            break;
          case 'wheel': 
            delta = event.deltaY;
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return Math.max(-1, Math.min(1, delta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};

  
  function _stat(path, buf, dontResolveLastLink) {
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/stat.html
      // int stat(const char *path, struct stat *buf);
      // NOTE: dontResolveLastLink is a shortcut for lstat(). It should never be
      //       used in client code.
      path = typeof path !== 'string' ? Pointer_stringify(path) : path;
      try {
        var stat = dontResolveLastLink ? FS.lstat(path) : FS.stat(path);
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=Math.floor(stat.atime.getTime() / 1000);
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=Math.floor(stat.mtime.getTime() / 1000);
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=Math.floor(stat.ctime.getTime() / 1000);
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fstat(fildes, buf) {
      // int fstat(int fildes, struct stat *buf);
      // http://pubs.opengroup.org/onlinepubs/7908799/xsh/fstat.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      return _stat(stream.path, buf);
    }

  
  function _fmod(x, y) {
      return x % y;
    }function _fmodl() {
  return _fmod.apply(null, arguments)
  }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_memset"] = _memset;

  
   
  Module["_testSetjmp"] = _testSetjmp;function _longjmp(env, value) {
      asm['setThrew'](env, value || 1);
      throw 'longjmp';
    }


  var _BDtoILow=true;

  function _ferror(stream) {
      // int ferror(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ferror.html
      stream = FS.getStreamFromPtr(stream);
      return Number(stream && stream.error);
    }

  var _BDtoIHigh=true;

  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _emscripten_setjmp=true;

  var _emscripten_postinvoke=true;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  var _emscripten_preinvoke=true;

  var _BItoD=true;

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }function _copysignl() {
  return _copysign.apply(null, arguments)
  }

___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

  var Math_min = Math.min;
function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

  function asmPrintInt(x, y) {
    Module.print('int ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  function asmPrintFloat(x, y) {
    Module.print('float ' + x + ',' + y);// + ' ' + new Error().stack);
  }
  // EMSCRIPTEN_START_ASM
  var asm = (function(global, env, buffer) {
    'almost asm';
    var HEAP8 = new global.Int8Array(buffer);
    var HEAP16 = new global.Int16Array(buffer);
    var HEAP32 = new global.Int32Array(buffer);
    var HEAPU8 = new global.Uint8Array(buffer);
    var HEAPU16 = new global.Uint16Array(buffer);
    var HEAPU32 = new global.Uint32Array(buffer);
    var HEAPF32 = new global.Float32Array(buffer);
    var HEAPF64 = new global.Float64Array(buffer);
  
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var _stderr=env._stderr|0;

    var __THREW__ = 0;
    var threwValue = 0;
    var setjmpId = 0;
    var undef = 0;
    var nan = +env.NaN, inf = +env.Infinity;
    var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  
    var tempRet0 = 0;
    var tempRet1 = 0;
    var tempRet2 = 0;
    var tempRet3 = 0;
    var tempRet4 = 0;
    var tempRet5 = 0;
    var tempRet6 = 0;
    var tempRet7 = 0;
    var tempRet8 = 0;
    var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var asmPrintInt=env.asmPrintInt;
  var asmPrintFloat=env.asmPrintFloat;
  var Math_min=env.min;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _send=env._send;
  var _fread=env._fread;
  var _fmod=env._fmod;
  var _fmodl=env._fmodl;
  var _fstat=env._fstat;
  var ___buildEnvironment=env.___buildEnvironment;
  var _longjmp=env._longjmp;
  var _fflush=env._fflush;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _open=env._open;
  var _sbrk=env._sbrk;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _fileno=env._fileno;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _ferror=env._ferror;
  var _putchar=env._putchar;
  var _pread=env._pread;
  var _getenv=env._getenv;
  var _fclose=env._fclose;
  var __reallyNegative=env.__reallyNegative;
  var _write=env._write;
  var _fsync=env._fsync;
  var ___errno_location=env.___errno_location;
  var _stat=env._stat;
  var _recv=env._recv;
  var _copysign=env._copysign;
  var _fputc=env._fputc;
  var _mkport=env._mkport;
  var __exit=env.__exit;
  var _read=env._read;
  var _copysignl=env._copysignl;
  var _abort=env._abort;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var __formatString=env.__formatString;
  var _fopen=env._fopen;
  var _exit=env._exit;
  var _close=env._close;
  var tempFloat = 0.0;

  // EMSCRIPTEN_START_FUNCS
  function stackAlloc(size) {
    size = size|0;
    var ret = 0;
    ret = STACKTOP;
    STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 7)&-8;
    return ret|0;
  }
  function stackSave() {
    return STACKTOP|0;
  }
  function stackRestore(top) {
    top = top|0;
    STACKTOP = top;
  }
  function setThrew(threw, value) {
    threw = threw|0;
    value = value|0;
    if ((__THREW__|0) == 0) {
      __THREW__ = threw;
      threwValue = value;
    }
  }
  function copyTempFloat(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  }
  function copyTempDouble(ptr) {
    ptr = ptr|0;
    HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
    HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
    HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
    HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
    HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
    HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
    HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
    HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
  }
  function setTempRet0(value) {
    value = value|0;
    tempRet0 = value;
  }
  function getTempRet0() {
    return tempRet0|0;
  }
  
function _epeg_file_open($file) {
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $im = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $file;
 $2 = (_calloc(1,1424)|0);
 $im = $2;
 $3 = $im;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $5 = $1;
 $6 = (___strdup($5)|0);
 $7 = $im;
 $8 = (($7) + 384|0);
 HEAP32[$8>>2] = $6;
 $9 = $im;
 $10 = (($9) + 384|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $13 = $im;
  _free($13);
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $14 = $im;
 $15 = (($14) + 384|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (_fopen(($16|0),(8|0))|0);
 $18 = $im;
 $19 = (($18) + 384|0);
 $20 = (($19) + 24|0);
 HEAP32[$20>>2] = $17;
 $21 = $im;
 $22 = (($21) + 384|0);
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $27 = $im;
  $28 = (($27) + 384|0);
  $29 = (($28) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (_fileno(($30|0))|0);
  $32 = $im;
  $33 = (($32) + 288|0);
  (_fstat(($31|0),($33|0))|0);
  $34 = $im;
  $35 = (($34) + 936|0);
  $36 = (($35) + 480|0);
  HEAP32[$36>>2] = 75;
  $37 = $im;
  $38 = (__epeg_open_header($37)|0);
  $0 = $38;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 } else {
  $26 = $im;
  _epeg_close($26);
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 return 0|0;
}
function _epeg_close($im) {
 $im = $im|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $im;
 $1 = $0;
 $2 = ($1|0)!=(0|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = $0;
 $4 = (($3) + 364|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = $0;
  $8 = (($7) + 364|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
 }
 $10 = $0;
 $11 = (($10) + 368|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = $0;
  $15 = (($14) + 368|0);
  $16 = HEAP32[$15>>2]|0;
  _free($16);
 }
 $17 = $0;
 $18 = (($17) + 384|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $21 = $0;
  $22 = (($21) + 384|0);
  $23 = HEAP32[$22>>2]|0;
  _free($23);
 }
 $24 = $0;
 $25 = (($24) + 384|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $28 = $0;
  $29 = (($28) + 384|0);
  $30 = (($29) + 32|0);
  $31 = (($30) + 24|0);
  $32 = HEAP32[$31>>2]|0;
  _free($32);
 }
 $33 = $0;
 $34 = (($33) + 384|0);
 $35 = (($34) + 24|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  label = 13;
 } else {
  $38 = $0;
  $39 = (($38) + 384|0);
  $40 = (($39) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0|0);
  if ($42) {
   label = 13;
  }
 }
 if ((label|0) == 13) {
  $43 = $0;
  $44 = (($43) + 384|0);
  $45 = (($44) + 32|0);
  _jpeg_destroy_decompress($45);
 }
 $46 = $0;
 $47 = (($46) + 384|0);
 $48 = (($47) + 24|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = $0;
  $52 = (($51) + 384|0);
  $53 = (($52) + 24|0);
  $54 = HEAP32[$53>>2]|0;
  (_fclose(($54|0))|0);
 }
 $55 = $0;
 $56 = (($55) + 384|0);
 $57 = (($56) + 20|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)!=(0|0);
 if ($59) {
  $60 = $0;
  $61 = (($60) + 384|0);
  $62 = (($61) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  _free($63);
 }
 $64 = $0;
 $65 = (($64) + 384|0);
 $66 = (($65) + 520|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = ($67|0)!=(0|0);
 if ($68) {
  $69 = $0;
  $70 = (($69) + 384|0);
  $71 = (($70) + 520|0);
  $72 = HEAP32[$71>>2]|0;
  _free($72);
 }
 $73 = $0;
 $74 = (($73) + 384|0);
 $75 = (($74) + 520|0);
 $76 = (($75) + 24|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)!=(0|0);
 if ($78) {
  $79 = $0;
  $80 = (($79) + 384|0);
  $81 = (($80) + 520|0);
  $82 = (($81) + 24|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = $0;
 $85 = (($84) + 936|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)!=(0|0);
 if ($87) {
  $88 = $0;
  $89 = (($88) + 936|0);
  $90 = HEAP32[$89>>2]|0;
  _free($90);
 }
 $91 = $0;
 $92 = (($91) + 936|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)!=(0|0);
 if (!($94)) {
  $95 = $0;
  $96 = (($95) + 936|0);
  $97 = (($96) + 40|0);
  $98 = (($97) + 24|0);
  $99 = HEAP32[$98>>2]|0;
  _free($99);
 }
 $100 = $0;
 $101 = (($100) + 936|0);
 $102 = (($101) + 32|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)!=(0|0);
 if ($104) {
  label = 28;
 } else {
  $105 = $0;
  $106 = (($105) + 384|0);
  $107 = (($106) + 4|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ($108|0)!=(0|0);
  if ($109) {
   label = 28;
  }
 }
 if ((label|0) == 28) {
  $110 = $0;
  $111 = (($110) + 936|0);
  $112 = (($111) + 40|0);
  _jpeg_destroy_compress($112);
 }
 $113 = $0;
 $114 = (($113) + 936|0);
 $115 = (($114) + 32|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)!=(0|0);
 if ($117) {
  $118 = $0;
  $119 = (($118) + 936|0);
  $120 = (($119) + 32|0);
  $121 = HEAP32[$120>>2]|0;
  (_fclose(($121|0))|0);
 }
 $122 = $0;
 $123 = (($122) + 936|0);
 $124 = (($123) + 28|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)!=(0|0);
 if ($126) {
  $127 = $0;
  $128 = (($127) + 936|0);
  $129 = (($128) + 28|0);
  $130 = HEAP32[$129>>2]|0;
  _free($130);
 }
 $131 = $0;
 _free($131);
 STACKTOP = sp;return;
}
function __epeg_open_header($im) {
 $im = $im|0;
 var $$0 = 0, $$reg2mem101$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $m$0 = 0;
 var $vararg_buffer = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 _setjmpTable = STACKTOP; STACKTOP=(STACKTOP+168)|0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 $0 = (invoke_ii(2,($im|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 if ((($1|0) != 0) & ((threwValue|0) != 0)) { $2 = _testSetjmp(HEAP32[$1>>2]|0, _setjmpTable)|0; if (($2|0) == 0) { _longjmp($1|0, threwValue|0); } tempRet0 = threwValue; } else { $2 = -1; };
 $3 = tempRet0;
 if ((($2|0) == 1)) {
  $$reg2mem101$0 = $3;
 } else {
  $4 = (($im) + 384|0);
  $5 = (($4) + 32|0);
  HEAP32[$5>>2] = $0;
  HEAP32[$im>>2] = 3;
  $6 = (($im) + 132|0);
  _saveSetjmp($6,1,_setjmpTable|0)|0;
  __THREW__ = 0;
  $7 = __THREW__; __THREW__ = 0;
  if ((($7|0) != 0) & ((threwValue|0) != 0)) { $8 = _testSetjmp(HEAP32[$7>>2]|0, _setjmpTable)|0; if (($8|0) == 0) { _longjmp($7|0, threwValue|0); } tempRet0 = threwValue; } else { $8 = -1; };
  $9 = tempRet0;
  if ((($8|0) == 1)) {
   $$reg2mem101$0 = $9;
  } else {
   $$reg2mem101$0 = 0;
  }
 }
 L4: while(1) {
  $10 = ($$reg2mem101$0|0)!=(0);
  L6: do {
   if ($10) {
   } else {
    $14 = (($im) + 384|0);
    $15 = (($14) + 32|0);
    __THREW__ = 0;
    invoke_viii(5,($15|0),90,488);
    $16 = __THREW__; __THREW__ = 0;
    if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = threwValue; } else { $17 = -1; };
    $18 = tempRet0;
    if ((($17|0) == 1)) {
     $$reg2mem101$0 = $18;
     continue L4;
    }
    $19 = (($im) + 384|0);
    $20 = (($19) + 32|0);
    __THREW__ = 0;
    invoke_viii(6,($20|0),231,1024);
    $21 = __THREW__; __THREW__ = 0;
    if ((($21|0) != 0) & ((threwValue|0) != 0)) { $22 = _testSetjmp(HEAP32[$21>>2]|0, _setjmpTable)|0; if (($22|0) == 0) { _longjmp($21|0, threwValue|0); } tempRet0 = threwValue; } else { $22 = -1; };
    $23 = tempRet0;
    if ((($22|0) == 1)) {
     $$reg2mem101$0 = $23;
     continue L4;
    }
    $24 = (($im) + 384|0);
    $25 = (($24) + 32|0);
    __THREW__ = 0;
    invoke_viii(6,($25|0),254,65535);
    $26 = __THREW__; __THREW__ = 0;
    if ((($26|0) != 0) & ((threwValue|0) != 0)) { $27 = _testSetjmp(HEAP32[$26>>2]|0, _setjmpTable)|0; if (($27|0) == 0) { _longjmp($26|0, threwValue|0); } tempRet0 = threwValue; } else { $27 = -1; };
    $28 = tempRet0;
    if ((($27|0) == 1)) {
     $$reg2mem101$0 = $28;
     continue L4;
    }
    $29 = (($im) + 384|0);
    $30 = (($29) + 24|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)!=(0|0);
    do {
     if ($32) {
      $33 = (($im) + 384|0);
      $34 = (($33) + 32|0);
      $35 = (($im) + 384|0);
      $36 = (($35) + 24|0);
      $37 = HEAP32[$36>>2]|0;
      __THREW__ = 0;
      invoke_vii(7,($34|0),($37|0));
      $38 = __THREW__; __THREW__ = 0;
      if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = threwValue; } else { $39 = -1; };
      $40 = tempRet0;
      if ((($39|0) == 1)) {
       $$reg2mem101$0 = $40;
       continue L4;
      }
     } else {
      __THREW__ = 0;
      $41 = (invoke_iii(8,1,28)|0);
      $42 = __THREW__; __THREW__ = 0;
      if ((($42|0) != 0) & ((threwValue|0) != 0)) { $43 = _testSetjmp(HEAP32[$42>>2]|0, _setjmpTable)|0; if (($43|0) == 0) { _longjmp($42|0, threwValue|0); } tempRet0 = threwValue; } else { $43 = -1; };
      $44 = tempRet0;
      if ((($43|0) == 1)) {
       $$reg2mem101$0 = $44;
       continue L4;
      }
      $45 = ($41|0)!=(0|0);
      if ($45) {
       $46 = (($41) + 8|0);
       HEAP32[$46>>2] = 9;
       $47 = (($41) + 12|0);
       HEAP32[$47>>2] = 10;
       $48 = (($41) + 16|0);
       HEAP32[$48>>2] = 11;
       $49 = (($41) + 20|0);
       HEAP32[$49>>2] = 12;
       $50 = (($41) + 24|0);
       HEAP32[$50>>2] = 13;
       $51 = (($im) + 384|0);
       $52 = (($51) + 4|0);
       $53 = (($52) + 4|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (($41) + 4|0);
       HEAP32[$55>>2] = $54;
       $56 = (($im) + 384|0);
       $57 = (($56) + 4|0);
       $58 = HEAP32[$57>>2]|0;
       HEAP32[$41>>2] = $58;
       $59 = (($im) + 384|0);
       $60 = (($59) + 32|0);
       $61 = (($60) + 24|0);
       HEAP32[$61>>2] = $41;
       break;
      } else {
       break L6;
      }
     }
    } while(0);
    $62 = (($im) + 384|0);
    $63 = (($62) + 32|0);
    __THREW__ = 0;
    (invoke_iii(14,($63|0),1)|0);
    $64 = __THREW__; __THREW__ = 0;
    if ((($64|0) != 0) & ((threwValue|0) != 0)) { $65 = _testSetjmp(HEAP32[$64>>2]|0, _setjmpTable)|0; if (($65|0) == 0) { _longjmp($64|0, threwValue|0); } tempRet0 = threwValue; } else { $65 = -1; };
    $66 = tempRet0;
    if ((($65|0) == 1)) {
     $$reg2mem101$0 = $66;
     continue L4;
    }
    $67 = (($im) + 384|0);
    $68 = (($67) + 32|0);
    $69 = (($68) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($im) + 384|0);
    $72 = (($71) + 12|0);
    HEAP32[$72>>2] = $70;
    $73 = (($im) + 384|0);
    $74 = (($73) + 32|0);
    $75 = (($74) + 32|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($im) + 384|0);
    $78 = (($77) + 16|0);
    HEAP32[$78>>2] = $76;
    $79 = (($im) + 384|0);
    $80 = (($79) + 12|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)<(1);
    if ($82) {
     break;
    }
    $83 = (($im) + 384|0);
    $84 = (($83) + 16|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)<(1);
    if ($86) {
     break;
    }
    $87 = (($im) + 384|0);
    $88 = (($87) + 12|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = (($im) + 936|0);
    $91 = (($90) + 20|0);
    HEAP32[$91>>2] = $89;
    $92 = (($im) + 384|0);
    $93 = (($92) + 16|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = (($im) + 936|0);
    $96 = (($95) + 24|0);
    HEAP32[$96>>2] = $94;
    $97 = (($im) + 384|0);
    $98 = (($97) + 32|0);
    $99 = (($98) + 44|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (($im) + 384|0);
    $102 = (($101) + 28|0);
    HEAP32[$102>>2] = $100;
    $103 = ($100|0)==(1);
    $104 = $103 ? 0 : 2;
    $105 = (($im) + 380|0);
    HEAP32[$105>>2] = $104;
    $106 = (($im) + 384|0);
    $107 = (($106) + 28|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==(4);
    if ($109) {
     $110 = (($im) + 380|0);
     HEAP32[$110>>2] = 7;
    }
    $111 = (($im) + 384|0);
    $112 = (($111) + 32|0);
    $113 = (($112) + 312|0);
    $114 = HEAP32[$113>>2]|0;
    $m$0 = $114;
    while(1) {
     $115 = ($m$0|0)!=(0|0);
     if (!($115)) {
      label = 75;
      break L4;
     }
     $116 = (($m$0) + 4|0);
     $117 = HEAP8[$116>>0]|0;
     $118 = $117&255;
     $119 = ($118|0)==(254);
     if ($119) {
      $120 = (($im) + 384|0);
      $121 = (($120) + 20|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)!=(0|0);
      if ($123) {
       $124 = (($im) + 384|0);
       $125 = (($124) + 20|0);
       $126 = HEAP32[$125>>2]|0;
       __THREW__ = 0;
       invoke_vi(15,($126|0));
       $127 = __THREW__; __THREW__ = 0;
       if ((($127|0) != 0) & ((threwValue|0) != 0)) { $128 = _testSetjmp(HEAP32[$127>>2]|0, _setjmpTable)|0; if (($128|0) == 0) { _longjmp($127|0, threwValue|0); } tempRet0 = threwValue; } else { $128 = -1; };
       $129 = tempRet0;
       if ((($128|0) == 1)) {
        $$reg2mem101$0 = $129;
        continue L4;
       }
      }
      $130 = (($m$0) + 12|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = (($131) + 1)|0;
      __THREW__ = 0;
      $133 = (invoke_ii(16,($132|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      if ((($134|0) != 0) & ((threwValue|0) != 0)) { $135 = _testSetjmp(HEAP32[$134>>2]|0, _setjmpTable)|0; if (($135|0) == 0) { _longjmp($134|0, threwValue|0); } tempRet0 = threwValue; } else { $135 = -1; };
      $136 = tempRet0;
      if ((($135|0) == 1)) {
       $$reg2mem101$0 = $136;
       continue L4;
      }
      $137 = (($im) + 384|0);
      $138 = (($137) + 20|0);
      HEAP32[$138>>2] = $133;
      $139 = (($im) + 384|0);
      $140 = (($139) + 20|0);
      $141 = HEAP32[$140>>2]|0;
      $142 = ($141|0)!=(0|0);
      if ($142) {
       $143 = (($im) + 384|0);
       $144 = (($143) + 20|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = (($m$0) + 16|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = (($m$0) + 12|0);
       $149 = HEAP32[$148>>2]|0;
       _memcpy(($145|0),($147|0),($149|0))|0;
       $150 = (($m$0) + 12|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (($im) + 384|0);
       $153 = (($152) + 20|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = (($154) + ($151)|0);
       HEAP8[$155>>0] = 0;
      }
     } else {
      $156 = (($m$0) + 4|0);
      $157 = HEAP8[$156>>0]|0;
      $158 = $157&255;
      $159 = ($158|0)==(231);
      if ($159) {
       $160 = (($m$0) + 12|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)>(7);
       do {
        if ($162) {
         $163 = (($m$0) + 16|0);
         $164 = HEAP32[$163>>2]|0;
         __THREW__ = 0;
         $165 = (invoke_iiii(17,($164|0),(152|0),7)|0);
         $166 = __THREW__; __THREW__ = 0;
         if ((($166|0) != 0) & ((threwValue|0) != 0)) { $167 = _testSetjmp(HEAP32[$166>>2]|0, _setjmpTable)|0; if (($167|0) == 0) { _longjmp($166|0, threwValue|0); } tempRet0 = threwValue; } else { $167 = -1; };
         $168 = tempRet0;
         if ((($167|0) == 1)) {
          $$reg2mem101$0 = $168;
          continue L4;
         }
         $169 = ($165|0)!=(0);
         if ($169) {
          break;
         }
         $170 = (($m$0) + 12|0);
         $171 = HEAP32[$170>>2]|0;
         $172 = (($171) + 1)|0;
         __THREW__ = 0;
         $173 = (invoke_ii(16,($172|0))|0);
         $174 = __THREW__; __THREW__ = 0;
         if ((($174|0) != 0) & ((threwValue|0) != 0)) { $175 = _testSetjmp(HEAP32[$174>>2]|0, _setjmpTable)|0; if (($175|0) == 0) { _longjmp($174|0, threwValue|0); } tempRet0 = threwValue; } else { $175 = -1; };
         $176 = tempRet0;
         if ((($175|0) == 1)) {
          $$reg2mem101$0 = $176;
          continue L4;
         }
         $177 = ($173|0)!=(0|0);
         if ($177) {
          $178 = (($m$0) + 16|0);
          $179 = HEAP32[$178>>2]|0;
          $180 = (($m$0) + 12|0);
          $181 = HEAP32[$180>>2]|0;
          _memcpy(($173|0),($179|0),($181|0))|0;
          $182 = (($m$0) + 12|0);
          $183 = HEAP32[$182>>2]|0;
          $184 = (($173) + ($183)|0);
          HEAP8[$184>>0] = 0;
          __THREW__ = 0;
          $185 = (invoke_iii(18,($173|0),10)|0);
          $186 = __THREW__; __THREW__ = 0;
          if ((($186|0) != 0) & ((threwValue|0) != 0)) { $187 = _testSetjmp(HEAP32[$186>>2]|0, _setjmpTable)|0; if (($187|0) == 0) { _longjmp($186|0, threwValue|0); } tempRet0 = threwValue; } else { $187 = -1; };
          $188 = tempRet0;
          if ((($187|0) == 1)) {
           $$reg2mem101$0 = $188;
           continue L4;
          }
          $189 = ($185|0)!=(0|0);
          if ($189) {
           HEAP8[$185>>0] = 0;
           __THREW__ = 0;
           $190 = (invoke_iii(19,($173|0),(160|0))|0);
           $191 = __THREW__; __THREW__ = 0;
           if ((($191|0) != 0) & ((threwValue|0) != 0)) { $192 = _testSetjmp(HEAP32[$191>>2]|0, _setjmpTable)|0; if (($192|0) == 0) { _longjmp($191|0, threwValue|0); } tempRet0 = threwValue; } else { $192 = -1; };
           $193 = tempRet0;
           if ((($192|0) == 1)) {
            $$reg2mem101$0 = $193;
            continue L4;
           }
           $194 = ($190|0)!=(0);
           if ($194) {
            __THREW__ = 0;
            $202 = (invoke_iii(19,($173|0),(176|0))|0);
            $203 = __THREW__; __THREW__ = 0;
            if ((($203|0) != 0) & ((threwValue|0) != 0)) { $204 = _testSetjmp(HEAP32[$203>>2]|0, _setjmpTable)|0; if (($204|0) == 0) { _longjmp($203|0, threwValue|0); } tempRet0 = threwValue; } else { $204 = -1; };
            $205 = tempRet0;
            if ((($204|0) == 1)) {
             $$reg2mem101$0 = $205;
             continue L4;
            }
            $206 = ($202|0)!=(0);
            if ($206) {
             __THREW__ = 0;
             $214 = (invoke_iii(19,($173|0),(200|0))|0);
             $215 = __THREW__; __THREW__ = 0;
             if ((($215|0) != 0) & ((threwValue|0) != 0)) { $216 = _testSetjmp(HEAP32[$215>>2]|0, _setjmpTable)|0; if (($216|0) == 0) { _longjmp($215|0, threwValue|0); } tempRet0 = threwValue; } else { $216 = -1; };
             $217 = tempRet0;
             if ((($216|0) == 1)) {
              $$reg2mem101$0 = $217;
              continue L4;
             }
             $218 = ($214|0)!=(0);
             if ($218) {
              __THREW__ = 0;
              $227 = (invoke_iii(19,($173|0),(224|0))|0);
              $228 = __THREW__; __THREW__ = 0;
              if ((($228|0) != 0) & ((threwValue|0) != 0)) { $229 = _testSetjmp(HEAP32[$228>>2]|0, _setjmpTable)|0; if (($229|0) == 0) { _longjmp($228|0, threwValue|0); } tempRet0 = threwValue; } else { $229 = -1; };
              $230 = tempRet0;
              if ((($229|0) == 1)) {
               $$reg2mem101$0 = $230;
               continue L4;
              }
              $231 = ($227|0)!=(0);
              if ($231) {
               __THREW__ = 0;
               $240 = (invoke_iii(19,($173|0),(248|0))|0);
               $241 = __THREW__; __THREW__ = 0;
               if ((($241|0) != 0) & ((threwValue|0) != 0)) { $242 = _testSetjmp(HEAP32[$241>>2]|0, _setjmpTable)|0; if (($242|0) == 0) { _longjmp($241|0, threwValue|0); } tempRet0 = threwValue; } else { $242 = -1; };
               $243 = tempRet0;
               if ((($242|0) == 1)) {
                $$reg2mem101$0 = $243;
                continue L4;
               }
               $244 = ($240|0)!=(0);
               if (!($244)) {
                $245 = (($185) + 1|0);
                __THREW__ = 0;
                $246 = (invoke_ii(20,($245|0))|0);
                $247 = __THREW__; __THREW__ = 0;
                if ((($247|0) != 0) & ((threwValue|0) != 0)) { $248 = _testSetjmp(HEAP32[$247>>2]|0, _setjmpTable)|0; if (($248|0) == 0) { _longjmp($247|0, threwValue|0); } tempRet0 = threwValue; } else { $248 = -1; };
                $249 = tempRet0;
                if ((($248|0) == 1)) {
                 $$reg2mem101$0 = $249;
                 continue L4;
                }
                $250 = (($im) + 384|0);
                $251 = (($250) + 520|0);
                $252 = (($251) + 24|0);
                HEAP32[$252>>2] = $246;
               }
              } else {
               $232 = (($185) + 1|0);
               __THREW__ = 0;
               $233 = (invoke_ii(22,($232|0))|0);
               $234 = __THREW__; __THREW__ = 0;
               if ((($234|0) != 0) & ((threwValue|0) != 0)) { $235 = _testSetjmp(HEAP32[$234>>2]|0, _setjmpTable)|0; if (($235|0) == 0) { _longjmp($234|0, threwValue|0); } tempRet0 = threwValue; } else { $235 = -1; };
               $236 = tempRet0;
               if ((($235|0) == 1)) {
                $$reg2mem101$0 = $236;
                continue L4;
               }
               $237 = (($im) + 384|0);
               $238 = (($237) + 520|0);
               $239 = (($238) + 20|0);
               HEAP32[$239>>2] = $233;
              }
             } else {
              $219 = (($185) + 1|0);
              __THREW__ = 0;
              $220 = (invoke_ii(22,($219|0))|0);
              $221 = __THREW__; __THREW__ = 0;
              if ((($221|0) != 0) & ((threwValue|0) != 0)) { $222 = _testSetjmp(HEAP32[$221>>2]|0, _setjmpTable)|0; if (($222|0) == 0) { _longjmp($221|0, threwValue|0); } tempRet0 = threwValue; } else { $222 = -1; };
              $223 = tempRet0;
              if ((($222|0) == 1)) {
               $$reg2mem101$0 = $223;
               continue L4;
              }
              $224 = (($im) + 384|0);
              $225 = (($224) + 520|0);
              $226 = (($225) + 16|0);
              HEAP32[$226>>2] = $220;
             }
            } else {
             $207 = (($185) + 1|0);
             $208 = (($im) + 384|0);
             $209 = (($208) + 520|0);
             $210 = (($209) + 8|0);
             __THREW__ = 0;
             HEAP32[$vararg_buffer>>2] = $210;
             (invoke_iiii(21,($207|0),(192|0),($vararg_buffer|0))|0);
             $211 = __THREW__; __THREW__ = 0;
             if ((($211|0) != 0) & ((threwValue|0) != 0)) { $212 = _testSetjmp(HEAP32[$211>>2]|0, _setjmpTable)|0; if (($212|0) == 0) { _longjmp($211|0, threwValue|0); } tempRet0 = threwValue; } else { $212 = -1; };
             $213 = tempRet0;
             if ((($212|0) == 1)) {
              $$reg2mem101$0 = $213;
              continue L4;
             }
            }
           } else {
            $195 = (($185) + 1|0);
            __THREW__ = 0;
            $196 = (invoke_ii(20,($195|0))|0);
            $197 = __THREW__; __THREW__ = 0;
            if ((($197|0) != 0) & ((threwValue|0) != 0)) { $198 = _testSetjmp(HEAP32[$197>>2]|0, _setjmpTable)|0; if (($198|0) == 0) { _longjmp($197|0, threwValue|0); } tempRet0 = threwValue; } else { $198 = -1; };
            $199 = tempRet0;
            if ((($198|0) == 1)) {
             $$reg2mem101$0 = $199;
             continue L4;
            }
            $200 = (($im) + 384|0);
            $201 = (($200) + 520|0);
            HEAP32[$201>>2] = $196;
           }
          }
          __THREW__ = 0;
          invoke_vi(15,($173|0));
          $253 = __THREW__; __THREW__ = 0;
          if ((($253|0) != 0) & ((threwValue|0) != 0)) { $254 = _testSetjmp(HEAP32[$253>>2]|0, _setjmpTable)|0; if (($254|0) == 0) { _longjmp($253|0, threwValue|0); } tempRet0 = threwValue; } else { $254 = -1; };
          $255 = tempRet0;
          if ((($254|0) == 1)) {
           $$reg2mem101$0 = $255;
           continue L4;
          }
         }
        }
       } while(0);
      }
     }
     $256 = HEAP32[$m$0>>2]|0;
     $m$0 = $256;
    }
   }
  } while(0);
  __THREW__ = 0;
  invoke_vi(4,($im|0));
  $11 = __THREW__; __THREW__ = 0;
  if ((($11|0) != 0) & ((threwValue|0) != 0)) { $12 = _testSetjmp(HEAP32[$11>>2]|0, _setjmpTable)|0; if (($12|0) == 0) { _longjmp($11|0, threwValue|0); } tempRet0 = threwValue; } else { $12 = -1; };
  $13 = tempRet0;
  if ((($12|0) == 1)) {
   $$reg2mem101$0 = $13;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 75) {
  $$0 = $im;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _epeg_memory_open($data,$size) {
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $im = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $data;
 $2 = $size;
 $3 = (_calloc(1,1424)|0);
 $im = $3;
 $4 = $im;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $im;
  $7 = (($6) + 936|0);
  $8 = (($7) + 480|0);
  HEAP32[$8>>2] = 75;
  $9 = $1;
  $10 = $im;
  $11 = (($10) + 384|0);
  $12 = (($11) + 4|0);
  HEAP32[$12>>2] = $9;
  $13 = $2;
  $14 = $im;
  $15 = (($14) + 384|0);
  $16 = (($15) + 4|0);
  $17 = (($16) + 4|0);
  HEAP32[$17>>2] = $13;
  $18 = $im;
  $19 = (($18) + 384|0);
  $20 = (($19) + 24|0);
  HEAP32[$20>>2] = 0;
  $21 = $im;
  $22 = (($21) + 384|0);
  $23 = (($22) + 12|0);
  HEAP32[$23>>2] = 0;
  $24 = $im;
  $25 = (($24) + 384|0);
  $26 = (($25) + 16|0);
  HEAP32[$26>>2] = 0;
  $27 = $im;
  $28 = (__epeg_open_header($27)|0);
  $0 = $28;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 } else {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 return 0|0;
}
function _epeg_size_get($im,$w,$h) {
 $im = $im|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $im;
 $1 = $w;
 $2 = $h;
 $3 = $1;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 384|0);
  $7 = (($6) + 12|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $1;
  HEAP32[$9>>2] = $8;
 }
 $10 = $2;
 $11 = ($10|0)!=(0|0);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = $0;
 $13 = (($12) + 384|0);
 $14 = (($13) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 HEAP32[$16>>2] = $15;
 STACKTOP = sp;return;
}
function _epeg_colorspace_get($im,$space) {
 $im = $im|0;
 $space = $space|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $im;
 $1 = $space;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $0;
 $5 = (($4) + 380|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 HEAP32[$7>>2] = $6;
 STACKTOP = sp;return;
}
function _epeg_decode_size_set($im,$w,$h) {
 $im = $im|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $im;
 $1 = $w;
 $2 = $h;
 $3 = $0;
 $4 = (($3) + 364|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ($7|0)<(1);
 if ($8) {
  $1 = 1;
 } else {
  $9 = $1;
  $10 = $0;
  $11 = (($10) + 384|0);
  $12 = (($11) + 12|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($9|0)>($13|0);
  if ($14) {
   $15 = $0;
   $16 = (($15) + 384|0);
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $1 = $18;
  }
 }
 $19 = $2;
 $20 = ($19|0)<(1);
 if ($20) {
  $2 = 1;
 } else {
  $21 = $2;
  $22 = $0;
  $23 = (($22) + 384|0);
  $24 = (($23) + 16|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($21|0)>($25|0);
  if ($26) {
   $27 = $0;
   $28 = (($27) + 384|0);
   $29 = (($28) + 16|0);
   $30 = HEAP32[$29>>2]|0;
   $2 = $30;
  }
 }
 $31 = $1;
 $32 = $0;
 $33 = (($32) + 936|0);
 $34 = (($33) + 20|0);
 HEAP32[$34>>2] = $31;
 $35 = $2;
 $36 = $0;
 $37 = (($36) + 936|0);
 $38 = (($37) + 24|0);
 HEAP32[$38>>2] = $35;
 $39 = $0;
 $40 = (($39) + 936|0);
 $41 = (($40) + 12|0);
 HEAP32[$41>>2] = 0;
 $42 = $0;
 $43 = (($42) + 936|0);
 $44 = (($43) + 16|0);
 HEAP32[$44>>2] = 0;
 STACKTOP = sp;return;
}
function _epeg_decode_bounds_set($im,$x,$y,$w,$h) {
 $im = $im|0;
 $x = $x|0;
 $y = $y|0;
 $w = $w|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $im;
 $1 = $x;
 $2 = $y;
 $3 = $w;
 $4 = $h;
 $5 = $0;
 $6 = (($5) + 364|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $3;
 $10 = ($9|0)<(1);
 if ($10) {
  $3 = 1;
 } else {
  $11 = $3;
  $12 = $0;
  $13 = (($12) + 384|0);
  $14 = (($13) + 12|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($11|0)>($15|0);
  if ($16) {
   $17 = $0;
   $18 = (($17) + 384|0);
   $19 = (($18) + 12|0);
   $20 = HEAP32[$19>>2]|0;
   $3 = $20;
  }
 }
 $21 = $4;
 $22 = ($21|0)<(1);
 if ($22) {
  $4 = 1;
 } else {
  $23 = $4;
  $24 = $0;
  $25 = (($24) + 384|0);
  $26 = (($25) + 16|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($23|0)>($27|0);
  if ($28) {
   $29 = $0;
   $30 = (($29) + 384|0);
   $31 = (($30) + 16|0);
   $32 = HEAP32[$31>>2]|0;
   $4 = $32;
  }
 }
 $33 = $3;
 $34 = $0;
 $35 = (($34) + 936|0);
 $36 = (($35) + 20|0);
 HEAP32[$36>>2] = $33;
 $37 = $4;
 $38 = $0;
 $39 = (($38) + 936|0);
 $40 = (($39) + 24|0);
 HEAP32[$40>>2] = $37;
 $41 = $1;
 $42 = ($41|0)<(0);
 if ($42) {
  $1 = 0;
 }
 $43 = $2;
 $44 = ($43|0)<(0);
 if ($44) {
  $2 = 0;
 }
 $45 = $1;
 $46 = $0;
 $47 = (($46) + 936|0);
 $48 = (($47) + 12|0);
 HEAP32[$48>>2] = $45;
 $49 = $2;
 $50 = $0;
 $51 = (($50) + 936|0);
 $52 = (($51) + 16|0);
 HEAP32[$52>>2] = $49;
 STACKTOP = sp;return;
}
function __epeg_decode($im) {
 $im = $im|0;
 var $$0 = 0, $$reg2mem33$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $old_output_scanline$0 = 0, $old_output_scanline$0$phi = 0, $old_output_scanline$1 = 0, $scale$0 = 0, $scale$1 = 0, $scale$2 = 0, $y$0 = 0;
 var _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTable = STACKTOP; STACKTOP=(STACKTOP+168)|0;HEAP32[_setjmpTable>>2]=0;
 $0 = (($im) + 364|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(0|0);
 if ($2) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (($im) + 936|0);
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(1);
 if (!($6)) {
  $7 = (($im) + 936|0);
  $8 = (($7) + 24|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)<(1);
  if (!($10)) {
   $11 = (($im) + 384|0);
   $12 = (($11) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($im) + 936|0);
   $15 = (($14) + 20|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13|0) / ($16|0))&-1;
   $18 = (($im) + 384|0);
   $19 = (($18) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (($im) + 936|0);
   $22 = (($21) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($20|0) / ($23|0))&-1;
   $25 = ($24|0)<($17|0);
   if ($25) {
    $scale$0 = $24;
   } else {
    $scale$0 = $17;
   }
   $26 = ($scale$0|0)>(8);
   if ($26) {
    $scale$2 = 8;
   } else {
    $27 = ($scale$0|0)<(1);
    if ($27) {
     $scale$1 = 1;
    } else {
     $scale$1 = $scale$0;
    }
    $scale$2 = $scale$1;
   }
   $28 = (($im) + 384|0);
   $29 = (($28) + 32|0);
   $30 = (($29) + 48|0);
   HEAP32[$30>>2] = 1;
   $31 = (($im) + 384|0);
   $32 = (($31) + 32|0);
   $33 = (($32) + 52|0);
   HEAP32[$33>>2] = $scale$2;
   $34 = (($im) + 384|0);
   $35 = (($34) + 32|0);
   $36 = (($35) + 76|0);
   HEAP32[$36>>2] = 0;
   $37 = (($im) + 384|0);
   $38 = (($37) + 32|0);
   $39 = (($38) + 80|0);
   HEAP32[$39>>2] = 0;
   $40 = (($im) + 384|0);
   $41 = (($40) + 32|0);
   $42 = (($41) + 72|0);
   HEAP32[$42>>2] = 1;
   $43 = (($im) + 380|0);
   $44 = HEAP32[$43>>2]|0;
   switch ($44|0) {
   case 6: case 5: case 4: case 3: case 2:  {
    $54 = (($im) + 384|0);
    $55 = (($54) + 32|0);
    $56 = (($55) + 44|0);
    HEAP32[$56>>2] = 2;
    break;
   }
   case 1:  {
    $51 = (($im) + 384|0);
    $52 = (($51) + 32|0);
    $53 = (($52) + 44|0);
    HEAP32[$53>>2] = 3;
    break;
   }
   case 0:  {
    $45 = (($im) + 384|0);
    $46 = (($45) + 32|0);
    $47 = (($46) + 44|0);
    HEAP32[$47>>2] = 1;
    $48 = (($im) + 384|0);
    $49 = (($48) + 32|0);
    $50 = (($49) + 124|0);
    HEAP32[$50>>2] = 1;
    break;
   }
   case 7:  {
    $57 = (($im) + 384|0);
    $58 = (($57) + 32|0);
    $59 = (($58) + 44|0);
    HEAP32[$59>>2] = 4;
    $60 = (($im) + 384|0);
    $61 = (($60) + 32|0);
    $62 = (($61) + 124|0);
    HEAP32[$62>>2] = 4;
    break;
   }
   default: {
   }
   }
   __THREW__ = 0;
   $63 = (invoke_ii(2,($im|0))|0);
   $64 = __THREW__; __THREW__ = 0;
   if ((($64|0) != 0) & ((threwValue|0) != 0)) { $65 = _testSetjmp(HEAP32[$64>>2]|0, _setjmpTable)|0; if (($65|0) == 0) { _longjmp($64|0, threwValue|0); } tempRet0 = threwValue; } else { $65 = -1; };
   $66 = tempRet0;
   if ((($65|0) == 1)) {
    $$reg2mem33$0 = $66;$old_output_scanline$0 = 1;
   } else {
    $67 = (($im) + 936|0);
    $68 = (($67) + 40|0);
    HEAP32[$68>>2] = $63;
    HEAP32[$im>>2] = 3;
    $69 = (($im) + 132|0);
    _saveSetjmp($69,1,_setjmpTable|0)|0;
    __THREW__ = 0;
    $70 = __THREW__; __THREW__ = 0;
    if ((($70|0) != 0) & ((threwValue|0) != 0)) { $71 = _testSetjmp(HEAP32[$70>>2]|0, _setjmpTable)|0; if (($71|0) == 0) { _longjmp($70|0, threwValue|0); } tempRet0 = threwValue; } else { $71 = -1; };
    $72 = tempRet0;
    if ((($71|0) == 1)) {
     $$reg2mem33$0 = $72;$old_output_scanline$0 = 1;
    } else {
     $$reg2mem33$0 = 0;$old_output_scanline$0 = 1;
    }
   }
   L28: while(1) {
    $73 = ($$reg2mem33$0|0)!=(0);
    if ($73) {
     label = 23;
     break;
    }
    $74 = (($im) + 384|0);
    $75 = (($74) + 32|0);
    __THREW__ = 0;
    invoke_vi(23,($75|0));
    $76 = __THREW__; __THREW__ = 0;
    if ((($76|0) != 0) & ((threwValue|0) != 0)) { $77 = _testSetjmp(HEAP32[$76>>2]|0, _setjmpTable)|0; if (($77|0) == 0) { _longjmp($76|0, threwValue|0); } tempRet0 = threwValue; } else { $77 = -1; };
    $78 = tempRet0;
    if ((($77|0) == 1)) {
     $old_output_scanline$0$phi = $old_output_scanline$0;$$reg2mem33$0 = $78;$old_output_scanline$0 = $old_output_scanline$0$phi;
     continue;
    }
    $79 = (($im) + 384|0);
    $80 = (($79) + 32|0);
    $81 = (($80) + 112|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($im) + 384|0);
    $84 = (($83) + 32|0);
    $85 = (($84) + 116|0);
    $86 = HEAP32[$85>>2]|0;
    $87 = Math_imul($82, $86)|0;
    $88 = (($im) + 384|0);
    $89 = (($88) + 32|0);
    $90 = (($89) + 124|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = Math_imul($87, $91)|0;
    __THREW__ = 0;
    $93 = (invoke_ii(16,($92|0))|0);
    $94 = __THREW__; __THREW__ = 0;
    if ((($94|0) != 0) & ((threwValue|0) != 0)) { $95 = _testSetjmp(HEAP32[$94>>2]|0, _setjmpTable)|0; if (($95|0) == 0) { _longjmp($94|0, threwValue|0); } tempRet0 = threwValue; } else { $95 = -1; };
    $96 = tempRet0;
    if ((($95|0) == 1)) {
     $old_output_scanline$0$phi = $old_output_scanline$0;$$reg2mem33$0 = $96;$old_output_scanline$0 = $old_output_scanline$0$phi;
     continue;
    }
    $97 = (($im) + 364|0);
    HEAP32[$97>>2] = $93;
    $98 = (($im) + 364|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)!=(0|0);
    if (!($100)) {
     label = 27;
     break;
    }
    $101 = (($im) + 384|0);
    $102 = (($101) + 32|0);
    $103 = (($102) + 116|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104<<2;
    __THREW__ = 0;
    $106 = (invoke_ii(16,($105|0))|0);
    $107 = __THREW__; __THREW__ = 0;
    if ((($107|0) != 0) & ((threwValue|0) != 0)) { $108 = _testSetjmp(HEAP32[$107>>2]|0, _setjmpTable)|0; if (($108|0) == 0) { _longjmp($107|0, threwValue|0); } tempRet0 = threwValue; } else { $108 = -1; };
    $109 = tempRet0;
    if ((($108|0) == 1)) {
     $old_output_scanline$0$phi = $old_output_scanline$0;$$reg2mem33$0 = $109;$old_output_scanline$0 = $old_output_scanline$0$phi;
     continue;
    }
    $110 = (($im) + 368|0);
    HEAP32[$110>>2] = $106;
    $111 = (($im) + 368|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)!=(0|0);
    if (!($113)) {
     $114 = (($im) + 364|0);
     $115 = HEAP32[$114>>2]|0;
     __THREW__ = 0;
     invoke_vi(15,($115|0));
     $116 = __THREW__; __THREW__ = 0;
     if ((($116|0) != 0) & ((threwValue|0) != 0)) { $117 = _testSetjmp(HEAP32[$116>>2]|0, _setjmpTable)|0; if (($117|0) == 0) { _longjmp($116|0, threwValue|0); } tempRet0 = threwValue; } else { $117 = -1; };
     $118 = tempRet0;
     if ((($117|0) == 1)) {
      $old_output_scanline$0$phi = $old_output_scanline$0;$$reg2mem33$0 = $118;$old_output_scanline$0 = $old_output_scanline$0$phi;
      continue;
     } else {
      label = 31;
      break;
     }
    }
    $120 = (($im) + 384|0);
    $121 = (($120) + 32|0);
    __THREW__ = 0;
    (invoke_ii(24,($121|0))|0);
    $122 = __THREW__; __THREW__ = 0;
    if ((($122|0) != 0) & ((threwValue|0) != 0)) { $123 = _testSetjmp(HEAP32[$122>>2]|0, _setjmpTable)|0; if (($123|0) == 0) { _longjmp($122|0, threwValue|0); } tempRet0 = threwValue; } else { $123 = -1; };
    $124 = tempRet0;
    if ((($123|0) == 1)) {
     $old_output_scanline$0$phi = $old_output_scanline$0;$$reg2mem33$0 = $124;$old_output_scanline$0 = $old_output_scanline$0$phi;
     continue;
    }
    $y$0 = 0;
    while(1) {
     $125 = (($im) + 384|0);
     $126 = (($125) + 32|0);
     $127 = (($126) + 116|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($y$0>>>0)<($128>>>0);
     if (!($129)) {
      break;
     }
     $130 = (($im) + 364|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($im) + 384|0);
     $133 = (($132) + 32|0);
     $134 = (($133) + 124|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = Math_imul($y$0, $135)|0;
     $137 = (($im) + 384|0);
     $138 = (($137) + 32|0);
     $139 = (($138) + 112|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = Math_imul($136, $140)|0;
     $142 = (($131) + ($141)|0);
     $143 = (($im) + 368|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (($144) + ($y$0<<2)|0);
     HEAP32[$145>>2] = $142;
     $146 = (($y$0) + 1)|0;
     $y$0 = $146;
    }
    $old_output_scanline$1 = $old_output_scanline$0;
    while(1) {
     $147 = (($im) + 384|0);
     $148 = (($147) + 32|0);
     $149 = (($148) + 140|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = (($im) + 384|0);
     $152 = (($151) + 32|0);
     $153 = (($152) + 116|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($150>>>0)<($154>>>0);
     if (!($155)) {
      label = 44;
      break;
     }
     $156 = (($im) + 384|0);
     $157 = (($156) + 32|0);
     $158 = (($157) + 140|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($old_output_scanline$1|0)==($159|0);
     if ($160) {
      label = 40;
      break;
     }
     $166 = (($im) + 384|0);
     $167 = (($166) + 32|0);
     $168 = (($167) + 140|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = (($im) + 384|0);
     $171 = (($170) + 32|0);
     $172 = (($im) + 384|0);
     $173 = (($172) + 32|0);
     $174 = (($173) + 140|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = (($im) + 368|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = (($177) + ($175<<2)|0);
     $179 = (($im) + 384|0);
     $180 = (($179) + 32|0);
     $181 = (($180) + 128|0);
     $182 = HEAP32[$181>>2]|0;
     __THREW__ = 0;
     (invoke_iiii(26,($171|0),($178|0),($182|0))|0);
     $183 = __THREW__; __THREW__ = 0;
     if ((($183|0) != 0) & ((threwValue|0) != 0)) { $184 = _testSetjmp(HEAP32[$183>>2]|0, _setjmpTable)|0; if (($184|0) == 0) { _longjmp($183|0, threwValue|0); } tempRet0 = threwValue; } else { $184 = -1; };
     $185 = tempRet0;
     if ((($184|0) == 1)) {
      $$reg2mem33$0 = $185;$old_output_scanline$0 = $169;
      continue L28;
     }
     $old_output_scanline$1 = $169;
    }
    if ((label|0) == 40) {
     label = 0;
     $161 = (($im) + 384|0);
     $162 = (($161) + 32|0);
     __THREW__ = 0;
     invoke_vi(25,($162|0));
     $163 = __THREW__; __THREW__ = 0;
     if ((($163|0) != 0) & ((threwValue|0) != 0)) { $164 = _testSetjmp(HEAP32[$163>>2]|0, _setjmpTable)|0; if (($164|0) == 0) { _longjmp($163|0, threwValue|0); } tempRet0 = threwValue; } else { $164 = -1; };
     $165 = tempRet0;
     if ((($164|0) == 1)) {
      $$reg2mem33$0 = $165;$old_output_scanline$0 = $old_output_scanline$1;
      continue;
     } else {
      label = 41;
      break;
     }
    }
    else if ((label|0) == 44) {
     label = 0;
     $186 = (($im) + 384|0);
     $187 = (($186) + 32|0);
     __THREW__ = 0;
     (invoke_ii(27,($187|0))|0);
     $188 = __THREW__; __THREW__ = 0;
     if ((($188|0) != 0) & ((threwValue|0) != 0)) { $189 = _testSetjmp(HEAP32[$188>>2]|0, _setjmpTable)|0; if (($189|0) == 0) { _longjmp($188|0, threwValue|0); } tempRet0 = threwValue; } else { $189 = -1; };
     $190 = tempRet0;
     if ((($189|0) == 1)) {
      $$reg2mem33$0 = $190;$old_output_scanline$0 = $old_output_scanline$1;
      continue;
     } else {
      label = 45;
      break;
     }
    }
   }
   if ((label|0) == 23) {
    $$0 = 2;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 27) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 31) {
    $119 = (($im) + 364|0);
    HEAP32[$119>>2] = 0;
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 41) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 45) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __epeg_scale($im) {
 $im = $im|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dst = 0, $h = 0, $i = 0, $row = 0, $src = 0, $w = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $im;
 $2 = $1;
 $3 = (($2) + 384|0);
 $4 = (($3) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = (($6) + 936|0);
 $8 = (($7) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($5|0)==($9|0);
 if ($10) {
  $11 = $1;
  $12 = (($11) + 384|0);
  $13 = (($12) + 16|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = (($15) + 936|0);
  $17 = (($16) + 24|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($14|0)==($18|0);
  if ($19) {
   $0 = 0;
   $144 = $0;
   STACKTOP = sp;return ($144|0);
  }
 }
 $20 = $1;
 $21 = (($20) + 372|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = ($22 << 7)&255;
 $24 = ($23<<24>>24) >> 7;
 $25 = ($24<<24>>24)!=(0);
 if ($25) {
  $0 = 0;
  $144 = $0;
  STACKTOP = sp;return ($144|0);
 }
 $26 = $1;
 $27 = (($26) + 936|0);
 $28 = (($27) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)<(1);
 if (!($30)) {
  $31 = $1;
  $32 = (($31) + 936|0);
  $33 = (($32) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)<(1);
  if (!($35)) {
   $36 = $1;
   $37 = (($36) + 372|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38 & -2;
   $40 = $39 | 1;
   HEAP8[$37>>0] = $40;
   $41 = $1;
   $42 = (($41) + 936|0);
   $43 = (($42) + 20|0);
   $44 = HEAP32[$43>>2]|0;
   $w = $44;
   $45 = $1;
   $46 = (($45) + 936|0);
   $47 = (($46) + 24|0);
   $48 = HEAP32[$47>>2]|0;
   $h = $48;
   $y = 0;
   while(1) {
    $49 = $y;
    $50 = $h;
    $51 = ($49|0)<($50|0);
    if (!($51)) {
     break;
    }
    $52 = $1;
    $53 = (($52) + 364|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = $y;
    $56 = $1;
    $57 = (($56) + 384|0);
    $58 = (($57) + 32|0);
    $59 = (($58) + 116|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = Math_imul($55, $60)|0;
    $62 = $h;
    $63 = (($61>>>0) / ($62>>>0))&-1;
    $64 = $1;
    $65 = (($64) + 384|0);
    $66 = (($65) + 32|0);
    $67 = (($66) + 124|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = Math_imul($63, $68)|0;
    $70 = $1;
    $71 = (($70) + 384|0);
    $72 = (($71) + 32|0);
    $73 = (($72) + 112|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = Math_imul($69, $74)|0;
    $76 = (($54) + ($75)|0);
    $row = $76;
    $77 = $1;
    $78 = (($77) + 364|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $y;
    $81 = $1;
    $82 = (($81) + 384|0);
    $83 = (($82) + 32|0);
    $84 = (($83) + 124|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = Math_imul($80, $85)|0;
    $87 = $1;
    $88 = (($87) + 384|0);
    $89 = (($88) + 32|0);
    $90 = (($89) + 112|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = Math_imul($86, $91)|0;
    $93 = (($79) + ($92)|0);
    $dst = $93;
    $x = 0;
    while(1) {
     $94 = $x;
     $95 = $1;
     $96 = (($95) + 936|0);
     $97 = (($96) + 20|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($94|0)<($98|0);
     if (!($99)) {
      break;
     }
     $100 = $row;
     $101 = $x;
     $102 = $1;
     $103 = (($102) + 384|0);
     $104 = (($103) + 32|0);
     $105 = (($104) + 112|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = Math_imul($101, $106)|0;
     $108 = $w;
     $109 = (($107>>>0) / ($108>>>0))&-1;
     $110 = $1;
     $111 = (($110) + 384|0);
     $112 = (($111) + 32|0);
     $113 = (($112) + 124|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = Math_imul($109, $114)|0;
     $116 = (($100) + ($115)|0);
     $src = $116;
     $i = 0;
     while(1) {
      $117 = $i;
      $118 = $1;
      $119 = (($118) + 384|0);
      $120 = (($119) + 32|0);
      $121 = (($120) + 124|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($117|0)<($122|0);
      if (!($123)) {
       break;
      }
      $124 = $i;
      $125 = $src;
      $126 = (($125) + ($124)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $i;
      $129 = $dst;
      $130 = (($129) + ($128)|0);
      HEAP8[$130>>0] = $127;
      $131 = $i;
      $132 = (($131) + 1)|0;
      $i = $132;
     }
     $133 = $1;
     $134 = (($133) + 384|0);
     $135 = (($134) + 32|0);
     $136 = (($135) + 124|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $dst;
     $139 = (($138) + ($137)|0);
     $dst = $139;
     $140 = $x;
     $141 = (($140) + 1)|0;
     $x = $141;
    }
    $142 = $y;
    $143 = (($142) + 1)|0;
    $y = $143;
   }
   $0 = 0;
   $144 = $0;
   STACKTOP = sp;return ($144|0);
  }
 }
 $0 = 0;
 $144 = $0;
 STACKTOP = sp;return ($144|0);
}
function _epeg_quality_set($im,$quality) {
 $im = $im|0;
 $quality = $quality|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $im;
 $1 = $quality;
 $2 = $1;
 $3 = ($2|0)<(0);
 if ($3) {
  $1 = 0;
 } else {
  $4 = $1;
  $5 = ($4|0)>(100);
  if ($5) {
   $1 = 100;
  }
 }
 $6 = $1;
 $7 = $0;
 $8 = (($7) + 936|0);
 $9 = (($8) + 480|0);
 HEAP32[$9>>2] = $6;
 STACKTOP = sp;return;
}
function _epeg_file_output_set($im,$file) {
 $im = $im|0;
 $file = $file|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $im;
 $1 = $file;
 $2 = $0;
 $3 = (($2) + 936|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $0;
  $7 = (($6) + 936|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
 }
 $9 = $1;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $13 = $1;
  $14 = (___strdup($13)|0);
  $15 = $0;
  $16 = (($15) + 936|0);
  HEAP32[$16>>2] = $14;
  STACKTOP = sp;return;
 } else {
  $11 = $0;
  $12 = (($11) + 936|0);
  HEAP32[$12>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _epeg_memory_output_set($im,$data,$size) {
 $im = $im|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $im;
 $1 = $data;
 $2 = $size;
 $3 = $1;
 $4 = $0;
 $5 = (($4) + 936|0);
 $6 = (($5) + 4|0);
 HEAP32[$6>>2] = $3;
 $7 = $2;
 $8 = $0;
 $9 = (($8) + 936|0);
 $10 = (($9) + 4|0);
 $11 = (($10) + 4|0);
 HEAP32[$11>>2] = $7;
 $12 = $0;
 $13 = (($12) + 936|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function _epeg_encode($im) {
 $im = $im|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ret = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $im;
 $2 = $1;
 $3 = (__epeg_decode($2)|0);
 $ret = $3;
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $5 = $ret;
   $6 = ($5|0)==(2);
   $7 = $6 ? 4 : 3;
   $0 = $7;
  } else {
   $8 = $1;
   $9 = (__epeg_scale($8)|0);
   $10 = ($9|0)!=(0);
   if ($10) {
    $0 = 1;
    break;
   }
   $11 = $1;
   $12 = (__epeg_encode($11)|0);
   $13 = ($12|0)!=(0);
   if ($13) {
    $0 = 2;
    break;
   } else {
    $0 = 0;
    break;
   }
  }
 } while(0);
 $14 = $0;
 STACKTOP = sp;return ($14|0);
}
function __epeg_encode($im) {
 $im = $im|0;
 var $$0 = 0, $$reg2mem132$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0;
 var $367 = 0, $368 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $dst_mgr$0 = 0, $dst_mgr$0$phi = 0, $dst_mgr$1 = 0, $dst_mgr$2 = 0, $ok$0 = 0, $ok$0$phi = 0, $ok$1 = 0, $vararg_buffer = 0;
 var $vararg_buffer134 = 0, $vararg_buffer137 = 0, $vararg_buffer140 = 0, $vararg_buffer143 = 0, _setjmpTable = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8240|0;
 $vararg_buffer143 = sp + 32|0;
 $vararg_buffer140 = sp + 24|0;
 $vararg_buffer137 = sp + 16|0;
 $vararg_buffer134 = sp + 8|0;
 $vararg_buffer = sp;
 _setjmpTable = STACKTOP; STACKTOP=(STACKTOP+168)|0;HEAP32[_setjmpTable>>2]=0;
 $buf = sp + 40|0;
 $0 = (($im) + 936|0);
 $1 = (($0) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(1);
 if (!($3)) {
  $4 = (($im) + 936|0);
  $5 = (($4) + 24|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)<(1);
  if (!($7)) {
   $8 = (($im) + 936|0);
   $9 = (($8) + 32|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0|0);
   if ($11) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   $12 = (($im) + 936|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0|0);
   do {
    if ($14) {
     $15 = (($im) + 936|0);
     $16 = HEAP32[$15>>2]|0;
     __THREW__ = 0;
     $17 = (invoke_iii(28,($16|0),(16|0))|0);
     $18 = __THREW__; __THREW__ = 0;
     if ((($18|0) != 0) & ((threwValue|0) != 0)) { $19 = _testSetjmp(HEAP32[$18>>2]|0, _setjmpTable)|0; if (($19|0) == 0) { _longjmp($18|0, threwValue|0); } tempRet0 = threwValue; } else { $19 = -1; };
     $20 = tempRet0;
     if ((($19|0) == 1)) {
      $$reg2mem132$0 = $20;$dst_mgr$0 = 0;$ok$0 = 0;
     } else {
      $21 = (($im) + 936|0);
      $22 = (($21) + 32|0);
      HEAP32[$22>>2] = $17;
      $23 = (($im) + 936|0);
      $24 = (($23) + 32|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($25|0)!=(0|0);
      if ($26) {
       label = 12;
       break;
      }
      $27 = (($im) + 376|0);
      HEAP32[$27>>2] = 1;
      $$0 = 1;
      STACKTOP = sp;return ($$0|0);
     }
    } else {
     $28 = (($im) + 936|0);
     $29 = (($28) + 32|0);
     HEAP32[$29>>2] = 0;
     label = 12;
    }
   } while(0);
   if ((label|0) == 12) {
    __THREW__ = 0;
    $30 = (invoke_ii(2,($im|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    if ((($31|0) != 0) & ((threwValue|0) != 0)) { $32 = _testSetjmp(HEAP32[$31>>2]|0, _setjmpTable)|0; if (($32|0) == 0) { _longjmp($31|0, threwValue|0); } tempRet0 = threwValue; } else { $32 = -1; };
    $33 = tempRet0;
    if ((($32|0) == 1)) {
     $$reg2mem132$0 = $33;$dst_mgr$0 = 0;$ok$0 = 0;
    } else {
     $34 = (($im) + 936|0);
     $35 = (($34) + 40|0);
     HEAP32[$35>>2] = $30;
     HEAP32[$im>>2] = 3;
     $36 = (($im) + 132|0);
     _saveSetjmp($36,1,_setjmpTable|0)|0;
     __THREW__ = 0;
     $37 = __THREW__; __THREW__ = 0;
     if ((($37|0) != 0) & ((threwValue|0) != 0)) { $38 = _testSetjmp(HEAP32[$37>>2]|0, _setjmpTable)|0; if (($38|0) == 0) { _longjmp($37|0, threwValue|0); } tempRet0 = threwValue; } else { $38 = -1; };
     $39 = tempRet0;
     if ((($38|0) == 1)) {
      $$reg2mem132$0 = $39;$dst_mgr$0 = 0;$ok$0 = 0;
     } else {
      $$reg2mem132$0 = 0;$dst_mgr$0 = 0;$ok$0 = 0;
     }
    }
   }
   L20: while(1) {
    $40 = ($$reg2mem132$0|0)!=(0);
    L22: do {
     if ($40) {
      $41 = (($im) + 376|0);
      HEAP32[$41>>2] = 1;
      $dst_mgr$2 = $dst_mgr$0;$ok$1 = 1;
     } else {
      $42 = (($im) + 936|0);
      $43 = (($42) + 40|0);
      __THREW__ = 0;
      invoke_viii(29,($43|0),90,440);
      $44 = __THREW__; __THREW__ = 0;
      if ((($44|0) != 0) & ((threwValue|0) != 0)) { $45 = _testSetjmp(HEAP32[$44>>2]|0, _setjmpTable)|0; if (($45|0) == 0) { _longjmp($44|0, threwValue|0); } tempRet0 = threwValue; } else { $45 = -1; };
      $46 = tempRet0;
      if ((($45|0) == 1)) {
       $ok$0$phi = $ok$0;$dst_mgr$0$phi = $dst_mgr$0;$$reg2mem132$0 = $46;$ok$0 = $ok$0$phi;$dst_mgr$0 = $dst_mgr$0$phi;
       continue L20;
      }
      $47 = (($im) + 936|0);
      $48 = (($47) + 32|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49|0)!=(0|0);
      do {
       if ($50) {
        $51 = (($im) + 936|0);
        $52 = (($51) + 40|0);
        $53 = (($im) + 936|0);
        $54 = (($53) + 32|0);
        $55 = HEAP32[$54>>2]|0;
        __THREW__ = 0;
        invoke_vii(30,($52|0),($55|0));
        $56 = __THREW__; __THREW__ = 0;
        if ((($56|0) != 0) & ((threwValue|0) != 0)) { $57 = _testSetjmp(HEAP32[$56>>2]|0, _setjmpTable)|0; if (($57|0) == 0) { _longjmp($56|0, threwValue|0); } tempRet0 = threwValue; } else { $57 = -1; };
        $58 = tempRet0;
        if ((($57|0) == 1)) {
         $ok$0$phi = $ok$0;$dst_mgr$0$phi = $dst_mgr$0;$$reg2mem132$0 = $58;$ok$0 = $ok$0$phi;$dst_mgr$0 = $dst_mgr$0$phi;
         continue L20;
        }
        $dst_mgr$1 = $dst_mgr$0;
       } else {
        $59 = (($im) + 936|0);
        $60 = (($59) + 4|0);
        $61 = HEAP32[$60>>2]|0;
        HEAP32[$61>>2] = 0;
        $62 = (($im) + 936|0);
        $63 = (($62) + 4|0);
        $64 = (($63) + 4|0);
        $65 = HEAP32[$64>>2]|0;
        HEAP32[$65>>2] = 0;
        __THREW__ = 0;
        $66 = (invoke_iii(8,1,28)|0);
        $67 = __THREW__; __THREW__ = 0;
        if ((($67|0) != 0) & ((threwValue|0) != 0)) { $68 = _testSetjmp(HEAP32[$67>>2]|0, _setjmpTable)|0; if (($68|0) == 0) { _longjmp($67|0, threwValue|0); } tempRet0 = threwValue; } else { $68 = -1; };
        $69 = tempRet0;
        if ((($68|0) == 1)) {
         $ok$0$phi = $ok$0;$dst_mgr$0$phi = $dst_mgr$0;$$reg2mem132$0 = $69;$ok$0 = $ok$0$phi;$dst_mgr$0 = $dst_mgr$0$phi;
         continue L20;
        }
        $70 = ($66|0)!=(0|0);
        if (!($70)) {
         label = 23;
         break L20;
        }
        $71 = (($66) + 8|0);
        HEAP32[$71>>2] = 31;
        $72 = (($66) + 12|0);
        HEAP32[$72>>2] = 32;
        $73 = (($66) + 16|0);
        HEAP32[$73>>2] = 33;
        $74 = (($66) + 20|0);
        HEAP32[$74>>2] = $im;
        __THREW__ = 0;
        $75 = (invoke_ii(16,65536)|0);
        $76 = __THREW__; __THREW__ = 0;
        if ((($76|0) != 0) & ((threwValue|0) != 0)) { $77 = _testSetjmp(HEAP32[$76>>2]|0, _setjmpTable)|0; if (($77|0) == 0) { _longjmp($76|0, threwValue|0); } tempRet0 = threwValue; } else { $77 = -1; };
        $78 = tempRet0;
        if ((($77|0) == 1)) {
         $ok$0$phi = $ok$0;$$reg2mem132$0 = $78;$dst_mgr$0 = $66;$ok$0 = $ok$0$phi;
         continue L20;
        }
        $79 = (($66) + 24|0);
        HEAP32[$79>>2] = $75;
        $80 = (($66) + 24|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = ($81|0)!=(0|0);
        if ($82) {
         $84 = (($im) + 936|0);
         $85 = (($84) + 40|0);
         $86 = (($85) + 24|0);
         HEAP32[$86>>2] = $66;
         $dst_mgr$1 = $66;
         break;
        } else {
         $83 = (($im) + 376|0);
         HEAP32[$83>>2] = 1;
         $dst_mgr$2 = $66;$ok$1 = 1;
         break L22;
        }
       }
      } while(0);
      $87 = (($im) + 936|0);
      $88 = (($87) + 20|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (($im) + 936|0);
      $91 = (($90) + 40|0);
      $92 = (($91) + 28|0);
      HEAP32[$92>>2] = $89;
      $93 = (($im) + 936|0);
      $94 = (($93) + 24|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (($im) + 936|0);
      $97 = (($96) + 40|0);
      $98 = (($97) + 32|0);
      HEAP32[$98>>2] = $95;
      $99 = (($im) + 384|0);
      $100 = (($99) + 32|0);
      $101 = (($100) + 124|0);
      $102 = HEAP32[$101>>2]|0;
      $103 = (($im) + 936|0);
      $104 = (($103) + 40|0);
      $105 = (($104) + 36|0);
      HEAP32[$105>>2] = $102;
      $106 = (($im) + 384|0);
      $107 = (($106) + 32|0);
      $108 = (($107) + 44|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = (($im) + 936|0);
      $111 = (($110) + 40|0);
      $112 = (($111) + 40|0);
      HEAP32[$112>>2] = $109;
      $113 = (($im) + 384|0);
      $114 = (($113) + 32|0);
      $115 = (($114) + 72|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = (($im) + 936|0);
      $118 = (($117) + 40|0);
      $119 = (($118) + 232|0);
      HEAP32[$119>>2] = $116;
      $120 = (($im) + 936|0);
      $121 = (($120) + 40|0);
      __THREW__ = 0;
      invoke_vi(34,($121|0));
      $122 = __THREW__; __THREW__ = 0;
      if ((($122|0) != 0) & ((threwValue|0) != 0)) { $123 = _testSetjmp(HEAP32[$122>>2]|0, _setjmpTable)|0; if (($123|0) == 0) { _longjmp($122|0, threwValue|0); } tempRet0 = threwValue; } else { $123 = -1; };
      $124 = tempRet0;
      if ((($123|0) == 1)) {
       $ok$0$phi = $ok$0;$$reg2mem132$0 = $124;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
       continue L20;
      }
      $125 = (($im) + 936|0);
      $126 = (($125) + 40|0);
      $127 = (($im) + 936|0);
      $128 = (($127) + 480|0);
      $129 = HEAP32[$128>>2]|0;
      __THREW__ = 0;
      invoke_viii(35,($126|0),($129|0),1);
      $130 = __THREW__; __THREW__ = 0;
      if ((($130|0) != 0) & ((threwValue|0) != 0)) { $131 = _testSetjmp(HEAP32[$130>>2]|0, _setjmpTable)|0; if (($131|0) == 0) { _longjmp($130|0, threwValue|0); } tempRet0 = threwValue; } else { $131 = -1; };
      $132 = tempRet0;
      if ((($131|0) == 1)) {
       $ok$0$phi = $ok$0;$$reg2mem132$0 = $132;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
       continue L20;
      }
      $133 = (($im) + 936|0);
      $134 = (($133) + 480|0);
      $135 = HEAP32[$134>>2]|0;
      $136 = ($135|0)>=(90);
      if ($136) {
       $137 = (($im) + 936|0);
       $138 = (($137) + 40|0);
       $139 = (($138) + 84|0);
       $140 = HEAP32[$139>>2]|0;
       $141 = (($140) + 8|0);
       HEAP32[$141>>2] = 1;
       $142 = (($im) + 936|0);
       $143 = (($142) + 40|0);
       $144 = (($143) + 84|0);
       $145 = HEAP32[$144>>2]|0;
       $146 = (($145) + 12|0);
       HEAP32[$146>>2] = 1;
       $147 = (($im) + 936|0);
       $148 = (($147) + 40|0);
       $149 = (($148) + 84|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = (($150) + 88|0);
       $152 = (($151) + 8|0);
       HEAP32[$152>>2] = 1;
       $153 = (($im) + 936|0);
       $154 = (($153) + 40|0);
       $155 = (($154) + 84|0);
       $156 = HEAP32[$155>>2]|0;
       $157 = (($156) + 88|0);
       $158 = (($157) + 12|0);
       HEAP32[$158>>2] = 1;
       $159 = (($im) + 936|0);
       $160 = (($159) + 40|0);
       $161 = (($160) + 84|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = (($162) + 176|0);
       $164 = (($163) + 8|0);
       HEAP32[$164>>2] = 1;
       $165 = (($im) + 936|0);
       $166 = (($165) + 40|0);
       $167 = (($166) + 84|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = (($168) + 176|0);
       $170 = (($169) + 12|0);
       HEAP32[$170>>2] = 1;
      }
      $171 = (($im) + 936|0);
      $172 = (($171) + 40|0);
      __THREW__ = 0;
      invoke_vii(36,($172|0),1);
      $173 = __THREW__; __THREW__ = 0;
      if ((($173|0) != 0) & ((threwValue|0) != 0)) { $174 = _testSetjmp(HEAP32[$173>>2]|0, _setjmpTable)|0; if (($174|0) == 0) { _longjmp($173|0, threwValue|0); } tempRet0 = threwValue; } else { $174 = -1; };
      $175 = tempRet0;
      if ((($174|0) == 1)) {
       $ok$0$phi = $ok$0;$$reg2mem132$0 = $175;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
       continue L20;
      }
      $176 = (($im) + 936|0);
      $177 = (($176) + 28|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)!=(0|0);
      if ($179) {
       $180 = (($im) + 936|0);
       $181 = (($180) + 40|0);
       $182 = (($im) + 936|0);
       $183 = (($182) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (($im) + 936|0);
       $186 = (($185) + 28|0);
       $187 = HEAP32[$186>>2]|0;
       __THREW__ = 0;
       $188 = (invoke_ii(37,($187|0))|0);
       $189 = __THREW__; __THREW__ = 0;
       if ((($189|0) != 0) & ((threwValue|0) != 0)) { $190 = _testSetjmp(HEAP32[$189>>2]|0, _setjmpTable)|0; if (($190|0) == 0) { _longjmp($189|0, threwValue|0); } tempRet0 = threwValue; } else { $190 = -1; };
       $191 = tempRet0;
       if ((($190|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $191;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
       __THREW__ = 0;
       invoke_viiii(38,($181|0),254,($184|0),($188|0));
       $192 = __THREW__; __THREW__ = 0;
       if ((($192|0) != 0) & ((threwValue|0) != 0)) { $193 = _testSetjmp(HEAP32[$192>>2]|0, _setjmpTable)|0; if (($193|0) == 0) { _longjmp($192|0, threwValue|0); } tempRet0 = threwValue; } else { $193 = -1; };
       $194 = tempRet0;
       if ((($193|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $194;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
      }
      $195 = (($im) + 936|0);
      $196 = (($195) + 484|0);
      $197 = HEAP8[$196>>0]|0;
      $198 = ($197 << 7)&255;
      $199 = ($198<<24>>24) >> 7;
      $200 = ($199<<24>>24)!=(0);
      if ($200) {
       $201 = (($im) + 384|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)!=(0|0);
       if ($203) {
        $204 = (($im) + 384|0);
        $205 = HEAP32[$204>>2]|0;
        __THREW__ = 0;
        HEAP32[$vararg_buffer>>2] = $205;
        (invoke_iiiii(39,($buf|0),8192,(24|0),($vararg_buffer|0))|0);
        $206 = __THREW__; __THREW__ = 0;
        if ((($206|0) != 0) & ((threwValue|0) != 0)) { $207 = _testSetjmp(HEAP32[$206>>2]|0, _setjmpTable)|0; if (($207|0) == 0) { _longjmp($206|0, threwValue|0); } tempRet0 = threwValue; } else { $207 = -1; };
        $208 = tempRet0;
        if ((($207|0) == 1)) {
         $ok$0$phi = $ok$0;$$reg2mem132$0 = $208;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
         continue L20;
        }
        $209 = (($im) + 936|0);
        $210 = (($209) + 40|0);
        __THREW__ = 0;
        $211 = (invoke_ii(37,($buf|0))|0);
        $212 = __THREW__; __THREW__ = 0;
        if ((($212|0) != 0) & ((threwValue|0) != 0)) { $213 = _testSetjmp(HEAP32[$212>>2]|0, _setjmpTable)|0; if (($213|0) == 0) { _longjmp($212|0, threwValue|0); } tempRet0 = threwValue; } else { $213 = -1; };
        $214 = tempRet0;
        if ((($213|0) == 1)) {
         $ok$0$phi = $ok$0;$$reg2mem132$0 = $214;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
         continue L20;
        }
        __THREW__ = 0;
        invoke_viiii(38,($210|0),231,($buf|0),($211|0));
        $215 = __THREW__; __THREW__ = 0;
        if ((($215|0) != 0) & ((threwValue|0) != 0)) { $216 = _testSetjmp(HEAP32[$215>>2]|0, _setjmpTable)|0; if (($216|0) == 0) { _longjmp($215|0, threwValue|0); } tempRet0 = threwValue; } else { $216 = -1; };
        $217 = tempRet0;
        if ((($216|0) == 1)) {
         $ok$0$phi = $ok$0;$$reg2mem132$0 = $217;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
         continue L20;
        }
        $218 = (($im) + 288|0);
        $219 = (($218) + 56|0);
        $220 = HEAP32[$219>>2]|0;
        $221 = ($220|0)<(0);
        $222 = $221 << 31 >> 31;
        __THREW__ = 0;
        $223 = $vararg_buffer134;
        $224 = $223;
        HEAP32[$224>>2] = $220;
        $225 = (($223) + 4)|0;
        $226 = $225;
        HEAP32[$226>>2] = $222;
        (invoke_iiiii(39,($buf|0),8192,(48|0),($vararg_buffer134|0))|0);
        $227 = __THREW__; __THREW__ = 0;
        if ((($227|0) != 0) & ((threwValue|0) != 0)) { $228 = _testSetjmp(HEAP32[$227>>2]|0, _setjmpTable)|0; if (($228|0) == 0) { _longjmp($227|0, threwValue|0); } tempRet0 = threwValue; } else { $228 = -1; };
        $229 = tempRet0;
        if ((($228|0) == 1)) {
         $ok$0$phi = $ok$0;$$reg2mem132$0 = $229;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
         continue L20;
        }
       }
       $230 = (($im) + 936|0);
       $231 = (($230) + 40|0);
       __THREW__ = 0;
       $232 = (invoke_ii(37,($buf|0))|0);
       $233 = __THREW__; __THREW__ = 0;
       if ((($233|0) != 0) & ((threwValue|0) != 0)) { $234 = _testSetjmp(HEAP32[$233>>2]|0, _setjmpTable)|0; if (($234|0) == 0) { _longjmp($233|0, threwValue|0); } tempRet0 = threwValue; } else { $234 = -1; };
       $235 = tempRet0;
       if ((($234|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $235;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
       __THREW__ = 0;
       invoke_viiii(38,($231|0),231,($buf|0),($232|0));
       $236 = __THREW__; __THREW__ = 0;
       if ((($236|0) != 0) & ((threwValue|0) != 0)) { $237 = _testSetjmp(HEAP32[$236>>2]|0, _setjmpTable)|0; if (($237|0) == 0) { _longjmp($236|0, threwValue|0); } tempRet0 = threwValue; } else { $237 = -1; };
       $238 = tempRet0;
       if ((($237|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $238;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
       $239 = (($im) + 384|0);
       $240 = (($239) + 12|0);
       $241 = HEAP32[$240>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer137>>2] = $241;
       (invoke_iiiii(39,($buf|0),8192,(72|0),($vararg_buffer137|0))|0);
       $242 = __THREW__; __THREW__ = 0;
       if ((($242|0) != 0) & ((threwValue|0) != 0)) { $243 = _testSetjmp(HEAP32[$242>>2]|0, _setjmpTable)|0; if (($243|0) == 0) { _longjmp($242|0, threwValue|0); } tempRet0 = threwValue; } else { $243 = -1; };
       $244 = tempRet0;
       if ((($243|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $244;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
       $245 = (($im) + 936|0);
       $246 = (($245) + 40|0);
       __THREW__ = 0;
       $247 = (invoke_ii(37,($buf|0))|0);
       $248 = __THREW__; __THREW__ = 0;
       if ((($248|0) != 0) & ((threwValue|0) != 0)) { $249 = _testSetjmp(HEAP32[$248>>2]|0, _setjmpTable)|0; if (($249|0) == 0) { _longjmp($248|0, threwValue|0); } tempRet0 = threwValue; } else { $249 = -1; };
       $250 = tempRet0;
       if ((($249|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $250;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
       __THREW__ = 0;
       invoke_viiii(38,($246|0),231,($buf|0),($247|0));
       $251 = __THREW__; __THREW__ = 0;
       if ((($251|0) != 0) & ((threwValue|0) != 0)) { $252 = _testSetjmp(HEAP32[$251>>2]|0, _setjmpTable)|0; if (($252|0) == 0) { _longjmp($251|0, threwValue|0); } tempRet0 = threwValue; } else { $252 = -1; };
       $253 = tempRet0;
       if ((($252|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $253;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
       $254 = (($im) + 384|0);
       $255 = (($254) + 16|0);
       $256 = HEAP32[$255>>2]|0;
       __THREW__ = 0;
       HEAP32[$vararg_buffer140>>2] = $256;
       (invoke_iiiii(39,($buf|0),8192,(96|0),($vararg_buffer140|0))|0);
       $257 = __THREW__; __THREW__ = 0;
       if ((($257|0) != 0) & ((threwValue|0) != 0)) { $258 = _testSetjmp(HEAP32[$257>>2]|0, _setjmpTable)|0; if (($258|0) == 0) { _longjmp($257|0, threwValue|0); } tempRet0 = threwValue; } else { $258 = -1; };
       $259 = tempRet0;
       if ((($258|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $259;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
       $260 = (($im) + 936|0);
       $261 = (($260) + 40|0);
       __THREW__ = 0;
       $262 = (invoke_ii(37,($buf|0))|0);
       $263 = __THREW__; __THREW__ = 0;
       if ((($263|0) != 0) & ((threwValue|0) != 0)) { $264 = _testSetjmp(HEAP32[$263>>2]|0, _setjmpTable)|0; if (($264|0) == 0) { _longjmp($263|0, threwValue|0); } tempRet0 = threwValue; } else { $264 = -1; };
       $265 = tempRet0;
       if ((($264|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $265;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
       __THREW__ = 0;
       invoke_viiii(38,($261|0),231,($buf|0),($262|0));
       $266 = __THREW__; __THREW__ = 0;
       if ((($266|0) != 0) & ((threwValue|0) != 0)) { $267 = _testSetjmp(HEAP32[$266>>2]|0, _setjmpTable)|0; if (($267|0) == 0) { _longjmp($266|0, threwValue|0); } tempRet0 = threwValue; } else { $267 = -1; };
       $268 = tempRet0;
       if ((($267|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $268;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
       __THREW__ = 0;
       (invoke_iiiii(39,($buf|0),8192,(120|0),($vararg_buffer143|0))|0);
       $269 = __THREW__; __THREW__ = 0;
       if ((($269|0) != 0) & ((threwValue|0) != 0)) { $270 = _testSetjmp(HEAP32[$269>>2]|0, _setjmpTable)|0; if (($270|0) == 0) { _longjmp($269|0, threwValue|0); } tempRet0 = threwValue; } else { $270 = -1; };
       $271 = tempRet0;
       if ((($270|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $271;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
       $272 = (($im) + 936|0);
       $273 = (($272) + 40|0);
       __THREW__ = 0;
       $274 = (invoke_ii(37,($buf|0))|0);
       $275 = __THREW__; __THREW__ = 0;
       if ((($275|0) != 0) & ((threwValue|0) != 0)) { $276 = _testSetjmp(HEAP32[$275>>2]|0, _setjmpTable)|0; if (($276|0) == 0) { _longjmp($275|0, threwValue|0); } tempRet0 = threwValue; } else { $276 = -1; };
       $277 = tempRet0;
       if ((($276|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $277;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
       __THREW__ = 0;
       invoke_viiii(38,($273|0),231,($buf|0),($274|0));
       $278 = __THREW__; __THREW__ = 0;
       if ((($278|0) != 0) & ((threwValue|0) != 0)) { $279 = _testSetjmp(HEAP32[$278>>2]|0, _setjmpTable)|0; if (($279|0) == 0) { _longjmp($278|0, threwValue|0); } tempRet0 = threwValue; } else { $279 = -1; };
       $280 = tempRet0;
       if ((($279|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $280;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
      }
      while(1) {
       $281 = (($im) + 936|0);
       $282 = (($281) + 40|0);
       $283 = (($282) + 264|0);
       $284 = HEAP32[$283>>2]|0;
       $285 = (($im) + 936|0);
       $286 = (($285) + 24|0);
       $287 = HEAP32[$286>>2]|0;
       $288 = ($284>>>0)<($287>>>0);
       if (!($288)) {
        break;
       }
       $289 = (($im) + 936|0);
       $290 = (($289) + 40|0);
       $291 = (($im) + 936|0);
       $292 = (($291) + 40|0);
       $293 = (($292) + 264|0);
       $294 = HEAP32[$293>>2]|0;
       $295 = (($im) + 368|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = (($296) + ($294<<2)|0);
       __THREW__ = 0;
       (invoke_iiii(40,($290|0),($297|0),1)|0);
       $298 = __THREW__; __THREW__ = 0;
       if ((($298|0) != 0) & ((threwValue|0) != 0)) { $299 = _testSetjmp(HEAP32[$298>>2]|0, _setjmpTable)|0; if (($299|0) == 0) { _longjmp($298|0, threwValue|0); } tempRet0 = threwValue; } else { $299 = -1; };
       $300 = tempRet0;
       if ((($299|0) == 1)) {
        $ok$0$phi = $ok$0;$$reg2mem132$0 = $300;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
        continue L20;
       }
      }
      $301 = (($im) + 936|0);
      $302 = (($301) + 40|0);
      __THREW__ = 0;
      invoke_vi(41,($302|0));
      $303 = __THREW__; __THREW__ = 0;
      if ((($303|0) != 0) & ((threwValue|0) != 0)) { $304 = _testSetjmp(HEAP32[$303>>2]|0, _setjmpTable)|0; if (($304|0) == 0) { _longjmp($303|0, threwValue|0); } tempRet0 = threwValue; } else { $304 = -1; };
      $305 = tempRet0;
      if ((($304|0) == 1)) {
       $ok$0$phi = $ok$0;$$reg2mem132$0 = $305;$dst_mgr$0 = $dst_mgr$1;$ok$0 = $ok$0$phi;
       continue L20;
      }
      $dst_mgr$2 = $dst_mgr$1;$ok$1 = $ok$0;
     }
    } while(0);
    $306 = (($im) + 384|0);
    $307 = (($306) + 24|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = ($308|0)!=(0|0);
    if ($309) {
     label = 64;
    } else {
     $310 = (($im) + 384|0);
     $311 = (($310) + 4|0);
     $312 = HEAP32[$311>>2]|0;
     $313 = ($312|0)!=(0|0);
     if ($313) {
      label = 64;
     }
    }
    if ((label|0) == 64) {
     label = 0;
     $314 = (($im) + 384|0);
     $315 = (($314) + 32|0);
     __THREW__ = 0;
     invoke_vi(42,($315|0));
     $316 = __THREW__; __THREW__ = 0;
     if ((($316|0) != 0) & ((threwValue|0) != 0)) { $317 = _testSetjmp(HEAP32[$316>>2]|0, _setjmpTable)|0; if (($317|0) == 0) { _longjmp($316|0, threwValue|0); } tempRet0 = threwValue; } else { $317 = -1; };
     $318 = tempRet0;
     if ((($317|0) == 1)) {
      $$reg2mem132$0 = $318;$dst_mgr$0 = $dst_mgr$2;$ok$0 = $ok$1;
      continue;
     }
    }
    $319 = (($im) + 384|0);
    $320 = (($319) + 24|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = ($321|0)!=(0|0);
    if ($322) {
     $323 = (($im) + 384|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = ($324|0)!=(0|0);
     if ($325) {
      $326 = (($im) + 384|0);
      $327 = (($326) + 24|0);
      $328 = HEAP32[$327>>2]|0;
      __THREW__ = 0;
      (invoke_ii(43,($328|0))|0);
      $329 = __THREW__; __THREW__ = 0;
      if ((($329|0) != 0) & ((threwValue|0) != 0)) { $330 = _testSetjmp(HEAP32[$329>>2]|0, _setjmpTable)|0; if (($330|0) == 0) { _longjmp($329|0, threwValue|0); } tempRet0 = threwValue; } else { $330 = -1; };
      $331 = tempRet0;
      if ((($330|0) == 1)) {
       $$reg2mem132$0 = $331;$dst_mgr$0 = $dst_mgr$2;$ok$0 = $ok$1;
       continue;
      }
     }
    }
    $332 = ($dst_mgr$2|0)!=(0|0);
    if ($332) {
     $333 = (($dst_mgr$2) + 24|0);
     $334 = HEAP32[$333>>2]|0;
     $335 = ($334|0)!=(0|0);
     if ($335) {
      $336 = (($dst_mgr$2) + 24|0);
      $337 = HEAP32[$336>>2]|0;
      __THREW__ = 0;
      invoke_vi(15,($337|0));
      $338 = __THREW__; __THREW__ = 0;
      if ((($338|0) != 0) & ((threwValue|0) != 0)) { $339 = _testSetjmp(HEAP32[$338>>2]|0, _setjmpTable)|0; if (($339|0) == 0) { _longjmp($338|0, threwValue|0); } tempRet0 = threwValue; } else { $339 = -1; };
      $340 = tempRet0;
      if ((($339|0) == 1)) {
       $$reg2mem132$0 = $340;$dst_mgr$0 = $dst_mgr$2;$ok$0 = $ok$1;
       continue;
      }
     }
     __THREW__ = 0;
     invoke_vi(15,($dst_mgr$2|0));
     $341 = __THREW__; __THREW__ = 0;
     if ((($341|0) != 0) & ((threwValue|0) != 0)) { $342 = _testSetjmp(HEAP32[$341>>2]|0, _setjmpTable)|0; if (($342|0) == 0) { _longjmp($341|0, threwValue|0); } tempRet0 = threwValue; } else { $342 = -1; };
     $343 = tempRet0;
     if ((($342|0) == 1)) {
      $$reg2mem132$0 = $343;$dst_mgr$0 = $dst_mgr$2;$ok$0 = $ok$1;
      continue;
     }
     $344 = (($im) + 936|0);
     $345 = (($344) + 40|0);
     $346 = (($345) + 24|0);
     HEAP32[$346>>2] = 0;
    }
    $347 = (($im) + 936|0);
    $348 = (($347) + 40|0);
    __THREW__ = 0;
    invoke_vi(44,($348|0));
    $349 = __THREW__; __THREW__ = 0;
    if ((($349|0) != 0) & ((threwValue|0) != 0)) { $350 = _testSetjmp(HEAP32[$349>>2]|0, _setjmpTable)|0; if (($350|0) == 0) { _longjmp($349|0, threwValue|0); } tempRet0 = threwValue; } else { $350 = -1; };
    $351 = tempRet0;
    if ((($350|0) == 1)) {
     $$reg2mem132$0 = $351;$dst_mgr$0 = $dst_mgr$2;$ok$0 = $ok$1;
     continue;
    }
    $352 = (($im) + 936|0);
    $353 = (($352) + 32|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = ($354|0)!=(0|0);
    if (!($355)) {
     break;
    }
    $356 = (($im) + 936|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = ($357|0)!=(0|0);
    if (!($358)) {
     break;
    }
    $359 = (($im) + 936|0);
    $360 = (($359) + 32|0);
    $361 = HEAP32[$360>>2]|0;
    __THREW__ = 0;
    (invoke_ii(43,($361|0))|0);
    $362 = __THREW__; __THREW__ = 0;
    if ((($362|0) != 0) & ((threwValue|0) != 0)) { $363 = _testSetjmp(HEAP32[$362>>2]|0, _setjmpTable)|0; if (($363|0) == 0) { _longjmp($362|0, threwValue|0); } tempRet0 = threwValue; } else { $363 = -1; };
    $364 = tempRet0;
    if ((($363|0) == 1)) {
     $$reg2mem132$0 = $364;$dst_mgr$0 = $dst_mgr$2;$ok$0 = $ok$1;
    } else {
     label = 80;
     break;
    }
   }
   if ((label|0) == 23) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 80) {
   }
   $365 = (($im) + 384|0);
   $366 = (($365) + 24|0);
   HEAP32[$366>>2] = 0;
   $367 = (($im) + 936|0);
   $368 = (($367) + 32|0);
   HEAP32[$368>>2] = 0;
   $$0 = $ok$1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __epeg_fatal_error_handler($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $errmgr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $errmgr = $2;
 $3 = $errmgr;
 $4 = (($3) + 132|0);
 _longjmp(($4|0),1);
 // unreachable;
}
function __jpeg_init_destination($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_mgr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $dst_mgr = $3;
 $4 = $dst_mgr;
 $5 = (($4) + 4|0);
 HEAP32[$5>>2] = 65536;
 $6 = $dst_mgr;
 $7 = (($6) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $dst_mgr;
 HEAP32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function __jpeg_empty_output_buffer($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dst_mgr = 0, $p = 0, $psize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $dst_mgr = $4;
 $5 = $dst_mgr;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 936|0);
 $9 = (($8) + 4|0);
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$11>>2]|0;
 $psize = $12;
 $13 = $dst_mgr;
 $14 = (($13) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 936|0);
 $17 = (($16) + 4|0);
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 65536)|0;
 HEAP32[$19>>2] = $21;
 $22 = $dst_mgr;
 $23 = (($22) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 936|0);
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$27>>2]|0;
 $29 = $dst_mgr;
 $30 = (($29) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 936|0);
 $33 = (($32) + 4|0);
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$35>>2]|0;
 $37 = (_realloc($28,$36)|0);
 $p = $37;
 $38 = $p;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  $0 = 0;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $40 = $p;
 $41 = $dst_mgr;
 $42 = (($41) + 20|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 936|0);
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$46>>2] = $40;
 $47 = $p;
 $48 = $psize;
 $49 = (($47) + ($48)|0);
 $50 = $dst_mgr;
 $51 = (($50) + 24|0);
 $52 = HEAP32[$51>>2]|0;
 _memcpy(($49|0),($52|0),65536)|0;
 $53 = $dst_mgr;
 $54 = (($53) + 4|0);
 HEAP32[$54>>2] = 65536;
 $55 = $dst_mgr;
 $56 = (($55) + 24|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $dst_mgr;
 HEAP32[$58>>2] = $57;
 $0 = 1;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function __jpeg_term_destination($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dst_mgr = 0, $p = 0, $psize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $dst_mgr = $3;
 $4 = $dst_mgr;
 $5 = (($4) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 936|0);
 $8 = (($7) + 4|0);
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $psize = $11;
 $12 = $dst_mgr;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (65536 - ($14))|0;
 $16 = $dst_mgr;
 $17 = (($16) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 936|0);
 $20 = (($19) + 4|0);
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($15))|0;
 HEAP32[$22>>2] = $24;
 $25 = $dst_mgr;
 $26 = (($25) + 20|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) + 936|0);
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = $dst_mgr;
 $33 = (($32) + 20|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = (($34) + 936|0);
 $36 = (($35) + 4|0);
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = (_realloc($31,$39)|0);
 $p = $40;
 $41 = $p;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $43 = $p;
 $44 = $dst_mgr;
 $45 = (($44) + 20|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 936|0);
 $48 = (($47) + 4|0);
 $49 = HEAP32[$48>>2]|0;
 HEAP32[$49>>2] = $43;
 $50 = $p;
 $51 = $psize;
 $52 = (($50) + ($51)|0);
 $53 = $dst_mgr;
 $54 = (($53) + 24|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $dst_mgr;
 $57 = (($56) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (65536 - ($58))|0;
 _memcpy(($52|0),($55|0),($59|0))|0;
 STACKTOP = sp;return;
}
function __jpeg_init_source($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return;
}
function __jpeg_fill_input_buffer($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 HEAP32[$3>>2] = 123;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 FUNCTION_TABLE_vii[$7 & 511]($8,-1);
 $9 = $0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 HEAP32[$11>>2] = 264;
 $12 = $0;
 $13 = (($12) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 4|0);
 HEAP32[$15>>2] = 2;
 STACKTOP = sp;return 1;
}
function __jpeg_skip_input_data($cinfo,$num_bytes) {
 $cinfo = $cinfo|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $num_bytes;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($2|0)>($7|0);
 if ($8) {
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 20|0);
  HEAP32[$11>>2] = 0;
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  FUNCTION_TABLE_vi[$14 & 511]($15);
 }
 $16 = $1;
 $17 = $0;
 $18 = (($17) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + ($16)|0);
 HEAP32[$19>>2] = $21;
 $22 = $1;
 $23 = $0;
 $24 = (($23) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($27) - ($22))|0;
 HEAP32[$26>>2] = $28;
 STACKTOP = sp;return;
}
function __jpeg_term_source($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return;
}
function _jpeg_CreateCompress($cinfo,$version,$structsize) {
 $cinfo = $cinfo|0;
 $version = $version|0;
 $structsize = $structsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $client_data = 0, $err = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $version;
 $2 = $structsize;
 $3 = $0;
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ($5|0)!=(90);
 if ($6) {
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 20|0);
  HEAP32[$9>>2] = 13;
  $10 = $0;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 24|0);
  HEAP32[$12>>2] = 90;
  $13 = $1;
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 24|0);
  $17 = (($16) + 4|0);
  HEAP32[$17>>2] = $13;
  $18 = $0;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  FUNCTION_TABLE_vi[$20 & 511]($21);
 }
 $22 = $2;
 $23 = ($22|0)!=(440);
 if ($23) {
  $24 = $0;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 20|0);
  HEAP32[$26>>2] = 22;
  $27 = $0;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 24|0);
  HEAP32[$29>>2] = 440;
  $30 = $2;
  $31 = $0;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 24|0);
  $34 = (($33) + 4|0);
  HEAP32[$34>>2] = $30;
  $35 = $0;
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$36>>2]|0;
  $38 = $0;
  FUNCTION_TABLE_vi[$37 & 511]($38);
 }
 $39 = $0;
 $40 = HEAP32[$39>>2]|0;
 $err = $40;
 $41 = $0;
 $42 = (($41) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $client_data = $43;
 $44 = $0;
 _memset(($44|0),0,440)|0;
 $45 = $err;
 $46 = $0;
 HEAP32[$46>>2] = $45;
 $47 = $client_data;
 $48 = $0;
 $49 = (($48) + 12|0);
 HEAP32[$49>>2] = $47;
 $50 = $0;
 $51 = (($50) + 16|0);
 HEAP32[$51>>2] = 0;
 $52 = $0;
 _jinit_memory_mgr($52);
 $53 = $0;
 $54 = (($53) + 8|0);
 HEAP32[$54>>2] = 0;
 $55 = $0;
 $56 = (($55) + 24|0);
 HEAP32[$56>>2] = 0;
 $57 = $0;
 $58 = (($57) + 84|0);
 HEAP32[$58>>2] = 0;
 $i = 0;
 while(1) {
  $59 = $i;
  $60 = ($59|0)<(4);
  if (!($60)) {
   break;
  }
  $61 = $i;
  $62 = $0;
  $63 = (($62) + 88|0);
  $64 = (($63) + ($61<<2)|0);
  HEAP32[$64>>2] = 0;
  $65 = $i;
  $66 = $0;
  $67 = (($66) + 104|0);
  $68 = (($67) + ($65<<2)|0);
  HEAP32[$68>>2] = 100;
  $69 = $i;
  $70 = (($69) + 1)|0;
  $i = $70;
 }
 $i = 0;
 while(1) {
  $71 = $i;
  $72 = ($71|0)<(4);
  if (!($72)) {
   break;
  }
  $73 = $i;
  $74 = $0;
  $75 = (($74) + 120|0);
  $76 = (($75) + ($73<<2)|0);
  HEAP32[$76>>2] = 0;
  $77 = $i;
  $78 = $0;
  $79 = (($78) + 136|0);
  $80 = (($79) + ($77<<2)|0);
  HEAP32[$80>>2] = 0;
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 $83 = $0;
 $84 = (($83) + 380|0);
 HEAP32[$84>>2] = 8;
 $85 = $0;
 $86 = (($85) + 384|0);
 HEAP32[$86>>2] = 8888;
 $87 = $0;
 $88 = (($87) + 388|0);
 HEAP32[$88>>2] = 63;
 $89 = $0;
 $90 = (($89) + 428|0);
 HEAP32[$90>>2] = 0;
 $91 = $0;
 $92 = (($91) + 48|0);
 HEAPF64[$92>>3] = 1.0;
 $93 = $0;
 $94 = (($93) + 20|0);
 HEAP32[$94>>2] = 100;
 STACKTOP = sp;return;
}
function _jpeg_destroy_compress($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 _jpeg_destroy($1);
 STACKTOP = sp;return;
}
function _jpeg_suppress_tables($cinfo,$suppress) {
 $cinfo = $cinfo|0;
 $suppress = $suppress|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $htbl = 0, $i = 0, $qtbl = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $suppress;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(4);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $0;
  $6 = (($5) + 88|0);
  $7 = (($6) + ($4<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $qtbl = $8;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $1;
   $11 = $qtbl;
   $12 = (($11) + 128|0);
   HEAP32[$12>>2] = $10;
  }
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 $i = 0;
 while(1) {
  $15 = $i;
  $16 = ($15|0)<(4);
  if (!($16)) {
   break;
  }
  $17 = $i;
  $18 = $0;
  $19 = (($18) + 120|0);
  $20 = (($19) + ($17<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $htbl = $21;
  $22 = ($21|0)!=(0|0);
  if ($22) {
   $23 = $1;
   $24 = $htbl;
   $25 = (($24) + 276|0);
   HEAP32[$25>>2] = $23;
  }
  $26 = $i;
  $27 = $0;
  $28 = (($27) + 136|0);
  $29 = (($28) + ($26<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $htbl = $30;
  $31 = ($30|0)!=(0|0);
  if ($31) {
   $32 = $1;
   $33 = $htbl;
   $34 = (($33) + 276|0);
   HEAP32[$34>>2] = $32;
  }
  $35 = $i;
  $36 = (($35) + 1)|0;
  $i = $36;
 }
 STACKTOP = sp;return;
}
function _jpeg_finish_compress($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $iMCU_row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(101);
 if ($4) {
  label = 3;
 } else {
  $5 = $0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(102);
  if ($8) {
   label = 3;
  } else {
   $29 = $0;
   $30 = (($29) + 20|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(103);
   if ($32) {
    $33 = $0;
    $34 = HEAP32[$33>>2]|0;
    $35 = (($34) + 20|0);
    HEAP32[$35>>2] = 21;
    $36 = $0;
    $37 = (($36) + 20|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $0;
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 24|0);
    HEAP32[$41>>2] = $38;
    $42 = $0;
    $43 = HEAP32[$42>>2]|0;
    $44 = HEAP32[$43>>2]|0;
    $45 = $0;
    FUNCTION_TABLE_vi[$44 & 511]($45);
   }
  }
 }
 if ((label|0) == 3) {
  $9 = $0;
  $10 = (($9) + 264|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = (($12) + 32|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11>>>0)<($14>>>0);
  if ($15) {
   $16 = $0;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + 20|0);
   HEAP32[$18>>2] = 69;
   $19 = $0;
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = $0;
   FUNCTION_TABLE_vi[$21 & 511]($22);
  }
  $23 = $0;
  $24 = (($23) + 392|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $0;
  FUNCTION_TABLE_vi[$27 & 511]($28);
 }
 while(1) {
  $46 = $0;
  $47 = (($46) + 392|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($50|0)!=(0);
  $52 = $51 ^ 1;
  if (!($52)) {
   break;
  }
  $53 = $0;
  $54 = (($53) + 392|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = $0;
  FUNCTION_TABLE_vi[$56 & 511]($57);
  $iMCU_row = 0;
  while(1) {
   $58 = $iMCU_row;
   $59 = $0;
   $60 = (($59) + 288|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($58>>>0)<($61>>>0);
   if (!($62)) {
    break;
   }
   $63 = $0;
   $64 = (($63) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)!=(0|0);
   if ($66) {
    $67 = $iMCU_row;
    $68 = $0;
    $69 = (($68) + 8|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + 4|0);
    HEAP32[$71>>2] = $67;
    $72 = $0;
    $73 = (($72) + 288|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $0;
    $76 = (($75) + 8|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (($77) + 8|0);
    HEAP32[$78>>2] = $74;
    $79 = $0;
    $80 = (($79) + 8|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = HEAP32[$81>>2]|0;
    $83 = $0;
    FUNCTION_TABLE_vi[$82 & 511]($83);
   }
   $84 = $0;
   $85 = (($84) + 404|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $0;
   $90 = (FUNCTION_TABLE_iii[$88 & 255]($89,0)|0);
   $91 = ($90|0)!=(0);
   if (!($91)) {
    $92 = $0;
    $93 = HEAP32[$92>>2]|0;
    $94 = (($93) + 20|0);
    HEAP32[$94>>2] = 25;
    $95 = $0;
    $96 = HEAP32[$95>>2]|0;
    $97 = HEAP32[$96>>2]|0;
    $98 = $0;
    FUNCTION_TABLE_vi[$97 & 511]($98);
   }
   $99 = $iMCU_row;
   $100 = (($99) + 1)|0;
   $iMCU_row = $100;
  }
  $101 = $0;
  $102 = (($101) + 392|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $0;
  FUNCTION_TABLE_vi[$105 & 511]($106);
 }
 $107 = $0;
 $108 = (($107) + 408|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = (($109) + 12|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $0;
 FUNCTION_TABLE_vi[$111 & 511]($112);
 $113 = $0;
 $114 = (($113) + 24|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = (($115) + 16|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = $0;
 FUNCTION_TABLE_vi[$117 & 511]($118);
 $119 = $0;
 _jpeg_abort($119);
 STACKTOP = sp;return;
}
function _jpeg_write_marker($cinfo,$marker,$dataptr,$datalen) {
 $cinfo = $cinfo|0;
 $marker = $marker|0;
 $dataptr = $dataptr|0;
 $datalen = $datalen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $write_marker_byte = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $marker;
 $2 = $dataptr;
 $3 = $datalen;
 $4 = $0;
 $5 = (($4) + 264|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  label = 5;
 } else {
  $8 = $0;
  $9 = (($8) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(101);
  if ($11) {
   $12 = $0;
   $13 = (($12) + 20|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)!=(102);
   if ($15) {
    $16 = $0;
    $17 = (($16) + 20|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)!=(103);
    if ($19) {
     label = 5;
    }
   }
  }
 }
 if ((label|0) == 5) {
  $20 = $0;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 20|0);
  HEAP32[$22>>2] = 21;
  $23 = $0;
  $24 = (($23) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $0;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 24|0);
  HEAP32[$28>>2] = $25;
  $29 = $0;
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = $0;
  FUNCTION_TABLE_vi[$31 & 511]($32);
 }
 $33 = $0;
 $34 = (($33) + 408|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 20|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $0;
 $39 = $1;
 $40 = $3;
 FUNCTION_TABLE_viii[$37 & 127]($38,$39,$40);
 $41 = $0;
 $42 = (($41) + 408|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + 24|0);
 $45 = HEAP32[$44>>2]|0;
 $write_marker_byte = $45;
 while(1) {
  $46 = $3;
  $47 = (($46) + -1)|0;
  $3 = $47;
  $48 = ($46|0)!=(0);
  if (!($48)) {
   break;
  }
  $49 = $write_marker_byte;
  $50 = $0;
  $51 = $2;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  FUNCTION_TABLE_vii[$49 & 511]($50,$53);
  $54 = $2;
  $55 = (($54) + 1|0);
  $2 = $55;
 }
 STACKTOP = sp;return;
}
function _jpeg_start_compress($cinfo,$write_all_tables) {
 $cinfo = $cinfo|0;
 $write_all_tables = $write_all_tables|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $write_all_tables;
 $2 = $0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(100);
 if ($5) {
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 20|0);
  HEAP32[$8>>2] = 21;
  $9 = $0;
  $10 = (($9) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 24|0);
  HEAP32[$14>>2] = $11;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  FUNCTION_TABLE_vi[$17 & 511]($18);
 }
 $19 = $1;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $0;
  _jpeg_suppress_tables($21,0);
 }
 $22 = $0;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 16|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $0;
 FUNCTION_TABLE_vi[$25 & 511]($26);
 $27 = $0;
 $28 = (($27) + 24|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($29) + 8|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 FUNCTION_TABLE_vi[$31 & 511]($32);
 $33 = $0;
 _jinit_compress_master($33);
 $34 = $0;
 $35 = (($34) + 392|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = $0;
 FUNCTION_TABLE_vi[$37 & 511]($38);
 $39 = $0;
 $40 = (($39) + 264|0);
 HEAP32[$40>>2] = 0;
 $41 = $0;
 $42 = (($41) + 208|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)!=(0);
 $45 = $44 ? 102 : 101;
 $46 = $0;
 $47 = (($46) + 20|0);
 HEAP32[$47>>2] = $45;
 STACKTOP = sp;return;
}
function _jpeg_write_scanlines($cinfo,$scanlines,$num_lines) {
 $cinfo = $cinfo|0;
 $scanlines = $scanlines|0;
 $num_lines = $num_lines|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $row_ctr = 0, $rows_left = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $row_ctr = sp + 4|0;
 $0 = $cinfo;
 $1 = $scanlines;
 $2 = $num_lines;
 $3 = $0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(101);
 if ($6) {
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 20|0);
  HEAP32[$9>>2] = 21;
  $10 = $0;
  $11 = (($10) + 20|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 24|0);
  HEAP32[$15>>2] = $12;
  $16 = $0;
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  FUNCTION_TABLE_vi[$18 & 511]($19);
 }
 $20 = $0;
 $21 = (($20) + 264|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $0;
 $24 = (($23) + 32|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($22>>>0)>=($25>>>0);
 if ($26) {
  $27 = $0;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 20|0);
  HEAP32[$29>>2] = 126;
  $30 = $0;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 4|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $0;
  FUNCTION_TABLE_vii[$33 & 511]($34,-1);
 }
 $35 = $0;
 $36 = (($35) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = $0;
  $40 = (($39) + 264|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $0;
  $43 = (($42) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 4|0);
  HEAP32[$45>>2] = $41;
  $46 = $0;
  $47 = (($46) + 32|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $0;
  $50 = (($49) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + 8|0);
  HEAP32[$52>>2] = $48;
  $53 = $0;
  $54 = (($53) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = HEAP32[$55>>2]|0;
  $57 = $0;
  FUNCTION_TABLE_vi[$56 & 511]($57);
 }
 $58 = $0;
 $59 = (($58) + 392|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 12|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)!=(0);
 if ($63) {
  $64 = $0;
  $65 = (($64) + 392|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $0;
  FUNCTION_TABLE_vi[$68 & 511]($69);
 }
 $70 = $0;
 $71 = (($70) + 32|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $0;
 $74 = (($73) + 264|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($72) - ($75))|0;
 $rows_left = $76;
 $77 = $2;
 $78 = $rows_left;
 $79 = ($77>>>0)>($78>>>0);
 if (!($79)) {
  HEAP32[$row_ctr>>2] = 0;
  $81 = $0;
  $82 = (($81) + 396|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = (($83) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = $0;
  $87 = $1;
  $88 = $2;
  FUNCTION_TABLE_viiii[$85 & 511]($86,$87,$row_ctr,$88);
  $89 = HEAP32[$row_ctr>>2]|0;
  $90 = $0;
  $91 = (($90) + 264|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + ($89))|0;
  HEAP32[$91>>2] = $93;
  $94 = HEAP32[$row_ctr>>2]|0;
  STACKTOP = sp;return ($94|0);
 }
 $80 = $rows_left;
 $2 = $80;
 HEAP32[$row_ctr>>2] = 0;
 $81 = $0;
 $82 = (($81) + 396|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $0;
 $87 = $1;
 $88 = $2;
 FUNCTION_TABLE_viiii[$85 & 511]($86,$87,$row_ctr,$88);
 $89 = HEAP32[$row_ctr>>2]|0;
 $90 = $0;
 $91 = (($90) + 264|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + ($89))|0;
 HEAP32[$91>>2] = $93;
 $94 = HEAP32[$row_ctr>>2]|0;
 STACKTOP = sp;return ($94|0);
}
function _jinit_arith_encoder($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entropy = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,208)|0);
 $entropy = $6;
 $7 = $entropy;
 $8 = $0;
 $9 = (($8) + 424|0);
 HEAP32[$9>>2] = $7;
 $10 = $entropy;
 HEAP32[$10>>2] = 45;
 $11 = $entropy;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 46;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13|0)<(16);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $entropy;
  $17 = (($16) + 76|0);
  $18 = (($17) + ($15<<2)|0);
  HEAP32[$18>>2] = 0;
  $19 = $i;
  $20 = $entropy;
  $21 = (($20) + 140|0);
  $22 = (($21) + ($19<<2)|0);
  HEAP32[$22>>2] = 0;
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 $25 = $entropy;
 $26 = (($25) + 204|0);
 HEAP8[$26>>0] = 113;
 STACKTOP = sp;return;
}
function _start_pass($cinfo,$gather_statistics) {
 $cinfo = $cinfo|0;
 $gather_statistics = $gather_statistics|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0, $entropy = 0, $tbl = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $gather_statistics;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 20|0);
  HEAP32[$9>>2] = 49;
  $10 = $0;
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  FUNCTION_TABLE_vi[$12 & 511]($13);
 }
 $14 = $0;
 $15 = (($14) + 268|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $0;
  $19 = (($18) + 372|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $22 = $0;
   $23 = (($22) + 364|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = $entropy;
    $27 = (($26) + 4|0);
    HEAP32[$27>>2] = 47;
   } else {
    $28 = $entropy;
    $29 = (($28) + 4|0);
    HEAP32[$29>>2] = 48;
   }
  } else {
   $30 = $0;
   $31 = (($30) + 364|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(0);
   if ($33) {
    $34 = $entropy;
    $35 = (($34) + 4|0);
    HEAP32[$35>>2] = 49;
   } else {
    $36 = $entropy;
    $37 = (($36) + 4|0);
    HEAP32[$37>>2] = 50;
   }
  }
 } else {
  $38 = $entropy;
  $39 = (($38) + 4|0);
  HEAP32[$39>>2] = 51;
 }
 $ci = 0;
 while(1) {
  $40 = $ci;
  $41 = $0;
  $42 = (($41) + 292|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($40|0)<($43|0);
  if (!($44)) {
   break;
  }
  $45 = $ci;
  $46 = $0;
  $47 = (($46) + 296|0);
  $48 = (($47) + ($45<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $compptr = $49;
  $50 = $0;
  $51 = (($50) + 364|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0);
  if ($53) {
   $54 = $0;
   $55 = (($54) + 372|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)==(0);
   if ($57) {
    $58 = $compptr;
    $59 = (($58) + 20|0);
    $60 = HEAP32[$59>>2]|0;
    $tbl = $60;
    $61 = $tbl;
    $62 = ($61|0)<(0);
    if ($62) {
     label = 21;
    } else {
     $63 = $tbl;
     $64 = ($63|0)>=(16);
     if ($64) {
      label = 21;
     }
    }
    if ((label|0) == 21) {
     label = 0;
     $65 = $0;
     $66 = HEAP32[$65>>2]|0;
     $67 = (($66) + 20|0);
     HEAP32[$67>>2] = 50;
     $68 = $tbl;
     $69 = $0;
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + 24|0);
     HEAP32[$71>>2] = $68;
     $72 = $0;
     $73 = HEAP32[$72>>2]|0;
     $74 = HEAP32[$73>>2]|0;
     $75 = $0;
     FUNCTION_TABLE_vi[$74 & 511]($75);
    }
    $76 = $tbl;
    $77 = $entropy;
    $78 = (($77) + 76|0);
    $79 = (($78) + ($76<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($80|0)==(0|0);
    if ($81) {
     $82 = $0;
     $83 = (($82) + 4|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = HEAP32[$84>>2]|0;
     $86 = $0;
     $87 = (FUNCTION_TABLE_iiii[$85 & 511]($86,1,64)|0);
     $88 = $tbl;
     $89 = $entropy;
     $90 = (($89) + 76|0);
     $91 = (($90) + ($88<<2)|0);
     HEAP32[$91>>2] = $87;
    }
    $92 = $tbl;
    $93 = $entropy;
    $94 = (($93) + 76|0);
    $95 = (($94) + ($92<<2)|0);
    $96 = HEAP32[$95>>2]|0;
    dest=$96+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $97 = $ci;
    $98 = $entropy;
    $99 = (($98) + 36|0);
    $100 = (($99) + ($97<<2)|0);
    HEAP32[$100>>2] = 0;
    $101 = $ci;
    $102 = $entropy;
    $103 = (($102) + 52|0);
    $104 = (($103) + ($101<<2)|0);
    HEAP32[$104>>2] = 0;
   }
  }
  $105 = $0;
  $106 = (($105) + 368|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)!=(0);
  if ($108) {
   $109 = $compptr;
   $110 = (($109) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $tbl = $111;
   $112 = $tbl;
   $113 = ($112|0)<(0);
   if ($113) {
    label = 28;
   } else {
    $114 = $tbl;
    $115 = ($114|0)>=(16);
    if ($115) {
     label = 28;
    }
   }
   if ((label|0) == 28) {
    label = 0;
    $116 = $0;
    $117 = HEAP32[$116>>2]|0;
    $118 = (($117) + 20|0);
    HEAP32[$118>>2] = 50;
    $119 = $tbl;
    $120 = $0;
    $121 = HEAP32[$120>>2]|0;
    $122 = (($121) + 24|0);
    HEAP32[$122>>2] = $119;
    $123 = $0;
    $124 = HEAP32[$123>>2]|0;
    $125 = HEAP32[$124>>2]|0;
    $126 = $0;
    FUNCTION_TABLE_vi[$125 & 511]($126);
   }
   $127 = $tbl;
   $128 = $entropy;
   $129 = (($128) + 140|0);
   $130 = (($129) + ($127<<2)|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($131|0)==(0|0);
   if ($132) {
    $133 = $0;
    $134 = (($133) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = HEAP32[$135>>2]|0;
    $137 = $0;
    $138 = (FUNCTION_TABLE_iiii[$136 & 511]($137,1,256)|0);
    $139 = $tbl;
    $140 = $entropy;
    $141 = (($140) + 140|0);
    $142 = (($141) + ($139<<2)|0);
    HEAP32[$142>>2] = $138;
   }
   $143 = $tbl;
   $144 = $entropy;
   $145 = (($144) + 140|0);
   $146 = (($145) + ($143<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   _memset(($147|0),0,256)|0;
  }
  $148 = $ci;
  $149 = (($148) + 1)|0;
  $ci = $149;
 }
 $150 = $entropy;
 $151 = (($150) + 12|0);
 HEAP32[$151>>2] = 0;
 $152 = $entropy;
 $153 = (($152) + 16|0);
 HEAP32[$153>>2] = 65536;
 $154 = $entropy;
 $155 = (($154) + 20|0);
 HEAP32[$155>>2] = 0;
 $156 = $entropy;
 $157 = (($156) + 24|0);
 HEAP32[$157>>2] = 0;
 $158 = $entropy;
 $159 = (($158) + 28|0);
 HEAP32[$159>>2] = 11;
 $160 = $entropy;
 $161 = (($160) + 32|0);
 HEAP32[$161>>2] = -1;
 $162 = $0;
 $163 = (($162) + 236|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = $entropy;
 $166 = (($165) + 68|0);
 HEAP32[$166>>2] = $164;
 $167 = $entropy;
 $168 = (($167) + 72|0);
 HEAP32[$168>>2] = 0;
 STACKTOP = sp;return;
}
function _finish_pass($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $e = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 424|0);
 $3 = HEAP32[$2>>2]|0;
 $e = $3;
 $4 = $e;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - 1)|0;
 $8 = $e;
 $9 = (($8) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($7) + ($10))|0;
 $12 = $11 & -65536;
 $temp = $12;
 $13 = $e;
 $14 = (($13) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)<($15|0);
 if ($16) {
  $17 = $temp;
  $18 = (($17) + 32768)|0;
  $19 = $e;
  $20 = (($19) + 12|0);
  HEAP32[$20>>2] = $18;
 } else {
  $21 = $temp;
  $22 = $e;
  $23 = (($22) + 12|0);
  HEAP32[$23>>2] = $21;
 }
 $24 = $e;
 $25 = (($24) + 28|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $e;
 $28 = (($27) + 12|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 << $26;
 HEAP32[$28>>2] = $30;
 $31 = $e;
 $32 = (($31) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $33 & -134217728;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $e;
  $37 = (($36) + 32|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)>=(0);
  if ($39) {
   $40 = $e;
   $41 = (($40) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)!=(0);
   if ($43) {
    while(1) {
     $44 = $0;
     _emit_byte(0,$44);
     $45 = $e;
     $46 = (($45) + 24|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = (($47) + -1)|0;
     HEAP32[$46>>2] = $48;
     $49 = ($48|0)!=(0);
     if (!($49)) {
      break;
     }
    }
   }
   $50 = $e;
   $51 = (($50) + 32|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + 1)|0;
   $54 = $0;
   _emit_byte($53,$54);
   $55 = $e;
   $56 = (($55) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 1)|0;
   $59 = ($58|0)==(255);
   if ($59) {
    $60 = $0;
    _emit_byte(0,$60);
   }
  }
  $61 = $e;
  $62 = (($61) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $e;
  $65 = (($64) + 24|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($63))|0;
  HEAP32[$65>>2] = $67;
  $68 = $e;
  $69 = (($68) + 20|0);
  HEAP32[$69>>2] = 0;
 } else {
  $70 = $e;
  $71 = (($70) + 32|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72|0)==(0);
  if ($73) {
   $74 = $e;
   $75 = (($74) + 24|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + 1)|0;
   HEAP32[$75>>2] = $77;
  } else {
   $78 = $e;
   $79 = (($78) + 32|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = ($80|0)>=(0);
   if ($81) {
    $82 = $e;
    $83 = (($82) + 24|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)!=(0);
    if ($85) {
     while(1) {
      $86 = $0;
      _emit_byte(0,$86);
      $87 = $e;
      $88 = (($87) + 24|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = (($89) + -1)|0;
      HEAP32[$88>>2] = $90;
      $91 = ($90|0)!=(0);
      if (!($91)) {
       break;
      }
     }
    }
    $92 = $e;
    $93 = (($92) + 32|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = $0;
    _emit_byte($94,$95);
   }
  }
  $96 = $e;
  $97 = (($96) + 20|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = ($98|0)!=(0);
  if ($99) {
   $100 = $e;
   $101 = (($100) + 24|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)!=(0);
   if ($103) {
    while(1) {
     $104 = $0;
     _emit_byte(0,$104);
     $105 = $e;
     $106 = (($105) + 24|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = (($107) + -1)|0;
     HEAP32[$106>>2] = $108;
     $109 = ($108|0)!=(0);
     if (!($109)) {
      break;
     }
    }
   }
   while(1) {
    $110 = $0;
    _emit_byte(255,$110);
    $111 = $0;
    _emit_byte(0,$111);
    $112 = $e;
    $113 = (($112) + 20|0);
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + -1)|0;
    HEAP32[$113>>2] = $115;
    $116 = ($115|0)!=(0);
    if (!($116)) {
     break;
    }
   }
  }
 }
 $117 = $e;
 $118 = (($117) + 12|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = $119 & 134215680;
 $121 = ($120|0)!=(0);
 if (!($121)) {
  STACKTOP = sp;return;
 }
 $122 = $e;
 $123 = (($122) + 24|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)!=(0);
 if ($125) {
  while(1) {
   $126 = $0;
   _emit_byte(0,$126);
   $127 = $e;
   $128 = (($127) + 24|0);
   $129 = HEAP32[$128>>2]|0;
   $130 = (($129) + -1)|0;
   HEAP32[$128>>2] = $130;
   $131 = ($130|0)!=(0);
   if (!($131)) {
    break;
   }
  }
 }
 $132 = $e;
 $133 = (($132) + 12|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $134 >> 19;
 $136 = $135 & 255;
 $137 = $0;
 _emit_byte($136,$137);
 $138 = $e;
 $139 = (($138) + 12|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = $140 >> 19;
 $142 = $141 & 255;
 $143 = ($142|0)==(255);
 if ($143) {
  $144 = $0;
  _emit_byte(0,$144);
 }
 $145 = $e;
 $146 = (($145) + 12|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = $147 & 522240;
 $149 = ($148|0)!=(0);
 if ($149) {
  $150 = $e;
  $151 = (($150) + 12|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $152 >> 11;
  $154 = $153 & 255;
  $155 = $0;
  _emit_byte($154,$155);
  $156 = $e;
  $157 = (($156) + 12|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $158 >> 11;
  $160 = $159 & 255;
  $161 = ($160|0)==(255);
  if ($161) {
   $162 = $0;
   _emit_byte(0,$162);
  }
 }
 STACKTOP = sp;return;
}
function _emit_byte($val,$cinfo) {
 $val = $val|0;
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $val;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $dest = $4;
 $5 = $0;
 $6 = $5&255;
 $7 = $dest;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1|0);
 HEAP32[$7>>2] = $9;
 HEAP8[$8>>0] = $6;
 $10 = $dest;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -1)|0;
 HEAP32[$11>>2] = $13;
 $14 = ($13|0)==(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $dest;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $1;
 $19 = (FUNCTION_TABLE_ii[$17 & 255]($18)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $21 = $1;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 20|0);
  HEAP32[$23>>2] = 25;
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  FUNCTION_TABLE_vi[$26 & 511]($27);
 }
 STACKTOP = sp;return;
}
function _encode_mcu_DC_first($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $blkn = 0, $ci = 0, $entropy = 0, $m = 0, $st = 0, $tbl = 0, $v = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $MCU_data;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 $6 = (($5) + 236|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $entropy;
  $10 = (($9) + 68|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $0;
   $14 = $entropy;
   $15 = (($14) + 72|0);
   $16 = HEAP32[$15>>2]|0;
   _emit_restart($13,$16);
   $17 = $0;
   $18 = (($17) + 236|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $entropy;
   $21 = (($20) + 68|0);
   HEAP32[$21>>2] = $19;
   $22 = $entropy;
   $23 = (($22) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[$23>>2] = $25;
   $26 = $entropy;
   $27 = (($26) + 72|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 & 7;
   HEAP32[$27>>2] = $29;
  }
  $30 = $entropy;
  $31 = (($30) + 68|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + -1)|0;
  HEAP32[$31>>2] = $33;
 }
 $blkn = 0;
 while(1) {
  $34 = $blkn;
  $35 = $0;
  $36 = (($35) + 320|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $blkn;
  $40 = $0;
  $41 = (($40) + 324|0);
  $42 = (($41) + ($39<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $ci = $43;
  $44 = $ci;
  $45 = $0;
  $46 = (($45) + 296|0);
  $47 = (($46) + ($44<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $tbl = $50;
  $51 = $blkn;
  $52 = $1;
  $53 = (($52) + ($51<<2)|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  $57 = $0;
  $58 = (($57) + 376|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $56 >> $59;
  $m = $60;
  $61 = $tbl;
  $62 = $entropy;
  $63 = (($62) + 76|0);
  $64 = (($63) + ($61<<2)|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = $ci;
  $67 = $entropy;
  $68 = (($67) + 52|0);
  $69 = (($68) + ($66<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($65) + ($70)|0);
  $st = $71;
  $72 = $m;
  $73 = $ci;
  $74 = $entropy;
  $75 = (($74) + 36|0);
  $76 = (($75) + ($73<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($72) - ($77))|0;
  $v = $78;
  $79 = ($78|0)==(0);
  if ($79) {
   $80 = $0;
   $81 = $st;
   _arith_encode($80,$81,0);
   $82 = $ci;
   $83 = $entropy;
   $84 = (($83) + 52|0);
   $85 = (($84) + ($82<<2)|0);
   HEAP32[$85>>2] = 0;
  } else {
   $86 = $m;
   $87 = $ci;
   $88 = $entropy;
   $89 = (($88) + 36|0);
   $90 = (($89) + ($87<<2)|0);
   HEAP32[$90>>2] = $86;
   $91 = $0;
   $92 = $st;
   _arith_encode($91,$92,1);
   $93 = $v;
   $94 = ($93|0)>(0);
   if ($94) {
    $95 = $0;
    $96 = $st;
    $97 = (($96) + 1|0);
    _arith_encode($95,$97,0);
    $98 = $st;
    $99 = (($98) + 2|0);
    $st = $99;
    $100 = $ci;
    $101 = $entropy;
    $102 = (($101) + 52|0);
    $103 = (($102) + ($100<<2)|0);
    HEAP32[$103>>2] = 4;
   } else {
    $104 = $v;
    $105 = (0 - ($104))|0;
    $v = $105;
    $106 = $0;
    $107 = $st;
    $108 = (($107) + 1|0);
    _arith_encode($106,$108,1);
    $109 = $st;
    $110 = (($109) + 3|0);
    $st = $110;
    $111 = $ci;
    $112 = $entropy;
    $113 = (($112) + 52|0);
    $114 = (($113) + ($111<<2)|0);
    HEAP32[$114>>2] = 8;
   }
   $m = 0;
   $115 = $v;
   $116 = (($115) - 1)|0;
   $v = $116;
   $117 = ($116|0)!=(0);
   if ($117) {
    $118 = $0;
    $119 = $st;
    _arith_encode($118,$119,1);
    $m = 1;
    $120 = $v;
    $v2 = $120;
    $121 = $tbl;
    $122 = $entropy;
    $123 = (($122) + 76|0);
    $124 = (($123) + ($121<<2)|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = (($125) + 20|0);
    $st = $126;
    while(1) {
     $127 = $v2;
     $128 = $127 >> 1;
     $v2 = $128;
     $129 = ($128|0)!=(0);
     if (!($129)) {
      break;
     }
     $130 = $0;
     $131 = $st;
     _arith_encode($130,$131,1);
     $132 = $m;
     $133 = $132 << 1;
     $m = $133;
     $134 = $st;
     $135 = (($134) + 1|0);
     $st = $135;
    }
   }
   $136 = $0;
   $137 = $st;
   _arith_encode($136,$137,0);
   $138 = $m;
   $139 = $tbl;
   $140 = $0;
   $141 = (($140) + 152|0);
   $142 = (($141) + ($139)|0);
   $143 = HEAP8[$142>>0]|0;
   $144 = $143&255;
   $145 = 1 << $144;
   $146 = $145 >> 1;
   $147 = ($138|0)<($146|0);
   if ($147) {
    $148 = $ci;
    $149 = $entropy;
    $150 = (($149) + 52|0);
    $151 = (($150) + ($148<<2)|0);
    HEAP32[$151>>2] = 0;
   } else {
    $152 = $m;
    $153 = $tbl;
    $154 = $0;
    $155 = (($154) + 168|0);
    $156 = (($155) + ($153)|0);
    $157 = HEAP8[$156>>0]|0;
    $158 = $157&255;
    $159 = 1 << $158;
    $160 = $159 >> 1;
    $161 = ($152|0)>($160|0);
    if ($161) {
     $162 = $ci;
     $163 = $entropy;
     $164 = (($163) + 52|0);
     $165 = (($164) + ($162<<2)|0);
     $166 = HEAP32[$165>>2]|0;
     $167 = (($166) + 8)|0;
     HEAP32[$165>>2] = $167;
    }
   }
   $168 = $st;
   $169 = (($168) + 14|0);
   $st = $169;
   while(1) {
    $170 = $m;
    $171 = $170 >> 1;
    $m = $171;
    $172 = ($171|0)!=(0);
    if (!($172)) {
     break;
    }
    $173 = $0;
    $174 = $st;
    $175 = $m;
    $176 = $v;
    $177 = $175 & $176;
    $178 = ($177|0)!=(0);
    $179 = $178 ? 1 : 0;
    _arith_encode($173,$174,$179);
   }
  }
  $180 = $blkn;
  $181 = (($180) + 1)|0;
  $blkn = $181;
 }
 STACKTOP = sp;return 1;
}
function _encode_mcu_AC_first($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0;
 var $entropy = 0, $k = 0, $ke = 0, $m = 0, $natural_order = 0, $st = 0, $tbl = 0, $v = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $MCU_data;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 $6 = (($5) + 236|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $entropy;
  $10 = (($9) + 68|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $0;
   $14 = $entropy;
   $15 = (($14) + 72|0);
   $16 = HEAP32[$15>>2]|0;
   _emit_restart($13,$16);
   $17 = $0;
   $18 = (($17) + 236|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $entropy;
   $21 = (($20) + 68|0);
   HEAP32[$21>>2] = $19;
   $22 = $entropy;
   $23 = (($22) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[$23>>2] = $25;
   $26 = $entropy;
   $27 = (($26) + 72|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 & 7;
   HEAP32[$27>>2] = $29;
  }
  $30 = $entropy;
  $31 = (($30) + 68|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + -1)|0;
  HEAP32[$31>>2] = $33;
 }
 $34 = $0;
 $35 = (($34) + 384|0);
 $36 = HEAP32[$35>>2]|0;
 $natural_order = $36;
 $37 = $1;
 $38 = HEAP32[$37>>2]|0;
 $block = $38;
 $39 = $0;
 $40 = (($39) + 296|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $tbl = $43;
 $44 = $0;
 $45 = (($44) + 368|0);
 $46 = HEAP32[$45>>2]|0;
 $ke = $46;
 while(1) {
  $47 = $ke;
  $48 = $natural_order;
  $49 = (($48) + ($47<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $block;
  $52 = (($51) + ($50<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $v = $54;
  $55 = ($54|0)>=(0);
  if ($55) {
   $56 = $0;
   $57 = (($56) + 376|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $v;
   $60 = $59 >> $58;
   $v = $60;
   $61 = ($60|0)!=(0);
   if ($61) {
    label = 8;
    break;
   }
  } else {
   $62 = $v;
   $63 = (0 - ($62))|0;
   $v = $63;
   $64 = $0;
   $65 = (($64) + 376|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $v;
   $68 = $67 >> $66;
   $v = $68;
   $69 = ($68|0)!=(0);
   if ($69) {
    label = 11;
    break;
   }
  }
  $70 = $ke;
  $71 = (($70) + -1)|0;
  $ke = $71;
  $72 = ($71|0)!=(0);
  if (!($72)) {
   break;
  }
 }
 if ((label|0) == 8) {
 }
 else if ((label|0) == 11) {
 }
 $73 = $0;
 $74 = (($73) + 364|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($75) - 1)|0;
 $k = $76;
 while(1) {
  $77 = $k;
  $78 = $ke;
  $79 = ($77|0)<($78|0);
  if (!($79)) {
   break;
  }
  $80 = $tbl;
  $81 = $entropy;
  $82 = (($81) + 140|0);
  $83 = (($82) + ($80<<2)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $k;
  $86 = ($85*3)|0;
  $87 = (($84) + ($86)|0);
  $st = $87;
  $88 = $0;
  $89 = $st;
  _arith_encode($88,$89,0);
  while(1) {
   $90 = $k;
   $91 = (($90) + 1)|0;
   $k = $91;
   $92 = $natural_order;
   $93 = (($92) + ($91<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $block;
   $96 = (($95) + ($94<<1)|0);
   $97 = HEAP16[$96>>1]|0;
   $98 = $97 << 16 >> 16;
   $v = $98;
   $99 = ($98|0)>=(0);
   if ($99) {
    $100 = $0;
    $101 = (($100) + 376|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $v;
    $104 = $103 >> $102;
    $v = $104;
    $105 = ($104|0)!=(0);
    if ($105) {
     label = 20;
     break;
    }
   } else {
    $112 = $v;
    $113 = (0 - ($112))|0;
    $v = $113;
    $114 = $0;
    $115 = (($114) + 376|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $v;
    $118 = $117 >> $116;
    $v = $118;
    $119 = ($118|0)!=(0);
    if ($119) {
     label = 23;
     break;
    }
   }
   $126 = $0;
   $127 = $st;
   $128 = (($127) + 1|0);
   _arith_encode($126,$128,0);
   $129 = $st;
   $130 = (($129) + 3|0);
   $st = $130;
  }
  if ((label|0) == 20) {
   label = 0;
   $106 = $0;
   $107 = $st;
   $108 = (($107) + 1|0);
   _arith_encode($106,$108,1);
   $109 = $0;
   $110 = $entropy;
   $111 = (($110) + 204|0);
   _arith_encode($109,$111,0);
  }
  else if ((label|0) == 23) {
   label = 0;
   $120 = $0;
   $121 = $st;
   $122 = (($121) + 1|0);
   _arith_encode($120,$122,1);
   $123 = $0;
   $124 = $entropy;
   $125 = (($124) + 204|0);
   _arith_encode($123,$125,1);
  }
  $131 = $st;
  $132 = (($131) + 2|0);
  $st = $132;
  $m = 0;
  $133 = $v;
  $134 = (($133) - 1)|0;
  $v = $134;
  $135 = ($134|0)!=(0);
  if ($135) {
   $136 = $0;
   $137 = $st;
   _arith_encode($136,$137,1);
   $m = 1;
   $138 = $v;
   $v2 = $138;
   $139 = $v2;
   $140 = $139 >> 1;
   $v2 = $140;
   $141 = ($140|0)!=(0);
   if ($141) {
    $142 = $0;
    $143 = $st;
    _arith_encode($142,$143,1);
    $144 = $m;
    $145 = $144 << 1;
    $m = $145;
    $146 = $tbl;
    $147 = $entropy;
    $148 = (($147) + 140|0);
    $149 = (($148) + ($146<<2)|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = $k;
    $152 = $tbl;
    $153 = $0;
    $154 = (($153) + 184|0);
    $155 = (($154) + ($152)|0);
    $156 = HEAP8[$155>>0]|0;
    $157 = $156&255;
    $158 = ($151|0)<=($157|0);
    $159 = $158 ? 189 : 217;
    $160 = (($150) + ($159)|0);
    $st = $160;
    while(1) {
     $161 = $v2;
     $162 = $161 >> 1;
     $v2 = $162;
     $163 = ($162|0)!=(0);
     if (!($163)) {
      break;
     }
     $164 = $0;
     $165 = $st;
     _arith_encode($164,$165,1);
     $166 = $m;
     $167 = $166 << 1;
     $m = $167;
     $168 = $st;
     $169 = (($168) + 1|0);
     $st = $169;
    }
   }
  }
  $170 = $0;
  $171 = $st;
  _arith_encode($170,$171,0);
  $172 = $st;
  $173 = (($172) + 14|0);
  $st = $173;
  while(1) {
   $174 = $m;
   $175 = $174 >> 1;
   $m = $175;
   $176 = ($175|0)!=(0);
   if (!($176)) {
    break;
   }
   $177 = $0;
   $178 = $st;
   $179 = $m;
   $180 = $v;
   $181 = $179 & $180;
   $182 = ($181|0)!=(0);
   $183 = $182 ? 1 : 0;
   _arith_encode($177,$178,$183);
  }
 }
 $184 = $k;
 $185 = $0;
 $186 = (($185) + 368|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = ($184|0)<($187|0);
 if (!($188)) {
  STACKTOP = sp;return 1;
 }
 $189 = $tbl;
 $190 = $entropy;
 $191 = (($190) + 140|0);
 $192 = (($191) + ($189<<2)|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = $k;
 $195 = ($194*3)|0;
 $196 = (($193) + ($195)|0);
 $st = $196;
 $197 = $0;
 $198 = $st;
 _arith_encode($197,$198,1);
 STACKTOP = sp;return 1;
}
function _encode_mcu_DC_refine($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $Al = 0, $blkn = 0, $entropy = 0;
 var $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $MCU_data;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 $6 = (($5) + 236|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $entropy;
  $10 = (($9) + 68|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $0;
   $14 = $entropy;
   $15 = (($14) + 72|0);
   $16 = HEAP32[$15>>2]|0;
   _emit_restart($13,$16);
   $17 = $0;
   $18 = (($17) + 236|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $entropy;
   $21 = (($20) + 68|0);
   HEAP32[$21>>2] = $19;
   $22 = $entropy;
   $23 = (($22) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[$23>>2] = $25;
   $26 = $entropy;
   $27 = (($26) + 72|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 & 7;
   HEAP32[$27>>2] = $29;
  }
  $30 = $entropy;
  $31 = (($30) + 68|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + -1)|0;
  HEAP32[$31>>2] = $33;
 }
 $34 = $entropy;
 $35 = (($34) + 204|0);
 $st = $35;
 $36 = $0;
 $37 = (($36) + 376|0);
 $38 = HEAP32[$37>>2]|0;
 $Al = $38;
 $blkn = 0;
 while(1) {
  $39 = $blkn;
  $40 = $0;
  $41 = (($40) + 320|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($39|0)<($42|0);
  if (!($43)) {
   break;
  }
  $44 = $0;
  $45 = $st;
  $46 = $blkn;
  $47 = $1;
  $48 = (($47) + ($46<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = HEAP16[$49>>1]|0;
  $51 = $50 << 16 >> 16;
  $52 = $Al;
  $53 = $51 >> $52;
  $54 = $53 & 1;
  _arith_encode($44,$45,$54);
  $55 = $blkn;
  $56 = (($55) + 1)|0;
  $blkn = $56;
 }
 STACKTOP = sp;return 1;
}
function _encode_mcu_AC_refine($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0, $entropy = 0, $k = 0, $ke = 0, $kex = 0, $natural_order = 0, $st = 0;
 var $tbl = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $MCU_data;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 $6 = (($5) + 236|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $entropy;
  $10 = (($9) + 68|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $0;
   $14 = $entropy;
   $15 = (($14) + 72|0);
   $16 = HEAP32[$15>>2]|0;
   _emit_restart($13,$16);
   $17 = $0;
   $18 = (($17) + 236|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $entropy;
   $21 = (($20) + 68|0);
   HEAP32[$21>>2] = $19;
   $22 = $entropy;
   $23 = (($22) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[$23>>2] = $25;
   $26 = $entropy;
   $27 = (($26) + 72|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 & 7;
   HEAP32[$27>>2] = $29;
  }
  $30 = $entropy;
  $31 = (($30) + 68|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + -1)|0;
  HEAP32[$31>>2] = $33;
 }
 $34 = $0;
 $35 = (($34) + 384|0);
 $36 = HEAP32[$35>>2]|0;
 $natural_order = $36;
 $37 = $1;
 $38 = HEAP32[$37>>2]|0;
 $block = $38;
 $39 = $0;
 $40 = (($39) + 296|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + 24|0);
 $43 = HEAP32[$42>>2]|0;
 $tbl = $43;
 $44 = $0;
 $45 = (($44) + 368|0);
 $46 = HEAP32[$45>>2]|0;
 $ke = $46;
 while(1) {
  $47 = $ke;
  $48 = $natural_order;
  $49 = (($48) + ($47<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $block;
  $52 = (($51) + ($50<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $v = $54;
  $55 = ($54|0)>=(0);
  if ($55) {
   $56 = $0;
   $57 = (($56) + 376|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $v;
   $60 = $59 >> $58;
   $v = $60;
   $61 = ($60|0)!=(0);
   if ($61) {
    label = 8;
    break;
   }
  } else {
   $62 = $v;
   $63 = (0 - ($62))|0;
   $v = $63;
   $64 = $0;
   $65 = (($64) + 376|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $v;
   $68 = $67 >> $66;
   $v = $68;
   $69 = ($68|0)!=(0);
   if ($69) {
    label = 11;
    break;
   }
  }
  $70 = $ke;
  $71 = (($70) + -1)|0;
  $ke = $71;
  $72 = ($71|0)!=(0);
  if (!($72)) {
   break;
  }
 }
 if ((label|0) == 8) {
 }
 else if ((label|0) == 11) {
 }
 $73 = $ke;
 $kex = $73;
 while(1) {
  $74 = $kex;
  $75 = ($74|0)>(0);
  if (!($75)) {
   break;
  }
  $76 = $kex;
  $77 = $natural_order;
  $78 = (($77) + ($76<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $block;
  $81 = (($80) + ($79<<1)|0);
  $82 = HEAP16[$81>>1]|0;
  $83 = $82 << 16 >> 16;
  $v = $83;
  $84 = ($83|0)>=(0);
  if ($84) {
   $85 = $0;
   $86 = (($85) + 372|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $v;
   $89 = $88 >> $87;
   $v = $89;
   $90 = ($89|0)!=(0);
   if ($90) {
    label = 19;
    break;
   }
  } else {
   $91 = $v;
   $92 = (0 - ($91))|0;
   $v = $92;
   $93 = $0;
   $94 = (($93) + 372|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $v;
   $97 = $96 >> $95;
   $v = $97;
   $98 = ($97|0)!=(0);
   if ($98) {
    label = 22;
    break;
   }
  }
  $99 = $kex;
  $100 = (($99) + -1)|0;
  $kex = $100;
 }
 if ((label|0) == 19) {
 }
 else if ((label|0) == 22) {
 }
 $101 = $0;
 $102 = (($101) + 364|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($103) - 1)|0;
 $k = $104;
 while(1) {
  $105 = $k;
  $106 = $ke;
  $107 = ($105|0)<($106|0);
  if (!($107)) {
   break;
  }
  $108 = $tbl;
  $109 = $entropy;
  $110 = (($109) + 140|0);
  $111 = (($110) + ($108<<2)|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = $k;
  $114 = ($113*3)|0;
  $115 = (($112) + ($114)|0);
  $st = $115;
  $116 = $k;
  $117 = $kex;
  $118 = ($116|0)>=($117|0);
  if ($118) {
   $119 = $0;
   $120 = $st;
   _arith_encode($119,$120,0);
  }
  while(1) {
   $121 = $k;
   $122 = (($121) + 1)|0;
   $k = $122;
   $123 = $natural_order;
   $124 = (($123) + ($122<<2)|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $block;
   $127 = (($126) + ($125<<1)|0);
   $128 = HEAP16[$127>>1]|0;
   $129 = $128 << 16 >> 16;
   $v = $129;
   $130 = ($129|0)>=(0);
   if ($130) {
    $131 = $0;
    $132 = (($131) + 376|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = $v;
    $135 = $134 >> $133;
    $v = $135;
    $136 = ($135|0)!=(0);
    if ($136) {
     label = 33;
     break;
    }
   } else {
    $151 = $v;
    $152 = (0 - ($151))|0;
    $v = $152;
    $153 = $0;
    $154 = (($153) + 376|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = $v;
    $157 = $156 >> $155;
    $v = $157;
    $158 = ($157|0)!=(0);
    if ($158) {
     label = 39;
     break;
    }
   }
   $173 = $0;
   $174 = $st;
   $175 = (($174) + 1|0);
   _arith_encode($173,$175,0);
   $176 = $st;
   $177 = (($176) + 3|0);
   $st = $177;
  }
  if ((label|0) == 33) {
   label = 0;
   $137 = $v;
   $138 = $137 >> 1;
   $139 = ($138|0)!=(0);
   if ($139) {
    $140 = $0;
    $141 = $st;
    $142 = (($141) + 2|0);
    $143 = $v;
    $144 = $143 & 1;
    _arith_encode($140,$142,$144);
   } else {
    $145 = $0;
    $146 = $st;
    $147 = (($146) + 1|0);
    _arith_encode($145,$147,1);
    $148 = $0;
    $149 = $entropy;
    $150 = (($149) + 204|0);
    _arith_encode($148,$150,0);
   }
  }
  else if ((label|0) == 39) {
   label = 0;
   $159 = $v;
   $160 = $159 >> 1;
   $161 = ($160|0)!=(0);
   if ($161) {
    $162 = $0;
    $163 = $st;
    $164 = (($163) + 2|0);
    $165 = $v;
    $166 = $165 & 1;
    _arith_encode($162,$164,$166);
   } else {
    $167 = $0;
    $168 = $st;
    $169 = (($168) + 1|0);
    _arith_encode($167,$169,1);
    $170 = $0;
    $171 = $entropy;
    $172 = (($171) + 204|0);
    _arith_encode($170,$172,1);
   }
  }
 }
 $178 = $k;
 $179 = $0;
 $180 = (($179) + 368|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = ($178|0)<($181|0);
 if (!($182)) {
  STACKTOP = sp;return 1;
 }
 $183 = $tbl;
 $184 = $entropy;
 $185 = (($184) + 140|0);
 $186 = (($185) + ($183<<2)|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = $k;
 $189 = ($188*3)|0;
 $190 = (($187) + ($189)|0);
 $st = $190;
 $191 = $0;
 $192 = $st;
 _arith_encode($191,$192,1);
 STACKTOP = sp;return 1;
}
function _encode_mcu($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blkn = 0, $block = 0, $ci = 0, $compptr = 0, $entropy = 0, $k = 0, $ke = 0, $m = 0, $natural_order = 0;
 var $st = 0, $tbl = 0, $v = 0, $v2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $MCU_data;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 $6 = (($5) + 236|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $entropy;
  $10 = (($9) + 68|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $0;
   $14 = $entropy;
   $15 = (($14) + 72|0);
   $16 = HEAP32[$15>>2]|0;
   _emit_restart($13,$16);
   $17 = $0;
   $18 = (($17) + 236|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $entropy;
   $21 = (($20) + 68|0);
   HEAP32[$21>>2] = $19;
   $22 = $entropy;
   $23 = (($22) + 72|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 1)|0;
   HEAP32[$23>>2] = $25;
   $26 = $entropy;
   $27 = (($26) + 72|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $28 & 7;
   HEAP32[$27>>2] = $29;
  }
  $30 = $entropy;
  $31 = (($30) + 68|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + -1)|0;
  HEAP32[$31>>2] = $33;
 }
 $34 = $0;
 $35 = (($34) + 384|0);
 $36 = HEAP32[$35>>2]|0;
 $natural_order = $36;
 $blkn = 0;
 while(1) {
  $37 = $blkn;
  $38 = $0;
  $39 = (($38) + 320|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($37|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $blkn;
  $43 = $1;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $block = $45;
  $46 = $blkn;
  $47 = $0;
  $48 = (($47) + 324|0);
  $49 = (($48) + ($46<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $ci = $50;
  $51 = $ci;
  $52 = $0;
  $53 = (($52) + 296|0);
  $54 = (($53) + ($51<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $compptr = $55;
  $56 = $compptr;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $tbl = $58;
  $59 = $tbl;
  $60 = $entropy;
  $61 = (($60) + 76|0);
  $62 = (($61) + ($59<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $ci;
  $65 = $entropy;
  $66 = (($65) + 52|0);
  $67 = (($66) + ($64<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($63) + ($68)|0);
  $st = $69;
  $70 = $block;
  $71 = HEAP16[$70>>1]|0;
  $72 = $71 << 16 >> 16;
  $73 = $ci;
  $74 = $entropy;
  $75 = (($74) + 36|0);
  $76 = (($75) + ($73<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($72) - ($77))|0;
  $v = $78;
  $79 = ($78|0)==(0);
  if ($79) {
   $80 = $0;
   $81 = $st;
   _arith_encode($80,$81,0);
   $82 = $ci;
   $83 = $entropy;
   $84 = (($83) + 52|0);
   $85 = (($84) + ($82<<2)|0);
   HEAP32[$85>>2] = 0;
  } else {
   $86 = $block;
   $87 = HEAP16[$86>>1]|0;
   $88 = $87 << 16 >> 16;
   $89 = $ci;
   $90 = $entropy;
   $91 = (($90) + 36|0);
   $92 = (($91) + ($89<<2)|0);
   HEAP32[$92>>2] = $88;
   $93 = $0;
   $94 = $st;
   _arith_encode($93,$94,1);
   $95 = $v;
   $96 = ($95|0)>(0);
   if ($96) {
    $97 = $0;
    $98 = $st;
    $99 = (($98) + 1|0);
    _arith_encode($97,$99,0);
    $100 = $st;
    $101 = (($100) + 2|0);
    $st = $101;
    $102 = $ci;
    $103 = $entropy;
    $104 = (($103) + 52|0);
    $105 = (($104) + ($102<<2)|0);
    HEAP32[$105>>2] = 4;
   } else {
    $106 = $v;
    $107 = (0 - ($106))|0;
    $v = $107;
    $108 = $0;
    $109 = $st;
    $110 = (($109) + 1|0);
    _arith_encode($108,$110,1);
    $111 = $st;
    $112 = (($111) + 3|0);
    $st = $112;
    $113 = $ci;
    $114 = $entropy;
    $115 = (($114) + 52|0);
    $116 = (($115) + ($113<<2)|0);
    HEAP32[$116>>2] = 8;
   }
   $m = 0;
   $117 = $v;
   $118 = (($117) - 1)|0;
   $v = $118;
   $119 = ($118|0)!=(0);
   if ($119) {
    $120 = $0;
    $121 = $st;
    _arith_encode($120,$121,1);
    $m = 1;
    $122 = $v;
    $v2 = $122;
    $123 = $tbl;
    $124 = $entropy;
    $125 = (($124) + 76|0);
    $126 = (($125) + ($123<<2)|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (($127) + 20|0);
    $st = $128;
    while(1) {
     $129 = $v2;
     $130 = $129 >> 1;
     $v2 = $130;
     $131 = ($130|0)!=(0);
     if (!($131)) {
      break;
     }
     $132 = $0;
     $133 = $st;
     _arith_encode($132,$133,1);
     $134 = $m;
     $135 = $134 << 1;
     $m = $135;
     $136 = $st;
     $137 = (($136) + 1|0);
     $st = $137;
    }
   }
   $138 = $0;
   $139 = $st;
   _arith_encode($138,$139,0);
   $140 = $m;
   $141 = $tbl;
   $142 = $0;
   $143 = (($142) + 152|0);
   $144 = (($143) + ($141)|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = $145&255;
   $147 = 1 << $146;
   $148 = $147 >> 1;
   $149 = ($140|0)<($148|0);
   if ($149) {
    $150 = $ci;
    $151 = $entropy;
    $152 = (($151) + 52|0);
    $153 = (($152) + ($150<<2)|0);
    HEAP32[$153>>2] = 0;
   } else {
    $154 = $m;
    $155 = $tbl;
    $156 = $0;
    $157 = (($156) + 168|0);
    $158 = (($157) + ($155)|0);
    $159 = HEAP8[$158>>0]|0;
    $160 = $159&255;
    $161 = 1 << $160;
    $162 = $161 >> 1;
    $163 = ($154|0)>($162|0);
    if ($163) {
     $164 = $ci;
     $165 = $entropy;
     $166 = (($165) + 52|0);
     $167 = (($166) + ($164<<2)|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($168) + 8)|0;
     HEAP32[$167>>2] = $169;
    }
   }
   $170 = $st;
   $171 = (($170) + 14|0);
   $st = $171;
   while(1) {
    $172 = $m;
    $173 = $172 >> 1;
    $m = $173;
    $174 = ($173|0)!=(0);
    if (!($174)) {
     break;
    }
    $175 = $0;
    $176 = $st;
    $177 = $m;
    $178 = $v;
    $179 = $177 & $178;
    $180 = ($179|0)!=(0);
    $181 = $180 ? 1 : 0;
    _arith_encode($175,$176,$181);
   }
  }
  $182 = $0;
  $183 = (($182) + 388|0);
  $184 = HEAP32[$183>>2]|0;
  $ke = $184;
  $185 = ($184|0)==(0);
  if ($185) {
  } else {
   $186 = $compptr;
   $187 = (($186) + 24|0);
   $188 = HEAP32[$187>>2]|0;
   $tbl = $188;
   while(1) {
    $189 = $ke;
    $190 = $natural_order;
    $191 = (($190) + ($189<<2)|0);
    $192 = HEAP32[$191>>2]|0;
    $193 = $block;
    $194 = (($193) + ($192<<1)|0);
    $195 = HEAP16[$194>>1]|0;
    $196 = ($195<<16>>16)!=(0);
    if ($196) {
     label = 30;
     break;
    }
    $197 = $ke;
    $198 = (($197) + -1)|0;
    $ke = $198;
    $199 = ($198|0)!=(0);
    if (!($199)) {
     break;
    }
   }
   if ((label|0) == 30) {
    label = 0;
   }
   $k = 0;
   while(1) {
    $200 = $k;
    $201 = $ke;
    $202 = ($200|0)<($201|0);
    if (!($202)) {
     break;
    }
    $203 = $tbl;
    $204 = $entropy;
    $205 = (($204) + 140|0);
    $206 = (($205) + ($203<<2)|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = $k;
    $209 = ($208*3)|0;
    $210 = (($207) + ($209)|0);
    $st = $210;
    $211 = $0;
    $212 = $st;
    _arith_encode($211,$212,0);
    while(1) {
     $213 = $k;
     $214 = (($213) + 1)|0;
     $k = $214;
     $215 = $natural_order;
     $216 = (($215) + ($214<<2)|0);
     $217 = HEAP32[$216>>2]|0;
     $218 = $block;
     $219 = (($218) + ($217<<1)|0);
     $220 = HEAP16[$219>>1]|0;
     $221 = $220 << 16 >> 16;
     $v = $221;
     $222 = ($221|0)==(0);
     if (!($222)) {
      break;
     }
     $223 = $0;
     $224 = $st;
     $225 = (($224) + 1|0);
     _arith_encode($223,$225,0);
     $226 = $st;
     $227 = (($226) + 3|0);
     $st = $227;
    }
    $228 = $0;
    $229 = $st;
    $230 = (($229) + 1|0);
    _arith_encode($228,$230,1);
    $231 = $v;
    $232 = ($231|0)>(0);
    if ($232) {
     $233 = $0;
     $234 = $entropy;
     $235 = (($234) + 204|0);
     _arith_encode($233,$235,0);
    } else {
     $236 = $v;
     $237 = (0 - ($236))|0;
     $v = $237;
     $238 = $0;
     $239 = $entropy;
     $240 = (($239) + 204|0);
     _arith_encode($238,$240,1);
    }
    $241 = $st;
    $242 = (($241) + 2|0);
    $st = $242;
    $m = 0;
    $243 = $v;
    $244 = (($243) - 1)|0;
    $v = $244;
    $245 = ($244|0)!=(0);
    if ($245) {
     $246 = $0;
     $247 = $st;
     _arith_encode($246,$247,1);
     $m = 1;
     $248 = $v;
     $v2 = $248;
     $249 = $v2;
     $250 = $249 >> 1;
     $v2 = $250;
     $251 = ($250|0)!=(0);
     if ($251) {
      $252 = $0;
      $253 = $st;
      _arith_encode($252,$253,1);
      $254 = $m;
      $255 = $254 << 1;
      $m = $255;
      $256 = $tbl;
      $257 = $entropy;
      $258 = (($257) + 140|0);
      $259 = (($258) + ($256<<2)|0);
      $260 = HEAP32[$259>>2]|0;
      $261 = $k;
      $262 = $tbl;
      $263 = $0;
      $264 = (($263) + 184|0);
      $265 = (($264) + ($262)|0);
      $266 = HEAP8[$265>>0]|0;
      $267 = $266&255;
      $268 = ($261|0)<=($267|0);
      $269 = $268 ? 189 : 217;
      $270 = (($260) + ($269)|0);
      $st = $270;
      while(1) {
       $271 = $v2;
       $272 = $271 >> 1;
       $v2 = $272;
       $273 = ($272|0)!=(0);
       if (!($273)) {
        break;
       }
       $274 = $0;
       $275 = $st;
       _arith_encode($274,$275,1);
       $276 = $m;
       $277 = $276 << 1;
       $m = $277;
       $278 = $st;
       $279 = (($278) + 1|0);
       $st = $279;
      }
     }
    }
    $280 = $0;
    $281 = $st;
    _arith_encode($280,$281,0);
    $282 = $st;
    $283 = (($282) + 14|0);
    $st = $283;
    while(1) {
     $284 = $m;
     $285 = $284 >> 1;
     $m = $285;
     $286 = ($285|0)!=(0);
     if (!($286)) {
      break;
     }
     $287 = $0;
     $288 = $st;
     $289 = $m;
     $290 = $v;
     $291 = $289 & $290;
     $292 = ($291|0)!=(0);
     $293 = $292 ? 1 : 0;
     _arith_encode($287,$288,$293);
    }
   }
   $294 = $k;
   $295 = $0;
   $296 = (($295) + 388|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)<($297|0);
   if ($298) {
    $299 = $tbl;
    $300 = $entropy;
    $301 = (($300) + 140|0);
    $302 = (($301) + ($299<<2)|0);
    $303 = HEAP32[$302>>2]|0;
    $304 = $k;
    $305 = ($304*3)|0;
    $306 = (($303) + ($305)|0);
    $st = $306;
    $307 = $0;
    $308 = $st;
    _arith_encode($307,$308,1);
   }
  }
  $309 = $blkn;
  $310 = (($309) + 1)|0;
  $blkn = $310;
 }
 STACKTOP = sp;return 1;
}
function _emit_restart($cinfo,$restart_num) {
 $cinfo = $cinfo|0;
 $restart_num = $restart_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $compptr = 0, $entropy = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $restart_num;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 _finish_pass($5);
 $6 = $0;
 _emit_byte(255,$6);
 $7 = $1;
 $8 = (208 + ($7))|0;
 $9 = $0;
 _emit_byte($8,$9);
 $ci = 0;
 while(1) {
  $10 = $ci;
  $11 = $0;
  $12 = (($11) + 292|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $ci;
  $16 = $0;
  $17 = (($16) + 296|0);
  $18 = (($17) + ($15<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $compptr = $19;
  $20 = $0;
  $21 = (($20) + 364|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)==(0);
  if ($23) {
   $24 = $0;
   $25 = (($24) + 372|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0);
   if ($27) {
    $28 = $compptr;
    $29 = (($28) + 20|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = $entropy;
    $32 = (($31) + 76|0);
    $33 = (($32) + ($30<<2)|0);
    $34 = HEAP32[$33>>2]|0;
    dest=$34+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $35 = $ci;
    $36 = $entropy;
    $37 = (($36) + 36|0);
    $38 = (($37) + ($35<<2)|0);
    HEAP32[$38>>2] = 0;
    $39 = $ci;
    $40 = $entropy;
    $41 = (($40) + 52|0);
    $42 = (($41) + ($39<<2)|0);
    HEAP32[$42>>2] = 0;
   }
  }
  $43 = $0;
  $44 = (($43) + 368|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)!=(0);
  if ($46) {
   $47 = $compptr;
   $48 = (($47) + 24|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $entropy;
   $51 = (($50) + 140|0);
   $52 = (($51) + ($49<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   _memset(($53|0),0,256)|0;
  }
  $54 = $ci;
  $55 = (($54) + 1)|0;
  $ci = $55;
 }
 $56 = $entropy;
 $57 = (($56) + 12|0);
 HEAP32[$57>>2] = 0;
 $58 = $entropy;
 $59 = (($58) + 16|0);
 HEAP32[$59>>2] = 65536;
 $60 = $entropy;
 $61 = (($60) + 20|0);
 HEAP32[$61>>2] = 0;
 $62 = $entropy;
 $63 = (($62) + 24|0);
 HEAP32[$63>>2] = 0;
 $64 = $entropy;
 $65 = (($64) + 28|0);
 HEAP32[$65>>2] = 11;
 $66 = $entropy;
 $67 = (($66) + 32|0);
 HEAP32[$67>>2] = -1;
 STACKTOP = sp;return;
}
function _arith_encode($cinfo,$st,$val) {
 $cinfo = $cinfo|0;
 $st = $st|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $e = 0, $nl = 0, $nm = 0, $qe = 0, $sv = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $st;
 $2 = $val;
 $3 = $0;
 $4 = (($3) + 424|0);
 $5 = HEAP32[$4>>2]|0;
 $e = $5;
 $6 = $1;
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $sv = $8;
 $9 = $sv;
 $10 = $9 & 127;
 $11 = (272 + ($10<<2)|0);
 $12 = HEAPU8[$11>>0]|(HEAPU8[$11+1>>0]<<8)|(HEAPU8[$11+2>>0]<<16)|(HEAPU8[$11+3>>0]<<24);
 $qe = $12;
 $13 = $qe;
 $14 = $13 & 255;
 $15 = $14&255;
 $nl = $15;
 $16 = $qe;
 $17 = $16 >> 8;
 $qe = $17;
 $18 = $qe;
 $19 = $18 & 255;
 $20 = $19&255;
 $nm = $20;
 $21 = $qe;
 $22 = $21 >> 8;
 $qe = $22;
 $23 = $qe;
 $24 = $e;
 $25 = (($24) + 16|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) - ($23))|0;
 HEAP32[$25>>2] = $27;
 $28 = $2;
 $29 = $sv;
 $30 = $29 >> 7;
 $31 = ($28|0)!=($30|0);
 if ($31) {
  $32 = $e;
  $33 = (($32) + 16|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $qe;
  $36 = ($34|0)>=($35|0);
  if ($36) {
   $37 = $e;
   $38 = (($37) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $e;
   $41 = (($40) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + ($39))|0;
   HEAP32[$41>>2] = $43;
   $44 = $qe;
   $45 = $e;
   $46 = (($45) + 16|0);
   HEAP32[$46>>2] = $44;
  }
  $47 = $sv;
  $48 = $47 & 128;
  $49 = $nl;
  $50 = $49&255;
  $51 = $48 ^ $50;
  $52 = $51&255;
  $53 = $1;
  HEAP8[$53>>0] = $52;
 } else {
  $54 = $e;
  $55 = (($54) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)>=(32768);
  if ($57) {
   STACKTOP = sp;return;
  }
  $58 = $e;
  $59 = (($58) + 16|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $qe;
  $62 = ($60|0)<($61|0);
  if ($62) {
   $63 = $e;
   $64 = (($63) + 16|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $e;
   $67 = (($66) + 12|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + ($65))|0;
   HEAP32[$67>>2] = $69;
   $70 = $qe;
   $71 = $e;
   $72 = (($71) + 16|0);
   HEAP32[$72>>2] = $70;
  }
  $73 = $sv;
  $74 = $73 & 128;
  $75 = $nm;
  $76 = $75&255;
  $77 = $74 ^ $76;
  $78 = $77&255;
  $79 = $1;
  HEAP8[$79>>0] = $78;
 }
 while(1) {
  $80 = $e;
  $81 = (($80) + 16|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $82 << 1;
  HEAP32[$81>>2] = $83;
  $84 = $e;
  $85 = (($84) + 12|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $86 << 1;
  HEAP32[$85>>2] = $87;
  $88 = $e;
  $89 = (($88) + 28|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + -1)|0;
  HEAP32[$89>>2] = $91;
  $92 = ($91|0)==(0);
  if ($92) {
   $93 = $e;
   $94 = (($93) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $95 >> 19;
   $temp = $96;
   $97 = $temp;
   $98 = ($97|0)>(255);
   if ($98) {
    $99 = $e;
    $100 = (($99) + 32|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = ($101|0)>=(0);
    if ($102) {
     $103 = $e;
     $104 = (($103) + 24|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105|0)!=(0);
     if ($106) {
      while(1) {
       $107 = $0;
       _emit_byte(0,$107);
       $108 = $e;
       $109 = (($108) + 24|0);
       $110 = HEAP32[$109>>2]|0;
       $111 = (($110) + -1)|0;
       HEAP32[$109>>2] = $111;
       $112 = ($111|0)!=(0);
       if (!($112)) {
        break;
       }
      }
     }
     $113 = $e;
     $114 = (($113) + 32|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + 1)|0;
     $117 = $0;
     _emit_byte($116,$117);
     $118 = $e;
     $119 = (($118) + 32|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = (($120) + 1)|0;
     $122 = ($121|0)==(255);
     if ($122) {
      $123 = $0;
      _emit_byte(0,$123);
     }
    }
    $124 = $e;
    $125 = (($124) + 20|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $e;
    $128 = (($127) + 24|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + ($126))|0;
    HEAP32[$128>>2] = $130;
    $131 = $e;
    $132 = (($131) + 20|0);
    HEAP32[$132>>2] = 0;
    $133 = $temp;
    $134 = $133 & 255;
    $135 = $e;
    $136 = (($135) + 32|0);
    HEAP32[$136>>2] = $134;
   } else {
    $137 = $temp;
    $138 = ($137|0)==(255);
    if ($138) {
     $139 = $e;
     $140 = (($139) + 20|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (($141) + 1)|0;
     HEAP32[$140>>2] = $142;
    } else {
     $143 = $e;
     $144 = (($143) + 32|0);
     $145 = HEAP32[$144>>2]|0;
     $146 = ($145|0)==(0);
     if ($146) {
      $147 = $e;
      $148 = (($147) + 24|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (($149) + 1)|0;
      HEAP32[$148>>2] = $150;
     } else {
      $151 = $e;
      $152 = (($151) + 32|0);
      $153 = HEAP32[$152>>2]|0;
      $154 = ($153|0)>=(0);
      if ($154) {
       $155 = $e;
       $156 = (($155) + 24|0);
       $157 = HEAP32[$156>>2]|0;
       $158 = ($157|0)!=(0);
       if ($158) {
        while(1) {
         $159 = $0;
         _emit_byte(0,$159);
         $160 = $e;
         $161 = (($160) + 24|0);
         $162 = HEAP32[$161>>2]|0;
         $163 = (($162) + -1)|0;
         HEAP32[$161>>2] = $163;
         $164 = ($163|0)!=(0);
         if (!($164)) {
          break;
         }
        }
       }
       $165 = $e;
       $166 = (($165) + 32|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = $0;
       _emit_byte($167,$168);
      }
     }
     $169 = $e;
     $170 = (($169) + 20|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = ($171|0)!=(0);
     if ($172) {
      $173 = $e;
      $174 = (($173) + 24|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)!=(0);
      if ($176) {
       while(1) {
        $177 = $0;
        _emit_byte(0,$177);
        $178 = $e;
        $179 = (($178) + 24|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = (($180) + -1)|0;
        HEAP32[$179>>2] = $181;
        $182 = ($181|0)!=(0);
        if (!($182)) {
         break;
        }
       }
      }
      while(1) {
       $183 = $0;
       _emit_byte(255,$183);
       $184 = $0;
       _emit_byte(0,$184);
       $185 = $e;
       $186 = (($185) + 20|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = (($187) + -1)|0;
       HEAP32[$186>>2] = $188;
       $189 = ($188|0)!=(0);
       if (!($189)) {
        break;
       }
      }
     }
     $190 = $temp;
     $191 = $190 & 255;
     $192 = $e;
     $193 = (($192) + 32|0);
     HEAP32[$193>>2] = $191;
    }
   }
   $194 = $e;
   $195 = (($194) + 12|0);
   $196 = HEAP32[$195>>2]|0;
   $197 = $196 & 524287;
   HEAP32[$195>>2] = $197;
   $198 = $e;
   $199 = (($198) + 28|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($200) + 8)|0;
   HEAP32[$199>>2] = $201;
  }
  $202 = $e;
  $203 = (($202) + 16|0);
  $204 = HEAP32[$203>>2]|0;
  $205 = ($204|0)<(32768);
  if (!($205)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _jinit_c_coef_controller($cinfo,$need_full_buffer) {
 $cinfo = $cinfo|0;
 $need_full_buffer = $need_full_buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $buffer = 0, $ci = 0, $coef = 0, $compptr = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $need_full_buffer;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = (FUNCTION_TABLE_iiii[$5 & 511]($6,1,104)|0);
 $coef = $7;
 $8 = $coef;
 $9 = $0;
 $10 = (($9) + 404|0);
 HEAP32[$10>>2] = $8;
 $11 = $coef;
 HEAP32[$11>>2] = 52;
 $12 = $1;
 $13 = ($12|0)!=(0);
 if ($13) {
  $ci = 0;
  $14 = $0;
  $15 = (($14) + 84|0);
  $16 = HEAP32[$15>>2]|0;
  $compptr = $16;
  while(1) {
   $17 = $ci;
   $18 = $0;
   $19 = (($18) + 76|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($17|0)<($20|0);
   if (!($21)) {
    break;
   }
   $22 = $0;
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $0;
   $28 = $compptr;
   $29 = (($28) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $compptr;
   $32 = (($31) + 8|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (_jround_up($30,$33)|0);
   $35 = $compptr;
   $36 = (($35) + 32|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = $compptr;
   $39 = (($38) + 12|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = (_jround_up($37,$40)|0);
   $42 = $compptr;
   $43 = (($42) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (FUNCTION_TABLE_iiiiiii[$26 & 511]($27,1,0,$34,$41,$44)|0);
   $46 = $ci;
   $47 = $coef;
   $48 = (($47) + 64|0);
   $49 = (($48) + ($46<<2)|0);
   HEAP32[$49>>2] = $45;
   $50 = $ci;
   $51 = (($50) + 1)|0;
   $ci = $51;
   $52 = $compptr;
   $53 = (($52) + 88|0);
   $compptr = $53;
  }
  STACKTOP = sp;return;
 } else {
  $54 = $0;
  $55 = (($54) + 4|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $0;
  $60 = (FUNCTION_TABLE_iiii[$58 & 511]($59,1,1280)|0);
  $buffer = $60;
  $i = 0;
  while(1) {
   $61 = $i;
   $62 = ($61|0)<(10);
   if (!($62)) {
    break;
   }
   $63 = $buffer;
   $64 = $i;
   $65 = (($63) + ($64<<7)|0);
   $66 = $i;
   $67 = $coef;
   $68 = (($67) + 24|0);
   $69 = (($68) + ($66<<2)|0);
   HEAP32[$69>>2] = $65;
   $70 = $i;
   $71 = (($70) + 1)|0;
   $i = $71;
  }
  $72 = $coef;
  $73 = (($72) + 64|0);
  HEAP32[$73>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _start_pass_coef($cinfo,$pass_mode) {
 $cinfo = $cinfo|0;
 $pass_mode = $pass_mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coef = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $pass_mode;
 $2 = $0;
 $3 = (($2) + 404|0);
 $4 = HEAP32[$3>>2]|0;
 $coef = $4;
 $5 = $coef;
 $6 = (($5) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 _start_iMCU_row($7);
 $8 = $1;
 if ((($8|0) == 0)) {
  $9 = $coef;
  $10 = (($9) + 64|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = $0;
   $14 = HEAP32[$13>>2]|0;
   $15 = (($14) + 20|0);
   HEAP32[$15>>2] = 3;
   $16 = $0;
   $17 = HEAP32[$16>>2]|0;
   $18 = HEAP32[$17>>2]|0;
   $19 = $0;
   FUNCTION_TABLE_vi[$18 & 511]($19);
  }
  $20 = $coef;
  $21 = (($20) + 4|0);
  HEAP32[$21>>2] = 53;
  STACKTOP = sp;return;
 } else if ((($8|0) == 3)) {
  $22 = $coef;
  $23 = (($22) + 64|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if ($25) {
   $26 = $0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   HEAP32[$28>>2] = 3;
   $29 = $0;
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   $32 = $0;
   FUNCTION_TABLE_vi[$31 & 511]($32);
  }
  $33 = $coef;
  $34 = (($33) + 4|0);
  HEAP32[$34>>2] = 54;
  STACKTOP = sp;return;
 } else if ((($8|0) == 2)) {
  $35 = $coef;
  $36 = (($35) + 64|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)==(0|0);
  if ($38) {
   $39 = $0;
   $40 = HEAP32[$39>>2]|0;
   $41 = (($40) + 20|0);
   HEAP32[$41>>2] = 3;
   $42 = $0;
   $43 = HEAP32[$42>>2]|0;
   $44 = HEAP32[$43>>2]|0;
   $45 = $0;
   FUNCTION_TABLE_vi[$44 & 511]($45);
  }
  $46 = $coef;
  $47 = (($46) + 4|0);
  HEAP32[$47>>2] = 55;
  STACKTOP = sp;return;
 } else {
  $48 = $0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 20|0);
  HEAP32[$50>>2] = 3;
  $51 = $0;
  $52 = HEAP32[$51>>2]|0;
  $53 = HEAP32[$52>>2]|0;
  $54 = $0;
  FUNCTION_TABLE_vi[$53 & 511]($54);
  STACKTOP = sp;return;
 }
}
function _start_iMCU_row($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coef = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 404|0);
 $3 = HEAP32[$2>>2]|0;
 $coef = $3;
 $4 = $0;
 $5 = (($4) + 292|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 if ($7) {
  $8 = $coef;
  $9 = (($8) + 20|0);
  HEAP32[$9>>2] = 1;
  $32 = $coef;
  $33 = (($32) + 12|0);
  HEAP32[$33>>2] = 0;
  $34 = $coef;
  $35 = (($34) + 16|0);
  HEAP32[$35>>2] = 0;
  STACKTOP = sp;return;
 }
 $10 = $coef;
 $11 = (($10) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = (($13) + 288|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) - 1)|0;
 $17 = ($12>>>0)<($16>>>0);
 if ($17) {
  $18 = $0;
  $19 = (($18) + 296|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $coef;
  $24 = (($23) + 20|0);
  HEAP32[$24>>2] = $22;
 } else {
  $25 = $0;
  $26 = (($25) + 296|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 76|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $coef;
  $31 = (($30) + 20|0);
  HEAP32[$31>>2] = $29;
 }
 $32 = $coef;
 $33 = (($32) + 12|0);
 HEAP32[$33>>2] = 0;
 $34 = $coef;
 $35 = (($34) + 16|0);
 HEAP32[$35>>2] = 0;
 STACKTOP = sp;return;
}
function _compress_data($cinfo,$input_buf) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $MCU_col_num = 0, $bi = 0, $blkn = 0, $blockcnt = 0, $ci = 0;
 var $coef = 0, $compptr = 0, $forward_DCT = 0, $last_MCU_col = 0, $last_iMCU_row = 0, $xpos = 0, $yindex = 0, $yoffset = 0, $ypos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $1 = $cinfo;
 $2 = $input_buf;
 $3 = $1;
 $4 = (($3) + 404|0);
 $5 = HEAP32[$4>>2]|0;
 $coef = $5;
 $6 = $1;
 $7 = (($6) + 312|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - 1)|0;
 $last_MCU_col = $9;
 $10 = $1;
 $11 = (($10) + 288|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - 1)|0;
 $last_iMCU_row = $13;
 $14 = $coef;
 $15 = (($14) + 16|0);
 $16 = HEAP32[$15>>2]|0;
 $yoffset = $16;
 L1: while(1) {
  $17 = $yoffset;
  $18 = $coef;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)<($20|0);
  if (!($21)) {
   label = 36;
   break;
  }
  $22 = $coef;
  $23 = (($22) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $MCU_col_num = $24;
  while(1) {
   $25 = $MCU_col_num;
   $26 = $last_MCU_col;
   $27 = ($25>>>0)<=($26>>>0);
   if (!($27)) {
    break;
   }
   $blkn = 0;
   $ci = 0;
   while(1) {
    $28 = $ci;
    $29 = $1;
    $30 = (($29) + 292|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($28|0)<($31|0);
    if (!($32)) {
     break;
    }
    $33 = $ci;
    $34 = $1;
    $35 = (($34) + 296|0);
    $36 = (($35) + ($33<<2)|0);
    $37 = HEAP32[$36>>2]|0;
    $compptr = $37;
    $38 = $compptr;
    $39 = (($38) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $1;
    $42 = (($41) + 420|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + 4|0);
    $45 = (($44) + ($40<<2)|0);
    $46 = HEAP32[$45>>2]|0;
    $forward_DCT = $46;
    $47 = $MCU_col_num;
    $48 = $last_MCU_col;
    $49 = ($47>>>0)<($48>>>0);
    if ($49) {
     $50 = $compptr;
     $51 = (($50) + 56|0);
     $52 = HEAP32[$51>>2]|0;
     $56 = $52;
    } else {
     $53 = $compptr;
     $54 = (($53) + 72|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = $55;
    }
    $blockcnt = $56;
    $57 = $MCU_col_num;
    $58 = $compptr;
    $59 = (($58) + 68|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = Math_imul($57, $60)|0;
    $xpos = $61;
    $62 = $yoffset;
    $63 = $compptr;
    $64 = (($63) + 40|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = Math_imul($62, $65)|0;
    $ypos = $66;
    $yindex = 0;
    while(1) {
     $67 = $yindex;
     $68 = $compptr;
     $69 = (($68) + 60|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($67|0)<($70|0);
     if (!($71)) {
      break;
     }
     $72 = $coef;
     $73 = (($72) + 8|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $last_iMCU_row;
     $76 = ($74>>>0)<($75>>>0);
     if ($76) {
      label = 14;
     } else {
      $77 = $yoffset;
      $78 = $yindex;
      $79 = (($77) + ($78))|0;
      $80 = $compptr;
      $81 = (($80) + 76|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($79|0)<($82|0);
      if ($83) {
       label = 14;
      } else {
       $143 = $blkn;
       $144 = $coef;
       $145 = (($144) + 24|0);
       $146 = (($145) + ($143<<2)|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = $compptr;
       $149 = (($148) + 56|0);
       $150 = HEAP32[$149>>2]|0;
       $151 = $150<<7;
       _memset(($147|0),0,($151|0))|0;
       $bi = 0;
       while(1) {
        $152 = $bi;
        $153 = $compptr;
        $154 = (($153) + 56|0);
        $155 = HEAP32[$154>>2]|0;
        $156 = ($152|0)<($155|0);
        if (!($156)) {
         break;
        }
        $157 = $blkn;
        $158 = (($157) - 1)|0;
        $159 = $coef;
        $160 = (($159) + 24|0);
        $161 = (($160) + ($158<<2)|0);
        $162 = HEAP32[$161>>2]|0;
        $163 = HEAP16[$162>>1]|0;
        $164 = $blkn;
        $165 = $bi;
        $166 = (($164) + ($165))|0;
        $167 = $coef;
        $168 = (($167) + 24|0);
        $169 = (($168) + ($166<<2)|0);
        $170 = HEAP32[$169>>2]|0;
        HEAP16[$170>>1] = $163;
        $171 = $bi;
        $172 = (($171) + 1)|0;
        $bi = $172;
       }
      }
     }
     if ((label|0) == 14) {
      label = 0;
      $84 = $forward_DCT;
      $85 = $1;
      $86 = $compptr;
      $87 = $compptr;
      $88 = (($87) + 4|0);
      $89 = HEAP32[$88>>2]|0;
      $90 = $2;
      $91 = (($90) + ($89<<2)|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = $blkn;
      $94 = $coef;
      $95 = (($94) + 24|0);
      $96 = (($95) + ($93<<2)|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = $ypos;
      $99 = $xpos;
      $100 = $blockcnt;
      FUNCTION_TABLE_viiiiiii[$84 & 255]($85,$86,$92,$97,$98,$99,$100);
      $101 = $blockcnt;
      $102 = $compptr;
      $103 = (($102) + 56|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($101|0)<($104|0);
      if ($105) {
       $106 = $blkn;
       $107 = $blockcnt;
       $108 = (($106) + ($107))|0;
       $109 = $coef;
       $110 = (($109) + 24|0);
       $111 = (($110) + ($108<<2)|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = $compptr;
       $114 = (($113) + 56|0);
       $115 = HEAP32[$114>>2]|0;
       $116 = $blockcnt;
       $117 = (($115) - ($116))|0;
       $118 = $117<<7;
       _memset(($112|0),0,($118|0))|0;
       $119 = $blockcnt;
       $bi = $119;
       while(1) {
        $120 = $bi;
        $121 = $compptr;
        $122 = (($121) + 56|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = ($120|0)<($123|0);
        if (!($124)) {
         break;
        }
        $125 = $blkn;
        $126 = $bi;
        $127 = (($125) + ($126))|0;
        $128 = (($127) - 1)|0;
        $129 = $coef;
        $130 = (($129) + 24|0);
        $131 = (($130) + ($128<<2)|0);
        $132 = HEAP32[$131>>2]|0;
        $133 = HEAP16[$132>>1]|0;
        $134 = $blkn;
        $135 = $bi;
        $136 = (($134) + ($135))|0;
        $137 = $coef;
        $138 = (($137) + 24|0);
        $139 = (($138) + ($136<<2)|0);
        $140 = HEAP32[$139>>2]|0;
        HEAP16[$140>>1] = $133;
        $141 = $bi;
        $142 = (($141) + 1)|0;
        $bi = $142;
       }
      }
     }
     $173 = $compptr;
     $174 = (($173) + 56|0);
     $175 = HEAP32[$174>>2]|0;
     $176 = $blkn;
     $177 = (($176) + ($175))|0;
     $blkn = $177;
     $178 = $compptr;
     $179 = (($178) + 40|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $ypos;
     $182 = (($181) + ($180))|0;
     $ypos = $182;
     $183 = $yindex;
     $184 = (($183) + 1)|0;
     $yindex = $184;
    }
    $185 = $ci;
    $186 = (($185) + 1)|0;
    $ci = $186;
   }
   $187 = $1;
   $188 = (($187) + 424|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = (($189) + 4|0);
   $191 = HEAP32[$190>>2]|0;
   $192 = $1;
   $193 = $coef;
   $194 = (($193) + 24|0);
   $195 = (FUNCTION_TABLE_iii[$191 & 255]($192,$194)|0);
   $196 = ($195|0)!=(0);
   if (!($196)) {
    label = 31;
    break L1;
   }
   $203 = $MCU_col_num;
   $204 = (($203) + 1)|0;
   $MCU_col_num = $204;
  }
  $205 = $coef;
  $206 = (($205) + 12|0);
  HEAP32[$206>>2] = 0;
  $207 = $yoffset;
  $208 = (($207) + 1)|0;
  $yoffset = $208;
 }
 if ((label|0) == 31) {
  $197 = $yoffset;
  $198 = $coef;
  $199 = (($198) + 16|0);
  HEAP32[$199>>2] = $197;
  $200 = $MCU_col_num;
  $201 = $coef;
  $202 = (($201) + 12|0);
  HEAP32[$202>>2] = $200;
  $0 = 0;
  $214 = $0;
  STACKTOP = sp;return ($214|0);
 }
 else if ((label|0) == 36) {
  $209 = $coef;
  $210 = (($209) + 8|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + 1)|0;
  HEAP32[$210>>2] = $212;
  $213 = $1;
  _start_iMCU_row($213);
  $0 = 1;
  $214 = $0;
  STACKTOP = sp;return ($214|0);
 }
 return 0|0;
}
function _compress_first_pass($cinfo,$input_buf) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $MCUindex = 0, $MCUs_across = 0, $bi = 0, $block_row = 0, $block_rows = 0, $blocks_across = 0, $buffer = 0, $ci = 0, $coef = 0, $compptr = 0, $forward_DCT = 0, $h_samp_factor = 0, $lastDC = 0, $last_iMCU_row = 0;
 var $lastblockrow = 0, $ndummy = 0, $thisblockrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $0;
 $3 = (($2) + 404|0);
 $4 = HEAP32[$3>>2]|0;
 $coef = $4;
 $5 = $0;
 $6 = (($5) + 288|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) - 1)|0;
 $last_iMCU_row = $8;
 $ci = 0;
 $9 = $0;
 $10 = (($9) + 84|0);
 $11 = HEAP32[$10>>2]|0;
 $compptr = $11;
 while(1) {
  $12 = $ci;
  $13 = $0;
  $14 = (($13) + 76|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   break;
  }
  $17 = $0;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 32|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = $0;
  $23 = $ci;
  $24 = $coef;
  $25 = (($24) + 64|0);
  $26 = (($25) + ($23<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $coef;
  $29 = (($28) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $compptr;
  $32 = (($31) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = Math_imul($30, $33)|0;
  $35 = $compptr;
  $36 = (($35) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iiiiii[$21 & 511]($22,$27,$34,$37,1)|0);
  $buffer = $38;
  $39 = $coef;
  $40 = (($39) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $last_iMCU_row;
  $43 = ($41>>>0)<($42>>>0);
  if ($43) {
   $44 = $compptr;
   $45 = (($44) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $block_rows = $46;
  } else {
   $47 = $compptr;
   $48 = (($47) + 32|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $compptr;
   $51 = (($50) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($49>>>0) % ($52>>>0))&-1;
   $block_rows = $53;
   $54 = $block_rows;
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = $compptr;
    $57 = (($56) + 12|0);
    $58 = HEAP32[$57>>2]|0;
    $block_rows = $58;
   }
  }
  $59 = $compptr;
  $60 = (($59) + 28|0);
  $61 = HEAP32[$60>>2]|0;
  $blocks_across = $61;
  $62 = $compptr;
  $63 = (($62) + 8|0);
  $64 = HEAP32[$63>>2]|0;
  $h_samp_factor = $64;
  $65 = $blocks_across;
  $66 = $h_samp_factor;
  $67 = (($65>>>0) % ($66>>>0))&-1;
  $ndummy = $67;
  $68 = $ndummy;
  $69 = ($68|0)>(0);
  if ($69) {
   $70 = $h_samp_factor;
   $71 = $ndummy;
   $72 = (($70) - ($71))|0;
   $ndummy = $72;
  }
  $73 = $ci;
  $74 = $0;
  $75 = (($74) + 420|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 4|0);
  $78 = (($77) + ($73<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $forward_DCT = $79;
  $block_row = 0;
  while(1) {
   $80 = $block_row;
   $81 = $block_rows;
   $82 = ($80|0)<($81|0);
   if (!($82)) {
    break;
   }
   $83 = $block_row;
   $84 = $buffer;
   $85 = (($84) + ($83<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $thisblockrow = $86;
   $87 = $forward_DCT;
   $88 = $0;
   $89 = $compptr;
   $90 = $ci;
   $91 = $1;
   $92 = (($91) + ($90<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $thisblockrow;
   $95 = $block_row;
   $96 = $compptr;
   $97 = (($96) + 40|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = Math_imul($95, $98)|0;
   $100 = $blocks_across;
   FUNCTION_TABLE_viiiiiii[$87 & 255]($88,$89,$93,$94,$99,0,$100);
   $101 = $ndummy;
   $102 = ($101|0)>(0);
   if ($102) {
    $103 = $blocks_across;
    $104 = $thisblockrow;
    $105 = (($104) + ($103<<7)|0);
    $thisblockrow = $105;
    $106 = $thisblockrow;
    $107 = $ndummy;
    $108 = $107<<7;
    _memset(($106|0),0,($108|0))|0;
    $109 = $thisblockrow;
    $110 = (($109) + -128|0);
    $111 = HEAP16[$110>>1]|0;
    $lastDC = $111;
    $bi = 0;
    while(1) {
     $112 = $bi;
     $113 = $ndummy;
     $114 = ($112|0)<($113|0);
     if (!($114)) {
      break;
     }
     $115 = $lastDC;
     $116 = $bi;
     $117 = $thisblockrow;
     $118 = (($117) + ($116<<7)|0);
     HEAP16[$118>>1] = $115;
     $119 = $bi;
     $120 = (($119) + 1)|0;
     $bi = $120;
    }
   }
   $121 = $block_row;
   $122 = (($121) + 1)|0;
   $block_row = $122;
  }
  $123 = $coef;
  $124 = (($123) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $last_iMCU_row;
  $127 = ($125|0)==($126|0);
  if ($127) {
   $128 = $ndummy;
   $129 = $blocks_across;
   $130 = (($129) + ($128))|0;
   $blocks_across = $130;
   $131 = $blocks_across;
   $132 = $h_samp_factor;
   $133 = (($131>>>0) / ($132>>>0))&-1;
   $MCUs_across = $133;
   $134 = $block_rows;
   $block_row = $134;
   while(1) {
    $135 = $block_row;
    $136 = $compptr;
    $137 = (($136) + 12|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = ($135|0)<($138|0);
    if (!($139)) {
     break;
    }
    $140 = $block_row;
    $141 = $buffer;
    $142 = (($141) + ($140<<2)|0);
    $143 = HEAP32[$142>>2]|0;
    $thisblockrow = $143;
    $144 = $block_row;
    $145 = (($144) - 1)|0;
    $146 = $buffer;
    $147 = (($146) + ($145<<2)|0);
    $148 = HEAP32[$147>>2]|0;
    $lastblockrow = $148;
    $149 = $thisblockrow;
    $150 = $blocks_across;
    $151 = $150<<7;
    _memset(($149|0),0,($151|0))|0;
    $MCUindex = 0;
    while(1) {
     $152 = $MCUindex;
     $153 = $MCUs_across;
     $154 = ($152>>>0)<($153>>>0);
     if (!($154)) {
      break;
     }
     $155 = $h_samp_factor;
     $156 = (($155) - 1)|0;
     $157 = $lastblockrow;
     $158 = (($157) + ($156<<7)|0);
     $159 = HEAP16[$158>>1]|0;
     $lastDC = $159;
     $bi = 0;
     while(1) {
      $160 = $bi;
      $161 = $h_samp_factor;
      $162 = ($160|0)<($161|0);
      if (!($162)) {
       break;
      }
      $163 = $lastDC;
      $164 = $bi;
      $165 = $thisblockrow;
      $166 = (($165) + ($164<<7)|0);
      HEAP16[$166>>1] = $163;
      $167 = $bi;
      $168 = (($167) + 1)|0;
      $bi = $168;
     }
     $169 = $h_samp_factor;
     $170 = $thisblockrow;
     $171 = (($170) + ($169<<7)|0);
     $thisblockrow = $171;
     $172 = $h_samp_factor;
     $173 = $lastblockrow;
     $174 = (($173) + ($172<<7)|0);
     $lastblockrow = $174;
     $175 = $MCUindex;
     $176 = (($175) + 1)|0;
     $MCUindex = $176;
    }
    $177 = $block_row;
    $178 = (($177) + 1)|0;
    $block_row = $178;
   }
  }
  $179 = $ci;
  $180 = (($179) + 1)|0;
  $ci = $180;
  $181 = $compptr;
  $182 = (($181) + 88|0);
  $compptr = $182;
 }
 $183 = $0;
 $184 = $1;
 $185 = (_compress_output($183,$184)|0);
 STACKTOP = sp;return ($185|0);
}
function _compress_output($cinfo,$input_buf) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $MCU_col_num = 0, $blkn = 0, $buffer = 0, $buffer_ptr = 0;
 var $ci = 0, $coef = 0, $compptr = 0, $start_col = 0, $xindex = 0, $yindex = 0, $yoffset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $buffer = sp + 8|0;
 $1 = $cinfo;
 $2 = $input_buf;
 $3 = $1;
 $4 = (($3) + 404|0);
 $5 = HEAP32[$4>>2]|0;
 $coef = $5;
 $ci = 0;
 while(1) {
  $6 = $ci;
  $7 = $1;
  $8 = (($7) + 292|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $ci;
  $12 = $1;
  $13 = (($12) + 296|0);
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $compptr = $15;
  $16 = $1;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 32|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = $compptr;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $coef;
  $26 = (($25) + 64|0);
  $27 = (($26) + ($24<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $coef;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $compptr;
  $33 = (($32) + 12|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = Math_imul($31, $34)|0;
  $36 = $compptr;
  $37 = (($36) + 12|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = (FUNCTION_TABLE_iiiiii[$20 & 511]($21,$28,$35,$38,0)|0);
  $40 = $ci;
  $41 = (($buffer) + ($40<<2)|0);
  HEAP32[$41>>2] = $39;
  $42 = $ci;
  $43 = (($42) + 1)|0;
  $ci = $43;
 }
 $44 = $coef;
 $45 = (($44) + 16|0);
 $46 = HEAP32[$45>>2]|0;
 $yoffset = $46;
 L6: while(1) {
  $47 = $yoffset;
  $48 = $coef;
  $49 = (($48) + 20|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47|0)<($50|0);
  if (!($51)) {
   label = 27;
   break;
  }
  $52 = $coef;
  $53 = (($52) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $MCU_col_num = $54;
  while(1) {
   $55 = $MCU_col_num;
   $56 = $1;
   $57 = (($56) + 312|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($55>>>0)<($58>>>0);
   if (!($59)) {
    break;
   }
   $blkn = 0;
   $ci = 0;
   while(1) {
    $60 = $ci;
    $61 = $1;
    $62 = (($61) + 292|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($60|0)<($63|0);
    if (!($64)) {
     break;
    }
    $65 = $ci;
    $66 = $1;
    $67 = (($66) + 296|0);
    $68 = (($67) + ($65<<2)|0);
    $69 = HEAP32[$68>>2]|0;
    $compptr = $69;
    $70 = $MCU_col_num;
    $71 = $compptr;
    $72 = (($71) + 56|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = Math_imul($70, $73)|0;
    $start_col = $74;
    $yindex = 0;
    while(1) {
     $75 = $yindex;
     $76 = $compptr;
     $77 = (($76) + 60|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = ($75|0)<($78|0);
     if (!($79)) {
      break;
     }
     $80 = $yindex;
     $81 = $yoffset;
     $82 = (($80) + ($81))|0;
     $83 = $ci;
     $84 = (($buffer) + ($83<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = (($85) + ($82<<2)|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = $start_col;
     $89 = (($87) + ($88<<7)|0);
     $buffer_ptr = $89;
     $xindex = 0;
     while(1) {
      $90 = $xindex;
      $91 = $compptr;
      $92 = (($91) + 56|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = ($90|0)<($93|0);
      if (!($94)) {
       break;
      }
      $95 = $buffer_ptr;
      $96 = (($95) + 128|0);
      $buffer_ptr = $96;
      $97 = $blkn;
      $98 = (($97) + 1)|0;
      $blkn = $98;
      $99 = $coef;
      $100 = (($99) + 24|0);
      $101 = (($100) + ($97<<2)|0);
      HEAP32[$101>>2] = $95;
      $102 = $xindex;
      $103 = (($102) + 1)|0;
      $xindex = $103;
     }
     $104 = $yindex;
     $105 = (($104) + 1)|0;
     $yindex = $105;
    }
    $106 = $ci;
    $107 = (($106) + 1)|0;
    $ci = $107;
   }
   $108 = $1;
   $109 = (($108) + 424|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + 4|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = $1;
   $114 = $coef;
   $115 = (($114) + 24|0);
   $116 = (FUNCTION_TABLE_iii[$112 & 255]($113,$115)|0);
   $117 = ($116|0)!=(0);
   if (!($117)) {
    label = 22;
    break L6;
   }
   $124 = $MCU_col_num;
   $125 = (($124) + 1)|0;
   $MCU_col_num = $125;
  }
  $126 = $coef;
  $127 = (($126) + 12|0);
  HEAP32[$127>>2] = 0;
  $128 = $yoffset;
  $129 = (($128) + 1)|0;
  $yoffset = $129;
 }
 if ((label|0) == 22) {
  $118 = $yoffset;
  $119 = $coef;
  $120 = (($119) + 16|0);
  HEAP32[$120>>2] = $118;
  $121 = $MCU_col_num;
  $122 = $coef;
  $123 = (($122) + 12|0);
  HEAP32[$123>>2] = $121;
  $0 = 0;
  $135 = $0;
  STACKTOP = sp;return ($135|0);
 }
 else if ((label|0) == 27) {
  $130 = $coef;
  $131 = (($130) + 8|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + 1)|0;
  HEAP32[$131>>2] = $133;
  $134 = $1;
  _start_iMCU_row($134);
  $0 = 1;
  $135 = $0;
  STACKTOP = sp;return ($135|0);
 }
 return 0|0;
}
function _jinit_color_converter($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cconvert = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,12)|0);
 $cconvert = $6;
 $7 = $cconvert;
 $8 = $0;
 $9 = (($8) + 412|0);
 HEAP32[$9>>2] = $7;
 $10 = $cconvert;
 HEAP32[$10>>2] = 56;
 $11 = $0;
 $12 = (($11) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 switch ($13|0) {
 case 1:  {
  $14 = $0;
  $15 = (($14) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(1);
  if ($17) {
   $18 = $0;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 20|0);
   HEAP32[$20>>2] = 10;
   $21 = $0;
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$22>>2]|0;
   $24 = $0;
   FUNCTION_TABLE_vi[$23 & 511]($24);
  }
  break;
 }
 case 7: case 3:  {
  $36 = $0;
  $37 = (($36) + 36|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(3);
  if ($39) {
   $40 = $0;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 20|0);
   HEAP32[$42>>2] = 10;
   $43 = $0;
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$44>>2]|0;
   $46 = $0;
   FUNCTION_TABLE_vi[$45 & 511]($46);
  }
  break;
 }
 case 5: case 4:  {
  $47 = $0;
  $48 = (($47) + 36|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)!=(4);
  if ($50) {
   $51 = $0;
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + 20|0);
   HEAP32[$53>>2] = 10;
   $54 = $0;
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP32[$55>>2]|0;
   $57 = $0;
   FUNCTION_TABLE_vi[$56 & 511]($57);
  }
  break;
 }
 case 6: case 2:  {
  $25 = $0;
  $26 = (($25) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(3);
  if ($28) {
   $29 = $0;
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + 20|0);
   HEAP32[$31>>2] = 10;
   $32 = $0;
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   $35 = $0;
   FUNCTION_TABLE_vi[$34 & 511]($35);
  }
  break;
 }
 default: {
  $58 = $0;
  $59 = (($58) + 36|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)<(1);
  if ($61) {
   $62 = $0;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + 20|0);
   HEAP32[$64>>2] = 10;
   $65 = $0;
   $66 = HEAP32[$65>>2]|0;
   $67 = HEAP32[$66>>2]|0;
   $68 = $0;
   FUNCTION_TABLE_vi[$67 & 511]($68);
  }
 }
 }
 $69 = $0;
 $70 = (($69) + 260|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)!=(0);
 if ($72) {
  $73 = $0;
  $74 = (($73) + 80|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)!=(2);
  if ($76) {
   $77 = $0;
   $78 = (($77) + 80|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79|0)!=(6);
   if ($80) {
    $81 = $0;
    $82 = HEAP32[$81>>2]|0;
    $83 = (($82) + 20|0);
    HEAP32[$83>>2] = 28;
    $84 = $0;
    $85 = HEAP32[$84>>2]|0;
    $86 = HEAP32[$85>>2]|0;
    $87 = $0;
    FUNCTION_TABLE_vi[$86 & 511]($87);
   }
  }
 }
 $88 = $0;
 $89 = (($88) + 80|0);
 $90 = HEAP32[$89>>2]|0;
 switch ($90|0) {
 case 3:  {
  $156 = $0;
  $157 = (($156) + 76|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = ($158|0)!=(3);
  if ($159) {
   $160 = $0;
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + 20|0);
   HEAP32[$162>>2] = 11;
   $163 = $0;
   $164 = HEAP32[$163>>2]|0;
   $165 = HEAP32[$164>>2]|0;
   $166 = $0;
   FUNCTION_TABLE_vi[$165 & 511]($166);
  }
  $167 = $0;
  $168 = (($167) + 40|0);
  $169 = HEAP32[$168>>2]|0;
  if ((($169|0) == 2)) {
   $170 = $cconvert;
   HEAP32[$170>>2] = 58;
   $171 = $cconvert;
   $172 = (($171) + 4|0);
   HEAP32[$172>>2] = 62;
  } else if ((($169|0) == 3)) {
   $173 = $cconvert;
   $174 = (($173) + 4|0);
   HEAP32[$174>>2] = 63;
  } else {
   $175 = $0;
   $176 = HEAP32[$175>>2]|0;
   $177 = (($176) + 20|0);
   HEAP32[$177>>2] = 28;
   $178 = $0;
   $179 = HEAP32[$178>>2]|0;
   $180 = HEAP32[$179>>2]|0;
   $181 = $0;
   FUNCTION_TABLE_vi[$180 & 511]($181);
  }
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $228 = $0;
  $229 = (($228) + 76|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = ($230|0)!=(4);
  if ($231) {
   $232 = $0;
   $233 = HEAP32[$232>>2]|0;
   $234 = (($233) + 20|0);
   HEAP32[$234>>2] = 11;
   $235 = $0;
   $236 = HEAP32[$235>>2]|0;
   $237 = HEAP32[$236>>2]|0;
   $238 = $0;
   FUNCTION_TABLE_vi[$237 & 511]($238);
  }
  $239 = $0;
  $240 = (($239) + 40|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = ($241|0)==(4);
  if ($242) {
   $243 = $cconvert;
   $244 = (($243) + 4|0);
   HEAP32[$244>>2] = 63;
  } else {
   $245 = $0;
   $246 = HEAP32[$245>>2]|0;
   $247 = (($246) + 20|0);
   HEAP32[$247>>2] = 28;
   $248 = $0;
   $249 = HEAP32[$248>>2]|0;
   $250 = HEAP32[$249>>2]|0;
   $251 = $0;
   FUNCTION_TABLE_vi[$250 & 511]($251);
  }
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $182 = $0;
  $183 = (($182) + 76|0);
  $184 = HEAP32[$183>>2]|0;
  $185 = ($184|0)!=(3);
  if ($185) {
   $186 = $0;
   $187 = HEAP32[$186>>2]|0;
   $188 = (($187) + 20|0);
   HEAP32[$188>>2] = 11;
   $189 = $0;
   $190 = HEAP32[$189>>2]|0;
   $191 = HEAP32[$190>>2]|0;
   $192 = $0;
   FUNCTION_TABLE_vi[$191 & 511]($192);
  }
  $193 = $0;
  $194 = (($193) + 40|0);
  $195 = HEAP32[$194>>2]|0;
  if ((($195|0) == 2)) {
   $196 = $0;
   $197 = (($196) + 84|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (($198) + 88|0);
   $200 = (($199) + 52|0);
   HEAP32[$200>>2] = 1;
   $201 = $0;
   $202 = (($201) + 84|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($203) + 176|0);
   $205 = (($204) + 52|0);
   HEAP32[$205>>2] = 1;
   $206 = $cconvert;
   HEAP32[$206>>2] = 58;
   $207 = $cconvert;
   $208 = (($207) + 4|0);
   HEAP32[$208>>2] = 62;
  } else if ((($195|0) == 3)) {
   $209 = $0;
   $210 = (($209) + 84|0);
   $211 = HEAP32[$210>>2]|0;
   $212 = (($211) + 88|0);
   $213 = (($212) + 52|0);
   HEAP32[$213>>2] = 1;
   $214 = $0;
   $215 = (($214) + 84|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = (($216) + 176|0);
   $218 = (($217) + 52|0);
   HEAP32[$218>>2] = 1;
   label = 51;
  } else if ((($195|0) == 7)) {
   label = 51;
  } else {
   $221 = $0;
   $222 = HEAP32[$221>>2]|0;
   $223 = (($222) + 20|0);
   HEAP32[$223>>2] = 28;
   $224 = $0;
   $225 = HEAP32[$224>>2]|0;
   $226 = HEAP32[$225>>2]|0;
   $227 = $0;
   FUNCTION_TABLE_vi[$226 & 511]($227);
  }
  if ((label|0) == 51) {
   $219 = $cconvert;
   $220 = (($219) + 4|0);
   HEAP32[$220>>2] = 63;
  }
  STACKTOP = sp;return;
  break;
 }
 case 6: case 2:  {
  $117 = $0;
  $118 = (($117) + 76|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)!=(3);
  if ($120) {
   $121 = $0;
   $122 = HEAP32[$121>>2]|0;
   $123 = (($122) + 20|0);
   HEAP32[$123>>2] = 11;
   $124 = $0;
   $125 = HEAP32[$124>>2]|0;
   $126 = HEAP32[$125>>2]|0;
   $127 = $0;
   FUNCTION_TABLE_vi[$126 & 511]($127);
  }
  $128 = $0;
  $129 = (($128) + 40|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $0;
  $132 = (($131) + 80|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ($130|0)==($133|0);
  if ($134) {
   $135 = $0;
   $136 = (($135) + 260|0);
   $137 = HEAP32[$136>>2]|0;
   if ((($137|0) == 0)) {
    $138 = $cconvert;
    $139 = (($138) + 4|0);
    HEAP32[$139>>2] = 60;
   } else if ((($137|0) == 1)) {
    $140 = $cconvert;
    $141 = (($140) + 4|0);
    HEAP32[$141>>2] = 61;
   } else {
    $142 = $0;
    $143 = HEAP32[$142>>2]|0;
    $144 = (($143) + 20|0);
    HEAP32[$144>>2] = 28;
    $145 = $0;
    $146 = HEAP32[$145>>2]|0;
    $147 = HEAP32[$146>>2]|0;
    $148 = $0;
    FUNCTION_TABLE_vi[$147 & 511]($148);
   }
  } else {
   $149 = $0;
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + 20|0);
   HEAP32[$151>>2] = 28;
   $152 = $0;
   $153 = HEAP32[$152>>2]|0;
   $154 = HEAP32[$153>>2]|0;
   $155 = $0;
   FUNCTION_TABLE_vi[$154 & 511]($155);
  }
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $91 = $0;
  $92 = (($91) + 76|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93|0)!=(1);
  if ($94) {
   $95 = $0;
   $96 = HEAP32[$95>>2]|0;
   $97 = (($96) + 20|0);
   HEAP32[$97>>2] = 11;
   $98 = $0;
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$99>>2]|0;
   $101 = $0;
   FUNCTION_TABLE_vi[$100 & 511]($101);
  }
  $102 = $0;
  $103 = (($102) + 40|0);
  $104 = HEAP32[$103>>2]|0;
  if ((($104|0) == 2)) {
   $107 = $cconvert;
   HEAP32[$107>>2] = 58;
   $108 = $cconvert;
   $109 = (($108) + 4|0);
   HEAP32[$109>>2] = 59;
  } else if ((($104|0) == 7) | (($104|0) == 3) | (($104|0) == 1)) {
   $105 = $cconvert;
   $106 = (($105) + 4|0);
   HEAP32[$106>>2] = 57;
  } else {
   $110 = $0;
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + 20|0);
   HEAP32[$112>>2] = 28;
   $113 = $0;
   $114 = HEAP32[$113>>2]|0;
   $115 = HEAP32[$114>>2]|0;
   $116 = $0;
   FUNCTION_TABLE_vi[$115 & 511]($116);
  }
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $252 = $0;
  $253 = (($252) + 76|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = ($254|0)!=(4);
  if ($255) {
   $256 = $0;
   $257 = HEAP32[$256>>2]|0;
   $258 = (($257) + 20|0);
   HEAP32[$258>>2] = 11;
   $259 = $0;
   $260 = HEAP32[$259>>2]|0;
   $261 = HEAP32[$260>>2]|0;
   $262 = $0;
   FUNCTION_TABLE_vi[$261 & 511]($262);
  }
  $263 = $0;
  $264 = (($263) + 40|0);
  $265 = HEAP32[$264>>2]|0;
  if ((($265|0) == 4)) {
   $266 = $cconvert;
   HEAP32[$266>>2] = 58;
   $267 = $cconvert;
   $268 = (($267) + 4|0);
   HEAP32[$268>>2] = 64;
  } else if ((($265|0) == 5)) {
   $269 = $cconvert;
   $270 = (($269) + 4|0);
   HEAP32[$270>>2] = 63;
  } else {
   $271 = $0;
   $272 = HEAP32[$271>>2]|0;
   $273 = (($272) + 20|0);
   HEAP32[$273>>2] = 28;
   $274 = $0;
   $275 = HEAP32[$274>>2]|0;
   $276 = HEAP32[$275>>2]|0;
   $277 = $0;
   FUNCTION_TABLE_vi[$276 & 511]($277);
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  $278 = $0;
  $279 = (($278) + 80|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = $0;
  $282 = (($281) + 40|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = ($280|0)!=($283|0);
  if ($284) {
   label = 69;
  } else {
   $285 = $0;
   $286 = (($285) + 76|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = $0;
   $289 = (($288) + 36|0);
   $290 = HEAP32[$289>>2]|0;
   $291 = ($287|0)!=($290|0);
   if ($291) {
    label = 69;
   }
  }
  if ((label|0) == 69) {
   $292 = $0;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($293) + 20|0);
   HEAP32[$294>>2] = 28;
   $295 = $0;
   $296 = HEAP32[$295>>2]|0;
   $297 = HEAP32[$296>>2]|0;
   $298 = $0;
   FUNCTION_TABLE_vi[$297 & 511]($298);
  }
  $299 = $cconvert;
  $300 = (($299) + 4|0);
  HEAP32[$300>>2] = 63;
  STACKTOP = sp;return;
 }
 }
}
function _null_method($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return;
}
function _grayscale_convert($cinfo,$input_buf,$output_buf,$output_row,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $output_row = $output_row|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $inptr = 0, $instride = 0, $num_cols = 0;
 var $outptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $output_row;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $instride = $7;
 $8 = $0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $num_cols = $10;
 while(1) {
  $11 = $4;
  $12 = (($11) + -1)|0;
  $4 = $12;
  $13 = ($12|0)>=(0);
  if (!($13)) {
   break;
  }
  $14 = $1;
  $15 = (($14) + 4|0);
  $1 = $15;
  $16 = HEAP32[$14>>2]|0;
  $inptr = $16;
  $17 = $3;
  $18 = (($17) + 1)|0;
  $3 = $18;
  $19 = $2;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + ($17<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $outptr = $22;
  $col = 0;
  while(1) {
   $23 = $col;
   $24 = $num_cols;
   $25 = ($23>>>0)<($24>>>0);
   if (!($25)) {
    break;
   }
   $26 = $inptr;
   $27 = HEAP8[$26>>0]|0;
   $28 = $col;
   $29 = $outptr;
   $30 = (($29) + ($28)|0);
   HEAP8[$30>>0] = $27;
   $31 = $instride;
   $32 = $inptr;
   $33 = (($32) + ($31)|0);
   $inptr = $33;
   $34 = $col;
   $35 = (($34) + 1)|0;
   $col = $35;
  }
 }
 STACKTOP = sp;return;
}
function _rgb_ycc_start($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $cconvert = 0, $i = 0, $rgb_ycc_tab = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 412|0);
 $3 = HEAP32[$2>>2]|0;
 $cconvert = $3;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (FUNCTION_TABLE_iiii[$7 & 511]($8,1,8192)|0);
 $rgb_ycc_tab = $9;
 $10 = $cconvert;
 $11 = (($10) + 8|0);
 HEAP32[$11>>2] = $9;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<=(255);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = ($14*19595)|0;
  $16 = $i;
  $17 = (($16) + 0)|0;
  $18 = $rgb_ycc_tab;
  $19 = (($18) + ($17<<2)|0);
  HEAP32[$19>>2] = $15;
  $20 = $i;
  $21 = ($20*38470)|0;
  $22 = $i;
  $23 = (($22) + 256)|0;
  $24 = $rgb_ycc_tab;
  $25 = (($24) + ($23<<2)|0);
  HEAP32[$25>>2] = $21;
  $26 = $i;
  $27 = ($26*7471)|0;
  $28 = (($27) + 32768)|0;
  $29 = $i;
  $30 = (($29) + 512)|0;
  $31 = $rgb_ycc_tab;
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = $28;
  $33 = $i;
  $34 = Math_imul(-11058, $33)|0;
  $35 = $i;
  $36 = (($35) + 768)|0;
  $37 = $rgb_ycc_tab;
  $38 = (($37) + ($36<<2)|0);
  HEAP32[$38>>2] = $34;
  $39 = $i;
  $40 = Math_imul(-21710, $39)|0;
  $41 = $i;
  $42 = (($41) + 1024)|0;
  $43 = $rgb_ycc_tab;
  $44 = (($43) + ($42<<2)|0);
  HEAP32[$44>>2] = $40;
  $45 = $i;
  $46 = $45<<15;
  $47 = (($46) + 8388608)|0;
  $48 = (($47) + 32768)|0;
  $49 = (($48) - 1)|0;
  $50 = $i;
  $51 = (($50) + 1280)|0;
  $52 = $rgb_ycc_tab;
  $53 = (($52) + ($51<<2)|0);
  HEAP32[$53>>2] = $49;
  $54 = $i;
  $55 = Math_imul(-27439, $54)|0;
  $56 = $i;
  $57 = (($56) + 1536)|0;
  $58 = $rgb_ycc_tab;
  $59 = (($58) + ($57<<2)|0);
  HEAP32[$59>>2] = $55;
  $60 = $i;
  $61 = Math_imul(-5329, $60)|0;
  $62 = $i;
  $63 = (($62) + 1792)|0;
  $64 = $rgb_ycc_tab;
  $65 = (($64) + ($63<<2)|0);
  HEAP32[$65>>2] = $61;
  $66 = $i;
  $67 = (($66) + 1)|0;
  $i = $67;
 }
 STACKTOP = sp;return;
}
function _rgb_gray_convert($cinfo,$input_buf,$output_buf,$output_row,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $output_row = $output_row|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $cconvert = 0, $col = 0, $ctab = 0, $g = 0, $inptr = 0, $num_cols = 0, $outptr = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $output_row;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 412|0);
 $7 = HEAP32[$6>>2]|0;
 $cconvert = $7;
 $8 = $cconvert;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $ctab = $10;
 $11 = $0;
 $12 = (($11) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $num_cols = $13;
 while(1) {
  $14 = $4;
  $15 = (($14) + -1)|0;
  $4 = $15;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $1;
  $18 = (($17) + 4|0);
  $1 = $18;
  $19 = HEAP32[$17>>2]|0;
  $inptr = $19;
  $20 = $3;
  $21 = (($20) + 1)|0;
  $3 = $21;
  $22 = $2;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + ($20<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $outptr = $25;
  $col = 0;
  while(1) {
   $26 = $col;
   $27 = $num_cols;
   $28 = ($26>>>0)<($27>>>0);
   if (!($28)) {
    break;
   }
   $29 = $inptr;
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $r = $31;
   $32 = $inptr;
   $33 = (($32) + 1|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $g = $35;
   $36 = $inptr;
   $37 = (($36) + 2|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $b = $39;
   $40 = $r;
   $41 = (($40) + 0)|0;
   $42 = $ctab;
   $43 = (($42) + ($41<<2)|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $g;
   $46 = (($45) + 256)|0;
   $47 = $ctab;
   $48 = (($47) + ($46<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($44) + ($49))|0;
   $51 = $b;
   $52 = (($51) + 512)|0;
   $53 = $ctab;
   $54 = (($53) + ($52<<2)|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (($50) + ($55))|0;
   $57 = $56 >> 16;
   $58 = $57&255;
   $59 = $col;
   $60 = $outptr;
   $61 = (($60) + ($59)|0);
   HEAP8[$61>>0] = $58;
   $62 = $inptr;
   $63 = (($62) + 3|0);
   $inptr = $63;
   $64 = $col;
   $65 = (($64) + 1)|0;
   $col = $65;
  }
 }
 STACKTOP = sp;return;
}
function _rgb_convert($cinfo,$input_buf,$output_buf,$output_row,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $output_row = $output_row|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $inptr = 0, $num_cols = 0;
 var $outptr0 = 0, $outptr1 = 0, $outptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $output_row;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $num_cols = $7;
 while(1) {
  $8 = $4;
  $9 = (($8) + -1)|0;
  $4 = $9;
  $10 = ($9|0)>=(0);
  if (!($10)) {
   break;
  }
  $11 = $1;
  $12 = (($11) + 4|0);
  $1 = $12;
  $13 = HEAP32[$11>>2]|0;
  $inptr = $13;
  $14 = $3;
  $15 = $2;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $outptr0 = $18;
  $19 = $3;
  $20 = $2;
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $outptr1 = $24;
  $25 = $3;
  $26 = $2;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $outptr2 = $30;
  $31 = $3;
  $32 = (($31) + 1)|0;
  $3 = $32;
  $col = 0;
  while(1) {
   $33 = $col;
   $34 = $num_cols;
   $35 = ($33>>>0)<($34>>>0);
   if (!($35)) {
    break;
   }
   $36 = $inptr;
   $37 = HEAP8[$36>>0]|0;
   $38 = $col;
   $39 = $outptr0;
   $40 = (($39) + ($38)|0);
   HEAP8[$40>>0] = $37;
   $41 = $inptr;
   $42 = (($41) + 1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = $col;
   $45 = $outptr1;
   $46 = (($45) + ($44)|0);
   HEAP8[$46>>0] = $43;
   $47 = $inptr;
   $48 = (($47) + 2|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $col;
   $51 = $outptr2;
   $52 = (($51) + ($50)|0);
   HEAP8[$52>>0] = $49;
   $53 = $inptr;
   $54 = (($53) + 3|0);
   $inptr = $54;
   $55 = $col;
   $56 = (($55) + 1)|0;
   $col = $56;
  }
 }
 STACKTOP = sp;return;
}
function _rgb_rgb1_convert($cinfo,$input_buf,$output_buf,$output_row,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $output_row = $output_row|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $b = 0, $col = 0, $g = 0, $inptr = 0, $num_cols = 0, $outptr0 = 0;
 var $outptr1 = 0, $outptr2 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $output_row;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $num_cols = $7;
 while(1) {
  $8 = $4;
  $9 = (($8) + -1)|0;
  $4 = $9;
  $10 = ($9|0)>=(0);
  if (!($10)) {
   break;
  }
  $11 = $1;
  $12 = (($11) + 4|0);
  $1 = $12;
  $13 = HEAP32[$11>>2]|0;
  $inptr = $13;
  $14 = $3;
  $15 = $2;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + ($14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $outptr0 = $18;
  $19 = $3;
  $20 = $2;
  $21 = (($20) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($19<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $outptr1 = $24;
  $25 = $3;
  $26 = $2;
  $27 = (($26) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $outptr2 = $30;
  $31 = $3;
  $32 = (($31) + 1)|0;
  $3 = $32;
  $col = 0;
  while(1) {
   $33 = $col;
   $34 = $num_cols;
   $35 = ($33>>>0)<($34>>>0);
   if (!($35)) {
    break;
   }
   $36 = $inptr;
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $r = $38;
   $39 = $inptr;
   $40 = (($39) + 1|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $g = $42;
   $43 = $inptr;
   $44 = (($43) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $b = $46;
   $47 = $r;
   $48 = $g;
   $49 = (($47) - ($48))|0;
   $50 = (($49) + 128)|0;
   $51 = $50 & 255;
   $52 = $51&255;
   $53 = $col;
   $54 = $outptr0;
   $55 = (($54) + ($53)|0);
   HEAP8[$55>>0] = $52;
   $56 = $g;
   $57 = $56&255;
   $58 = $col;
   $59 = $outptr1;
   $60 = (($59) + ($58)|0);
   HEAP8[$60>>0] = $57;
   $61 = $b;
   $62 = $g;
   $63 = (($61) - ($62))|0;
   $64 = (($63) + 128)|0;
   $65 = $64 & 255;
   $66 = $65&255;
   $67 = $col;
   $68 = $outptr2;
   $69 = (($68) + ($67)|0);
   HEAP8[$69>>0] = $66;
   $70 = $inptr;
   $71 = (($70) + 3|0);
   $inptr = $71;
   $72 = $col;
   $73 = (($72) + 1)|0;
   $col = $73;
  }
 }
 STACKTOP = sp;return;
}
function _rgb_ycc_convert($cinfo,$input_buf,$output_buf,$output_row,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $output_row = $output_row|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $b = 0, $cconvert = 0, $col = 0, $ctab = 0, $g = 0, $inptr = 0, $num_cols = 0, $outptr0 = 0, $outptr1 = 0, $outptr2 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $output_row;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 412|0);
 $7 = HEAP32[$6>>2]|0;
 $cconvert = $7;
 $8 = $cconvert;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $ctab = $10;
 $11 = $0;
 $12 = (($11) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $num_cols = $13;
 while(1) {
  $14 = $4;
  $15 = (($14) + -1)|0;
  $4 = $15;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $1;
  $18 = (($17) + 4|0);
  $1 = $18;
  $19 = HEAP32[$17>>2]|0;
  $inptr = $19;
  $20 = $3;
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($20<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $outptr0 = $24;
  $25 = $3;
  $26 = $2;
  $27 = (($26) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $outptr1 = $30;
  $31 = $3;
  $32 = $2;
  $33 = (($32) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($31<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $outptr2 = $36;
  $37 = $3;
  $38 = (($37) + 1)|0;
  $3 = $38;
  $col = 0;
  while(1) {
   $39 = $col;
   $40 = $num_cols;
   $41 = ($39>>>0)<($40>>>0);
   if (!($41)) {
    break;
   }
   $42 = $inptr;
   $43 = HEAP8[$42>>0]|0;
   $44 = $43&255;
   $r = $44;
   $45 = $inptr;
   $46 = (($45) + 1|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = $47&255;
   $g = $48;
   $49 = $inptr;
   $50 = (($49) + 2|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $b = $52;
   $53 = $r;
   $54 = (($53) + 0)|0;
   $55 = $ctab;
   $56 = (($55) + ($54<<2)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $g;
   $59 = (($58) + 256)|0;
   $60 = $ctab;
   $61 = (($60) + ($59<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($57) + ($62))|0;
   $64 = $b;
   $65 = (($64) + 512)|0;
   $66 = $ctab;
   $67 = (($66) + ($65<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = (($63) + ($68))|0;
   $70 = $69 >> 16;
   $71 = $70&255;
   $72 = $col;
   $73 = $outptr0;
   $74 = (($73) + ($72)|0);
   HEAP8[$74>>0] = $71;
   $75 = $r;
   $76 = (($75) + 768)|0;
   $77 = $ctab;
   $78 = (($77) + ($76<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $g;
   $81 = (($80) + 1024)|0;
   $82 = $ctab;
   $83 = (($82) + ($81<<2)|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($79) + ($84))|0;
   $86 = $b;
   $87 = (($86) + 1280)|0;
   $88 = $ctab;
   $89 = (($88) + ($87<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = (($85) + ($90))|0;
   $92 = $91 >> 16;
   $93 = $92&255;
   $94 = $col;
   $95 = $outptr1;
   $96 = (($95) + ($94)|0);
   HEAP8[$96>>0] = $93;
   $97 = $r;
   $98 = (($97) + 1280)|0;
   $99 = $ctab;
   $100 = (($99) + ($98<<2)|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = $g;
   $103 = (($102) + 1536)|0;
   $104 = $ctab;
   $105 = (($104) + ($103<<2)|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($101) + ($106))|0;
   $108 = $b;
   $109 = (($108) + 1792)|0;
   $110 = $ctab;
   $111 = (($110) + ($109<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = (($107) + ($112))|0;
   $114 = $113 >> 16;
   $115 = $114&255;
   $116 = $col;
   $117 = $outptr2;
   $118 = (($117) + ($116)|0);
   HEAP8[$118>>0] = $115;
   $119 = $inptr;
   $120 = (($119) + 3|0);
   $inptr = $120;
   $121 = $col;
   $122 = (($121) + 1)|0;
   $col = $122;
  }
 }
 STACKTOP = sp;return;
}
function _null_convert($cinfo,$input_buf,$output_buf,$output_row,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $output_row = $output_row|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $col = 0, $inptr = 0, $nc = 0, $num_cols = 0, $outptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $output_row;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $nc = $7;
 $8 = $0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $num_cols = $10;
 while(1) {
  $11 = $4;
  $12 = (($11) + -1)|0;
  $4 = $12;
  $13 = ($12|0)>=(0);
  if (!($13)) {
   break;
  }
  $ci = 0;
  while(1) {
   $14 = $ci;
   $15 = $nc;
   $16 = ($14|0)<($15|0);
   if (!($16)) {
    break;
   }
   $17 = $1;
   $18 = HEAP32[$17>>2]|0;
   $19 = $ci;
   $20 = (($18) + ($19)|0);
   $inptr = $20;
   $21 = $3;
   $22 = $ci;
   $23 = $2;
   $24 = (($23) + ($22<<2)|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (($25) + ($21<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $outptr = $27;
   $col = 0;
   while(1) {
    $28 = $col;
    $29 = $num_cols;
    $30 = ($28>>>0)<($29>>>0);
    if (!($30)) {
     break;
    }
    $31 = $inptr;
    $32 = HEAP8[$31>>0]|0;
    $33 = $outptr;
    $34 = (($33) + 1|0);
    $outptr = $34;
    HEAP8[$33>>0] = $32;
    $35 = $nc;
    $36 = $inptr;
    $37 = (($36) + ($35)|0);
    $inptr = $37;
    $38 = $col;
    $39 = (($38) + 1)|0;
    $col = $39;
   }
   $40 = $ci;
   $41 = (($40) + 1)|0;
   $ci = $41;
  }
  $42 = $1;
  $43 = (($42) + 4|0);
  $1 = $43;
  $44 = $3;
  $45 = (($44) + 1)|0;
  $3 = $45;
 }
 STACKTOP = sp;return;
}
function _cmyk_ycck_convert($cinfo,$input_buf,$output_buf,$output_row,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $output_row = $output_row|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $cconvert = 0;
 var $col = 0, $ctab = 0, $g = 0, $inptr = 0, $num_cols = 0, $outptr0 = 0, $outptr1 = 0, $outptr2 = 0, $outptr3 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $output_row;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 412|0);
 $7 = HEAP32[$6>>2]|0;
 $cconvert = $7;
 $8 = $cconvert;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $ctab = $10;
 $11 = $0;
 $12 = (($11) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $num_cols = $13;
 while(1) {
  $14 = $4;
  $15 = (($14) + -1)|0;
  $4 = $15;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $1;
  $18 = (($17) + 4|0);
  $1 = $18;
  $19 = HEAP32[$17>>2]|0;
  $inptr = $19;
  $20 = $3;
  $21 = $2;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + ($20<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $outptr0 = $24;
  $25 = $3;
  $26 = $2;
  $27 = (($26) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $outptr1 = $30;
  $31 = $3;
  $32 = $2;
  $33 = (($32) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + ($31<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $outptr2 = $36;
  $37 = $3;
  $38 = $2;
  $39 = (($38) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + ($37<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $outptr3 = $42;
  $43 = $3;
  $44 = (($43) + 1)|0;
  $3 = $44;
  $col = 0;
  while(1) {
   $45 = $col;
   $46 = $num_cols;
   $47 = ($45>>>0)<($46>>>0);
   if (!($47)) {
    break;
   }
   $48 = $inptr;
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = (255 - ($50))|0;
   $r = $51;
   $52 = $inptr;
   $53 = (($52) + 1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = (255 - ($55))|0;
   $g = $56;
   $57 = $inptr;
   $58 = (($57) + 2|0);
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = (255 - ($60))|0;
   $b = $61;
   $62 = $inptr;
   $63 = (($62) + 3|0);
   $64 = HEAP8[$63>>0]|0;
   $65 = $col;
   $66 = $outptr3;
   $67 = (($66) + ($65)|0);
   HEAP8[$67>>0] = $64;
   $68 = $r;
   $69 = (($68) + 0)|0;
   $70 = $ctab;
   $71 = (($70) + ($69<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $g;
   $74 = (($73) + 256)|0;
   $75 = $ctab;
   $76 = (($75) + ($74<<2)|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($72) + ($77))|0;
   $79 = $b;
   $80 = (($79) + 512)|0;
   $81 = $ctab;
   $82 = (($81) + ($80<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = (($78) + ($83))|0;
   $85 = $84 >> 16;
   $86 = $85&255;
   $87 = $col;
   $88 = $outptr0;
   $89 = (($88) + ($87)|0);
   HEAP8[$89>>0] = $86;
   $90 = $r;
   $91 = (($90) + 768)|0;
   $92 = $ctab;
   $93 = (($92) + ($91<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $g;
   $96 = (($95) + 1024)|0;
   $97 = $ctab;
   $98 = (($97) + ($96<<2)|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($94) + ($99))|0;
   $101 = $b;
   $102 = (($101) + 1280)|0;
   $103 = $ctab;
   $104 = (($103) + ($102<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = (($100) + ($105))|0;
   $107 = $106 >> 16;
   $108 = $107&255;
   $109 = $col;
   $110 = $outptr1;
   $111 = (($110) + ($109)|0);
   HEAP8[$111>>0] = $108;
   $112 = $r;
   $113 = (($112) + 1280)|0;
   $114 = $ctab;
   $115 = (($114) + ($113<<2)|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $g;
   $118 = (($117) + 1536)|0;
   $119 = $ctab;
   $120 = (($119) + ($118<<2)|0);
   $121 = HEAP32[$120>>2]|0;
   $122 = (($116) + ($121))|0;
   $123 = $b;
   $124 = (($123) + 1792)|0;
   $125 = $ctab;
   $126 = (($125) + ($124<<2)|0);
   $127 = HEAP32[$126>>2]|0;
   $128 = (($122) + ($127))|0;
   $129 = $128 >> 16;
   $130 = $129&255;
   $131 = $col;
   $132 = $outptr2;
   $133 = (($132) + ($131)|0);
   HEAP8[$133>>0] = $130;
   $134 = $inptr;
   $135 = (($134) + 4|0);
   $inptr = $135;
   $136 = $col;
   $137 = (($136) + 1)|0;
   $col = $137;
  }
 }
 STACKTOP = sp;return;
}
function _jinit_forward_dct($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $compptr = 0, $fdct = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,124)|0);
 $fdct = $6;
 $7 = $fdct;
 $8 = $0;
 $9 = (($8) + 420|0);
 HEAP32[$9>>2] = $7;
 $10 = $fdct;
 HEAP32[$10>>2] = 65;
 $ci = 0;
 $11 = $0;
 $12 = (($11) + 84|0);
 $13 = HEAP32[$12>>2]|0;
 $compptr = $13;
 while(1) {
  $14 = $ci;
  $15 = $0;
  $16 = (($15) + 76|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $0;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = (FUNCTION_TABLE_iiii[$22 & 511]($23,1,256)|0);
  $25 = $compptr;
  $26 = (($25) + 84|0);
  HEAP32[$26>>2] = $24;
  $27 = $ci;
  $28 = (($27) + 1)|0;
  $ci = $28;
  $29 = $compptr;
  $30 = (($29) + 88|0);
  $compptr = $30;
 }
 STACKTOP = sp;return;
}
function _start_pass_fdctmgr($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0;
 var $297 = 0.0, $298 = 0.0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $col = 0, $compptr = 0, $dtbl = 0, $fdct = 0, $fdtbl = 0, $i = 0, $method = 0, $qtbl = 0;
 var $qtblno = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 420|0);
 $3 = HEAP32[$2>>2]|0;
 $fdct = $3;
 $method = 0;
 $ci = 0;
 $4 = $0;
 $5 = (($4) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 $compptr = $6;
 while(1) {
  $7 = $ci;
  $8 = $0;
  $9 = (($8) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $compptr;
  $13 = (($12) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 << 8;
  $16 = $compptr;
  $17 = (($16) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($15) + ($18))|0;
  do {
   switch ($19|0) {
   case 3598:  {
    $68 = $ci;
    $69 = $fdct;
    $70 = (($69) + 44|0);
    $71 = (($70) + ($68<<2)|0);
    HEAP32[$71>>2] = 78;
    $method = 0;
    break;
   }
   case 1285:  {
    $36 = $ci;
    $37 = $fdct;
    $38 = (($37) + 44|0);
    $39 = (($38) + ($36<<2)|0);
    HEAP32[$39>>2] = 70;
    $method = 0;
    break;
   }
   case 257:  {
    $20 = $ci;
    $21 = $fdct;
    $22 = (($21) + 44|0);
    $23 = (($22) + ($20<<2)|0);
    HEAP32[$23>>2] = 66;
    $method = 0;
    break;
   }
   case 2313:  {
    $48 = $ci;
    $49 = $fdct;
    $50 = (($49) + 44|0);
    $51 = (($50) + ($48<<2)|0);
    HEAP32[$51>>2] = 73;
    $method = 0;
    break;
   }
   case 1548:  {
    $120 = $ci;
    $121 = $fdct;
    $122 = (($121) + 44|0);
    $123 = (($122) + ($120<<2)|0);
    HEAP32[$123>>2] = 91;
    $method = 0;
    break;
   }
   case 1026:  {
    $104 = $ci;
    $105 = $fdct;
    $106 = (($105) + 44|0);
    $107 = (($106) + ($104<<2)|0);
    HEAP32[$107>>2] = 87;
    $method = 0;
    break;
   }
   case 774:  {
    $132 = $ci;
    $133 = $fdct;
    $134 = (($133) + 44|0);
    $135 = (($134) + ($132<<2)|0);
    HEAP32[$135>>2] = 94;
    $method = 0;
    break;
   }
   case 2570:  {
    $52 = $ci;
    $53 = $fdct;
    $54 = (($53) + 44|0);
    $55 = (($54) + ($52<<2)|0);
    HEAP32[$55>>2] = 74;
    $method = 0;
    break;
   }
   case 3855:  {
    $72 = $ci;
    $73 = $fdct;
    $74 = (($73) + 44|0);
    $75 = (($74) + ($72<<2)|0);
    HEAP32[$75>>2] = 79;
    $method = 0;
    break;
   }
   case 771:  {
    $28 = $ci;
    $29 = $fdct;
    $30 = (($29) + 44|0);
    $31 = (($30) + ($28<<2)|0);
    HEAP32[$31>>2] = 68;
    $method = 0;
    break;
   }
   case 1542:  {
    $40 = $ci;
    $41 = $fdct;
    $42 = (($41) + 44|0);
    $43 = (($42) + ($40<<2)|0);
    HEAP32[$43>>2] = 71;
    $method = 0;
    break;
   }
   case 516:  {
    $136 = $ci;
    $137 = $fdct;
    $138 = (($137) + 44|0);
    $139 = (($138) + ($136<<2)|0);
    HEAP32[$139>>2] = 95;
    $method = 0;
    break;
   }
   case 2827:  {
    $56 = $ci;
    $57 = $fdct;
    $58 = (($57) + 44|0);
    $59 = (($58) + ($56<<2)|0);
    HEAP32[$59>>2] = 75;
    $method = 0;
    break;
   }
   case 3591:  {
    $84 = $ci;
    $85 = $fdct;
    $86 = (($85) + 44|0);
    $87 = (($86) + ($84<<2)|0);
    HEAP32[$87>>2] = 82;
    $method = 0;
    break;
   }
   case 1028:  {
    $32 = $ci;
    $33 = $fdct;
    $34 = (($33) + 44|0);
    $35 = (($34) + ($32<<2)|0);
    HEAP32[$35>>2] = 69;
    $method = 0;
    break;
   }
   case 2565:  {
    $92 = $ci;
    $93 = $fdct;
    $94 = (($93) + 44|0);
    $95 = (($94) + ($92<<2)|0);
    HEAP32[$95>>2] = 84;
    $method = 0;
    break;
   }
   case 513:  {
    $108 = $ci;
    $109 = $fdct;
    $110 = (($109) + 44|0);
    $111 = (($110) + ($108<<2)|0);
    HEAP32[$111>>2] = 88;
    $method = 0;
    break;
   }
   case 1290:  {
    $124 = $ci;
    $125 = $fdct;
    $126 = (($125) + 44|0);
    $127 = (($126) + ($124<<2)|0);
    HEAP32[$127>>2] = 92;
    $method = 0;
    break;
   }
   case 1032:  {
    $128 = $ci;
    $129 = $fdct;
    $130 = (($129) + 44|0);
    $131 = (($130) + ($128<<2)|0);
    HEAP32[$131>>2] = 93;
    $method = 0;
    break;
   }
   case 1806:  {
    $116 = $ci;
    $117 = $fdct;
    $118 = (($117) + 44|0);
    $119 = (($118) + ($116<<2)|0);
    HEAP32[$119>>2] = 90;
    $method = 0;
    break;
   }
   case 1799:  {
    $44 = $ci;
    $45 = $fdct;
    $46 = (($45) + 44|0);
    $47 = (($46) + ($44<<2)|0);
    HEAP32[$47>>2] = 72;
    $method = 0;
    break;
   }
   case 4112:  {
    $76 = $ci;
    $77 = $fdct;
    $78 = (($77) + 44|0);
    $79 = (($78) + ($76<<2)|0);
    HEAP32[$79>>2] = 80;
    $method = 0;
    break;
   }
   case 2052:  {
    $96 = $ci;
    $97 = $fdct;
    $98 = (($97) + 44|0);
    $99 = (($98) + ($96<<2)|0);
    HEAP32[$99>>2] = 85;
    $method = 0;
    break;
   }
   case 3341:  {
    $64 = $ci;
    $65 = $fdct;
    $66 = (($65) + 44|0);
    $67 = (($66) + ($64<<2)|0);
    HEAP32[$67>>2] = 77;
    $method = 0;
    break;
   }
   case 2064:  {
    $112 = $ci;
    $113 = $fdct;
    $114 = (($113) + 44|0);
    $115 = (($114) + ($112<<2)|0);
    HEAP32[$115>>2] = 89;
    $method = 0;
    break;
   }
   case 3084:  {
    $60 = $ci;
    $61 = $fdct;
    $62 = (($61) + 44|0);
    $63 = (($62) + ($60<<2)|0);
    HEAP32[$63>>2] = 76;
    $method = 0;
    break;
   }
   case 3078:  {
    $88 = $ci;
    $89 = $fdct;
    $90 = (($89) + 44|0);
    $91 = (($90) + ($88<<2)|0);
    HEAP32[$91>>2] = 83;
    $method = 0;
    break;
   }
   case 258:  {
    $140 = $ci;
    $141 = $fdct;
    $142 = (($141) + 44|0);
    $143 = (($142) + ($140<<2)|0);
    HEAP32[$143>>2] = 96;
    $method = 0;
    break;
   }
   case 2056:  {
    $144 = $0;
    $145 = (($144) + 232|0);
    $146 = HEAP32[$145>>2]|0;
    if ((($146|0) == 1)) {
     $151 = $ci;
     $152 = $fdct;
     $153 = (($152) + 44|0);
     $154 = (($153) + ($151<<2)|0);
     HEAP32[$154>>2] = 98;
     $method = 1;
    } else if ((($146|0) == 2)) {
     $155 = $ci;
     $156 = $fdct;
     $157 = (($156) + 84|0);
     $158 = (($157) + ($155<<2)|0);
     HEAP32[$158>>2] = 99;
     $method = 2;
    } else if ((($146|0) == 0)) {
     $147 = $ci;
     $148 = $fdct;
     $149 = (($148) + 44|0);
     $150 = (($149) + ($147<<2)|0);
     HEAP32[$150>>2] = 97;
     $method = 0;
    } else {
     $159 = $0;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($160) + 20|0);
     HEAP32[$161>>2] = 49;
     $162 = $0;
     $163 = HEAP32[$162>>2]|0;
     $164 = HEAP32[$163>>2]|0;
     $165 = $0;
     FUNCTION_TABLE_vi[$164 & 511]($165);
    }
    break;
   }
   case 4104:  {
    $80 = $ci;
    $81 = $fdct;
    $82 = (($81) + 44|0);
    $83 = (($82) + ($80<<2)|0);
    HEAP32[$83>>2] = 81;
    $method = 0;
    break;
   }
   case 1539:  {
    $100 = $ci;
    $101 = $fdct;
    $102 = (($101) + 44|0);
    $103 = (($102) + ($100<<2)|0);
    HEAP32[$103>>2] = 86;
    $method = 0;
    break;
   }
   case 514:  {
    $24 = $ci;
    $25 = $fdct;
    $26 = (($25) + 44|0);
    $27 = (($26) + ($24<<2)|0);
    HEAP32[$27>>2] = 67;
    $method = 0;
    break;
   }
   default: {
    $166 = $0;
    $167 = HEAP32[$166>>2]|0;
    $168 = (($167) + 20|0);
    HEAP32[$168>>2] = 7;
    $169 = $compptr;
    $170 = (($169) + 36|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = $0;
    $173 = HEAP32[$172>>2]|0;
    $174 = (($173) + 24|0);
    HEAP32[$174>>2] = $171;
    $175 = $compptr;
    $176 = (($175) + 40|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = $0;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($179) + 24|0);
    $181 = (($180) + 4|0);
    HEAP32[$181>>2] = $177;
    $182 = $0;
    $183 = HEAP32[$182>>2]|0;
    $184 = HEAP32[$183>>2]|0;
    $185 = $0;
    FUNCTION_TABLE_vi[$184 & 511]($185);
   }
   }
  } while(0);
  $186 = $compptr;
  $187 = (($186) + 16|0);
  $188 = HEAP32[$187>>2]|0;
  $qtblno = $188;
  $189 = $qtblno;
  $190 = ($189|0)<(0);
  if ($190) {
   label = 45;
  } else {
   $191 = $qtblno;
   $192 = ($191|0)>=(4);
   if ($192) {
    label = 45;
   } else {
    $193 = $qtblno;
    $194 = $0;
    $195 = (($194) + 88|0);
    $196 = (($195) + ($193<<2)|0);
    $197 = HEAP32[$196>>2]|0;
    $198 = ($197|0)==(0|0);
    if ($198) {
     label = 45;
    }
   }
  }
  if ((label|0) == 45) {
   label = 0;
   $199 = $0;
   $200 = HEAP32[$199>>2]|0;
   $201 = (($200) + 20|0);
   HEAP32[$201>>2] = 54;
   $202 = $qtblno;
   $203 = $0;
   $204 = HEAP32[$203>>2]|0;
   $205 = (($204) + 24|0);
   HEAP32[$205>>2] = $202;
   $206 = $0;
   $207 = HEAP32[$206>>2]|0;
   $208 = HEAP32[$207>>2]|0;
   $209 = $0;
   FUNCTION_TABLE_vi[$208 & 511]($209);
  }
  $210 = $qtblno;
  $211 = $0;
  $212 = (($211) + 88|0);
  $213 = (($212) + ($210<<2)|0);
  $214 = HEAP32[$213>>2]|0;
  $qtbl = $214;
  $215 = $method;
  if ((($215|0) == 0)) {
   $216 = $compptr;
   $217 = (($216) + 84|0);
   $218 = HEAP32[$217>>2]|0;
   $dtbl = $218;
   $i = 0;
   while(1) {
    $219 = $i;
    $220 = ($219|0)<(64);
    if (!($220)) {
     break;
    }
    $221 = $i;
    $222 = $qtbl;
    $223 = (($222) + ($221<<1)|0);
    $224 = HEAP16[$223>>1]|0;
    $225 = $224&65535;
    $226 = $compptr;
    $227 = (($226) + 52|0);
    $228 = HEAP32[$227>>2]|0;
    $229 = ($228|0)!=(0);
    $230 = $229 ? 4 : 3;
    $231 = $225 << $230;
    $232 = $i;
    $233 = $dtbl;
    $234 = (($233) + ($232<<2)|0);
    HEAP32[$234>>2] = $231;
    $235 = $i;
    $236 = (($235) + 1)|0;
    $i = $236;
   }
   $237 = $ci;
   $238 = $fdct;
   $239 = (($238) + 4|0);
   $240 = (($239) + ($237<<2)|0);
   HEAP32[$240>>2] = 100;
  } else if ((($215|0) == 1)) {
   $241 = $compptr;
   $242 = (($241) + 84|0);
   $243 = HEAP32[$242>>2]|0;
   $dtbl = $243;
   $i = 0;
   while(1) {
    $244 = $i;
    $245 = ($244|0)<(64);
    if (!($245)) {
     break;
    }
    $246 = $i;
    $247 = $qtbl;
    $248 = (($247) + ($246<<1)|0);
    $249 = HEAP16[$248>>1]|0;
    $250 = $249&65535;
    $251 = $i;
    $252 = (728 + ($251<<1)|0);
    $253 = HEAP16[$252>>1]|0;
    $254 = $253 << 16 >> 16;
    $255 = Math_imul($250, $254)|0;
    $256 = $compptr;
    $257 = (($256) + 52|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ($258|0)!=(0);
    $260 = $259 ? 10 : 11;
    $261 = (($260) - 1)|0;
    $262 = 1 << $261;
    $263 = (($255) + ($262))|0;
    $264 = $compptr;
    $265 = (($264) + 52|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = ($266|0)!=(0);
    $268 = $267 ? 10 : 11;
    $269 = $263 >> $268;
    $270 = $i;
    $271 = $dtbl;
    $272 = (($271) + ($270<<2)|0);
    HEAP32[$272>>2] = $269;
    $273 = $i;
    $274 = (($273) + 1)|0;
    $i = $274;
   }
   $275 = $ci;
   $276 = $fdct;
   $277 = (($276) + 4|0);
   $278 = (($277) + ($275<<2)|0);
   HEAP32[$278>>2] = 100;
  } else if ((($215|0) == 2)) {
   $279 = $compptr;
   $280 = (($279) + 84|0);
   $281 = HEAP32[$280>>2]|0;
   $fdtbl = $281;
   $i = 0;
   $row = 0;
   while(1) {
    $282 = $row;
    $283 = ($282|0)<(8);
    if (!($283)) {
     break;
    }
    $col = 0;
    while(1) {
     $284 = $col;
     $285 = ($284|0)<(8);
     if (!($285)) {
      break;
     }
     $286 = $i;
     $287 = $qtbl;
     $288 = (($287) + ($286<<1)|0);
     $289 = HEAP16[$288>>1]|0;
     $290 = (+($289&65535));
     $291 = $row;
     $292 = (856 + ($291<<3)|0);
     $293 = +HEAPF64[$292>>3];
     $294 = $290 * $293;
     $295 = $col;
     $296 = (856 + ($295<<3)|0);
     $297 = +HEAPF64[$296>>3];
     $298 = $294 * $297;
     $299 = $compptr;
     $300 = (($299) + 52|0);
     $301 = HEAP32[$300>>2]|0;
     $302 = ($301|0)!=(0);
     $303 = $302 ? 16.0 : 8.0;
     $304 = $298 * $303;
     $305 = 1.0 / $304;
     $306 = $305;
     $307 = $i;
     $308 = $fdtbl;
     $309 = (($308) + ($307<<2)|0);
     HEAPF32[$309>>2] = $306;
     $310 = $i;
     $311 = (($310) + 1)|0;
     $i = $311;
     $312 = $col;
     $313 = (($312) + 1)|0;
     $col = $313;
    }
    $314 = $row;
    $315 = (($314) + 1)|0;
    $row = $315;
   }
   $316 = $ci;
   $317 = $fdct;
   $318 = (($317) + 4|0);
   $319 = (($318) + ($316<<2)|0);
   HEAP32[$319>>2] = 101;
  } else {
   $320 = $0;
   $321 = HEAP32[$320>>2]|0;
   $322 = (($321) + 20|0);
   HEAP32[$322>>2] = 49;
   $323 = $0;
   $324 = HEAP32[$323>>2]|0;
   $325 = HEAP32[$324>>2]|0;
   $326 = $0;
   FUNCTION_TABLE_vi[$325 & 511]($326);
  }
  $327 = $ci;
  $328 = (($327) + 1)|0;
  $ci = $328;
  $329 = $compptr;
  $330 = (($329) + 88|0);
  $compptr = $330;
 }
 STACKTOP = sp;return;
}
function _forward_DCT($cinfo,$compptr,$sample_data,$coef_blocks,$start_row,$start_col,$num_blocks) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $sample_data = $sample_data|0;
 $coef_blocks = $coef_blocks|0;
 $start_row = $start_row|0;
 $start_col = $start_col|0;
 $num_blocks = $num_blocks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $bi = 0, $divisors = 0, $do_dct = 0, $fdct = 0, $i = 0, $output_ptr = 0, $qval = 0, $temp = 0, $workspace = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $workspace = sp + 24|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $sample_data;
 $3 = $coef_blocks;
 $4 = $start_row;
 $5 = $start_col;
 $6 = $num_blocks;
 $7 = $0;
 $8 = (($7) + 420|0);
 $9 = HEAP32[$8>>2]|0;
 $fdct = $9;
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $fdct;
 $14 = (($13) + 44|0);
 $15 = (($14) + ($12<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $do_dct = $16;
 $17 = $1;
 $18 = (($17) + 84|0);
 $19 = HEAP32[$18>>2]|0;
 $divisors = $19;
 $20 = $4;
 $21 = $2;
 $22 = (($21) + ($20<<2)|0);
 $2 = $22;
 $bi = 0;
 while(1) {
  $23 = $bi;
  $24 = $6;
  $25 = ($23>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = $do_dct;
  $27 = $2;
  $28 = $5;
  FUNCTION_TABLE_viii[$26 & 127]($workspace,$27,$28);
  $29 = $bi;
  $30 = $3;
  $31 = (($30) + ($29<<7)|0);
  $output_ptr = $31;
  $i = 0;
  while(1) {
   $32 = $i;
   $33 = ($32|0)<(64);
   if (!($33)) {
    break;
   }
   $34 = $i;
   $35 = $divisors;
   $36 = (($35) + ($34<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $qval = $37;
   $38 = $i;
   $39 = (($workspace) + ($38<<2)|0);
   $40 = HEAP32[$39>>2]|0;
   $temp = $40;
   $41 = $temp;
   $42 = ($41|0)<(0);
   if ($42) {
    $43 = $temp;
    $44 = (0 - ($43))|0;
    $temp = $44;
    $45 = $qval;
    $46 = $45 >> 1;
    $47 = $temp;
    $48 = (($47) + ($46))|0;
    $temp = $48;
    $49 = $temp;
    $50 = $qval;
    $51 = ($49|0)>=($50|0);
    if ($51) {
     $52 = $qval;
     $53 = $temp;
     $54 = (($53|0) / ($52|0))&-1;
     $temp = $54;
    } else {
     $temp = 0;
    }
    $55 = $temp;
    $56 = (0 - ($55))|0;
    $temp = $56;
   } else {
    $57 = $qval;
    $58 = $57 >> 1;
    $59 = $temp;
    $60 = (($59) + ($58))|0;
    $temp = $60;
    $61 = $temp;
    $62 = $qval;
    $63 = ($61|0)>=($62|0);
    if ($63) {
     $64 = $qval;
     $65 = $temp;
     $66 = (($65|0) / ($64|0))&-1;
     $temp = $66;
    } else {
     $temp = 0;
    }
   }
   $67 = $temp;
   $68 = $67&65535;
   $69 = $i;
   $70 = $output_ptr;
   $71 = (($70) + ($69<<1)|0);
   HEAP16[$71>>1] = $68;
   $72 = $i;
   $73 = (($72) + 1)|0;
   $i = $73;
  }
  $74 = $bi;
  $75 = (($74) + 1)|0;
  $bi = $75;
  $76 = $1;
  $77 = (($76) + 36|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $5;
  $80 = (($79) + ($78))|0;
  $5 = $80;
 }
 STACKTOP = sp;return;
}
function _forward_DCT_float($cinfo,$compptr,$sample_data,$coef_blocks,$start_row,$start_col,$num_blocks) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $sample_data = $sample_data|0;
 $coef_blocks = $coef_blocks|0;
 $start_row = $start_row|0;
 $start_col = $start_col|0;
 $num_blocks = $num_blocks|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bi = 0;
 var $divisors = 0, $do_dct = 0, $fdct = 0, $i = 0, $output_ptr = 0, $temp = 0.0, $workspace = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $workspace = sp + 16|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $sample_data;
 $3 = $coef_blocks;
 $4 = $start_row;
 $5 = $start_col;
 $6 = $num_blocks;
 $7 = $0;
 $8 = (($7) + 420|0);
 $9 = HEAP32[$8>>2]|0;
 $fdct = $9;
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $fdct;
 $14 = (($13) + 84|0);
 $15 = (($14) + ($12<<2)|0);
 $16 = HEAP32[$15>>2]|0;
 $do_dct = $16;
 $17 = $1;
 $18 = (($17) + 84|0);
 $19 = HEAP32[$18>>2]|0;
 $divisors = $19;
 $20 = $4;
 $21 = $2;
 $22 = (($21) + ($20<<2)|0);
 $2 = $22;
 $bi = 0;
 while(1) {
  $23 = $bi;
  $24 = $6;
  $25 = ($23>>>0)<($24>>>0);
  if (!($25)) {
   break;
  }
  $26 = $do_dct;
  $27 = $2;
  $28 = $5;
  FUNCTION_TABLE_viii[$26 & 127]($workspace,$27,$28);
  $29 = $bi;
  $30 = $3;
  $31 = (($30) + ($29<<7)|0);
  $output_ptr = $31;
  $i = 0;
  while(1) {
   $32 = $i;
   $33 = ($32|0)<(64);
   if (!($33)) {
    break;
   }
   $34 = $i;
   $35 = (($workspace) + ($34<<2)|0);
   $36 = +HEAPF32[$35>>2];
   $37 = $i;
   $38 = $divisors;
   $39 = (($38) + ($37<<2)|0);
   $40 = +HEAPF32[$39>>2];
   $41 = $36 * $40;
   $temp = $41;
   $42 = $temp;
   $43 = $42 + 16384.5;
   $44 = (~~(($43)));
   $45 = (($44) - 16384)|0;
   $46 = $45&65535;
   $47 = $i;
   $48 = $output_ptr;
   $49 = (($48) + ($47<<1)|0);
   HEAP16[$49>>1] = $46;
   $50 = $i;
   $51 = (($50) + 1)|0;
   $i = $51;
  }
  $52 = $bi;
  $53 = (($52) + 1)|0;
  $bi = $53;
  $54 = $1;
  $55 = (($54) + 36|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $5;
  $58 = (($57) + ($56))|0;
  $5 = $58;
 }
 STACKTOP = sp;return;
}
function _jinit_huff_encoder($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entropy = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,140)|0);
 $entropy = $6;
 $7 = $entropy;
 $8 = $0;
 $9 = (($8) + 424|0);
 HEAP32[$9>>2] = $7;
 $10 = $entropy;
 HEAP32[$10>>2] = 102;
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = ($11|0)<(4);
  if (!($12)) {
   break;
  }
  $13 = $i;
  $14 = $entropy;
  $15 = (($14) + 60|0);
  $16 = (($15) + ($13<<2)|0);
  HEAP32[$16>>2] = 0;
  $17 = $i;
  $18 = $entropy;
  $19 = (($18) + 44|0);
  $20 = (($19) + ($17<<2)|0);
  HEAP32[$20>>2] = 0;
  $21 = $i;
  $22 = $entropy;
  $23 = (($22) + 92|0);
  $24 = (($23) + ($21<<2)|0);
  HEAP32[$24>>2] = 0;
  $25 = $i;
  $26 = $entropy;
  $27 = (($26) + 76|0);
  $28 = (($27) + ($25<<2)|0);
  HEAP32[$28>>2] = 0;
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $31 = $0;
 $32 = (($31) + 268|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $entropy;
 $36 = (($35) + 136|0);
 HEAP32[$36>>2] = 0;
 STACKTOP = sp;return;
}
function _start_pass_huff($cinfo,$gather_statistics) {
 $cinfo = $cinfo|0;
 $gather_statistics = $gather_statistics|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0, $entropy = 0, $tbl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $gather_statistics;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $entropy;
  $8 = (($7) + 8|0);
  HEAP32[$8>>2] = 103;
 } else {
  $9 = $entropy;
  $10 = (($9) + 8|0);
  HEAP32[$10>>2] = 104;
 }
 $11 = $0;
 $12 = (($11) + 268|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $0;
  $16 = $entropy;
  $17 = (($16) + 120|0);
  HEAP32[$17>>2] = $15;
  $18 = $1;
  $19 = $entropy;
  $20 = (($19) + 108|0);
  HEAP32[$20>>2] = $18;
  $21 = $0;
  $22 = (($21) + 372|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)==(0);
  if ($24) {
   $25 = $0;
   $26 = (($25) + 364|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0);
   if ($28) {
    $29 = $entropy;
    $30 = (($29) + 4|0);
    HEAP32[$30>>2] = 105;
   } else {
    $31 = $entropy;
    $32 = (($31) + 4|0);
    HEAP32[$32>>2] = 106;
   }
  } else {
   $33 = $0;
   $34 = (($33) + 364|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = $entropy;
    $38 = (($37) + 4|0);
    HEAP32[$38>>2] = 107;
   } else {
    $39 = $entropy;
    $40 = (($39) + 4|0);
    HEAP32[$40>>2] = 108;
    $41 = $entropy;
    $42 = (($41) + 136|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(0|0);
    if ($44) {
     $45 = $0;
     $46 = (($45) + 4|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = HEAP32[$47>>2]|0;
     $49 = $0;
     $50 = (FUNCTION_TABLE_iiii[$48 & 511]($49,1,1000)|0);
     $51 = $entropy;
     $52 = (($51) + 136|0);
     HEAP32[$52>>2] = $50;
    }
   }
  }
  $53 = $0;
  $54 = (($53) + 296|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 24|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $entropy;
  $59 = (($58) + 124|0);
  HEAP32[$59>>2] = $57;
  $60 = $entropy;
  $61 = (($60) + 128|0);
  HEAP32[$61>>2] = 0;
  $62 = $entropy;
  $63 = (($62) + 132|0);
  HEAP32[$63>>2] = 0;
 } else {
  $64 = $1;
  $65 = ($64|0)!=(0);
  if ($65) {
   $66 = $entropy;
   $67 = (($66) + 4|0);
   HEAP32[$67>>2] = 109;
  } else {
   $68 = $entropy;
   $69 = (($68) + 4|0);
   HEAP32[$69>>2] = 110;
  }
 }
 $ci = 0;
 while(1) {
  $70 = $ci;
  $71 = $0;
  $72 = (($71) + 292|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($70|0)<($73|0);
  if (!($74)) {
   break;
  }
  $75 = $ci;
  $76 = $0;
  $77 = (($76) + 296|0);
  $78 = (($77) + ($75<<2)|0);
  $79 = HEAP32[$78>>2]|0;
  $compptr = $79;
  $80 = $0;
  $81 = (($80) + 364|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)==(0);
  if ($83) {
   $84 = $0;
   $85 = (($84) + 372|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = ($86|0)==(0);
   if ($87) {
    $88 = $compptr;
    $89 = (($88) + 20|0);
    $90 = HEAP32[$89>>2]|0;
    $tbl = $90;
    $91 = $1;
    $92 = ($91|0)!=(0);
    if ($92) {
     $93 = $tbl;
     $94 = ($93|0)<(0);
     if ($94) {
      label = 28;
     } else {
      $95 = $tbl;
      $96 = ($95|0)>=(4);
      if ($96) {
       label = 28;
      }
     }
     if ((label|0) == 28) {
      label = 0;
      $97 = $0;
      $98 = HEAP32[$97>>2]|0;
      $99 = (($98) + 20|0);
      HEAP32[$99>>2] = 52;
      $100 = $tbl;
      $101 = $0;
      $102 = HEAP32[$101>>2]|0;
      $103 = (($102) + 24|0);
      HEAP32[$103>>2] = $100;
      $104 = $0;
      $105 = HEAP32[$104>>2]|0;
      $106 = HEAP32[$105>>2]|0;
      $107 = $0;
      FUNCTION_TABLE_vi[$106 & 511]($107);
     }
     $108 = $tbl;
     $109 = $entropy;
     $110 = (($109) + 76|0);
     $111 = (($110) + ($108<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $114 = $0;
      $115 = (($114) + 4|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = HEAP32[$116>>2]|0;
      $118 = $0;
      $119 = (FUNCTION_TABLE_iiii[$117 & 511]($118,1,1028)|0);
      $120 = $tbl;
      $121 = $entropy;
      $122 = (($121) + 76|0);
      $123 = (($122) + ($120<<2)|0);
      HEAP32[$123>>2] = $119;
     }
     $124 = $tbl;
     $125 = $entropy;
     $126 = (($125) + 76|0);
     $127 = (($126) + ($124<<2)|0);
     $128 = HEAP32[$127>>2]|0;
     _memset(($128|0),0,1028)|0;
    } else {
     $129 = $0;
     $130 = $tbl;
     $131 = $tbl;
     $132 = $entropy;
     $133 = (($132) + 44|0);
     $134 = (($133) + ($131<<2)|0);
     _jpeg_make_c_derived_tbl($129,1,$130,$134);
    }
    $135 = $ci;
    $136 = $entropy;
    $137 = (($136) + 12|0);
    $138 = (($137) + 8|0);
    $139 = (($138) + ($135<<2)|0);
    HEAP32[$139>>2] = 0;
   }
  }
  $140 = $0;
  $141 = (($140) + 368|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = ($142|0)!=(0);
  if ($143) {
   $144 = $compptr;
   $145 = (($144) + 24|0);
   $146 = HEAP32[$145>>2]|0;
   $tbl = $146;
   $147 = $1;
   $148 = ($147|0)!=(0);
   if ($148) {
    $149 = $tbl;
    $150 = ($149|0)<(0);
    if ($150) {
     label = 38;
    } else {
     $151 = $tbl;
     $152 = ($151|0)>=(4);
     if ($152) {
      label = 38;
     }
    }
    if ((label|0) == 38) {
     label = 0;
     $153 = $0;
     $154 = HEAP32[$153>>2]|0;
     $155 = (($154) + 20|0);
     HEAP32[$155>>2] = 52;
     $156 = $tbl;
     $157 = $0;
     $158 = HEAP32[$157>>2]|0;
     $159 = (($158) + 24|0);
     HEAP32[$159>>2] = $156;
     $160 = $0;
     $161 = HEAP32[$160>>2]|0;
     $162 = HEAP32[$161>>2]|0;
     $163 = $0;
     FUNCTION_TABLE_vi[$162 & 511]($163);
    }
    $164 = $tbl;
    $165 = $entropy;
    $166 = (($165) + 92|0);
    $167 = (($166) + ($164<<2)|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = ($168|0)==(0|0);
    if ($169) {
     $170 = $0;
     $171 = (($170) + 4|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = HEAP32[$172>>2]|0;
     $174 = $0;
     $175 = (FUNCTION_TABLE_iiii[$173 & 511]($174,1,1028)|0);
     $176 = $tbl;
     $177 = $entropy;
     $178 = (($177) + 92|0);
     $179 = (($178) + ($176<<2)|0);
     HEAP32[$179>>2] = $175;
    }
    $180 = $tbl;
    $181 = $entropy;
    $182 = (($181) + 92|0);
    $183 = (($182) + ($180<<2)|0);
    $184 = HEAP32[$183>>2]|0;
    _memset(($184|0),0,1028)|0;
   } else {
    $185 = $0;
    $186 = $tbl;
    $187 = $tbl;
    $188 = $entropy;
    $189 = (($188) + 60|0);
    $190 = (($189) + ($187<<2)|0);
    _jpeg_make_c_derived_tbl($185,0,$186,$190);
   }
  }
  $191 = $ci;
  $192 = (($191) + 1)|0;
  $ci = $192;
 }
 $193 = $entropy;
 $194 = (($193) + 12|0);
 HEAP32[$194>>2] = 0;
 $195 = $entropy;
 $196 = (($195) + 12|0);
 $197 = (($196) + 4|0);
 HEAP32[$197>>2] = 0;
 $198 = $0;
 $199 = (($198) + 236|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = $entropy;
 $202 = (($201) + 36|0);
 HEAP32[$202>>2] = $200;
 $203 = $entropy;
 $204 = (($203) + 40|0);
 HEAP32[$204>>2] = 0;
 STACKTOP = sp;return;
}
function _finish_pass_gather($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $ci = 0, $compptr = 0, $did_ac = 0, $did_dc = 0, $entropy = 0, $htblptr = 0, $tbl = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $did_dc = sp + 16|0;
 $did_ac = sp;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 424|0);
 $3 = HEAP32[$2>>2]|0;
 $entropy = $3;
 $4 = $0;
 $5 = (($4) + 268|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $entropy;
  _emit_eobrun($8);
 }
 dest=$did_dc+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$did_ac+0|0; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $ci = 0;
 while(1) {
  $9 = $ci;
  $10 = $0;
  $11 = (($10) + 292|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $ci;
  $15 = $0;
  $16 = (($15) + 296|0);
  $17 = (($16) + ($14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $compptr = $18;
  $19 = $0;
  $20 = (($19) + 364|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0);
  if ($22) {
   $23 = $0;
   $24 = (($23) + 372|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = $compptr;
    $28 = (($27) + 20|0);
    $29 = HEAP32[$28>>2]|0;
    $tbl = $29;
    $30 = $tbl;
    $31 = (($did_dc) + ($30<<2)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)!=(0);
    if (!($33)) {
     $34 = $tbl;
     $35 = $0;
     $36 = (($35) + 120|0);
     $37 = (($36) + ($34<<2)|0);
     $htblptr = $37;
     $38 = $htblptr;
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = $0;
      $42 = (_jpeg_alloc_huff_table($41)|0);
      $43 = $htblptr;
      HEAP32[$43>>2] = $42;
     }
     $44 = $0;
     $45 = $htblptr;
     $46 = HEAP32[$45>>2]|0;
     $47 = $tbl;
     $48 = $entropy;
     $49 = (($48) + 76|0);
     $50 = (($49) + ($47<<2)|0);
     $51 = HEAP32[$50>>2]|0;
     _jpeg_gen_optimal_table($44,$46,$51);
     $52 = $tbl;
     $53 = (($did_dc) + ($52<<2)|0);
     HEAP32[$53>>2] = 1;
    }
   }
  }
  $54 = $0;
  $55 = (($54) + 368|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = $compptr;
   $59 = (($58) + 24|0);
   $60 = HEAP32[$59>>2]|0;
   $tbl = $60;
   $61 = $tbl;
   $62 = (($did_ac) + ($61<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)!=(0);
   if (!($64)) {
    $65 = $tbl;
    $66 = $0;
    $67 = (($66) + 136|0);
    $68 = (($67) + ($65<<2)|0);
    $htblptr = $68;
    $69 = $htblptr;
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if ($71) {
     $72 = $0;
     $73 = (_jpeg_alloc_huff_table($72)|0);
     $74 = $htblptr;
     HEAP32[$74>>2] = $73;
    }
    $75 = $0;
    $76 = $htblptr;
    $77 = HEAP32[$76>>2]|0;
    $78 = $tbl;
    $79 = $entropy;
    $80 = (($79) + 92|0);
    $81 = (($80) + ($78<<2)|0);
    $82 = HEAP32[$81>>2]|0;
    _jpeg_gen_optimal_table($75,$77,$82);
    $83 = $tbl;
    $84 = (($did_ac) + ($83<<2)|0);
    HEAP32[$84>>2] = 1;
   }
  }
  $85 = $ci;
  $86 = (($85) + 1)|0;
  $ci = $86;
 }
 STACKTOP = sp;return;
}
function _finish_pass_huff($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $entropy = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $state = sp;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 424|0);
 $3 = HEAP32[$2>>2]|0;
 $entropy = $3;
 $4 = $0;
 $5 = (($4) + 268|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $0;
  $9 = (($8) + 24|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $12 = $entropy;
  $13 = (($12) + 112|0);
  HEAP32[$13>>2] = $11;
  $14 = $0;
  $15 = (($14) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $entropy;
  $20 = (($19) + 116|0);
  HEAP32[$20>>2] = $18;
  $21 = $entropy;
  _emit_eobrun($21);
  $22 = $entropy;
  _flush_bits_e($22);
  $23 = $entropy;
  $24 = (($23) + 112|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $0;
  $27 = (($26) + 24|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP32[$28>>2] = $25;
  $29 = $entropy;
  $30 = (($29) + 116|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $0;
  $33 = (($32) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 4|0);
  HEAP32[$35>>2] = $31;
  STACKTOP = sp;return;
 }
 $36 = $0;
 $37 = (($36) + 24|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$state>>2] = $39;
 $40 = $0;
 $41 = (($40) + 24|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($state) + 4|0);
 HEAP32[$45>>2] = $44;
 $46 = (($state) + 8|0);
 $47 = $entropy;
 $48 = (($47) + 12|0);
 ;HEAP32[$46+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$46+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$46+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$46+12>>2]=HEAP32[$48+12>>2]|0;HEAP32[$46+16>>2]=HEAP32[$48+16>>2]|0;HEAP32[$46+20>>2]=HEAP32[$48+20>>2]|0;
 $49 = $0;
 $50 = (($state) + 32|0);
 HEAP32[$50>>2] = $49;
 $51 = (_flush_bits_s($state)|0);
 $52 = ($51|0)!=(0);
 if (!($52)) {
  $53 = $0;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 20|0);
  HEAP32[$55>>2] = 25;
  $56 = $0;
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$57>>2]|0;
  $59 = $0;
  FUNCTION_TABLE_vi[$58 & 511]($59);
 }
 $60 = HEAP32[$state>>2]|0;
 $61 = $0;
 $62 = (($61) + 24|0);
 $63 = HEAP32[$62>>2]|0;
 HEAP32[$63>>2] = $60;
 $64 = (($state) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $0;
 $67 = (($66) + 24|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + 4|0);
 HEAP32[$69>>2] = $65;
 $70 = $entropy;
 $71 = (($70) + 12|0);
 $72 = (($state) + 8|0);
 ;HEAP32[$71+0>>2]=HEAP32[$72+0>>2]|0;HEAP32[$71+4>>2]=HEAP32[$72+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$72+8>>2]|0;HEAP32[$71+12>>2]=HEAP32[$72+12>>2]|0;HEAP32[$71+16>>2]=HEAP32[$72+16>>2]|0;HEAP32[$71+20>>2]=HEAP32[$72+20>>2]|0;
 STACKTOP = sp;return;
}
function _encode_mcu_DC_first1($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $blkn = 0, $ci = 0, $entropy = 0, $nbits = 0, $tbl = 0, $temp = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $MCU_data;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $entropy;
 $10 = (($9) + 112|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $entropy;
 $17 = (($16) + 116|0);
 HEAP32[$17>>2] = $15;
 $18 = $0;
 $19 = (($18) + 236|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $entropy;
  $23 = (($22) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = $entropy;
   $27 = $entropy;
   $28 = (($27) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   _emit_restart_e($26,$29);
  }
 }
 $blkn = 0;
 while(1) {
  $30 = $blkn;
  $31 = $0;
  $32 = (($31) + 320|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $blkn;
  $36 = $0;
  $37 = (($36) + 324|0);
  $38 = (($37) + ($35<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $ci = $39;
  $40 = $ci;
  $41 = $0;
  $42 = (($41) + 296|0);
  $43 = (($42) + ($40<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) + 20|0);
  $46 = HEAP32[$45>>2]|0;
  $tbl = $46;
  $47 = $blkn;
  $48 = $1;
  $49 = (($48) + ($47<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = $0;
  $54 = (($53) + 376|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $52 >> $55;
  $temp = $56;
  $57 = $temp;
  $58 = $ci;
  $59 = $entropy;
  $60 = (($59) + 12|0);
  $61 = (($60) + 8|0);
  $62 = (($61) + ($58<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($57) - ($63))|0;
  $temp2 = $64;
  $65 = $temp;
  $66 = $ci;
  $67 = $entropy;
  $68 = (($67) + 12|0);
  $69 = (($68) + 8|0);
  $70 = (($69) + ($66<<2)|0);
  HEAP32[$70>>2] = $65;
  $71 = $temp2;
  $temp = $71;
  $72 = $temp;
  $73 = ($72|0)<(0);
  if ($73) {
   $74 = $temp;
   $75 = (0 - ($74))|0;
   $temp = $75;
   $76 = $temp2;
   $77 = (($76) + -1)|0;
   $temp2 = $77;
  }
  $nbits = 0;
  while(1) {
   $78 = $temp;
   $79 = ($78|0)!=(0);
   if (!($79)) {
    break;
   }
   $80 = $nbits;
   $81 = (($80) + 1)|0;
   $nbits = $81;
   $82 = $temp;
   $83 = $82 >> 1;
   $temp = $83;
  }
  $84 = $nbits;
  $85 = ($84|0)>(11);
  if ($85) {
   $86 = $0;
   $87 = HEAP32[$86>>2]|0;
   $88 = (($87) + 20|0);
   HEAP32[$88>>2] = 6;
   $89 = $0;
   $90 = HEAP32[$89>>2]|0;
   $91 = HEAP32[$90>>2]|0;
   $92 = $0;
   FUNCTION_TABLE_vi[$91 & 511]($92);
  }
  $93 = $entropy;
  $94 = $tbl;
  $95 = $nbits;
  _emit_dc_symbol($93,$94,$95);
  $96 = $nbits;
  $97 = ($96|0)!=(0);
  if ($97) {
   $98 = $entropy;
   $99 = $temp2;
   $100 = $nbits;
   _emit_bits_e($98,$99,$100);
  }
  $101 = $blkn;
  $102 = (($101) + 1)|0;
  $blkn = $102;
 }
 $103 = $entropy;
 $104 = (($103) + 112|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $0;
 $107 = (($106) + 24|0);
 $108 = HEAP32[$107>>2]|0;
 HEAP32[$108>>2] = $105;
 $109 = $entropy;
 $110 = (($109) + 116|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $0;
 $113 = (($112) + 24|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = (($114) + 4|0);
 HEAP32[$115>>2] = $111;
 $116 = $0;
 $117 = (($116) + 236|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)!=(0);
 if (!($119)) {
  STACKTOP = sp;return 1;
 }
 $120 = $entropy;
 $121 = (($120) + 36|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)==(0);
 if ($123) {
  $124 = $0;
  $125 = (($124) + 236|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = $entropy;
  $128 = (($127) + 36|0);
  HEAP32[$128>>2] = $126;
  $129 = $entropy;
  $130 = (($129) + 40|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($131) + 1)|0;
  HEAP32[$130>>2] = $132;
  $133 = $entropy;
  $134 = (($133) + 40|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $135 & 7;
  HEAP32[$134>>2] = $136;
 }
 $137 = $entropy;
 $138 = (($137) + 36|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = (($139) + -1)|0;
 HEAP32[$138>>2] = $140;
 STACKTOP = sp;return 1;
}
function _encode_mcu_AC_first2($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Al = 0, $Se = 0, $block = 0, $entropy = 0, $k = 0, $natural_order = 0, $nbits = 0, $r = 0, $temp = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $MCU_data;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $entropy;
 $10 = (($9) + 112|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $entropy;
 $17 = (($16) + 116|0);
 HEAP32[$17>>2] = $15;
 $18 = $0;
 $19 = (($18) + 236|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $entropy;
  $23 = (($22) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = $entropy;
   $27 = $entropy;
   $28 = (($27) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   _emit_restart_e($26,$29);
  }
 }
 $30 = $0;
 $31 = (($30) + 368|0);
 $32 = HEAP32[$31>>2]|0;
 $Se = $32;
 $33 = $0;
 $34 = (($33) + 376|0);
 $35 = HEAP32[$34>>2]|0;
 $Al = $35;
 $36 = $0;
 $37 = (($36) + 384|0);
 $38 = HEAP32[$37>>2]|0;
 $natural_order = $38;
 $39 = $1;
 $40 = HEAP32[$39>>2]|0;
 $block = $40;
 $r = 0;
 $41 = $0;
 $42 = (($41) + 364|0);
 $43 = HEAP32[$42>>2]|0;
 $k = $43;
 while(1) {
  $44 = $k;
  $45 = $Se;
  $46 = ($44|0)<=($45|0);
  if (!($46)) {
   break;
  }
  $47 = $k;
  $48 = $natural_order;
  $49 = (($48) + ($47<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $block;
  $52 = (($51) + ($50<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $temp = $54;
  $55 = ($54|0)==(0);
  do {
   if ($55) {
    $56 = $r;
    $57 = (($56) + 1)|0;
    $r = $57;
   } else {
    $58 = $temp;
    $59 = ($58|0)<(0);
    if ($59) {
     $60 = $temp;
     $61 = (0 - ($60))|0;
     $temp = $61;
     $62 = $Al;
     $63 = $temp;
     $64 = $63 >> $62;
     $temp = $64;
     $65 = $temp;
     $66 = $65 ^ -1;
     $temp2 = $66;
    } else {
     $67 = $Al;
     $68 = $temp;
     $69 = $68 >> $67;
     $temp = $69;
     $70 = $temp;
     $temp2 = $70;
    }
    $71 = $temp;
    $72 = ($71|0)==(0);
    if ($72) {
     $73 = $r;
     $74 = (($73) + 1)|0;
     $r = $74;
     break;
    }
    $75 = $entropy;
    $76 = (($75) + 128|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77>>>0)>(0);
    if ($78) {
     $79 = $entropy;
     _emit_eobrun($79);
    }
    while(1) {
     $80 = $r;
     $81 = ($80|0)>(15);
     if (!($81)) {
      break;
     }
     $82 = $entropy;
     $83 = $entropy;
     $84 = (($83) + 124|0);
     $85 = HEAP32[$84>>2]|0;
     _emit_ac_symbol($82,$85,240);
     $86 = $r;
     $87 = (($86) - 16)|0;
     $r = $87;
    }
    $nbits = 1;
    while(1) {
     $88 = $temp;
     $89 = $88 >> 1;
     $temp = $89;
     $90 = ($89|0)!=(0);
     if (!($90)) {
      break;
     }
     $91 = $nbits;
     $92 = (($91) + 1)|0;
     $nbits = $92;
    }
    $93 = $nbits;
    $94 = ($93|0)>(10);
    if ($94) {
     $95 = $0;
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) + 20|0);
     HEAP32[$97>>2] = 6;
     $98 = $0;
     $99 = HEAP32[$98>>2]|0;
     $100 = HEAP32[$99>>2]|0;
     $101 = $0;
     FUNCTION_TABLE_vi[$100 & 511]($101);
    }
    $102 = $entropy;
    $103 = $entropy;
    $104 = (($103) + 124|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $r;
    $107 = $106 << 4;
    $108 = $nbits;
    $109 = (($107) + ($108))|0;
    _emit_ac_symbol($102,$105,$109);
    $110 = $entropy;
    $111 = $temp2;
    $112 = $nbits;
    _emit_bits_e($110,$111,$112);
    $r = 0;
   }
  } while(0);
  $113 = $k;
  $114 = (($113) + 1)|0;
  $k = $114;
 }
 $115 = $r;
 $116 = ($115|0)>(0);
 if ($116) {
  $117 = $entropy;
  $118 = (($117) + 128|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + 1)|0;
  HEAP32[$118>>2] = $120;
  $121 = $entropy;
  $122 = (($121) + 128|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($123|0)==(32767);
  if ($124) {
   $125 = $entropy;
   _emit_eobrun($125);
  }
 }
 $126 = $entropy;
 $127 = (($126) + 112|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $0;
 $130 = (($129) + 24|0);
 $131 = HEAP32[$130>>2]|0;
 HEAP32[$131>>2] = $128;
 $132 = $entropy;
 $133 = (($132) + 116|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = $0;
 $136 = (($135) + 24|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = (($137) + 4|0);
 HEAP32[$138>>2] = $134;
 $139 = $0;
 $140 = (($139) + 236|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)!=(0);
 if (!($142)) {
  STACKTOP = sp;return 1;
 }
 $143 = $entropy;
 $144 = (($143) + 36|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)==(0);
 if ($146) {
  $147 = $0;
  $148 = (($147) + 236|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = $entropy;
  $151 = (($150) + 36|0);
  HEAP32[$151>>2] = $149;
  $152 = $entropy;
  $153 = (($152) + 40|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (($154) + 1)|0;
  HEAP32[$153>>2] = $155;
  $156 = $entropy;
  $157 = (($156) + 40|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $158 & 7;
  HEAP32[$157>>2] = $159;
 }
 $160 = $entropy;
 $161 = (($160) + 36|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = (($162) + -1)|0;
 HEAP32[$161>>2] = $163;
 STACKTOP = sp;return 1;
}
function _encode_mcu_DC_refine3($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $Al = 0, $blkn = 0, $entropy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $MCU_data;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $entropy;
 $10 = (($9) + 112|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $entropy;
 $17 = (($16) + 116|0);
 HEAP32[$17>>2] = $15;
 $18 = $0;
 $19 = (($18) + 236|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $entropy;
  $23 = (($22) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = $entropy;
   $27 = $entropy;
   $28 = (($27) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   _emit_restart_e($26,$29);
  }
 }
 $30 = $0;
 $31 = (($30) + 376|0);
 $32 = HEAP32[$31>>2]|0;
 $Al = $32;
 $blkn = 0;
 while(1) {
  $33 = $blkn;
  $34 = $0;
  $35 = (($34) + 320|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = $entropy;
  $39 = $blkn;
  $40 = $1;
  $41 = (($40) + ($39<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = $Al;
  $46 = $44 >> $45;
  _emit_bits_e($38,$46,1);
  $47 = $blkn;
  $48 = (($47) + 1)|0;
  $blkn = $48;
 }
 $49 = $entropy;
 $50 = (($49) + 112|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $0;
 $53 = (($52) + 24|0);
 $54 = HEAP32[$53>>2]|0;
 HEAP32[$54>>2] = $51;
 $55 = $entropy;
 $56 = (($55) + 116|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $0;
 $59 = (($58) + 24|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 4|0);
 HEAP32[$61>>2] = $57;
 $62 = $0;
 $63 = (($62) + 236|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0);
 if (!($65)) {
  STACKTOP = sp;return 1;
 }
 $66 = $entropy;
 $67 = (($66) + 36|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)==(0);
 if ($69) {
  $70 = $0;
  $71 = (($70) + 236|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = $entropy;
  $74 = (($73) + 36|0);
  HEAP32[$74>>2] = $72;
  $75 = $entropy;
  $76 = (($75) + 40|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + 1)|0;
  HEAP32[$76>>2] = $78;
  $79 = $entropy;
  $80 = (($79) + 40|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $81 & 7;
  HEAP32[$80>>2] = $82;
 }
 $83 = $entropy;
 $84 = (($83) + 36|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + -1)|0;
 HEAP32[$84>>2] = $86;
 STACKTOP = sp;return 1;
}
function _encode_mcu_AC_refine4($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Al = 0, $BR = 0, $BR_buffer = 0, $EOB = 0, $Se = 0, $absvalues = 0, $block = 0, $entropy = 0, $k = 0, $natural_order = 0, $r = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0;
 $absvalues = sp;
 $0 = $cinfo;
 $1 = $MCU_data;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $entropy;
 $10 = (($9) + 112|0);
 HEAP32[$10>>2] = $8;
 $11 = $0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $entropy;
 $17 = (($16) + 116|0);
 HEAP32[$17>>2] = $15;
 $18 = $0;
 $19 = (($18) + 236|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $entropy;
  $23 = (($22) + 36|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = $entropy;
   $27 = $entropy;
   $28 = (($27) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   _emit_restart_e($26,$29);
  }
 }
 $30 = $0;
 $31 = (($30) + 368|0);
 $32 = HEAP32[$31>>2]|0;
 $Se = $32;
 $33 = $0;
 $34 = (($33) + 376|0);
 $35 = HEAP32[$34>>2]|0;
 $Al = $35;
 $36 = $0;
 $37 = (($36) + 384|0);
 $38 = HEAP32[$37>>2]|0;
 $natural_order = $38;
 $39 = $1;
 $40 = HEAP32[$39>>2]|0;
 $block = $40;
 $EOB = 0;
 $41 = $0;
 $42 = (($41) + 364|0);
 $43 = HEAP32[$42>>2]|0;
 $k = $43;
 while(1) {
  $44 = $k;
  $45 = $Se;
  $46 = ($44|0)<=($45|0);
  if (!($46)) {
   break;
  }
  $47 = $k;
  $48 = $natural_order;
  $49 = (($48) + ($47<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = $block;
  $52 = (($51) + ($50<<1)|0);
  $53 = HEAP16[$52>>1]|0;
  $54 = $53 << 16 >> 16;
  $temp = $54;
  $55 = $temp;
  $56 = ($55|0)<(0);
  if ($56) {
   $57 = $temp;
   $58 = (0 - ($57))|0;
   $temp = $58;
  }
  $59 = $Al;
  $60 = $temp;
  $61 = $60 >> $59;
  $temp = $61;
  $62 = $temp;
  $63 = $k;
  $64 = (($absvalues) + ($63<<2)|0);
  HEAP32[$64>>2] = $62;
  $65 = $temp;
  $66 = ($65|0)==(1);
  if ($66) {
   $67 = $k;
   $EOB = $67;
  }
  $68 = $k;
  $69 = (($68) + 1)|0;
  $k = $69;
 }
 $r = 0;
 $BR = 0;
 $70 = $entropy;
 $71 = (($70) + 136|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $entropy;
 $74 = (($73) + 132|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($72) + ($75)|0);
 $BR_buffer = $76;
 $77 = $0;
 $78 = (($77) + 364|0);
 $79 = HEAP32[$78>>2]|0;
 $k = $79;
 while(1) {
  $80 = $k;
  $81 = $Se;
  $82 = ($80|0)<=($81|0);
  if (!($82)) {
   break;
  }
  $83 = $k;
  $84 = (($absvalues) + ($83<<2)|0);
  $85 = HEAP32[$84>>2]|0;
  $temp = $85;
  $86 = ($85|0)==(0);
  do {
   if ($86) {
    $87 = $r;
    $88 = (($87) + 1)|0;
    $r = $88;
   } else {
    while(1) {
     $89 = $r;
     $90 = ($89|0)>(15);
     if ($90) {
      $91 = $k;
      $92 = $EOB;
      $93 = ($91|0)<=($92|0);
      $204 = $93;
     } else {
      $204 = 0;
     }
     if (!($204)) {
      break;
     }
     $94 = $entropy;
     _emit_eobrun($94);
     $95 = $entropy;
     $96 = $entropy;
     $97 = (($96) + 124|0);
     $98 = HEAP32[$97>>2]|0;
     _emit_ac_symbol($95,$98,240);
     $99 = $r;
     $100 = (($99) - 16)|0;
     $r = $100;
     $101 = $entropy;
     $102 = $BR_buffer;
     $103 = $BR;
     _emit_buffered_bits($101,$102,$103);
     $104 = $entropy;
     $105 = (($104) + 136|0);
     $106 = HEAP32[$105>>2]|0;
     $BR_buffer = $106;
     $BR = 0;
    }
    $107 = $temp;
    $108 = ($107|0)>(1);
    if ($108) {
     $109 = $temp;
     $110 = $109 & 1;
     $111 = $110&255;
     $112 = $BR;
     $113 = (($112) + 1)|0;
     $BR = $113;
     $114 = $BR_buffer;
     $115 = (($114) + ($112)|0);
     HEAP8[$115>>0] = $111;
     break;
    } else {
     $116 = $entropy;
     _emit_eobrun($116);
     $117 = $entropy;
     $118 = $entropy;
     $119 = (($118) + 124|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = $r;
     $122 = $121 << 4;
     $123 = (($122) + 1)|0;
     _emit_ac_symbol($117,$120,$123);
     $124 = $k;
     $125 = $natural_order;
     $126 = (($125) + ($124<<2)|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = $block;
     $129 = (($128) + ($127<<1)|0);
     $130 = HEAP16[$129>>1]|0;
     $131 = $130 << 16 >> 16;
     $132 = ($131|0)<(0);
     $133 = $132 ? 0 : 1;
     $temp = $133;
     $134 = $entropy;
     $135 = $temp;
     _emit_bits_e($134,$135,1);
     $136 = $entropy;
     $137 = $BR_buffer;
     $138 = $BR;
     _emit_buffered_bits($136,$137,$138);
     $139 = $entropy;
     $140 = (($139) + 136|0);
     $141 = HEAP32[$140>>2]|0;
     $BR_buffer = $141;
     $BR = 0;
     $r = 0;
     break;
    }
   }
  } while(0);
  $142 = $k;
  $143 = (($142) + 1)|0;
  $k = $143;
 }
 $144 = $r;
 $145 = ($144|0)>(0);
 if ($145) {
  label = 28;
 } else {
  $146 = $BR;
  $147 = ($146>>>0)>(0);
  if ($147) {
   label = 28;
  }
 }
 if ((label|0) == 28) {
  $148 = $entropy;
  $149 = (($148) + 128|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($150) + 1)|0;
  HEAP32[$149>>2] = $151;
  $152 = $BR;
  $153 = $entropy;
  $154 = (($153) + 132|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = (($155) + ($152))|0;
  HEAP32[$154>>2] = $156;
  $157 = $entropy;
  $158 = (($157) + 128|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($159|0)==(32767);
  if ($160) {
   label = 30;
  } else {
   $161 = $entropy;
   $162 = (($161) + 132|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = ($163>>>0)>(937);
   if ($164) {
    label = 30;
   }
  }
  if ((label|0) == 30) {
   $165 = $entropy;
   _emit_eobrun($165);
  }
 }
 $166 = $entropy;
 $167 = (($166) + 112|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = $0;
 $170 = (($169) + 24|0);
 $171 = HEAP32[$170>>2]|0;
 HEAP32[$171>>2] = $168;
 $172 = $entropy;
 $173 = (($172) + 116|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = $0;
 $176 = (($175) + 24|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = (($177) + 4|0);
 HEAP32[$178>>2] = $174;
 $179 = $0;
 $180 = (($179) + 236|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = ($181|0)!=(0);
 if (!($182)) {
  STACKTOP = sp;return 1;
 }
 $183 = $entropy;
 $184 = (($183) + 36|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = ($185|0)==(0);
 if ($186) {
  $187 = $0;
  $188 = (($187) + 236|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = $entropy;
  $191 = (($190) + 36|0);
  HEAP32[$191>>2] = $189;
  $192 = $entropy;
  $193 = (($192) + 40|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = (($194) + 1)|0;
  HEAP32[$193>>2] = $195;
  $196 = $entropy;
  $197 = (($196) + 40|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $198 & 7;
  HEAP32[$197>>2] = $199;
 }
 $200 = $entropy;
 $201 = (($200) + 36|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = (($202) + -1)|0;
 HEAP32[$201>>2] = $203;
 STACKTOP = sp;return 1;
}
function _encode_mcu_gather($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $blkn = 0, $ci = 0, $compptr = 0, $entropy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $MCU_data;
 $2 = $0;
 $3 = (($2) + 424|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 $6 = (($5) + 236|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $entropy;
  $10 = (($9) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $ci = 0;
   while(1) {
    $13 = $ci;
    $14 = $0;
    $15 = (($14) + 292|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($13|0)<($16|0);
    if (!($17)) {
     break;
    }
    $18 = $ci;
    $19 = $entropy;
    $20 = (($19) + 12|0);
    $21 = (($20) + 8|0);
    $22 = (($21) + ($18<<2)|0);
    HEAP32[$22>>2] = 0;
    $23 = $ci;
    $24 = (($23) + 1)|0;
    $ci = $24;
   }
   $25 = $0;
   $26 = (($25) + 236|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $entropy;
   $29 = (($28) + 36|0);
   HEAP32[$29>>2] = $27;
  }
  $30 = $entropy;
  $31 = (($30) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + -1)|0;
  HEAP32[$31>>2] = $33;
 }
 $blkn = 0;
 while(1) {
  $34 = $blkn;
  $35 = $0;
  $36 = (($35) + 320|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $blkn;
  $40 = $0;
  $41 = (($40) + 324|0);
  $42 = (($41) + ($39<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $ci = $43;
  $44 = $ci;
  $45 = $0;
  $46 = (($45) + 296|0);
  $47 = (($46) + ($44<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $compptr = $48;
  $49 = $0;
  $50 = $blkn;
  $51 = $1;
  $52 = (($51) + ($50<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $ci;
  $55 = $entropy;
  $56 = (($55) + 12|0);
  $57 = (($56) + 8|0);
  $58 = (($57) + ($54<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $compptr;
  $61 = (($60) + 20|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $entropy;
  $64 = (($63) + 76|0);
  $65 = (($64) + ($62<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $compptr;
  $68 = (($67) + 24|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $entropy;
  $71 = (($70) + 92|0);
  $72 = (($71) + ($69<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  _htest_one_block($49,$53,$59,$66,$73);
  $74 = $blkn;
  $75 = $1;
  $76 = (($75) + ($74<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = $ci;
  $81 = $entropy;
  $82 = (($81) + 12|0);
  $83 = (($82) + 8|0);
  $84 = (($83) + ($80<<2)|0);
  HEAP32[$84>>2] = $79;
  $85 = $blkn;
  $86 = (($85) + 1)|0;
  $blkn = $86;
 }
 STACKTOP = sp;return 1;
}
function _encode_mcu_huff($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blkn = 0, $ci = 0, $compptr = 0, $entropy = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $state = sp + 12|0;
 $1 = $cinfo;
 $2 = $MCU_data;
 $3 = $1;
 $4 = (($3) + 424|0);
 $5 = HEAP32[$4>>2]|0;
 $entropy = $5;
 $6 = $1;
 $7 = (($6) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$state>>2] = $9;
 $10 = $1;
 $11 = (($10) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($state) + 4|0);
 HEAP32[$15>>2] = $14;
 $16 = (($state) + 8|0);
 $17 = $entropy;
 $18 = (($17) + 12|0);
 ;HEAP32[$16+0>>2]=HEAP32[$18+0>>2]|0;HEAP32[$16+4>>2]=HEAP32[$18+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[$18+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[$18+12>>2]|0;HEAP32[$16+16>>2]=HEAP32[$18+16>>2]|0;HEAP32[$16+20>>2]=HEAP32[$18+20>>2]|0;
 $19 = $1;
 $20 = (($state) + 32|0);
 HEAP32[$20>>2] = $19;
 $21 = $1;
 $22 = (($21) + 236|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)!=(0);
 if ($24) {
  $25 = $entropy;
  $26 = (($25) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(0);
  do {
   if ($28) {
    $29 = $entropy;
    $30 = (($29) + 40|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (_emit_restart_s($state,$31)|0);
    $33 = ($32|0)!=(0);
    if ($33) {
     break;
    }
    $0 = 0;
    $124 = $0;
    STACKTOP = sp;return ($124|0);
   }
  } while(0);
 }
 $blkn = 0;
 while(1) {
  $34 = $blkn;
  $35 = $1;
  $36 = (($35) + 320|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($34|0)<($37|0);
  if (!($38)) {
   break;
  }
  $39 = $blkn;
  $40 = $1;
  $41 = (($40) + 324|0);
  $42 = (($41) + ($39<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $ci = $43;
  $44 = $ci;
  $45 = $1;
  $46 = (($45) + 296|0);
  $47 = (($46) + ($44<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $compptr = $48;
  $49 = $blkn;
  $50 = $2;
  $51 = (($50) + ($49<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $ci;
  $54 = (($state) + 8|0);
  $55 = (($54) + 8|0);
  $56 = (($55) + ($53<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $compptr;
  $59 = (($58) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $entropy;
  $62 = (($61) + 44|0);
  $63 = (($62) + ($60<<2)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = $compptr;
  $66 = (($65) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = $entropy;
  $69 = (($68) + 60|0);
  $70 = (($69) + ($67<<2)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (_encode_one_block($state,$52,$57,$64,$71)|0);
  $73 = ($72|0)!=(0);
  if (!($73)) {
   label = 10;
   break;
  }
  $74 = $blkn;
  $75 = $2;
  $76 = (($75) + ($74<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = $ci;
  $81 = (($state) + 8|0);
  $82 = (($81) + 8|0);
  $83 = (($82) + ($80<<2)|0);
  HEAP32[$83>>2] = $79;
  $84 = $blkn;
  $85 = (($84) + 1)|0;
  $blkn = $85;
 }
 if ((label|0) == 10) {
  $0 = 0;
  $124 = $0;
  STACKTOP = sp;return ($124|0);
 }
 $86 = HEAP32[$state>>2]|0;
 $87 = $1;
 $88 = (($87) + 24|0);
 $89 = HEAP32[$88>>2]|0;
 HEAP32[$89>>2] = $86;
 $90 = (($state) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $1;
 $93 = (($92) + 24|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + 4|0);
 HEAP32[$95>>2] = $91;
 $96 = $entropy;
 $97 = (($96) + 12|0);
 $98 = (($state) + 8|0);
 ;HEAP32[$97+0>>2]=HEAP32[$98+0>>2]|0;HEAP32[$97+4>>2]=HEAP32[$98+4>>2]|0;HEAP32[$97+8>>2]=HEAP32[$98+8>>2]|0;HEAP32[$97+12>>2]=HEAP32[$98+12>>2]|0;HEAP32[$97+16>>2]=HEAP32[$98+16>>2]|0;HEAP32[$97+20>>2]=HEAP32[$98+20>>2]|0;
 $99 = $1;
 $100 = (($99) + 236|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)!=(0);
 if ($102) {
  $103 = $entropy;
  $104 = (($103) + 36|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)==(0);
  if ($106) {
   $107 = $1;
   $108 = (($107) + 236|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = $entropy;
   $111 = (($110) + 36|0);
   HEAP32[$111>>2] = $109;
   $112 = $entropy;
   $113 = (($112) + 40|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 1)|0;
   HEAP32[$113>>2] = $115;
   $116 = $entropy;
   $117 = (($116) + 40|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = $118 & 7;
   HEAP32[$117>>2] = $119;
  }
  $120 = $entropy;
  $121 = (($120) + 36|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (($122) + -1)|0;
  HEAP32[$121>>2] = $123;
 }
 $0 = 1;
 $124 = $0;
 STACKTOP = sp;return ($124|0);
}
function _jpeg_make_c_derived_tbl($cinfo,$isDC,$tblno,$pdtbl) {
 $cinfo = $cinfo|0;
 $isDC = $isDC|0;
 $tblno = $tblno|0;
 $pdtbl = $pdtbl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code = 0, $dtbl = 0, $htbl = 0, $huffcode = 0, $huffsize = 0, $i = 0, $l = 0, $lastp = 0, $maxsymbol = 0;
 var $p = 0, $si = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1344|0;
 $huffsize = sp + 1080|0;
 $huffcode = sp + 4|0;
 $0 = $cinfo;
 $1 = $isDC;
 $2 = $tblno;
 $3 = $pdtbl;
 $4 = $2;
 $5 = ($4|0)<(0);
 if ($5) {
  label = 3;
 } else {
  $6 = $2;
  $7 = ($6|0)>=(4);
  if ($7) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 20|0);
  HEAP32[$10>>2] = 52;
  $11 = $2;
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 24|0);
  HEAP32[$14>>2] = $11;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  FUNCTION_TABLE_vi[$17 & 511]($18);
 }
 $19 = $1;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $2;
  $22 = $0;
  $23 = (($22) + 120|0);
  $24 = (($23) + ($21<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $31 = $25;
 } else {
  $26 = $2;
  $27 = $0;
  $28 = (($27) + 136|0);
  $29 = (($28) + ($26<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30;
 }
 $htbl = $31;
 $32 = $htbl;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $34 = $0;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 20|0);
  HEAP32[$36>>2] = 52;
  $37 = $2;
  $38 = $0;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 24|0);
  HEAP32[$40>>2] = $37;
  $41 = $0;
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$42>>2]|0;
  $44 = $0;
  FUNCTION_TABLE_vi[$43 & 511]($44);
 }
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 if ($47) {
  $48 = $0;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $52 = $0;
  $53 = (FUNCTION_TABLE_iiii[$51 & 511]($52,1,1280)|0);
  $54 = $3;
  HEAP32[$54>>2] = $53;
 }
 $55 = $3;
 $56 = HEAP32[$55>>2]|0;
 $dtbl = $56;
 $p = 0;
 $l = 1;
 while(1) {
  $57 = $l;
  $58 = ($57|0)<=(16);
  if (!($58)) {
   break;
  }
  $59 = $l;
  $60 = $htbl;
  $61 = (($60) + ($59)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $i = $63;
  $64 = $i;
  $65 = ($64|0)<(0);
  if ($65) {
   label = 15;
  } else {
   $66 = $p;
   $67 = $i;
   $68 = (($66) + ($67))|0;
   $69 = ($68|0)>(256);
   if ($69) {
    label = 15;
   }
  }
  if ((label|0) == 15) {
   label = 0;
   $70 = $0;
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 20|0);
   HEAP32[$72>>2] = 9;
   $73 = $0;
   $74 = HEAP32[$73>>2]|0;
   $75 = HEAP32[$74>>2]|0;
   $76 = $0;
   FUNCTION_TABLE_vi[$75 & 511]($76);
  }
  while(1) {
   $77 = $i;
   $78 = (($77) + -1)|0;
   $i = $78;
   $79 = ($77|0)!=(0);
   if (!($79)) {
    break;
   }
   $80 = $l;
   $81 = $80&255;
   $82 = $p;
   $83 = (($82) + 1)|0;
   $p = $83;
   $84 = (($huffsize) + ($82)|0);
   HEAP8[$84>>0] = $81;
  }
  $85 = $l;
  $86 = (($85) + 1)|0;
  $l = $86;
 }
 $87 = $p;
 $88 = (($huffsize) + ($87)|0);
 HEAP8[$88>>0] = 0;
 $89 = $p;
 $lastp = $89;
 $code = 0;
 $90 = HEAP8[$huffsize>>0]|0;
 $91 = $90 << 24 >> 24;
 $si = $91;
 $p = 0;
 while(1) {
  $92 = $p;
  $93 = (($huffsize) + ($92)|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = ($94<<24>>24)!=(0);
  if (!($95)) {
   break;
  }
  while(1) {
   $96 = $p;
   $97 = (($huffsize) + ($96)|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = $98 << 24 >> 24;
   $100 = $si;
   $101 = ($99|0)==($100|0);
   if (!($101)) {
    break;
   }
   $102 = $code;
   $103 = $p;
   $104 = (($103) + 1)|0;
   $p = $104;
   $105 = (($huffcode) + ($103<<2)|0);
   HEAP32[$105>>2] = $102;
   $106 = $code;
   $107 = (($106) + 1)|0;
   $code = $107;
  }
  $108 = $code;
  $109 = $si;
  $110 = 1 << $109;
  $111 = ($108|0)>=($110|0);
  if ($111) {
   $112 = $0;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) + 20|0);
   HEAP32[$114>>2] = 9;
   $115 = $0;
   $116 = HEAP32[$115>>2]|0;
   $117 = HEAP32[$116>>2]|0;
   $118 = $0;
   FUNCTION_TABLE_vi[$117 & 511]($118);
  }
  $119 = $code;
  $120 = $119 << 1;
  $code = $120;
  $121 = $si;
  $122 = (($121) + 1)|0;
  $si = $122;
 }
 $123 = $dtbl;
 $124 = (($123) + 1024|0);
 _memset(($124|0),0,256)|0;
 $125 = $1;
 $126 = ($125|0)!=(0);
 $127 = $126 ? 15 : 255;
 $maxsymbol = $127;
 $p = 0;
 while(1) {
  $128 = $p;
  $129 = $lastp;
  $130 = ($128|0)<($129|0);
  if (!($130)) {
   break;
  }
  $131 = $p;
  $132 = $htbl;
  $133 = (($132) + 17|0);
  $134 = (($133) + ($131)|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $i = $136;
  $137 = $i;
  $138 = ($137|0)<(0);
  if ($138) {
   label = 34;
  } else {
   $139 = $i;
   $140 = $maxsymbol;
   $141 = ($139|0)>($140|0);
   if ($141) {
    label = 34;
   } else {
    $142 = $i;
    $143 = $dtbl;
    $144 = (($143) + 1024|0);
    $145 = (($144) + ($142)|0);
    $146 = HEAP8[$145>>0]|0;
    $147 = $146 << 24 >> 24;
    $148 = ($147|0)!=(0);
    if ($148) {
     label = 34;
    }
   }
  }
  if ((label|0) == 34) {
   label = 0;
   $149 = $0;
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + 20|0);
   HEAP32[$151>>2] = 9;
   $152 = $0;
   $153 = HEAP32[$152>>2]|0;
   $154 = HEAP32[$153>>2]|0;
   $155 = $0;
   FUNCTION_TABLE_vi[$154 & 511]($155);
  }
  $156 = $p;
  $157 = (($huffcode) + ($156<<2)|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $i;
  $160 = $dtbl;
  $161 = (($160) + ($159<<2)|0);
  HEAP32[$161>>2] = $158;
  $162 = $p;
  $163 = (($huffsize) + ($162)|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $i;
  $166 = $dtbl;
  $167 = (($166) + 1024|0);
  $168 = (($167) + ($165)|0);
  HEAP8[$168>>0] = $164;
  $169 = $p;
  $170 = (($169) + 1)|0;
  $p = $170;
 }
 STACKTOP = sp;return;
}
function _emit_restart_s($state,$restart_num) {
 $state = $state|0;
 $restart_num = $restart_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $state;
 $2 = $restart_num;
 $3 = $1;
 $4 = (_flush_bits_s($3)|0);
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $0 = 0;
  $45 = $0;
  STACKTOP = sp;return ($45|0);
 }
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 1|0);
 HEAP32[$6>>2] = $8;
 HEAP8[$7>>0] = -1;
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + -1)|0;
 HEAP32[$10>>2] = $12;
 $13 = ($12|0)==(0);
 do {
  if ($13) {
   $14 = $1;
   $15 = (_dump_buffer_s($14)|0);
   $16 = ($15|0)!=(0);
   if ($16) {
    break;
   }
   $0 = 0;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 } while(0);
 $17 = $2;
 $18 = (208 + ($17))|0;
 $19 = $18&255;
 $20 = $1;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 1|0);
 HEAP32[$20>>2] = $22;
 HEAP8[$21>>0] = $19;
 $23 = $1;
 $24 = (($23) + 4|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + -1)|0;
 HEAP32[$24>>2] = $26;
 $27 = ($26|0)==(0);
 do {
  if ($27) {
   $28 = $1;
   $29 = (_dump_buffer_s($28)|0);
   $30 = ($29|0)!=(0);
   if ($30) {
    break;
   }
   $0 = 0;
   $45 = $0;
   STACKTOP = sp;return ($45|0);
  }
 } while(0);
 $ci = 0;
 while(1) {
  $31 = $ci;
  $32 = $1;
  $33 = (($32) + 32|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 292|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($31|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = $ci;
  $39 = $1;
  $40 = (($39) + 8|0);
  $41 = (($40) + 8|0);
  $42 = (($41) + ($38<<2)|0);
  HEAP32[$42>>2] = 0;
  $43 = $ci;
  $44 = (($43) + 1)|0;
  $ci = $44;
 }
 $0 = 1;
 $45 = $0;
 STACKTOP = sp;return ($45|0);
}
function _encode_one_block($state,$block,$last_dc_val,$dctbl,$actbl) {
 $state = $state|0;
 $block = $block|0;
 $last_dc_val = $last_dc_val|0;
 $dctbl = $dctbl|0;
 $actbl = $actbl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $Se = 0, $k = 0, $natural_order = 0, $nbits = 0, $r = 0, $temp = 0, $temp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $state;
 $2 = $block;
 $3 = $last_dc_val;
 $4 = $dctbl;
 $5 = $actbl;
 $6 = $1;
 $7 = (($6) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 388|0);
 $10 = HEAP32[$9>>2]|0;
 $Se = $10;
 $11 = $1;
 $12 = (($11) + 32|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 384|0);
 $15 = HEAP32[$14>>2]|0;
 $natural_order = $15;
 $16 = $2;
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = $3;
 $20 = (($18) - ($19))|0;
 $temp2 = $20;
 $temp = $20;
 $21 = $temp;
 $22 = ($21|0)<(0);
 if ($22) {
  $23 = $temp;
  $24 = (0 - ($23))|0;
  $temp = $24;
  $25 = $temp2;
  $26 = (($25) + -1)|0;
  $temp2 = $26;
 }
 $nbits = 0;
 while(1) {
  $27 = $temp;
  $28 = ($27|0)!=(0);
  if (!($28)) {
   break;
  }
  $29 = $nbits;
  $30 = (($29) + 1)|0;
  $nbits = $30;
  $31 = $temp;
  $32 = $31 >> 1;
  $temp = $32;
 }
 $33 = $nbits;
 $34 = ($33|0)>(11);
 if ($34) {
  $35 = $1;
  $36 = (($35) + 32|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 20|0);
  HEAP32[$39>>2] = 6;
  $40 = $1;
  $41 = (($40) + 32|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$42>>2]|0;
  $44 = HEAP32[$43>>2]|0;
  $45 = $1;
  $46 = (($45) + 32|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_vi[$44 & 511]($47);
 }
 $48 = $1;
 $49 = $nbits;
 $50 = $4;
 $51 = (($50) + ($49<<2)|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $nbits;
 $54 = $4;
 $55 = (($54) + 1024|0);
 $56 = (($55) + ($53)|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57 << 24 >> 24;
 $59 = (_emit_bits_s($48,$52,$58)|0);
 $60 = ($59|0)!=(0);
 if (!($60)) {
  $0 = 0;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 $61 = $nbits;
 $62 = ($61|0)!=(0);
 do {
  if ($62) {
   $63 = $1;
   $64 = $temp2;
   $65 = $nbits;
   $66 = (_emit_bits_s($63,$64,$65)|0);
   $67 = ($66|0)!=(0);
   if ($67) {
    break;
   }
   $0 = 0;
   $159 = $0;
   STACKTOP = sp;return ($159|0);
  }
 } while(0);
 $r = 0;
 $k = 1;
 L22: while(1) {
  $68 = $k;
  $69 = $Se;
  $70 = ($68|0)<=($69|0);
  if (!($70)) {
   label = 37;
   break;
  }
  $71 = $k;
  $72 = $natural_order;
  $73 = (($72) + ($71<<2)|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $2;
  $76 = (($75) + ($74<<1)|0);
  $77 = HEAP16[$76>>1]|0;
  $78 = $77 << 16 >> 16;
  $temp2 = $78;
  $79 = ($78|0)==(0);
  if ($79) {
   $80 = $r;
   $81 = (($80) + 1)|0;
   $r = $81;
  } else {
   while(1) {
    $82 = $r;
    $83 = ($82|0)>(15);
    if (!($83)) {
     break;
    }
    $84 = $1;
    $85 = $5;
    $86 = (($85) + 960|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = $5;
    $89 = (($88) + 1024|0);
    $90 = (($89) + 240|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91 << 24 >> 24;
    $93 = (_emit_bits_s($84,$87,$92)|0);
    $94 = ($93|0)!=(0);
    if (!($94)) {
     label = 21;
     break L22;
    }
    $95 = $r;
    $96 = (($95) - 16)|0;
    $r = $96;
   }
   $97 = $temp2;
   $temp = $97;
   $98 = $temp;
   $99 = ($98|0)<(0);
   if ($99) {
    $100 = $temp;
    $101 = (0 - ($100))|0;
    $temp = $101;
    $102 = $temp2;
    $103 = (($102) + -1)|0;
    $temp2 = $103;
   }
   $nbits = 1;
   while(1) {
    $104 = $temp;
    $105 = $104 >> 1;
    $temp = $105;
    $106 = ($105|0)!=(0);
    if (!($106)) {
     break;
    }
    $107 = $nbits;
    $108 = (($107) + 1)|0;
    $nbits = $108;
   }
   $109 = $nbits;
   $110 = ($109|0)>(10);
   if ($110) {
    $111 = $1;
    $112 = (($111) + 32|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = HEAP32[$113>>2]|0;
    $115 = (($114) + 20|0);
    HEAP32[$115>>2] = 6;
    $116 = $1;
    $117 = (($116) + 32|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = HEAP32[$118>>2]|0;
    $120 = HEAP32[$119>>2]|0;
    $121 = $1;
    $122 = (($121) + 32|0);
    $123 = HEAP32[$122>>2]|0;
    FUNCTION_TABLE_vi[$120 & 511]($123);
   }
   $124 = $r;
   $125 = $124 << 4;
   $126 = $nbits;
   $127 = (($125) + ($126))|0;
   $temp = $127;
   $128 = $1;
   $129 = $temp;
   $130 = $5;
   $131 = (($130) + ($129<<2)|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $temp;
   $134 = $5;
   $135 = (($134) + 1024|0);
   $136 = (($135) + ($133)|0);
   $137 = HEAP8[$136>>0]|0;
   $138 = $137 << 24 >> 24;
   $139 = (_emit_bits_s($128,$132,$138)|0);
   $140 = ($139|0)!=(0);
   if (!($140)) {
    label = 31;
    break;
   }
   $141 = $1;
   $142 = $temp2;
   $143 = $nbits;
   $144 = (_emit_bits_s($141,$142,$143)|0);
   $145 = ($144|0)!=(0);
   if (!($145)) {
    label = 33;
    break;
   }
   $r = 0;
  }
  $146 = $k;
  $147 = (($146) + 1)|0;
  $k = $147;
 }
 if ((label|0) == 21) {
  $0 = 0;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 else if ((label|0) == 31) {
  $0 = 0;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 else if ((label|0) == 33) {
  $0 = 0;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 else if ((label|0) == 37) {
  $148 = $r;
  $149 = ($148|0)>(0);
  do {
   if ($149) {
    $150 = $1;
    $151 = $5;
    $152 = HEAP32[$151>>2]|0;
    $153 = $5;
    $154 = (($153) + 1024|0);
    $155 = HEAP8[$154>>0]|0;
    $156 = $155 << 24 >> 24;
    $157 = (_emit_bits_s($150,$152,$156)|0);
    $158 = ($157|0)!=(0);
    if ($158) {
     break;
    }
    $0 = 0;
    $159 = $0;
    STACKTOP = sp;return ($159|0);
   }
  } while(0);
  $0 = 1;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 return 0|0;
}
function _emit_bits_s($state,$code,$size) {
 $state = $state|0;
 $code = $code|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $c = 0, $put_bits = 0, $put_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $state;
 $2 = $code;
 $3 = $size;
 $4 = $3;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $1;
  $7 = (($6) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 20|0);
  HEAP32[$10>>2] = 41;
  $11 = $1;
  $12 = (($11) + 32|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = HEAP32[$14>>2]|0;
  $16 = $1;
  $17 = (($16) + 32|0);
  $18 = HEAP32[$17>>2]|0;
  FUNCTION_TABLE_vi[$15 & 511]($18);
 }
 $19 = $2;
 $20 = $3;
 $21 = 1 << $20;
 $22 = (($21) - 1)|0;
 $23 = $19 & $22;
 $put_buffer = $23;
 $24 = $3;
 $25 = $1;
 $26 = (($25) + 8|0);
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($24) + ($28))|0;
 $put_bits = $29;
 $30 = $put_bits;
 $31 = (24 - ($30))|0;
 $32 = $put_buffer;
 $33 = $32 << $31;
 $put_buffer = $33;
 $34 = $1;
 $35 = (($34) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $put_buffer;
 $38 = $37 | $36;
 $put_buffer = $38;
 while(1) {
  $39 = $put_bits;
  $40 = ($39|0)>=(8);
  if (!($40)) {
   label = 16;
   break;
  }
  $41 = $put_buffer;
  $42 = $41 >> 16;
  $43 = $42 & 255;
  $c = $43;
  $44 = $c;
  $45 = $44&255;
  $46 = $1;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 1|0);
  HEAP32[$46>>2] = $48;
  HEAP8[$47>>0] = $45;
  $49 = $1;
  $50 = (($49) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + -1)|0;
  HEAP32[$50>>2] = $52;
  $53 = ($52|0)==(0);
  if ($53) {
   $54 = $1;
   $55 = (_dump_buffer_s($54)|0);
   $56 = ($55|0)!=(0);
   if (!($56)) {
    label = 7;
    break;
   }
  }
  $57 = $c;
  $58 = ($57|0)==(255);
  if ($58) {
   $59 = $1;
   $60 = HEAP32[$59>>2]|0;
   $61 = (($60) + 1|0);
   HEAP32[$59>>2] = $61;
   HEAP8[$60>>0] = 0;
   $62 = $1;
   $63 = (($62) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + -1)|0;
   HEAP32[$63>>2] = $65;
   $66 = ($65|0)==(0);
   if ($66) {
    $67 = $1;
    $68 = (_dump_buffer_s($67)|0);
    $69 = ($68|0)!=(0);
    if (!($69)) {
     label = 12;
     break;
    }
   }
  }
  $70 = $put_buffer;
  $71 = $70 << 8;
  $put_buffer = $71;
  $72 = $put_bits;
  $73 = (($72) - 8)|0;
  $put_bits = $73;
 }
 if ((label|0) == 7) {
  $0 = 0;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 else if ((label|0) == 16) {
  $74 = $put_buffer;
  $75 = $1;
  $76 = (($75) + 8|0);
  HEAP32[$76>>2] = $74;
  $77 = $put_bits;
  $78 = $1;
  $79 = (($78) + 8|0);
  $80 = (($79) + 4|0);
  HEAP32[$80>>2] = $77;
  $0 = 1;
  $81 = $0;
  STACKTOP = sp;return ($81|0);
 }
 return 0|0;
}
function _dump_buffer_s($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $state;
 $2 = $1;
 $3 = (($2) + 32|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $dest = $6;
 $7 = $dest;
 $8 = (($7) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (($10) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (FUNCTION_TABLE_ii[$9 & 255]($12)|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $dest;
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  HEAP32[$17>>2] = $16;
  $18 = $dest;
  $19 = (($18) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $1;
  $22 = (($21) + 4|0);
  HEAP32[$22>>2] = $20;
  $0 = 1;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return 0|0;
}
function _flush_bits_s($state) {
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $state;
 $2 = $1;
 $3 = (_emit_bits_s($2,127,7)|0);
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $1;
  $6 = (($5) + 8|0);
  HEAP32[$6>>2] = 0;
  $7 = $1;
  $8 = (($7) + 8|0);
  $9 = (($8) + 4|0);
  HEAP32[$9>>2] = 0;
  $0 = 1;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 } else {
  $0 = 0;
  $10 = $0;
  STACKTOP = sp;return ($10|0);
 }
 return 0|0;
}
function _htest_one_block($cinfo,$block,$last_dc_val,$dc_counts,$ac_counts) {
 $cinfo = $cinfo|0;
 $block = $block|0;
 $last_dc_val = $last_dc_val|0;
 $dc_counts = $dc_counts|0;
 $ac_counts = $ac_counts|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $Se = 0, $k = 0, $natural_order = 0, $nbits = 0, $r = 0;
 var $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $block;
 $2 = $last_dc_val;
 $3 = $dc_counts;
 $4 = $ac_counts;
 $5 = $0;
 $6 = (($5) + 388|0);
 $7 = HEAP32[$6>>2]|0;
 $Se = $7;
 $8 = $0;
 $9 = (($8) + 384|0);
 $10 = HEAP32[$9>>2]|0;
 $natural_order = $10;
 $11 = $1;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12 << 16 >> 16;
 $14 = $2;
 $15 = (($13) - ($14))|0;
 $temp = $15;
 $16 = $temp;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $temp;
  $19 = (0 - ($18))|0;
  $temp = $19;
 }
 $nbits = 0;
 while(1) {
  $20 = $temp;
  $21 = ($20|0)!=(0);
  if (!($21)) {
   break;
  }
  $22 = $nbits;
  $23 = (($22) + 1)|0;
  $nbits = $23;
  $24 = $temp;
  $25 = $24 >> 1;
  $temp = $25;
 }
 $26 = $nbits;
 $27 = ($26|0)>(11);
 if ($27) {
  $28 = $0;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 20|0);
  HEAP32[$30>>2] = 6;
  $31 = $0;
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $34 = $0;
  FUNCTION_TABLE_vi[$33 & 511]($34);
 }
 $35 = $nbits;
 $36 = $3;
 $37 = (($36) + ($35<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + 1)|0;
 HEAP32[$37>>2] = $39;
 $r = 0;
 $k = 1;
 while(1) {
  $40 = $k;
  $41 = $Se;
  $42 = ($40|0)<=($41|0);
  if (!($42)) {
   break;
  }
  $43 = $k;
  $44 = $natural_order;
  $45 = (($44) + ($43<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $1;
  $48 = (($47) + ($46<<1)|0);
  $49 = HEAP16[$48>>1]|0;
  $50 = $49 << 16 >> 16;
  $temp = $50;
  $51 = ($50|0)==(0);
  if ($51) {
   $52 = $r;
   $53 = (($52) + 1)|0;
   $r = $53;
  } else {
   while(1) {
    $54 = $r;
    $55 = ($54|0)>(15);
    if (!($55)) {
     break;
    }
    $56 = $4;
    $57 = (($56) + 960|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = (($58) + 1)|0;
    HEAP32[$57>>2] = $59;
    $60 = $r;
    $61 = (($60) - 16)|0;
    $r = $61;
   }
   $62 = $temp;
   $63 = ($62|0)<(0);
   if ($63) {
    $64 = $temp;
    $65 = (0 - ($64))|0;
    $temp = $65;
   }
   $nbits = 1;
   while(1) {
    $66 = $temp;
    $67 = $66 >> 1;
    $temp = $67;
    $68 = ($67|0)!=(0);
    if (!($68)) {
     break;
    }
    $69 = $nbits;
    $70 = (($69) + 1)|0;
    $nbits = $70;
   }
   $71 = $nbits;
   $72 = ($71|0)>(10);
   if ($72) {
    $73 = $0;
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + 20|0);
    HEAP32[$75>>2] = 6;
    $76 = $0;
    $77 = HEAP32[$76>>2]|0;
    $78 = HEAP32[$77>>2]|0;
    $79 = $0;
    FUNCTION_TABLE_vi[$78 & 511]($79);
   }
   $80 = $r;
   $81 = $80 << 4;
   $82 = $nbits;
   $83 = (($81) + ($82))|0;
   $84 = $4;
   $85 = (($84) + ($83<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = (($86) + 1)|0;
   HEAP32[$85>>2] = $87;
   $r = 0;
  }
  $88 = $k;
  $89 = (($88) + 1)|0;
  $k = $89;
 }
 $90 = $r;
 $91 = ($90|0)>(0);
 if (!($91)) {
  STACKTOP = sp;return;
 }
 $92 = $4;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + 1)|0;
 HEAP32[$92>>2] = $94;
 STACKTOP = sp;return;
}
function _emit_restart_e($entropy,$restart_num) {
 $entropy = $entropy|0;
 $restart_num = $restart_num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $entropy;
 $1 = $restart_num;
 $2 = $0;
 _emit_eobrun($2);
 $3 = $0;
 $4 = (($3) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  $7 = $0;
  _flush_bits_e($7);
  $8 = $0;
  $9 = (($8) + 112|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1|0);
  HEAP32[$9>>2] = $11;
  HEAP8[$10>>0] = -1;
  $12 = $0;
  $13 = (($12) + 116|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + -1)|0;
  HEAP32[$13>>2] = $15;
  $16 = ($15|0)==(0);
  if ($16) {
   $17 = $0;
   _dump_buffer_e($17);
  }
  $18 = $1;
  $19 = (208 + ($18))|0;
  $20 = $19&255;
  $21 = $0;
  $22 = (($21) + 112|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 1|0);
  HEAP32[$22>>2] = $24;
  HEAP8[$23>>0] = $20;
  $25 = $0;
  $26 = (($25) + 116|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + -1)|0;
  HEAP32[$26>>2] = $28;
  $29 = ($28|0)==(0);
  if ($29) {
   $30 = $0;
   _dump_buffer_e($30);
  }
 }
 $31 = $0;
 $32 = (($31) + 120|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + 364|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if (!($36)) {
  $51 = $0;
  $52 = (($51) + 128|0);
  HEAP32[$52>>2] = 0;
  $53 = $0;
  $54 = (($53) + 132|0);
  HEAP32[$54>>2] = 0;
  STACKTOP = sp;return;
 }
 $ci = 0;
 while(1) {
  $37 = $ci;
  $38 = $0;
  $39 = (($38) + 120|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 292|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($37|0)<($42|0);
  if (!($43)) {
   break;
  }
  $44 = $ci;
  $45 = $0;
  $46 = (($45) + 12|0);
  $47 = (($46) + 8|0);
  $48 = (($47) + ($44<<2)|0);
  HEAP32[$48>>2] = 0;
  $49 = $ci;
  $50 = (($49) + 1)|0;
  $ci = $50;
 }
 STACKTOP = sp;return;
}
function _emit_eobrun($entropy) {
 $entropy = $entropy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbits = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $entropy;
 $1 = $0;
 $2 = (($1) + 128|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3>>>0)>(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = (($5) + 128|0);
 $7 = HEAP32[$6>>2]|0;
 $temp = $7;
 $nbits = 0;
 while(1) {
  $8 = $temp;
  $9 = $8 >> 1;
  $temp = $9;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
  $11 = $nbits;
  $12 = (($11) + 1)|0;
  $nbits = $12;
 }
 $13 = $nbits;
 $14 = ($13|0)>(14);
 if ($14) {
  $15 = $0;
  $16 = (($15) + 120|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 20|0);
  HEAP32[$19>>2] = 41;
  $20 = $0;
  $21 = (($20) + 120|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = $0;
  $26 = (($25) + 120|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vi[$24 & 511]($27);
 }
 $28 = $0;
 $29 = $0;
 $30 = (($29) + 124|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $nbits;
 $33 = $32 << 4;
 _emit_ac_symbol($28,$31,$33);
 $34 = $nbits;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $0;
  $37 = $0;
  $38 = (($37) + 128|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $nbits;
  _emit_bits_e($36,$39,$40);
 }
 $41 = $0;
 $42 = (($41) + 128|0);
 HEAP32[$42>>2] = 0;
 $43 = $0;
 $44 = $0;
 $45 = (($44) + 136|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $0;
 $48 = (($47) + 132|0);
 $49 = HEAP32[$48>>2]|0;
 _emit_buffered_bits($43,$46,$49);
 $50 = $0;
 $51 = (($50) + 132|0);
 HEAP32[$51>>2] = 0;
 STACKTOP = sp;return;
}
function _emit_ac_symbol($entropy,$tbl_no,$symbol) {
 $entropy = $entropy|0;
 $tbl_no = $tbl_no|0;
 $symbol = $symbol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tbl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $entropy;
 $1 = $tbl_no;
 $2 = $symbol;
 $3 = $0;
 $4 = (($3) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $8 = $1;
  $9 = $0;
  $10 = (($9) + 92|0);
  $11 = (($10) + ($8<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($7<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  STACKTOP = sp;return;
 } else {
  $16 = $1;
  $17 = $0;
  $18 = (($17) + 60|0);
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $tbl = $20;
  $21 = $0;
  $22 = $2;
  $23 = $tbl;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = $tbl;
  $28 = (($27) + 1024|0);
  $29 = (($28) + ($26)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  _emit_bits_e($21,$25,$31);
  STACKTOP = sp;return;
 }
}
function _emit_buffered_bits($entropy,$bufstart,$nbits) {
 $entropy = $entropy|0;
 $bufstart = $bufstart|0;
 $nbits = $nbits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $entropy;
 $1 = $bufstart;
 $2 = $nbits;
 $3 = $0;
 $4 = (($3) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 while(1) {
  $7 = $2;
  $8 = ($7>>>0)>(0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = $1;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  _emit_bits_e($9,$12,1);
  $13 = $1;
  $14 = (($13) + 1|0);
  $1 = $14;
  $15 = $2;
  $16 = (($15) + -1)|0;
  $2 = $16;
 }
 STACKTOP = sp;return;
}
function _emit_bits_e($entropy,$code,$size) {
 $entropy = $entropy|0;
 $code = $code|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $c = 0, $put_bits = 0, $put_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $entropy;
 $1 = $code;
 $2 = $size;
 $3 = $2;
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 120|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 20|0);
  HEAP32[$9>>2] = 41;
  $10 = $0;
  $11 = (($10) + 120|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  $16 = (($15) + 120|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vi[$14 & 511]($17);
 }
 $18 = $0;
 $19 = (($18) + 108|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  STACKTOP = sp;return;
 }
 $22 = $1;
 $23 = $2;
 $24 = 1 << $23;
 $25 = (($24) - 1)|0;
 $26 = $22 & $25;
 $put_buffer = $26;
 $27 = $2;
 $28 = $0;
 $29 = (($28) + 12|0);
 $30 = (($29) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($27) + ($31))|0;
 $put_bits = $32;
 $33 = $put_bits;
 $34 = (24 - ($33))|0;
 $35 = $put_buffer;
 $36 = $35 << $34;
 $put_buffer = $36;
 $37 = $0;
 $38 = (($37) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $put_buffer;
 $41 = $40 | $39;
 $put_buffer = $41;
 while(1) {
  $42 = $put_bits;
  $43 = ($42|0)>=(8);
  if (!($43)) {
   break;
  }
  $44 = $put_buffer;
  $45 = $44 >> 16;
  $46 = $45 & 255;
  $c = $46;
  $47 = $c;
  $48 = $47&255;
  $49 = $0;
  $50 = (($49) + 112|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + 1|0);
  HEAP32[$50>>2] = $52;
  HEAP8[$51>>0] = $48;
  $53 = $0;
  $54 = (($53) + 116|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + -1)|0;
  HEAP32[$54>>2] = $56;
  $57 = ($56|0)==(0);
  if ($57) {
   $58 = $0;
   _dump_buffer_e($58);
  }
  $59 = $c;
  $60 = ($59|0)==(255);
  if ($60) {
   $61 = $0;
   $62 = (($61) + 112|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + 1|0);
   HEAP32[$62>>2] = $64;
   HEAP8[$63>>0] = 0;
   $65 = $0;
   $66 = (($65) + 116|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + -1)|0;
   HEAP32[$66>>2] = $68;
   $69 = ($68|0)==(0);
   if ($69) {
    $70 = $0;
    _dump_buffer_e($70);
   }
  }
  $71 = $put_buffer;
  $72 = $71 << 8;
  $put_buffer = $72;
  $73 = $put_bits;
  $74 = (($73) - 8)|0;
  $put_bits = $74;
 }
 $75 = $put_buffer;
 $76 = $0;
 $77 = (($76) + 12|0);
 HEAP32[$77>>2] = $75;
 $78 = $put_bits;
 $79 = $0;
 $80 = (($79) + 12|0);
 $81 = (($80) + 4|0);
 HEAP32[$81>>2] = $78;
 STACKTOP = sp;return;
}
function _dump_buffer_e($entropy) {
 $entropy = $entropy|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $entropy;
 $1 = $0;
 $2 = (($1) + 120|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 24|0);
 $5 = HEAP32[$4>>2]|0;
 $dest = $5;
 $6 = $dest;
 $7 = (($6) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = (($9) + 120|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_ii[$8 & 255]($11)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $14 = $0;
  $15 = (($14) + 120|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 20|0);
  HEAP32[$18>>2] = 25;
  $19 = $0;
  $20 = (($19) + 120|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = $0;
  $25 = (($24) + 120|0);
  $26 = HEAP32[$25>>2]|0;
  FUNCTION_TABLE_vi[$23 & 511]($26);
 }
 $27 = $dest;
 $28 = HEAP32[$27>>2]|0;
 $29 = $0;
 $30 = (($29) + 112|0);
 HEAP32[$30>>2] = $28;
 $31 = $dest;
 $32 = (($31) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $0;
 $35 = (($34) + 116|0);
 HEAP32[$35>>2] = $33;
 STACKTOP = sp;return;
}
function _flush_bits_e($entropy) {
 $entropy = $entropy|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $entropy;
 $1 = $0;
 _emit_bits_e($1,127,7);
 $2 = $0;
 $3 = (($2) + 12|0);
 HEAP32[$3>>2] = 0;
 $4 = $0;
 $5 = (($4) + 12|0);
 $6 = (($5) + 4|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _emit_dc_symbol($entropy,$tbl_no,$symbol) {
 $entropy = $entropy|0;
 $tbl_no = $tbl_no|0;
 $symbol = $symbol|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tbl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $entropy;
 $1 = $tbl_no;
 $2 = $symbol;
 $3 = $0;
 $4 = (($3) + 108|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $2;
  $8 = $1;
  $9 = $0;
  $10 = (($9) + 76|0);
  $11 = (($10) + ($8<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + ($7<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  STACKTOP = sp;return;
 } else {
  $16 = $1;
  $17 = $0;
  $18 = (($17) + 44|0);
  $19 = (($18) + ($16<<2)|0);
  $20 = HEAP32[$19>>2]|0;
  $tbl = $20;
  $21 = $0;
  $22 = $2;
  $23 = $tbl;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $2;
  $27 = $tbl;
  $28 = (($27) + 1024|0);
  $29 = (($28) + ($26)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30 << 24 >> 24;
  _emit_bits_e($21,$25,$31);
  STACKTOP = sp;return;
 }
}
function _jpeg_gen_optimal_table($cinfo,$htbl,$freq) {
 $cinfo = $cinfo|0;
 $htbl = $htbl|0;
 $freq = $freq|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bits = 0, $c1 = 0, $c2 = 0, $codesize = 0, $i = 0, $j = 0, $others = 0, $p = 0, $v = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2128|0;
 $bits = sp + 2092|0;
 $codesize = sp + 1052|0;
 $others = sp + 24|0;
 $0 = $cinfo;
 $1 = $htbl;
 $2 = $freq;
 dest=$bits+0|0; stop=dest+33|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($codesize|0),0,1028)|0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(257);
  if (!($4)) {
   break;
  }
  $5 = $i;
  $6 = (($others) + ($5<<2)|0);
  HEAP32[$6>>2] = -1;
  $7 = $i;
  $8 = (($7) + 1)|0;
  $i = $8;
 }
 $9 = $2;
 $10 = (($9) + 1024|0);
 HEAP32[$10>>2] = 1;
 while(1) {
  $c1 = -1;
  $v = 1000000000;
  $i = 0;
  while(1) {
   $11 = $i;
   $12 = ($11|0)<=(256);
   if (!($12)) {
    break;
   }
   $13 = $i;
   $14 = $2;
   $15 = (($14) + ($13<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $i;
    $19 = $2;
    $20 = (($19) + ($18<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $v;
    $23 = ($21|0)<=($22|0);
    if ($23) {
     $24 = $i;
     $25 = $2;
     $26 = (($25) + ($24<<2)|0);
     $27 = HEAP32[$26>>2]|0;
     $v = $27;
     $28 = $i;
     $c1 = $28;
    }
   }
   $29 = $i;
   $30 = (($29) + 1)|0;
   $i = $30;
  }
  $c2 = -1;
  $v = 1000000000;
  $i = 0;
  while(1) {
   $31 = $i;
   $32 = ($31|0)<=(256);
   if (!($32)) {
    break;
   }
   $33 = $i;
   $34 = $2;
   $35 = (($34) + ($33<<2)|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $i;
    $39 = $2;
    $40 = (($39) + ($38<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $v;
    $43 = ($41|0)<=($42|0);
    if ($43) {
     $44 = $i;
     $45 = $c1;
     $46 = ($44|0)!=($45|0);
     if ($46) {
      $47 = $i;
      $48 = $2;
      $49 = (($48) + ($47<<2)|0);
      $50 = HEAP32[$49>>2]|0;
      $v = $50;
      $51 = $i;
      $c2 = $51;
     }
    }
   }
   $52 = $i;
   $53 = (($52) + 1)|0;
   $i = $53;
  }
  $54 = $c2;
  $55 = ($54|0)<(0);
  if ($55) {
   break;
  }
  $56 = $c2;
  $57 = $2;
  $58 = (($57) + ($56<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $c1;
  $61 = $2;
  $62 = (($61) + ($60<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) + ($59))|0;
  HEAP32[$62>>2] = $64;
  $65 = $c2;
  $66 = $2;
  $67 = (($66) + ($65<<2)|0);
  HEAP32[$67>>2] = 0;
  $68 = $c1;
  $69 = (($codesize) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + 1)|0;
  HEAP32[$69>>2] = $71;
  while(1) {
   $72 = $c1;
   $73 = (($others) + ($72<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)>=(0);
   if (!($75)) {
    break;
   }
   $76 = $c1;
   $77 = (($others) + ($76<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   $c1 = $78;
   $79 = $c1;
   $80 = (($codesize) + ($79<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = (($81) + 1)|0;
   HEAP32[$80>>2] = $82;
  }
  $83 = $c2;
  $84 = $c1;
  $85 = (($others) + ($84<<2)|0);
  HEAP32[$85>>2] = $83;
  $86 = $c2;
  $87 = (($codesize) + ($86<<2)|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + 1)|0;
  HEAP32[$87>>2] = $89;
  while(1) {
   $90 = $c2;
   $91 = (($others) + ($90<<2)|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = ($92|0)>=(0);
   if (!($93)) {
    break;
   }
   $94 = $c2;
   $95 = (($others) + ($94<<2)|0);
   $96 = HEAP32[$95>>2]|0;
   $c2 = $96;
   $97 = $c2;
   $98 = (($codesize) + ($97<<2)|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($99) + 1)|0;
   HEAP32[$98>>2] = $100;
  }
 }
 $i = 0;
 while(1) {
  $101 = $i;
  $102 = ($101|0)<=(256);
  if (!($102)) {
   break;
  }
  $103 = $i;
  $104 = (($codesize) + ($103<<2)|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ($105|0)!=(0);
  if ($106) {
   $107 = $i;
   $108 = (($codesize) + ($107<<2)|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = ($109|0)>(32);
   if ($110) {
    $111 = $0;
    $112 = HEAP32[$111>>2]|0;
    $113 = (($112) + 20|0);
    HEAP32[$113>>2] = 40;
    $114 = $0;
    $115 = HEAP32[$114>>2]|0;
    $116 = HEAP32[$115>>2]|0;
    $117 = $0;
    FUNCTION_TABLE_vi[$116 & 511]($117);
   }
   $118 = $i;
   $119 = (($codesize) + ($118<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = (($bits) + ($120)|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = (($122) + 1)<<24>>24;
   HEAP8[$121>>0] = $123;
  }
  $124 = $i;
  $125 = (($124) + 1)|0;
  $i = $125;
 }
 $i = 32;
 while(1) {
  $126 = $i;
  $127 = ($126|0)>(16);
  if (!($127)) {
   break;
  }
  while(1) {
   $128 = $i;
   $129 = (($bits) + ($128)|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = ($131|0)>(0);
   if (!($132)) {
    break;
   }
   $133 = $i;
   $134 = (($133) - 2)|0;
   $j = $134;
   while(1) {
    $135 = $j;
    $136 = (($bits) + ($135)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&255;
    $139 = ($138|0)==(0);
    if (!($139)) {
     break;
    }
    $140 = $j;
    $141 = (($140) + -1)|0;
    $j = $141;
   }
   $142 = $i;
   $143 = (($bits) + ($142)|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $146 = (($145) - 2)|0;
   $147 = $146&255;
   HEAP8[$143>>0] = $147;
   $148 = $i;
   $149 = (($148) - 1)|0;
   $150 = (($bits) + ($149)|0);
   $151 = HEAP8[$150>>0]|0;
   $152 = (($151) + 1)<<24>>24;
   HEAP8[$150>>0] = $152;
   $153 = $j;
   $154 = (($153) + 1)|0;
   $155 = (($bits) + ($154)|0);
   $156 = HEAP8[$155>>0]|0;
   $157 = $156&255;
   $158 = (($157) + 2)|0;
   $159 = $158&255;
   HEAP8[$155>>0] = $159;
   $160 = $j;
   $161 = (($bits) + ($160)|0);
   $162 = HEAP8[$161>>0]|0;
   $163 = (($162) + -1)<<24>>24;
   HEAP8[$161>>0] = $163;
  }
  $164 = $i;
  $165 = (($164) + -1)|0;
  $i = $165;
 }
 while(1) {
  $166 = $i;
  $167 = (($bits) + ($166)|0);
  $168 = HEAP8[$167>>0]|0;
  $169 = $168&255;
  $170 = ($169|0)==(0);
  if (!($170)) {
   break;
  }
  $171 = $i;
  $172 = (($171) + -1)|0;
  $i = $172;
 }
 $173 = $i;
 $174 = (($bits) + ($173)|0);
 $175 = HEAP8[$174>>0]|0;
 $176 = (($175) + -1)<<24>>24;
 HEAP8[$174>>0] = $176;
 $177 = $1;
 dest=$177+0|0; src=$bits+0|0; stop=dest+17|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $p = 0;
 $i = 1;
 while(1) {
  $178 = $i;
  $179 = ($178|0)<=(32);
  if (!($179)) {
   break;
  }
  $j = 0;
  while(1) {
   $180 = $j;
   $181 = ($180|0)<=(255);
   if (!($181)) {
    break;
   }
   $182 = $j;
   $183 = (($codesize) + ($182<<2)|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = $i;
   $186 = ($184|0)==($185|0);
   if ($186) {
    $187 = $j;
    $188 = $187&255;
    $189 = $p;
    $190 = $1;
    $191 = (($190) + 17|0);
    $192 = (($191) + ($189)|0);
    HEAP8[$192>>0] = $188;
    $193 = $p;
    $194 = (($193) + 1)|0;
    $p = $194;
   }
   $195 = $j;
   $196 = (($195) + 1)|0;
   $j = $196;
  }
  $197 = $i;
  $198 = (($197) + 1)|0;
  $i = $198;
 }
 $199 = $1;
 $200 = (($199) + 276|0);
 HEAP32[$200>>2] = 0;
 STACKTOP = sp;return;
}
function _jinit_compress_master($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $jd_samplesperrow = 0, $samplesperrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 72|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(8);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 20|0);
  HEAP32[$7>>2] = 16;
  $8 = $0;
  $9 = (($8) + 72|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 24|0);
  HEAP32[$13>>2] = $10;
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = $0;
  FUNCTION_TABLE_vi[$16 & 511]($17);
 }
 $18 = $0;
 $19 = (($18) + 32|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20>>>0)<=(0);
 if ($21) {
  label = 6;
 } else {
  $22 = $0;
  $23 = (($22) + 28|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24>>>0)<=(0);
  if ($25) {
   label = 6;
  } else {
   $26 = $0;
   $27 = (($26) + 36|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)<=(0);
   if ($29) {
    label = 6;
   }
  }
 }
 if ((label|0) == 6) {
  $30 = $0;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 20|0);
  HEAP32[$32>>2] = 33;
  $33 = $0;
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $36 = $0;
  FUNCTION_TABLE_vi[$35 & 511]($36);
 }
 $37 = $0;
 $38 = (($37) + 28|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $0;
 $41 = (($40) + 36|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = Math_imul($39, $42)|0;
 $samplesperrow = $43;
 $44 = $samplesperrow;
 $jd_samplesperrow = $44;
 $45 = $jd_samplesperrow;
 $46 = $samplesperrow;
 $47 = ($45|0)!=($46|0);
 if ($47) {
  $48 = $0;
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + 20|0);
  HEAP32[$50>>2] = 72;
  $51 = $0;
  $52 = HEAP32[$51>>2]|0;
  $53 = HEAP32[$52>>2]|0;
  $54 = $0;
  FUNCTION_TABLE_vi[$53 & 511]($54);
 }
 $55 = $0;
 _jinit_c_master_control($55,0);
 $56 = $0;
 $57 = (($56) + 208|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)!=(0);
 if (!($59)) {
  $60 = $0;
  _jinit_color_converter($60);
  $61 = $0;
  _jinit_downsampler($61);
  $62 = $0;
  _jinit_c_prep_controller($62,0);
 }
 $63 = $0;
 _jinit_forward_dct($63);
 $64 = $0;
 $65 = (($64) + 212|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($66|0)!=(0);
 if ($67) {
  $68 = $0;
  _jinit_arith_encoder($68);
 } else {
  $69 = $0;
  _jinit_huff_encoder($69);
 }
 $70 = $0;
 $71 = $0;
 $72 = (($71) + 200|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($73|0)>(1);
 if ($74) {
  $80 = 1;
  $79 = $80&1;
  _jinit_c_coef_controller($70,$79);
  $81 = $0;
  _jinit_c_main_controller($81,0);
  $82 = $0;
  _jinit_marker_writer($82);
  $83 = $0;
  $84 = (($83) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + 24|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = $0;
  FUNCTION_TABLE_vi[$87 & 511]($88);
  $89 = $0;
  $90 = (($89) + 408|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = HEAP32[$91>>2]|0;
  $93 = $0;
  FUNCTION_TABLE_vi[$92 & 511]($93);
  STACKTOP = sp;return;
 }
 $75 = $0;
 $76 = (($75) + 216|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = ($77|0)!=(0);
 $80 = $78;
 $79 = $80&1;
 _jinit_c_coef_controller($70,$79);
 $81 = $0;
 _jinit_c_main_controller($81,0);
 $82 = $0;
 _jinit_marker_writer($82);
 $83 = $0;
 $84 = (($83) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($85) + 24|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $0;
 FUNCTION_TABLE_vi[$87 & 511]($88);
 $89 = $0;
 $90 = (($89) + 408|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = HEAP32[$91>>2]|0;
 $93 = $0;
 FUNCTION_TABLE_vi[$92 & 511]($93);
 STACKTOP = sp;return;
}
function _jinit_c_main_controller($cinfo,$need_full_buffer) {
 $cinfo = $cinfo|0;
 $need_full_buffer = $need_full_buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ci = 0, $compptr = 0, $mainp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $need_full_buffer;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = (FUNCTION_TABLE_iiii[$5 & 511]($6,1,64)|0);
 $mainp = $7;
 $8 = $mainp;
 $9 = $0;
 $10 = (($9) + 396|0);
 HEAP32[$10>>2] = $8;
 $11 = $mainp;
 HEAP32[$11>>2] = 111;
 $12 = $0;
 $13 = (($12) + 208|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $1;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $0;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 20|0);
  HEAP32[$20>>2] = 3;
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = $0;
  FUNCTION_TABLE_vi[$23 & 511]($24);
  STACKTOP = sp;return;
 }
 $ci = 0;
 $25 = $0;
 $26 = (($25) + 84|0);
 $27 = HEAP32[$26>>2]|0;
 $compptr = $27;
 while(1) {
  $28 = $ci;
  $29 = $0;
  $30 = (($29) + 76|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($28|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $0;
  $34 = (($33) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $0;
  $39 = $compptr;
  $40 = (($39) + 28|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $compptr;
  $43 = (($42) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = Math_imul($41, $44)|0;
  $46 = $compptr;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $compptr;
  $50 = (($49) + 40|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($48, $51)|0;
  $53 = (FUNCTION_TABLE_iiiii[$37 & 511]($38,1,$45,$52)|0);
  $54 = $ci;
  $55 = $mainp;
  $56 = (($55) + 24|0);
  $57 = (($56) + ($54<<2)|0);
  HEAP32[$57>>2] = $53;
  $58 = $ci;
  $59 = (($58) + 1)|0;
  $ci = $59;
  $60 = $compptr;
  $61 = (($60) + 88|0);
  $compptr = $61;
 }
 STACKTOP = sp;return;
}
function _start_pass_main($cinfo,$pass_mode) {
 $cinfo = $cinfo|0;
 $pass_mode = $pass_mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mainp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $pass_mode;
 $2 = $0;
 $3 = (($2) + 396|0);
 $4 = HEAP32[$3>>2]|0;
 $mainp = $4;
 $5 = $0;
 $6 = (($5) + 208|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  STACKTOP = sp;return;
 }
 $9 = $mainp;
 $10 = (($9) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = $mainp;
 $12 = (($11) + 12|0);
 HEAP32[$12>>2] = 0;
 $13 = $mainp;
 $14 = (($13) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = $mainp;
 $17 = (($16) + 20|0);
 HEAP32[$17>>2] = $15;
 $18 = $1;
 if ((($18|0) == 0)) {
  $19 = $mainp;
  $20 = (($19) + 4|0);
  HEAP32[$20>>2] = 112;
  STACKTOP = sp;return;
 } else {
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 20|0);
  HEAP32[$23>>2] = 3;
  $24 = $0;
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = $0;
  FUNCTION_TABLE_vi[$26 & 511]($27);
  STACKTOP = sp;return;
 }
}
function _process_data_simple_main($cinfo,$input_buf,$in_row_ctr,$in_rows_avail) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_ctr = $in_row_ctr|0;
 $in_rows_avail = $in_rows_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $mainp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_ctr;
 $3 = $in_rows_avail;
 $4 = $0;
 $5 = (($4) + 396|0);
 $6 = HEAP32[$5>>2]|0;
 $mainp = $6;
 while(1) {
  $7 = $mainp;
  $8 = (($7) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = (($10) + 288|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9>>>0)<($12>>>0);
  if (!($13)) {
   label = 14;
   break;
  }
  $14 = $mainp;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $0;
  $18 = (($17) + 284|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($16>>>0)<($19>>>0);
  if ($20) {
   $21 = $0;
   $22 = (($21) + 400|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($23) + 4|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = $0;
   $27 = $1;
   $28 = $2;
   $29 = $3;
   $30 = $mainp;
   $31 = (($30) + 24|0);
   $32 = $mainp;
   $33 = (($32) + 12|0);
   $34 = $0;
   $35 = (($34) + 284|0);
   $36 = HEAP32[$35>>2]|0;
   FUNCTION_TABLE_viiiiiii[$25 & 255]($26,$27,$28,$29,$31,$33,$36);
  }
  $37 = $mainp;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $0;
  $41 = (($40) + 284|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($39|0)!=($42|0);
  if ($43) {
   label = 6;
   break;
  }
  $44 = $0;
  $45 = (($44) + 404|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $0;
  $50 = $mainp;
  $51 = (($50) + 24|0);
  $52 = (FUNCTION_TABLE_iii[$48 & 255]($49,$51)|0);
  $53 = ($52|0)!=(0);
  if (!($53)) {
   label = 8;
   break;
  }
  $63 = $mainp;
  $64 = (($63) + 16|0);
  $65 = HEAP32[$64>>2]|0;
  $66 = ($65|0)!=(0);
  if ($66) {
   $67 = $2;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + 1)|0;
   HEAP32[$67>>2] = $69;
   $70 = $mainp;
   $71 = (($70) + 16|0);
   HEAP32[$71>>2] = 0;
  }
  $72 = $mainp;
  $73 = (($72) + 12|0);
  HEAP32[$73>>2] = 0;
  $74 = $mainp;
  $75 = (($74) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + 1)|0;
  HEAP32[$75>>2] = $77;
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $54 = $mainp;
  $55 = (($54) + 16|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)!=(0);
  if (!($57)) {
   $58 = $2;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + -1)|0;
   HEAP32[$58>>2] = $60;
   $61 = $mainp;
   $62 = (($61) + 16|0);
   HEAP32[$62>>2] = 1;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 14) {
  STACKTOP = sp;return;
 }
}
function _jinit_marker_writer($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $marker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,32)|0);
 $marker = $6;
 $7 = $marker;
 $8 = $0;
 $9 = (($8) + 408|0);
 HEAP32[$9>>2] = $7;
 $10 = $marker;
 HEAP32[$10>>2] = 113;
 $11 = $marker;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 114;
 $13 = $marker;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 115;
 $15 = $marker;
 $16 = (($15) + 12|0);
 HEAP32[$16>>2] = 116;
 $17 = $marker;
 $18 = (($17) + 16|0);
 HEAP32[$18>>2] = 117;
 $19 = $marker;
 $20 = (($19) + 20|0);
 HEAP32[$20>>2] = 118;
 $21 = $marker;
 $22 = (($21) + 24|0);
 HEAP32[$22>>2] = 119;
 $23 = $marker;
 $24 = (($23) + 28|0);
 HEAP32[$24>>2] = 0;
 STACKTOP = sp;return;
}
function _write_file_header($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $marker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 408|0);
 $3 = HEAP32[$2>>2]|0;
 $marker = $3;
 $4 = $0;
 _emit_marker($4,216);
 $5 = $marker;
 $6 = (($5) + 28|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = (($7) + 244|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $0;
  _emit_jfif_app0($11);
 }
 $12 = $0;
 $13 = (($12) + 256|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $0;
 _emit_adobe_app14($16);
 STACKTOP = sp;return;
}
function _write_frame_header($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ci = 0, $compptr = 0, $is_baseline = 0, $prec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $prec = 0;
 $ci = 0;
 $1 = $0;
 $2 = (($1) + 84|0);
 $3 = HEAP32[$2>>2]|0;
 $compptr = $3;
 while(1) {
  $4 = $ci;
  $5 = $0;
  $6 = (($5) + 76|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $0;
  $10 = $compptr;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (_emit_dqt($9,$12)|0);
  $14 = $prec;
  $15 = (($14) + ($13))|0;
  $prec = $15;
  $16 = $ci;
  $17 = (($16) + 1)|0;
  $ci = $17;
  $18 = $compptr;
  $19 = (($18) + 88|0);
  $compptr = $19;
 }
 $20 = $0;
 $21 = (($20) + 212|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 if ($23) {
  label = 9;
 } else {
  $24 = $0;
  $25 = (($24) + 268|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)!=(0);
  if ($27) {
   label = 9;
  } else {
   $28 = $0;
   $29 = (($28) + 72|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(8);
   if ($31) {
    label = 9;
   } else {
    $32 = $0;
    $33 = (($32) + 380|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = ($34|0)!=(8);
    if ($35) {
     label = 9;
    } else {
     $is_baseline = 1;
     $ci = 0;
     $36 = $0;
     $37 = (($36) + 84|0);
     $38 = HEAP32[$37>>2]|0;
     $compptr = $38;
     while(1) {
      $39 = $ci;
      $40 = $0;
      $41 = (($40) + 76|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($39|0)<($42|0);
      if (!($43)) {
       break;
      }
      $44 = $compptr;
      $45 = (($44) + 20|0);
      $46 = HEAP32[$45>>2]|0;
      $47 = ($46|0)>(1);
      if ($47) {
       label = 14;
      } else {
       $48 = $compptr;
       $49 = (($48) + 24|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = ($50|0)>(1);
       if ($51) {
        label = 14;
       }
      }
      if ((label|0) == 14) {
       label = 0;
       $is_baseline = 0;
      }
      $52 = $ci;
      $53 = (($52) + 1)|0;
      $ci = $53;
      $54 = $compptr;
      $55 = (($54) + 88|0);
      $compptr = $55;
     }
     $56 = $prec;
     $57 = ($56|0)!=(0);
     if ($57) {
      $58 = $is_baseline;
      $59 = ($58|0)!=(0);
      if ($59) {
       $is_baseline = 0;
       $60 = $0;
       $61 = HEAP32[$60>>2]|0;
       $62 = (($61) + 20|0);
       HEAP32[$62>>2] = 77;
       $63 = $0;
       $64 = HEAP32[$63>>2]|0;
       $65 = (($64) + 4|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = $0;
       FUNCTION_TABLE_vii[$66 & 511]($67,0);
      }
     }
    }
   }
  }
 }
 if ((label|0) == 9) {
  $is_baseline = 0;
 }
 $68 = $0;
 $69 = (($68) + 212|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)!=(0);
 if ($71) {
  $72 = $0;
  $73 = (($72) + 268|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = $0;
   _emit_sof($76,202);
  } else {
   $77 = $0;
   _emit_sof($77,201);
  }
 } else {
  $78 = $0;
  $79 = (($78) + 268|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = $0;
   _emit_sof($82,194);
  } else {
   $83 = $is_baseline;
   $84 = ($83|0)!=(0);
   if ($84) {
    $85 = $0;
    _emit_sof($85,192);
   } else {
    $86 = $0;
    _emit_sof($86,193);
   }
  }
 }
 $87 = $0;
 $88 = (($87) + 260|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0);
 if ($90) {
  $91 = $0;
  _emit_lse_ict($91);
 }
 $92 = $0;
 $93 = (($92) + 268|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = ($94|0)!=(0);
 if (!($95)) {
  STACKTOP = sp;return;
 }
 $96 = $0;
 $97 = (($96) + 380|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)!=(8);
 if (!($99)) {
  STACKTOP = sp;return;
 }
 $100 = $0;
 _emit_pseudo_sos($100);
 STACKTOP = sp;return;
}
function _write_scan_header($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $compptr = 0, $i = 0, $marker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 408|0);
 $3 = HEAP32[$2>>2]|0;
 $marker = $3;
 $4 = $0;
 $5 = (($4) + 212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $0;
  _emit_dac($8);
 } else {
  $i = 0;
  while(1) {
   $9 = $i;
   $10 = $0;
   $11 = (($10) + 292|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($9|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = $i;
   $15 = $0;
   $16 = (($15) + 296|0);
   $17 = (($16) + ($14<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $compptr = $18;
   $19 = $0;
   $20 = (($19) + 364|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0);
   if ($22) {
    $23 = $0;
    $24 = (($23) + 372|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($25|0)==(0);
    if ($26) {
     $27 = $0;
     $28 = $compptr;
     $29 = (($28) + 20|0);
     $30 = HEAP32[$29>>2]|0;
     _emit_dht($27,$30,0);
    }
   }
   $31 = $0;
   $32 = (($31) + 368|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $0;
    $36 = $compptr;
    $37 = (($36) + 24|0);
    $38 = HEAP32[$37>>2]|0;
    _emit_dht($35,$38,1);
   }
   $39 = $i;
   $40 = (($39) + 1)|0;
   $i = $40;
  }
 }
 $41 = $0;
 $42 = (($41) + 236|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $marker;
 $45 = (($44) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = ($43|0)!=($46|0);
 if (!($47)) {
  $54 = $0;
  _emit_sos($54);
  STACKTOP = sp;return;
 }
 $48 = $0;
 _emit_dri($48);
 $49 = $0;
 $50 = (($49) + 236|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $marker;
 $53 = (($52) + 28|0);
 HEAP32[$53>>2] = $51;
 $54 = $0;
 _emit_sos($54);
 STACKTOP = sp;return;
}
function _write_file_trailer($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 _emit_marker($1,217);
 STACKTOP = sp;return;
}
function _write_tables_only($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 _emit_marker($1,216);
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(4);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $0;
  $6 = (($5) + 88|0);
  $7 = (($6) + ($4<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0|0);
  if ($9) {
   $10 = $0;
   $11 = $i;
   (_emit_dqt($10,$11)|0);
  }
  $12 = $i;
  $13 = (($12) + 1)|0;
  $i = $13;
 }
 $14 = $0;
 $15 = (($14) + 212|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $38 = $0;
  _emit_marker($38,217);
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $18 = $i;
  $19 = ($18|0)<(4);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = $0;
  $22 = (($21) + 120|0);
  $23 = (($22) + ($20<<2)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(0|0);
  if ($25) {
   $26 = $0;
   $27 = $i;
   _emit_dht($26,$27,0);
  }
  $28 = $i;
  $29 = $0;
  $30 = (($29) + 136|0);
  $31 = (($30) + ($28<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)!=(0|0);
  if ($33) {
   $34 = $0;
   $35 = $i;
   _emit_dht($34,$35,1);
  }
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 $38 = $0;
 _emit_marker($38,217);
 STACKTOP = sp;return;
}
function _write_marker_header($cinfo,$marker,$datalen) {
 $cinfo = $cinfo|0;
 $marker = $marker|0;
 $datalen = $datalen|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $marker;
 $2 = $datalen;
 $3 = $2;
 $4 = ($3>>>0)>(65533);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 20|0);
  HEAP32[$7>>2] = 12;
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  FUNCTION_TABLE_vi[$10 & 511]($11);
 }
 $12 = $0;
 $13 = $1;
 _emit_marker($12,$13);
 $14 = $0;
 $15 = $2;
 $16 = (($15) + 2)|0;
 _emit_2bytes($14,$16);
 STACKTOP = sp;return;
}
function _write_marker_byte($cinfo,$val) {
 $cinfo = $cinfo|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $val;
 $2 = $0;
 $3 = $1;
 _emit_byte11($2,$3);
 STACKTOP = sp;return;
}
function _emit_byte11($cinfo,$val) {
 $cinfo = $cinfo|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $val;
 $2 = $0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $dest = $4;
 $5 = $1;
 $6 = $5&255;
 $7 = $dest;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 1|0);
 HEAP32[$7>>2] = $9;
 HEAP8[$8>>0] = $6;
 $10 = $dest;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + -1)|0;
 HEAP32[$11>>2] = $13;
 $14 = ($13|0)==(0);
 if (!($14)) {
  STACKTOP = sp;return;
 }
 $15 = $dest;
 $16 = (($15) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = (FUNCTION_TABLE_ii[$17 & 255]($18)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 20|0);
  HEAP32[$23>>2] = 25;
  $24 = $0;
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = $0;
  FUNCTION_TABLE_vi[$26 & 511]($27);
 }
 STACKTOP = sp;return;
}
function _emit_marker($cinfo,$mark) {
 $cinfo = $cinfo|0;
 $mark = $mark|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $mark;
 $2 = $0;
 _emit_byte11($2,255);
 $3 = $0;
 $4 = $1;
 _emit_byte11($3,$4);
 STACKTOP = sp;return;
}
function _emit_2bytes($cinfo,$value) {
 $cinfo = $cinfo|0;
 $value = $value|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $value;
 $2 = $0;
 $3 = $1;
 $4 = $3 >> 8;
 $5 = $4 & 255;
 _emit_byte11($2,$5);
 $6 = $0;
 $7 = $1;
 $8 = $7 & 255;
 _emit_byte11($6,$8);
 STACKTOP = sp;return;
}
function _emit_dqt($cinfo,$index) {
 $cinfo = $cinfo|0;
 $index = $index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $i = 0, $prec = 0, $qtbl = 0, $qval = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $index;
 $2 = $1;
 $3 = $0;
 $4 = (($3) + 88|0);
 $5 = (($4) + ($2<<2)|0);
 $6 = HEAP32[$5>>2]|0;
 $qtbl = $6;
 $7 = $qtbl;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 20|0);
  HEAP32[$11>>2] = 54;
  $12 = $1;
  $13 = $0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 24|0);
  HEAP32[$15>>2] = $12;
  $16 = $0;
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  FUNCTION_TABLE_vi[$18 & 511]($19);
 }
 $prec = 0;
 $i = 0;
 while(1) {
  $20 = $i;
  $21 = $0;
  $22 = (($21) + 388|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20|0)<=($23|0);
  if (!($24)) {
   break;
  }
  $25 = $i;
  $26 = $0;
  $27 = (($26) + 384|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + ($25<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $qtbl;
  $32 = (($31) + ($30<<1)|0);
  $33 = HEAP16[$32>>1]|0;
  $34 = $33&65535;
  $35 = ($34|0)>(255);
  if ($35) {
   $prec = 1;
  }
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 $38 = $qtbl;
 $39 = (($38) + 128|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0);
 if ($41) {
  $92 = $prec;
  STACKTOP = sp;return ($92|0);
 }
 $42 = $0;
 _emit_marker($42,219);
 $43 = $0;
 $44 = $prec;
 $45 = ($44|0)!=(0);
 if ($45) {
  $46 = $0;
  $47 = (($46) + 388|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48<<1;
  $50 = (($49) + 2)|0;
  $51 = (($50) + 1)|0;
  $52 = (($51) + 2)|0;
  $59 = $52;
 } else {
  $53 = $0;
  $54 = (($53) + 388|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 1)|0;
  $57 = (($56) + 1)|0;
  $58 = (($57) + 2)|0;
  $59 = $58;
 }
 _emit_2bytes($43,$59);
 $60 = $0;
 $61 = $1;
 $62 = $prec;
 $63 = $62 << 4;
 $64 = (($61) + ($63))|0;
 _emit_byte11($60,$64);
 $i = 0;
 while(1) {
  $65 = $i;
  $66 = $0;
  $67 = (($66) + 388|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = ($65|0)<=($68|0);
  if (!($69)) {
   break;
  }
  $70 = $i;
  $71 = $0;
  $72 = (($71) + 384|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + ($70<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $qtbl;
  $77 = (($76) + ($75<<1)|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78&65535;
  $qval = $79;
  $80 = $prec;
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = $0;
   $83 = $qval;
   $84 = $83 >>> 8;
   _emit_byte11($82,$84);
  }
  $85 = $0;
  $86 = $qval;
  $87 = $86 & 255;
  _emit_byte11($85,$87);
  $88 = $i;
  $89 = (($88) + 1)|0;
  $i = $89;
 }
 $90 = $qtbl;
 $91 = (($90) + 128|0);
 HEAP32[$91>>2] = 1;
 $92 = $prec;
 STACKTOP = sp;return ($92|0);
}
function _emit_dht($cinfo,$index,$is_ac) {
 $cinfo = $cinfo|0;
 $index = $index|0;
 $is_ac = $is_ac|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $htbl = 0, $i = 0, $length = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $index;
 $2 = $is_ac;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $1;
  $6 = $0;
  $7 = (($6) + 136|0);
  $8 = (($7) + ($5<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $htbl = $9;
  $10 = $1;
  $11 = (($10) + 16)|0;
  $1 = $11;
 } else {
  $12 = $1;
  $13 = $0;
  $14 = (($13) + 120|0);
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $htbl = $16;
 }
 $17 = $htbl;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $19 = $0;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 20|0);
  HEAP32[$21>>2] = 52;
  $22 = $1;
  $23 = $0;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 24|0);
  HEAP32[$25>>2] = $22;
  $26 = $0;
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = $0;
  FUNCTION_TABLE_vi[$28 & 511]($29);
 }
 $30 = $htbl;
 $31 = (($30) + 276|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0);
 if ($33) {
  STACKTOP = sp;return;
 }
 $34 = $0;
 _emit_marker($34,196);
 $length = 0;
 $i = 1;
 while(1) {
  $35 = $i;
  $36 = ($35|0)<=(16);
  if (!($36)) {
   break;
  }
  $37 = $i;
  $38 = $htbl;
  $39 = (($38) + ($37)|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $length;
  $43 = (($42) + ($41))|0;
  $length = $43;
  $44 = $i;
  $45 = (($44) + 1)|0;
  $i = $45;
 }
 $46 = $0;
 $47 = $length;
 $48 = (($47) + 2)|0;
 $49 = (($48) + 1)|0;
 $50 = (($49) + 16)|0;
 _emit_2bytes($46,$50);
 $51 = $0;
 $52 = $1;
 _emit_byte11($51,$52);
 $i = 1;
 while(1) {
  $53 = $i;
  $54 = ($53|0)<=(16);
  if (!($54)) {
   break;
  }
  $55 = $0;
  $56 = $i;
  $57 = $htbl;
  $58 = (($57) + ($56)|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  _emit_byte11($55,$60);
  $61 = $i;
  $62 = (($61) + 1)|0;
  $i = $62;
 }
 $i = 0;
 while(1) {
  $63 = $i;
  $64 = $length;
  $65 = ($63|0)<($64|0);
  if (!($65)) {
   break;
  }
  $66 = $0;
  $67 = $i;
  $68 = $htbl;
  $69 = (($68) + 17|0);
  $70 = (($69) + ($67)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  _emit_byte11($66,$72);
  $73 = $i;
  $74 = (($73) + 1)|0;
  $i = $74;
 }
 $75 = $htbl;
 $76 = (($75) + 276|0);
 HEAP32[$76>>2] = 1;
 STACKTOP = sp;return;
}
function _emit_dac($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ac_in_use = 0, $compptr = 0, $dc_in_use = 0, $i = 0, $length = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $dc_in_use = sp + 32|0;
 $ac_in_use = sp + 16|0;
 $0 = $cinfo;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = ($1|0)<(16);
  if (!($2)) {
   break;
  }
  $3 = $i;
  $4 = (($ac_in_use) + ($3)|0);
  HEAP8[$4>>0] = 0;
  $5 = $i;
  $6 = (($dc_in_use) + ($5)|0);
  HEAP8[$6>>0] = 0;
  $7 = $i;
  $8 = (($7) + 1)|0;
  $i = $8;
 }
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $0;
  $11 = (($10) + 292|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = $0;
  $16 = (($15) + 296|0);
  $17 = (($16) + ($14<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $compptr = $18;
  $19 = $0;
  $20 = (($19) + 364|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0);
  if ($22) {
   $23 = $0;
   $24 = (($23) + 372|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($25|0)==(0);
   if ($26) {
    $27 = $compptr;
    $28 = (($27) + 20|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = (($dc_in_use) + ($29)|0);
    HEAP8[$30>>0] = 1;
   }
  }
  $31 = $0;
  $32 = (($31) + 368|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $compptr;
   $36 = (($35) + 24|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($ac_in_use) + ($37)|0);
   HEAP8[$38>>0] = 1;
  }
  $39 = $i;
  $40 = (($39) + 1)|0;
  $i = $40;
 }
 $length = 0;
 $i = 0;
 while(1) {
  $41 = $i;
  $42 = ($41|0)<(16);
  if (!($42)) {
   break;
  }
  $43 = $i;
  $44 = (($dc_in_use) + ($43)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45 << 24 >> 24;
  $47 = $i;
  $48 = (($ac_in_use) + ($47)|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49 << 24 >> 24;
  $51 = (($46) + ($50))|0;
  $52 = $length;
  $53 = (($52) + ($51))|0;
  $length = $53;
  $54 = $i;
  $55 = (($54) + 1)|0;
  $i = $55;
 }
 $56 = $length;
 $57 = ($56|0)!=(0);
 if (!($57)) {
  STACKTOP = sp;return;
 }
 $58 = $0;
 _emit_marker($58,204);
 $59 = $0;
 $60 = $length;
 $61 = $60<<1;
 $62 = (($61) + 2)|0;
 _emit_2bytes($59,$62);
 $i = 0;
 while(1) {
  $63 = $i;
  $64 = ($63|0)<(16);
  if (!($64)) {
   break;
  }
  $65 = $i;
  $66 = (($dc_in_use) + ($65)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = ($67<<24>>24)!=(0);
  if ($68) {
   $69 = $0;
   $70 = $i;
   _emit_byte11($69,$70);
   $71 = $0;
   $72 = $i;
   $73 = $0;
   $74 = (($73) + 152|0);
   $75 = (($74) + ($72)|0);
   $76 = HEAP8[$75>>0]|0;
   $77 = $76&255;
   $78 = $i;
   $79 = $0;
   $80 = (($79) + 168|0);
   $81 = (($80) + ($78)|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = $83 << 4;
   $85 = (($77) + ($84))|0;
   _emit_byte11($71,$85);
  }
  $86 = $i;
  $87 = (($ac_in_use) + ($86)|0);
  $88 = HEAP8[$87>>0]|0;
  $89 = ($88<<24>>24)!=(0);
  if ($89) {
   $90 = $0;
   $91 = $i;
   $92 = (($91) + 16)|0;
   _emit_byte11($90,$92);
   $93 = $0;
   $94 = $i;
   $95 = $0;
   $96 = (($95) + 184|0);
   $97 = (($96) + ($94)|0);
   $98 = HEAP8[$97>>0]|0;
   $99 = $98&255;
   _emit_byte11($93,$99);
  }
  $100 = $i;
  $101 = (($100) + 1)|0;
  $i = $101;
 }
 STACKTOP = sp;return;
}
function _emit_dri($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 _emit_marker($1,221);
 $2 = $0;
 _emit_2bytes($2,4);
 $3 = $0;
 $4 = $0;
 $5 = (($4) + 236|0);
 $6 = HEAP32[$5>>2]|0;
 _emit_2bytes($3,$6);
 STACKTOP = sp;return;
}
function _emit_sos($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $compptr = 0, $i = 0, $ta = 0, $td = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $0;
 _emit_marker($1,218);
 $2 = $0;
 $3 = $0;
 $4 = (($3) + 292|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5<<1;
 $7 = (($6) + 2)|0;
 $8 = (($7) + 1)|0;
 $9 = (($8) + 3)|0;
 _emit_2bytes($2,$9);
 $10 = $0;
 $11 = $0;
 $12 = (($11) + 292|0);
 $13 = HEAP32[$12>>2]|0;
 _emit_byte11($10,$13);
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = $0;
  $16 = (($15) + 292|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $i;
  $20 = $0;
  $21 = (($20) + 296|0);
  $22 = (($21) + ($19<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $compptr = $23;
  $24 = $0;
  $25 = $compptr;
  $26 = HEAP32[$25>>2]|0;
  _emit_byte11($24,$26);
  $27 = $0;
  $28 = (($27) + 364|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = $0;
   $32 = (($31) + 372|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0);
   if ($34) {
    $35 = $compptr;
    $36 = (($35) + 20|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $38 = 0;
  }
  $td = $38;
  $39 = $0;
  $40 = (($39) + 368|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $compptr;
   $44 = (($43) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $45;
  } else {
   $46 = 0;
  }
  $ta = $46;
  $47 = $0;
  $48 = $td;
  $49 = $48 << 4;
  $50 = $ta;
  $51 = (($49) + ($50))|0;
  _emit_byte11($47,$51);
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 $54 = $0;
 $55 = $0;
 $56 = (($55) + 364|0);
 $57 = HEAP32[$56>>2]|0;
 _emit_byte11($54,$57);
 $58 = $0;
 $59 = $0;
 $60 = (($59) + 368|0);
 $61 = HEAP32[$60>>2]|0;
 _emit_byte11($58,$61);
 $62 = $0;
 $63 = $0;
 $64 = (($63) + 372|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $65 << 4;
 $67 = $0;
 $68 = (($67) + 376|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($66) + ($69))|0;
 _emit_byte11($62,$70);
 STACKTOP = sp;return;
}
function _emit_sof($cinfo,$code) {
 $cinfo = $cinfo|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $ci = 0, $compptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $code;
 $2 = $0;
 $3 = $1;
 _emit_marker($2,$3);
 $4 = $0;
 $5 = $0;
 $6 = (($5) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7*3)|0;
 $9 = (($8) + 2)|0;
 $10 = (($9) + 5)|0;
 $11 = (($10) + 1)|0;
 _emit_2bytes($4,$11);
 $12 = $0;
 $13 = (($12) + 68|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(65535);
 if ($15) {
  label = 3;
 } else {
  $16 = $0;
  $17 = (($16) + 64|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)>(65535);
  if ($19) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $20 = $0;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 20|0);
  HEAP32[$22>>2] = 42;
  $23 = $0;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 24|0);
  HEAP32[$25>>2] = 65535;
  $26 = $0;
  $27 = HEAP32[$26>>2]|0;
  $28 = HEAP32[$27>>2]|0;
  $29 = $0;
  FUNCTION_TABLE_vi[$28 & 511]($29);
 }
 $30 = $0;
 $31 = $0;
 $32 = (($31) + 72|0);
 $33 = HEAP32[$32>>2]|0;
 _emit_byte11($30,$33);
 $34 = $0;
 $35 = $0;
 $36 = (($35) + 68|0);
 $37 = HEAP32[$36>>2]|0;
 _emit_2bytes($34,$37);
 $38 = $0;
 $39 = $0;
 $40 = (($39) + 64|0);
 $41 = HEAP32[$40>>2]|0;
 _emit_2bytes($38,$41);
 $42 = $0;
 $43 = $0;
 $44 = (($43) + 76|0);
 $45 = HEAP32[$44>>2]|0;
 _emit_byte11($42,$45);
 $ci = 0;
 $46 = $0;
 $47 = (($46) + 84|0);
 $48 = HEAP32[$47>>2]|0;
 $compptr = $48;
 while(1) {
  $49 = $ci;
  $50 = $0;
  $51 = (($50) + 76|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($49|0)<($52|0);
  if (!($53)) {
   break;
  }
  $54 = $0;
  $55 = $compptr;
  $56 = HEAP32[$55>>2]|0;
  _emit_byte11($54,$56);
  $57 = $0;
  $58 = $compptr;
  $59 = (($58) + 8|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $60 << 4;
  $62 = $compptr;
  $63 = (($62) + 12|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($61) + ($64))|0;
  _emit_byte11($57,$65);
  $66 = $0;
  $67 = $compptr;
  $68 = (($67) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  _emit_byte11($66,$69);
  $70 = $ci;
  $71 = (($70) + 1)|0;
  $ci = $71;
  $72 = $compptr;
  $73 = (($72) + 88|0);
  $compptr = $73;
 }
 STACKTOP = sp;return;
}
function _emit_lse_ict($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 260|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(1);
 if ($4) {
  label = 3;
 } else {
  $5 = $0;
  $6 = (($5) + 76|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)<(3);
  if ($8) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 20|0);
  HEAP32[$11>>2] = 28;
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  FUNCTION_TABLE_vi[$14 & 511]($15);
 }
 $16 = $0;
 _emit_marker($16,248);
 $17 = $0;
 _emit_2bytes($17,24);
 $18 = $0;
 _emit_byte11($18,13);
 $19 = $0;
 _emit_2bytes($19,255);
 $20 = $0;
 _emit_byte11($20,3);
 $21 = $0;
 $22 = $0;
 $23 = (($22) + 84|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 88|0);
 $26 = HEAP32[$25>>2]|0;
 _emit_byte11($21,$26);
 $27 = $0;
 $28 = $0;
 $29 = (($28) + 84|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 _emit_byte11($27,$31);
 $32 = $0;
 $33 = $0;
 $34 = (($33) + 84|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 176|0);
 $37 = HEAP32[$36>>2]|0;
 _emit_byte11($32,$37);
 $38 = $0;
 _emit_byte11($38,128);
 $39 = $0;
 _emit_2bytes($39,0);
 $40 = $0;
 _emit_2bytes($40,0);
 $41 = $0;
 _emit_byte11($41,0);
 $42 = $0;
 _emit_2bytes($42,1);
 $43 = $0;
 _emit_2bytes($43,0);
 $44 = $0;
 _emit_byte11($44,0);
 $45 = $0;
 _emit_2bytes($45,1);
 $46 = $0;
 _emit_2bytes($46,0);
 STACKTOP = sp;return;
}
function _emit_pseudo_sos($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 _emit_marker($1,218);
 $2 = $0;
 _emit_2bytes($2,6);
 $3 = $0;
 _emit_byte11($3,0);
 $4 = $0;
 _emit_byte11($4,0);
 $5 = $0;
 $6 = $0;
 $7 = (($6) + 380|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = (($9) + 380|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($8, $11)|0;
 $13 = (($12) - 1)|0;
 _emit_byte11($5,$13);
 $14 = $0;
 _emit_byte11($14,0);
 STACKTOP = sp;return;
}
function _emit_jfif_app0($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 _emit_marker($1,224);
 $2 = $0;
 _emit_2bytes($2,16);
 $3 = $0;
 _emit_byte11($3,74);
 $4 = $0;
 _emit_byte11($4,70);
 $5 = $0;
 _emit_byte11($5,73);
 $6 = $0;
 _emit_byte11($6,70);
 $7 = $0;
 _emit_byte11($7,0);
 $8 = $0;
 $9 = $0;
 $10 = (($9) + 248|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11&255;
 _emit_byte11($8,$12);
 $13 = $0;
 $14 = $0;
 $15 = (($14) + 249|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 _emit_byte11($13,$17);
 $18 = $0;
 $19 = $0;
 $20 = (($19) + 250|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 _emit_byte11($18,$22);
 $23 = $0;
 $24 = $0;
 $25 = (($24) + 252|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26&65535;
 _emit_2bytes($23,$27);
 $28 = $0;
 $29 = $0;
 $30 = (($29) + 254|0);
 $31 = HEAP16[$30>>1]|0;
 $32 = $31&65535;
 _emit_2bytes($28,$32);
 $33 = $0;
 _emit_byte11($33,0);
 $34 = $0;
 _emit_byte11($34,0);
 STACKTOP = sp;return;
}
function _emit_adobe_app14($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 _emit_marker($1,238);
 $2 = $0;
 _emit_2bytes($2,14);
 $3 = $0;
 _emit_byte11($3,65);
 $4 = $0;
 _emit_byte11($4,100);
 $5 = $0;
 _emit_byte11($5,111);
 $6 = $0;
 _emit_byte11($6,98);
 $7 = $0;
 _emit_byte11($7,101);
 $8 = $0;
 _emit_2bytes($8,100);
 $9 = $0;
 _emit_2bytes($9,0);
 $10 = $0;
 _emit_2bytes($10,0);
 $11 = $0;
 $12 = (($11) + 80|0);
 $13 = HEAP32[$12>>2]|0;
 if ((($13|0) == 3)) {
  $14 = $0;
  _emit_byte11($14,1);
  STACKTOP = sp;return;
 } else if ((($13|0) == 5)) {
  $15 = $0;
  _emit_byte11($15,2);
  STACKTOP = sp;return;
 } else {
  $16 = $0;
  _emit_byte11($16,0);
  STACKTOP = sp;return;
 }
}
function _jpeg_calc_jpeg_dimensions($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 >> 24;
 $5 = ($4|0)!=(0);
 if ($5) {
  label = 3;
 } else {
  $6 = $0;
  $7 = (($6) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 >> 24;
  $10 = ($9|0)!=(0);
  if ($10) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 20|0);
  HEAP32[$13>>2] = 42;
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 24|0);
  HEAP32[$16>>2] = 65500;
  $17 = $0;
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  FUNCTION_TABLE_vi[$19 & 511]($20);
 }
 $21 = $0;
 $22 = (($21) + 56|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $0;
 $25 = (($24) + 60|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = (($27) + 380|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($26, $29)|0;
 $31 = ($23>>>0)>=($30>>>0);
 if ($31) {
  $32 = $0;
  $33 = (($32) + 28|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $0;
  $36 = (($35) + 380|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = Math_imul($34, $37)|0;
  $39 = $0;
  $40 = (($39) + 64|0);
  HEAP32[$40>>2] = $38;
  $41 = $0;
  $42 = (($41) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $0;
  $45 = (($44) + 380|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = Math_imul($43, $46)|0;
  $48 = $0;
  $49 = (($48) + 68|0);
  HEAP32[$49>>2] = $47;
  $50 = $0;
  $51 = (($50) + 280|0);
  HEAP32[$51>>2] = 1;
  $52 = $0;
  $53 = (($52) + 284|0);
  HEAP32[$53>>2] = 1;
  STACKTOP = sp;return;
 }
 $54 = $0;
 $55 = (($54) + 56|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = $56<<1;
 $58 = $0;
 $59 = (($58) + 60|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $0;
 $62 = (($61) + 380|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = Math_imul($60, $63)|0;
 $65 = ($57>>>0)>=($64>>>0);
 if ($65) {
  $66 = $0;
  $67 = (($66) + 28|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $0;
  $70 = (($69) + 380|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = Math_imul($68, $71)|0;
  $73 = (_jdiv_round_up($72,2)|0);
  $74 = $0;
  $75 = (($74) + 64|0);
  HEAP32[$75>>2] = $73;
  $76 = $0;
  $77 = (($76) + 32|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $0;
  $80 = (($79) + 380|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = Math_imul($78, $81)|0;
  $83 = (_jdiv_round_up($82,2)|0);
  $84 = $0;
  $85 = (($84) + 68|0);
  HEAP32[$85>>2] = $83;
  $86 = $0;
  $87 = (($86) + 280|0);
  HEAP32[$87>>2] = 2;
  $88 = $0;
  $89 = (($88) + 284|0);
  HEAP32[$89>>2] = 2;
 } else {
  $90 = $0;
  $91 = (($90) + 56|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = ($92*3)|0;
  $94 = $0;
  $95 = (($94) + 60|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $0;
  $98 = (($97) + 380|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = Math_imul($96, $99)|0;
  $101 = ($93>>>0)>=($100>>>0);
  if ($101) {
   $102 = $0;
   $103 = (($102) + 28|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $0;
   $106 = (($105) + 380|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = Math_imul($104, $107)|0;
   $109 = (_jdiv_round_up($108,3)|0);
   $110 = $0;
   $111 = (($110) + 64|0);
   HEAP32[$111>>2] = $109;
   $112 = $0;
   $113 = (($112) + 32|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $0;
   $116 = (($115) + 380|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = Math_imul($114, $117)|0;
   $119 = (_jdiv_round_up($118,3)|0);
   $120 = $0;
   $121 = (($120) + 68|0);
   HEAP32[$121>>2] = $119;
   $122 = $0;
   $123 = (($122) + 280|0);
   HEAP32[$123>>2] = 3;
   $124 = $0;
   $125 = (($124) + 284|0);
   HEAP32[$125>>2] = 3;
  } else {
   $126 = $0;
   $127 = (($126) + 56|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $128<<2;
   $130 = $0;
   $131 = (($130) + 60|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $0;
   $134 = (($133) + 380|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = Math_imul($132, $135)|0;
   $137 = ($129>>>0)>=($136>>>0);
   if ($137) {
    $138 = $0;
    $139 = (($138) + 28|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = $0;
    $142 = (($141) + 380|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = Math_imul($140, $143)|0;
    $145 = (_jdiv_round_up($144,4)|0);
    $146 = $0;
    $147 = (($146) + 64|0);
    HEAP32[$147>>2] = $145;
    $148 = $0;
    $149 = (($148) + 32|0);
    $150 = HEAP32[$149>>2]|0;
    $151 = $0;
    $152 = (($151) + 380|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = Math_imul($150, $153)|0;
    $155 = (_jdiv_round_up($154,4)|0);
    $156 = $0;
    $157 = (($156) + 68|0);
    HEAP32[$157>>2] = $155;
    $158 = $0;
    $159 = (($158) + 280|0);
    HEAP32[$159>>2] = 4;
    $160 = $0;
    $161 = (($160) + 284|0);
    HEAP32[$161>>2] = 4;
   } else {
    $162 = $0;
    $163 = (($162) + 56|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ($164*5)|0;
    $166 = $0;
    $167 = (($166) + 60|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = $0;
    $170 = (($169) + 380|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = Math_imul($168, $171)|0;
    $173 = ($165>>>0)>=($172>>>0);
    if ($173) {
     $174 = $0;
     $175 = (($174) + 28|0);
     $176 = HEAP32[$175>>2]|0;
     $177 = $0;
     $178 = (($177) + 380|0);
     $179 = HEAP32[$178>>2]|0;
     $180 = Math_imul($176, $179)|0;
     $181 = (_jdiv_round_up($180,5)|0);
     $182 = $0;
     $183 = (($182) + 64|0);
     HEAP32[$183>>2] = $181;
     $184 = $0;
     $185 = (($184) + 32|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = $0;
     $188 = (($187) + 380|0);
     $189 = HEAP32[$188>>2]|0;
     $190 = Math_imul($186, $189)|0;
     $191 = (_jdiv_round_up($190,5)|0);
     $192 = $0;
     $193 = (($192) + 68|0);
     HEAP32[$193>>2] = $191;
     $194 = $0;
     $195 = (($194) + 280|0);
     HEAP32[$195>>2] = 5;
     $196 = $0;
     $197 = (($196) + 284|0);
     HEAP32[$197>>2] = 5;
    } else {
     $198 = $0;
     $199 = (($198) + 56|0);
     $200 = HEAP32[$199>>2]|0;
     $201 = ($200*6)|0;
     $202 = $0;
     $203 = (($202) + 60|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = $0;
     $206 = (($205) + 380|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = Math_imul($204, $207)|0;
     $209 = ($201>>>0)>=($208>>>0);
     if ($209) {
      $210 = $0;
      $211 = (($210) + 28|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = $0;
      $214 = (($213) + 380|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = Math_imul($212, $215)|0;
      $217 = (_jdiv_round_up($216,6)|0);
      $218 = $0;
      $219 = (($218) + 64|0);
      HEAP32[$219>>2] = $217;
      $220 = $0;
      $221 = (($220) + 32|0);
      $222 = HEAP32[$221>>2]|0;
      $223 = $0;
      $224 = (($223) + 380|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = Math_imul($222, $225)|0;
      $227 = (_jdiv_round_up($226,6)|0);
      $228 = $0;
      $229 = (($228) + 68|0);
      HEAP32[$229>>2] = $227;
      $230 = $0;
      $231 = (($230) + 280|0);
      HEAP32[$231>>2] = 6;
      $232 = $0;
      $233 = (($232) + 284|0);
      HEAP32[$233>>2] = 6;
     } else {
      $234 = $0;
      $235 = (($234) + 56|0);
      $236 = HEAP32[$235>>2]|0;
      $237 = ($236*7)|0;
      $238 = $0;
      $239 = (($238) + 60|0);
      $240 = HEAP32[$239>>2]|0;
      $241 = $0;
      $242 = (($241) + 380|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = Math_imul($240, $243)|0;
      $245 = ($237>>>0)>=($244>>>0);
      if ($245) {
       $246 = $0;
       $247 = (($246) + 28|0);
       $248 = HEAP32[$247>>2]|0;
       $249 = $0;
       $250 = (($249) + 380|0);
       $251 = HEAP32[$250>>2]|0;
       $252 = Math_imul($248, $251)|0;
       $253 = (_jdiv_round_up($252,7)|0);
       $254 = $0;
       $255 = (($254) + 64|0);
       HEAP32[$255>>2] = $253;
       $256 = $0;
       $257 = (($256) + 32|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = $0;
       $260 = (($259) + 380|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = Math_imul($258, $261)|0;
       $263 = (_jdiv_round_up($262,7)|0);
       $264 = $0;
       $265 = (($264) + 68|0);
       HEAP32[$265>>2] = $263;
       $266 = $0;
       $267 = (($266) + 280|0);
       HEAP32[$267>>2] = 7;
       $268 = $0;
       $269 = (($268) + 284|0);
       HEAP32[$269>>2] = 7;
      } else {
       $270 = $0;
       $271 = (($270) + 56|0);
       $272 = HEAP32[$271>>2]|0;
       $273 = $272<<3;
       $274 = $0;
       $275 = (($274) + 60|0);
       $276 = HEAP32[$275>>2]|0;
       $277 = $0;
       $278 = (($277) + 380|0);
       $279 = HEAP32[$278>>2]|0;
       $280 = Math_imul($276, $279)|0;
       $281 = ($273>>>0)>=($280>>>0);
       if ($281) {
        $282 = $0;
        $283 = (($282) + 28|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $0;
        $286 = (($285) + 380|0);
        $287 = HEAP32[$286>>2]|0;
        $288 = Math_imul($284, $287)|0;
        $289 = (_jdiv_round_up($288,8)|0);
        $290 = $0;
        $291 = (($290) + 64|0);
        HEAP32[$291>>2] = $289;
        $292 = $0;
        $293 = (($292) + 32|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = $0;
        $296 = (($295) + 380|0);
        $297 = HEAP32[$296>>2]|0;
        $298 = Math_imul($294, $297)|0;
        $299 = (_jdiv_round_up($298,8)|0);
        $300 = $0;
        $301 = (($300) + 68|0);
        HEAP32[$301>>2] = $299;
        $302 = $0;
        $303 = (($302) + 280|0);
        HEAP32[$303>>2] = 8;
        $304 = $0;
        $305 = (($304) + 284|0);
        HEAP32[$305>>2] = 8;
       } else {
        $306 = $0;
        $307 = (($306) + 56|0);
        $308 = HEAP32[$307>>2]|0;
        $309 = ($308*9)|0;
        $310 = $0;
        $311 = (($310) + 60|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $0;
        $314 = (($313) + 380|0);
        $315 = HEAP32[$314>>2]|0;
        $316 = Math_imul($312, $315)|0;
        $317 = ($309>>>0)>=($316>>>0);
        if ($317) {
         $318 = $0;
         $319 = (($318) + 28|0);
         $320 = HEAP32[$319>>2]|0;
         $321 = $0;
         $322 = (($321) + 380|0);
         $323 = HEAP32[$322>>2]|0;
         $324 = Math_imul($320, $323)|0;
         $325 = (_jdiv_round_up($324,9)|0);
         $326 = $0;
         $327 = (($326) + 64|0);
         HEAP32[$327>>2] = $325;
         $328 = $0;
         $329 = (($328) + 32|0);
         $330 = HEAP32[$329>>2]|0;
         $331 = $0;
         $332 = (($331) + 380|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = Math_imul($330, $333)|0;
         $335 = (_jdiv_round_up($334,9)|0);
         $336 = $0;
         $337 = (($336) + 68|0);
         HEAP32[$337>>2] = $335;
         $338 = $0;
         $339 = (($338) + 280|0);
         HEAP32[$339>>2] = 9;
         $340 = $0;
         $341 = (($340) + 284|0);
         HEAP32[$341>>2] = 9;
        } else {
         $342 = $0;
         $343 = (($342) + 56|0);
         $344 = HEAP32[$343>>2]|0;
         $345 = ($344*10)|0;
         $346 = $0;
         $347 = (($346) + 60|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = $0;
         $350 = (($349) + 380|0);
         $351 = HEAP32[$350>>2]|0;
         $352 = Math_imul($348, $351)|0;
         $353 = ($345>>>0)>=($352>>>0);
         if ($353) {
          $354 = $0;
          $355 = (($354) + 28|0);
          $356 = HEAP32[$355>>2]|0;
          $357 = $0;
          $358 = (($357) + 380|0);
          $359 = HEAP32[$358>>2]|0;
          $360 = Math_imul($356, $359)|0;
          $361 = (_jdiv_round_up($360,10)|0);
          $362 = $0;
          $363 = (($362) + 64|0);
          HEAP32[$363>>2] = $361;
          $364 = $0;
          $365 = (($364) + 32|0);
          $366 = HEAP32[$365>>2]|0;
          $367 = $0;
          $368 = (($367) + 380|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = Math_imul($366, $369)|0;
          $371 = (_jdiv_round_up($370,10)|0);
          $372 = $0;
          $373 = (($372) + 68|0);
          HEAP32[$373>>2] = $371;
          $374 = $0;
          $375 = (($374) + 280|0);
          HEAP32[$375>>2] = 10;
          $376 = $0;
          $377 = (($376) + 284|0);
          HEAP32[$377>>2] = 10;
         } else {
          $378 = $0;
          $379 = (($378) + 56|0);
          $380 = HEAP32[$379>>2]|0;
          $381 = ($380*11)|0;
          $382 = $0;
          $383 = (($382) + 60|0);
          $384 = HEAP32[$383>>2]|0;
          $385 = $0;
          $386 = (($385) + 380|0);
          $387 = HEAP32[$386>>2]|0;
          $388 = Math_imul($384, $387)|0;
          $389 = ($381>>>0)>=($388>>>0);
          if ($389) {
           $390 = $0;
           $391 = (($390) + 28|0);
           $392 = HEAP32[$391>>2]|0;
           $393 = $0;
           $394 = (($393) + 380|0);
           $395 = HEAP32[$394>>2]|0;
           $396 = Math_imul($392, $395)|0;
           $397 = (_jdiv_round_up($396,11)|0);
           $398 = $0;
           $399 = (($398) + 64|0);
           HEAP32[$399>>2] = $397;
           $400 = $0;
           $401 = (($400) + 32|0);
           $402 = HEAP32[$401>>2]|0;
           $403 = $0;
           $404 = (($403) + 380|0);
           $405 = HEAP32[$404>>2]|0;
           $406 = Math_imul($402, $405)|0;
           $407 = (_jdiv_round_up($406,11)|0);
           $408 = $0;
           $409 = (($408) + 68|0);
           HEAP32[$409>>2] = $407;
           $410 = $0;
           $411 = (($410) + 280|0);
           HEAP32[$411>>2] = 11;
           $412 = $0;
           $413 = (($412) + 284|0);
           HEAP32[$413>>2] = 11;
          } else {
           $414 = $0;
           $415 = (($414) + 56|0);
           $416 = HEAP32[$415>>2]|0;
           $417 = ($416*12)|0;
           $418 = $0;
           $419 = (($418) + 60|0);
           $420 = HEAP32[$419>>2]|0;
           $421 = $0;
           $422 = (($421) + 380|0);
           $423 = HEAP32[$422>>2]|0;
           $424 = Math_imul($420, $423)|0;
           $425 = ($417>>>0)>=($424>>>0);
           if ($425) {
            $426 = $0;
            $427 = (($426) + 28|0);
            $428 = HEAP32[$427>>2]|0;
            $429 = $0;
            $430 = (($429) + 380|0);
            $431 = HEAP32[$430>>2]|0;
            $432 = Math_imul($428, $431)|0;
            $433 = (_jdiv_round_up($432,12)|0);
            $434 = $0;
            $435 = (($434) + 64|0);
            HEAP32[$435>>2] = $433;
            $436 = $0;
            $437 = (($436) + 32|0);
            $438 = HEAP32[$437>>2]|0;
            $439 = $0;
            $440 = (($439) + 380|0);
            $441 = HEAP32[$440>>2]|0;
            $442 = Math_imul($438, $441)|0;
            $443 = (_jdiv_round_up($442,12)|0);
            $444 = $0;
            $445 = (($444) + 68|0);
            HEAP32[$445>>2] = $443;
            $446 = $0;
            $447 = (($446) + 280|0);
            HEAP32[$447>>2] = 12;
            $448 = $0;
            $449 = (($448) + 284|0);
            HEAP32[$449>>2] = 12;
           } else {
            $450 = $0;
            $451 = (($450) + 56|0);
            $452 = HEAP32[$451>>2]|0;
            $453 = ($452*13)|0;
            $454 = $0;
            $455 = (($454) + 60|0);
            $456 = HEAP32[$455>>2]|0;
            $457 = $0;
            $458 = (($457) + 380|0);
            $459 = HEAP32[$458>>2]|0;
            $460 = Math_imul($456, $459)|0;
            $461 = ($453>>>0)>=($460>>>0);
            if ($461) {
             $462 = $0;
             $463 = (($462) + 28|0);
             $464 = HEAP32[$463>>2]|0;
             $465 = $0;
             $466 = (($465) + 380|0);
             $467 = HEAP32[$466>>2]|0;
             $468 = Math_imul($464, $467)|0;
             $469 = (_jdiv_round_up($468,13)|0);
             $470 = $0;
             $471 = (($470) + 64|0);
             HEAP32[$471>>2] = $469;
             $472 = $0;
             $473 = (($472) + 32|0);
             $474 = HEAP32[$473>>2]|0;
             $475 = $0;
             $476 = (($475) + 380|0);
             $477 = HEAP32[$476>>2]|0;
             $478 = Math_imul($474, $477)|0;
             $479 = (_jdiv_round_up($478,13)|0);
             $480 = $0;
             $481 = (($480) + 68|0);
             HEAP32[$481>>2] = $479;
             $482 = $0;
             $483 = (($482) + 280|0);
             HEAP32[$483>>2] = 13;
             $484 = $0;
             $485 = (($484) + 284|0);
             HEAP32[$485>>2] = 13;
            } else {
             $486 = $0;
             $487 = (($486) + 56|0);
             $488 = HEAP32[$487>>2]|0;
             $489 = ($488*14)|0;
             $490 = $0;
             $491 = (($490) + 60|0);
             $492 = HEAP32[$491>>2]|0;
             $493 = $0;
             $494 = (($493) + 380|0);
             $495 = HEAP32[$494>>2]|0;
             $496 = Math_imul($492, $495)|0;
             $497 = ($489>>>0)>=($496>>>0);
             if ($497) {
              $498 = $0;
              $499 = (($498) + 28|0);
              $500 = HEAP32[$499>>2]|0;
              $501 = $0;
              $502 = (($501) + 380|0);
              $503 = HEAP32[$502>>2]|0;
              $504 = Math_imul($500, $503)|0;
              $505 = (_jdiv_round_up($504,14)|0);
              $506 = $0;
              $507 = (($506) + 64|0);
              HEAP32[$507>>2] = $505;
              $508 = $0;
              $509 = (($508) + 32|0);
              $510 = HEAP32[$509>>2]|0;
              $511 = $0;
              $512 = (($511) + 380|0);
              $513 = HEAP32[$512>>2]|0;
              $514 = Math_imul($510, $513)|0;
              $515 = (_jdiv_round_up($514,14)|0);
              $516 = $0;
              $517 = (($516) + 68|0);
              HEAP32[$517>>2] = $515;
              $518 = $0;
              $519 = (($518) + 280|0);
              HEAP32[$519>>2] = 14;
              $520 = $0;
              $521 = (($520) + 284|0);
              HEAP32[$521>>2] = 14;
             } else {
              $522 = $0;
              $523 = (($522) + 56|0);
              $524 = HEAP32[$523>>2]|0;
              $525 = ($524*15)|0;
              $526 = $0;
              $527 = (($526) + 60|0);
              $528 = HEAP32[$527>>2]|0;
              $529 = $0;
              $530 = (($529) + 380|0);
              $531 = HEAP32[$530>>2]|0;
              $532 = Math_imul($528, $531)|0;
              $533 = ($525>>>0)>=($532>>>0);
              if ($533) {
               $534 = $0;
               $535 = (($534) + 28|0);
               $536 = HEAP32[$535>>2]|0;
               $537 = $0;
               $538 = (($537) + 380|0);
               $539 = HEAP32[$538>>2]|0;
               $540 = Math_imul($536, $539)|0;
               $541 = (_jdiv_round_up($540,15)|0);
               $542 = $0;
               $543 = (($542) + 64|0);
               HEAP32[$543>>2] = $541;
               $544 = $0;
               $545 = (($544) + 32|0);
               $546 = HEAP32[$545>>2]|0;
               $547 = $0;
               $548 = (($547) + 380|0);
               $549 = HEAP32[$548>>2]|0;
               $550 = Math_imul($546, $549)|0;
               $551 = (_jdiv_round_up($550,15)|0);
               $552 = $0;
               $553 = (($552) + 68|0);
               HEAP32[$553>>2] = $551;
               $554 = $0;
               $555 = (($554) + 280|0);
               HEAP32[$555>>2] = 15;
               $556 = $0;
               $557 = (($556) + 284|0);
               HEAP32[$557>>2] = 15;
              } else {
               $558 = $0;
               $559 = (($558) + 28|0);
               $560 = HEAP32[$559>>2]|0;
               $561 = $0;
               $562 = (($561) + 380|0);
               $563 = HEAP32[$562>>2]|0;
               $564 = Math_imul($560, $563)|0;
               $565 = (_jdiv_round_up($564,16)|0);
               $566 = $0;
               $567 = (($566) + 64|0);
               HEAP32[$567>>2] = $565;
               $568 = $0;
               $569 = (($568) + 32|0);
               $570 = HEAP32[$569>>2]|0;
               $571 = $0;
               $572 = (($571) + 380|0);
               $573 = HEAP32[$572>>2]|0;
               $574 = Math_imul($570, $573)|0;
               $575 = (_jdiv_round_up($574,16)|0);
               $576 = $0;
               $577 = (($576) + 68|0);
               HEAP32[$577>>2] = $575;
               $578 = $0;
               $579 = (($578) + 280|0);
               HEAP32[$579>>2] = 16;
               $580 = $0;
               $581 = (($580) + 284|0);
               HEAP32[$581>>2] = 16;
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _jinit_c_master_control($cinfo,$transcode_only) {
 $cinfo = $cinfo|0;
 $transcode_only = $transcode_only|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $master = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $transcode_only;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = (FUNCTION_TABLE_iiii[$5 & 511]($6,1,36)|0);
 $master = $7;
 $8 = $master;
 $9 = $0;
 $10 = (($9) + 392|0);
 HEAP32[$10>>2] = $8;
 $11 = $master;
 HEAP32[$11>>2] = 120;
 $12 = $master;
 $13 = (($12) + 4|0);
 HEAP32[$13>>2] = 121;
 $14 = $master;
 $15 = (($14) + 8|0);
 HEAP32[$15>>2] = 122;
 $16 = $master;
 $17 = (($16) + 16|0);
 HEAP32[$17>>2] = 0;
 $18 = $0;
 $19 = $1;
 _initial_setup($18,$19);
 $20 = $0;
 $21 = (($20) + 204|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = $0;
  _validate_script($24);
  $25 = $0;
  $26 = (($25) + 380|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)<(8);
  if ($28) {
   $29 = $0;
   _reduce_script($29);
  }
 } else {
  $30 = $0;
  $31 = (($30) + 268|0);
  HEAP32[$31>>2] = 0;
  $32 = $0;
  $33 = (($32) + 200|0);
  HEAP32[$33>>2] = 1;
 }
 $34 = $0;
 $35 = (($34) + 216|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $0;
  $39 = (($38) + 212|0);
  HEAP32[$39>>2] = 0;
 } else {
  $40 = $0;
  $41 = (($40) + 212|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = ($42|0)!=(0);
  do {
   if (!($43)) {
    $44 = $0;
    $45 = (($44) + 268|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($46|0)!=(0);
    if (!($47)) {
     $48 = $0;
     $49 = (($48) + 380|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)>(1);
     if (!($51)) {
      break;
     }
     $52 = $0;
     $53 = (($52) + 380|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)<(8);
     if (!($55)) {
      break;
     }
    }
    $56 = $0;
    $57 = (($56) + 216|0);
    HEAP32[$57>>2] = 1;
   }
  } while(0);
 }
 $58 = $1;
 $59 = ($58|0)!=(0);
 if ($59) {
  $60 = $0;
  $61 = (($60) + 216|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)!=(0);
  if ($63) {
   $64 = $master;
   $65 = (($64) + 20|0);
   HEAP32[$65>>2] = 1;
  } else {
   $66 = $master;
   $67 = (($66) + 20|0);
   HEAP32[$67>>2] = 2;
  }
 } else {
  $68 = $master;
  $69 = (($68) + 20|0);
  HEAP32[$69>>2] = 0;
 }
 $70 = $master;
 $71 = (($70) + 32|0);
 HEAP32[$71>>2] = 0;
 $72 = $master;
 $73 = (($72) + 24|0);
 HEAP32[$73>>2] = 0;
 $74 = $0;
 $75 = (($74) + 216|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $0;
  $79 = (($78) + 200|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $80<<1;
  $82 = $master;
  $83 = (($82) + 28|0);
  HEAP32[$83>>2] = $81;
  STACKTOP = sp;return;
 } else {
  $84 = $0;
  $85 = (($84) + 200|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = $master;
  $88 = (($87) + 28|0);
  HEAP32[$88>>2] = $86;
  STACKTOP = sp;return;
 }
}
function _prepare_for_pass($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $master = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 392|0);
 $3 = HEAP32[$2>>2]|0;
 $master = $3;
 $4 = $master;
 $5 = (($4) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 do {
  if ((($6|0) == 1)) {
   $64 = $0;
   _select_scan_parameters($64);
   $65 = $0;
   _per_scan_setup($65);
   $66 = $0;
   $67 = (($66) + 364|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)!=(0);
   if (!($69)) {
    $70 = $0;
    $71 = (($70) + 372|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==(0);
    if (!($73)) {
     $86 = $master;
     $87 = (($86) + 20|0);
     HEAP32[$87>>2] = 2;
     $88 = $master;
     $89 = (($88) + 24|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = (($90) + 1)|0;
     HEAP32[$89>>2] = $91;
     label = 12;
     break;
    }
   }
   $74 = $0;
   $75 = (($74) + 424|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = HEAP32[$76>>2]|0;
   $78 = $0;
   FUNCTION_TABLE_vii[$77 & 511]($78,1);
   $79 = $0;
   $80 = (($79) + 404|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = HEAP32[$81>>2]|0;
   $83 = $0;
   FUNCTION_TABLE_vii[$82 & 511]($83,2);
   $84 = $master;
   $85 = (($84) + 12|0);
   HEAP32[$85>>2] = 0;
  } else if ((($6|0) == 2)) {
   label = 12;
  } else if ((($6|0) == 0)) {
   $7 = $0;
   _select_scan_parameters($7);
   $8 = $0;
   _per_scan_setup($8);
   $9 = $0;
   $10 = (($9) + 208|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)!=(0);
   if (!($12)) {
    $13 = $0;
    $14 = (($13) + 412|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = HEAP32[$15>>2]|0;
    $17 = $0;
    FUNCTION_TABLE_vi[$16 & 511]($17);
    $18 = $0;
    $19 = (($18) + 416|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = HEAP32[$20>>2]|0;
    $22 = $0;
    FUNCTION_TABLE_vi[$21 & 511]($22);
    $23 = $0;
    $24 = (($23) + 400|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = $0;
    FUNCTION_TABLE_vii[$26 & 511]($27,0);
   }
   $28 = $0;
   $29 = (($28) + 420|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = HEAP32[$30>>2]|0;
   $32 = $0;
   FUNCTION_TABLE_vi[$31 & 511]($32);
   $33 = $0;
   $34 = (($33) + 424|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $37 = $0;
   $38 = $0;
   $39 = (($38) + 216|0);
   $40 = HEAP32[$39>>2]|0;
   FUNCTION_TABLE_vii[$36 & 511]($37,$40);
   $41 = $0;
   $42 = (($41) + 404|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = HEAP32[$43>>2]|0;
   $45 = $0;
   $46 = $master;
   $47 = (($46) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)>(1);
   $50 = $49 ? 3 : 0;
   FUNCTION_TABLE_vii[$44 & 511]($45,$50);
   $51 = $0;
   $52 = (($51) + 396|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP32[$53>>2]|0;
   $55 = $0;
   FUNCTION_TABLE_vii[$54 & 511]($55,0);
   $56 = $0;
   $57 = (($56) + 216|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)!=(0);
   if ($59) {
    $60 = $master;
    $61 = (($60) + 12|0);
    HEAP32[$61>>2] = 0;
   } else {
    $62 = $master;
    $63 = (($62) + 12|0);
    HEAP32[$63>>2] = 1;
   }
  } else {
   $126 = $0;
   $127 = HEAP32[$126>>2]|0;
   $128 = (($127) + 20|0);
   HEAP32[$128>>2] = 49;
   $129 = $0;
   $130 = HEAP32[$129>>2]|0;
   $131 = HEAP32[$130>>2]|0;
   $132 = $0;
   FUNCTION_TABLE_vi[$131 & 511]($132);
  }
 } while(0);
 if ((label|0) == 12) {
  $92 = $0;
  $93 = (($92) + 216|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($94|0)!=(0);
  if (!($95)) {
   $96 = $0;
   _select_scan_parameters($96);
   $97 = $0;
   _per_scan_setup($97);
  }
  $98 = $0;
  $99 = (($98) + 424|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = HEAP32[$100>>2]|0;
  $102 = $0;
  FUNCTION_TABLE_vii[$101 & 511]($102,0);
  $103 = $0;
  $104 = (($103) + 404|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  $107 = $0;
  FUNCTION_TABLE_vii[$106 & 511]($107,2);
  $108 = $master;
  $109 = (($108) + 32|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)==(0);
  if ($111) {
   $112 = $0;
   $113 = (($112) + 408|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 4|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = $0;
   FUNCTION_TABLE_vi[$116 & 511]($117);
  }
  $118 = $0;
  $119 = (($118) + 408|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = (($120) + 8|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $0;
  FUNCTION_TABLE_vi[$122 & 511]($123);
  $124 = $master;
  $125 = (($124) + 12|0);
  HEAP32[$125>>2] = 0;
 }
 $133 = $master;
 $134 = (($133) + 24|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $master;
 $137 = (($136) + 28|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = (($138) - 1)|0;
 $140 = ($135|0)==($139|0);
 $141 = $140&1;
 $142 = $master;
 $143 = (($142) + 16|0);
 HEAP32[$143>>2] = $141;
 $144 = $0;
 $145 = (($144) + 8|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)!=(0|0);
 if (!($147)) {
  STACKTOP = sp;return;
 }
 $148 = $master;
 $149 = (($148) + 24|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = $0;
 $152 = (($151) + 8|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = (($153) + 12|0);
 HEAP32[$154>>2] = $150;
 $155 = $master;
 $156 = (($155) + 28|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = $0;
 $159 = (($158) + 8|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = (($160) + 16|0);
 HEAP32[$161>>2] = $157;
 STACKTOP = sp;return;
}
function _pass_startup($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 392|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 12|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = (($5) + 408|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $0;
 FUNCTION_TABLE_vi[$9 & 511]($10);
 $11 = $0;
 $12 = (($11) + 408|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 FUNCTION_TABLE_vi[$15 & 511]($16);
 STACKTOP = sp;return;
}
function _finish_pass_master($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $master = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 392|0);
 $3 = HEAP32[$2>>2]|0;
 $master = $3;
 $4 = $0;
 $5 = (($4) + 424|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 FUNCTION_TABLE_vi[$8 & 511]($9);
 $10 = $master;
 $11 = (($10) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 if ((($12|0) == 2)) {
  $25 = $0;
  $26 = (($25) + 216|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $master;
   $30 = (($29) + 20|0);
   HEAP32[$30>>2] = 1;
  }
  $31 = $master;
  $32 = (($31) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + 1)|0;
  HEAP32[$32>>2] = $34;
 } else if ((($12|0) == 1)) {
  $23 = $master;
  $24 = (($23) + 20|0);
  HEAP32[$24>>2] = 2;
 } else if ((($12|0) == 0)) {
  $13 = $master;
  $14 = (($13) + 20|0);
  HEAP32[$14>>2] = 2;
  $15 = $0;
  $16 = (($15) + 216|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0);
  if (!($18)) {
   $19 = $master;
   $20 = (($19) + 32|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
  }
 }
 $35 = $master;
 $36 = (($35) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[$36>>2] = $38;
 STACKTOP = sp;return;
}
function _initial_setup($cinfo,$transcode_only) {
 $cinfo = $cinfo|0;
 $transcode_only = $transcode_only|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0, $ssize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $transcode_only;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $0;
  _jpeg_calc_trans_dimensions($4);
 } else {
  $5 = $0;
  _jpeg_calc_jpeg_dimensions($5);
 }
 $6 = $0;
 $7 = (($6) + 380|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)<(1);
 if ($9) {
  label = 6;
 } else {
  $10 = $0;
  $11 = (($10) + 380|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>(16);
  if ($13) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 20|0);
  HEAP32[$16>>2] = 7;
  $17 = $0;
  $18 = (($17) + 380|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 24|0);
  HEAP32[$22>>2] = $19;
  $23 = $0;
  $24 = (($23) + 380|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $0;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 24|0);
  $29 = (($28) + 4|0);
  HEAP32[$29>>2] = $25;
  $30 = $0;
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = $0;
  FUNCTION_TABLE_vi[$32 & 511]($33);
 }
 $34 = $0;
 $35 = (($34) + 380|0);
 $36 = HEAP32[$35>>2]|0;
 switch ($36|0) {
 case 2:  {
  $37 = $0;
  $38 = (($37) + 384|0);
  HEAP32[$38>>2] = 10080;
  break;
 }
 case 4:  {
  $41 = $0;
  $42 = (($41) + 384|0);
  HEAP32[$42>>2] = 9848;
  break;
 }
 case 5:  {
  $43 = $0;
  $44 = (($43) + 384|0);
  HEAP32[$44>>2] = 9680;
  break;
 }
 case 7:  {
  $47 = $0;
  $48 = (($47) + 384|0);
  HEAP32[$48>>2] = 9208;
  break;
 }
 case 6:  {
  $45 = $0;
  $46 = (($45) + 384|0);
  HEAP32[$46>>2] = 9472;
  break;
 }
 case 3:  {
  $39 = $0;
  $40 = (($39) + 384|0);
  HEAP32[$40>>2] = 9976;
  break;
 }
 default: {
  $49 = $0;
  $50 = (($49) + 384|0);
  HEAP32[$50>>2] = 8888;
 }
 }
 $51 = $0;
 $52 = (($51) + 380|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ($53|0)<(8);
 if ($54) {
  $55 = $0;
  $56 = (($55) + 380|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $0;
  $59 = (($58) + 380|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = Math_imul($57, $60)|0;
  $62 = (($61) - 1)|0;
  $65 = $62;
 } else {
  $65 = 63;
 }
 $63 = $0;
 $64 = (($63) + 388|0);
 HEAP32[$64>>2] = $65;
 $66 = $0;
 $67 = (($66) + 68|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68>>>0)<=(0);
 if ($69) {
  label = 21;
 } else {
  $70 = $0;
  $71 = (($70) + 64|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = ($72>>>0)<=(0);
  if ($73) {
   label = 21;
  } else {
   $74 = $0;
   $75 = (($74) + 76|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)<=(0);
   if ($77) {
    label = 21;
   }
  }
 }
 if ((label|0) == 21) {
  $78 = $0;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + 20|0);
  HEAP32[$80>>2] = 33;
  $81 = $0;
  $82 = HEAP32[$81>>2]|0;
  $83 = HEAP32[$82>>2]|0;
  $84 = $0;
  FUNCTION_TABLE_vi[$83 & 511]($84);
 }
 $85 = $0;
 $86 = (($85) + 68|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)>(65500);
 if ($88) {
  label = 24;
 } else {
  $89 = $0;
  $90 = (($89) + 64|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = ($91|0)>(65500);
  if ($92) {
   label = 24;
  }
 }
 if ((label|0) == 24) {
  $93 = $0;
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + 20|0);
  HEAP32[$95>>2] = 42;
  $96 = $0;
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + 24|0);
  HEAP32[$98>>2] = 65500;
  $99 = $0;
  $100 = HEAP32[$99>>2]|0;
  $101 = HEAP32[$100>>2]|0;
  $102 = $0;
  FUNCTION_TABLE_vi[$101 & 511]($102);
 }
 $103 = $0;
 $104 = (($103) + 72|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = ($105|0)<(8);
 if ($106) {
  label = 27;
 } else {
  $107 = $0;
  $108 = (($107) + 72|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)>(12);
  if ($110) {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $111 = $0;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + 20|0);
  HEAP32[$113>>2] = 16;
  $114 = $0;
  $115 = (($114) + 72|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $0;
  $118 = HEAP32[$117>>2]|0;
  $119 = (($118) + 24|0);
  HEAP32[$119>>2] = $116;
  $120 = $0;
  $121 = HEAP32[$120>>2]|0;
  $122 = HEAP32[$121>>2]|0;
  $123 = $0;
  FUNCTION_TABLE_vi[$122 & 511]($123);
 }
 $124 = $0;
 $125 = (($124) + 76|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ($126|0)>(10);
 if ($127) {
  $128 = $0;
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + 20|0);
  HEAP32[$130>>2] = 27;
  $131 = $0;
  $132 = (($131) + 76|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = $0;
  $135 = HEAP32[$134>>2]|0;
  $136 = (($135) + 24|0);
  HEAP32[$136>>2] = $133;
  $137 = $0;
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + 24|0);
  $140 = (($139) + 4|0);
  HEAP32[$140>>2] = 10;
  $141 = $0;
  $142 = HEAP32[$141>>2]|0;
  $143 = HEAP32[$142>>2]|0;
  $144 = $0;
  FUNCTION_TABLE_vi[$143 & 511]($144);
 }
 $145 = $0;
 $146 = (($145) + 272|0);
 HEAP32[$146>>2] = 1;
 $147 = $0;
 $148 = (($147) + 276|0);
 HEAP32[$148>>2] = 1;
 $ci = 0;
 $149 = $0;
 $150 = (($149) + 84|0);
 $151 = HEAP32[$150>>2]|0;
 $compptr = $151;
 while(1) {
  $152 = $ci;
  $153 = $0;
  $154 = (($153) + 76|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($152|0)<($155|0);
  if (!($156)) {
   break;
  }
  $157 = $compptr;
  $158 = (($157) + 8|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($159|0)<=(0);
  if ($160) {
   label = 36;
  } else {
   $161 = $compptr;
   $162 = (($161) + 8|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = ($163|0)>(4);
   if ($164) {
    label = 36;
   } else {
    $165 = $compptr;
    $166 = (($165) + 12|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)<=(0);
    if ($168) {
     label = 36;
    } else {
     $169 = $compptr;
     $170 = (($169) + 12|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = ($171|0)>(4);
     if ($172) {
      label = 36;
     }
    }
   }
  }
  if ((label|0) == 36) {
   label = 0;
   $173 = $0;
   $174 = HEAP32[$173>>2]|0;
   $175 = (($174) + 20|0);
   HEAP32[$175>>2] = 19;
   $176 = $0;
   $177 = HEAP32[$176>>2]|0;
   $178 = HEAP32[$177>>2]|0;
   $179 = $0;
   FUNCTION_TABLE_vi[$178 & 511]($179);
  }
  $180 = $0;
  $181 = (($180) + 272|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = $compptr;
  $184 = (($183) + 8|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = ($182|0)>($185|0);
  if ($186) {
   $187 = $0;
   $188 = (($187) + 272|0);
   $189 = HEAP32[$188>>2]|0;
   $195 = $189;
  } else {
   $190 = $compptr;
   $191 = (($190) + 8|0);
   $192 = HEAP32[$191>>2]|0;
   $195 = $192;
  }
  $193 = $0;
  $194 = (($193) + 272|0);
  HEAP32[$194>>2] = $195;
  $196 = $0;
  $197 = (($196) + 276|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $compptr;
  $200 = (($199) + 12|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($198|0)>($201|0);
  if ($202) {
   $203 = $0;
   $204 = (($203) + 276|0);
   $205 = HEAP32[$204>>2]|0;
   $211 = $205;
  } else {
   $206 = $compptr;
   $207 = (($206) + 12|0);
   $208 = HEAP32[$207>>2]|0;
   $211 = $208;
  }
  $209 = $0;
  $210 = (($209) + 276|0);
  HEAP32[$210>>2] = $211;
  $212 = $ci;
  $213 = (($212) + 1)|0;
  $ci = $213;
  $214 = $compptr;
  $215 = (($214) + 88|0);
  $compptr = $215;
 }
 $ci = 0;
 $216 = $0;
 $217 = (($216) + 84|0);
 $218 = HEAP32[$217>>2]|0;
 $compptr = $218;
 while(1) {
  $219 = $ci;
  $220 = $0;
  $221 = (($220) + 76|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ($219|0)<($222|0);
  if (!($223)) {
   break;
  }
  $224 = $ci;
  $225 = $compptr;
  $226 = (($225) + 4|0);
  HEAP32[$226>>2] = $224;
  $ssize = 1;
  while(1) {
   $227 = $0;
   $228 = (($227) + 280|0);
   $229 = HEAP32[$228>>2]|0;
   $230 = $ssize;
   $231 = Math_imul($229, $230)|0;
   $232 = $0;
   $233 = (($232) + 224|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = ($234|0)!=(0);
   $236 = $235 ? 8 : 4;
   $237 = ($231|0)<=($236|0);
   if ($237) {
    $238 = $0;
    $239 = (($238) + 272|0);
    $240 = HEAP32[$239>>2]|0;
    $241 = $compptr;
    $242 = (($241) + 8|0);
    $243 = HEAP32[$242>>2]|0;
    $244 = $ssize;
    $245 = Math_imul($243, $244)|0;
    $246 = $245<<1;
    $247 = (($240|0) % ($246|0))&-1;
    $248 = ($247|0)==(0);
    $412 = $248;
   } else {
    $412 = 0;
   }
   if (!($412)) {
    break;
   }
   $249 = $ssize;
   $250 = $249<<1;
   $ssize = $250;
  }
  $251 = $0;
  $252 = (($251) + 280|0);
  $253 = HEAP32[$252>>2]|0;
  $254 = $ssize;
  $255 = Math_imul($253, $254)|0;
  $256 = $compptr;
  $257 = (($256) + 36|0);
  HEAP32[$257>>2] = $255;
  $ssize = 1;
  while(1) {
   $258 = $0;
   $259 = (($258) + 284|0);
   $260 = HEAP32[$259>>2]|0;
   $261 = $ssize;
   $262 = Math_imul($260, $261)|0;
   $263 = $0;
   $264 = (($263) + 224|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = ($265|0)!=(0);
   $267 = $266 ? 8 : 4;
   $268 = ($262|0)<=($267|0);
   if ($268) {
    $269 = $0;
    $270 = (($269) + 276|0);
    $271 = HEAP32[$270>>2]|0;
    $272 = $compptr;
    $273 = (($272) + 12|0);
    $274 = HEAP32[$273>>2]|0;
    $275 = $ssize;
    $276 = Math_imul($274, $275)|0;
    $277 = $276<<1;
    $278 = (($271|0) % ($277|0))&-1;
    $279 = ($278|0)==(0);
    $413 = $279;
   } else {
    $413 = 0;
   }
   if (!($413)) {
    break;
   }
   $280 = $ssize;
   $281 = $280<<1;
   $ssize = $281;
  }
  $282 = $0;
  $283 = (($282) + 284|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $ssize;
  $286 = Math_imul($284, $285)|0;
  $287 = $compptr;
  $288 = (($287) + 40|0);
  HEAP32[$288>>2] = $286;
  $289 = $compptr;
  $290 = (($289) + 36|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = $compptr;
  $293 = (($292) + 40|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = $294<<1;
  $296 = ($291|0)>($295|0);
  if ($296) {
   $297 = $compptr;
   $298 = (($297) + 40|0);
   $299 = HEAP32[$298>>2]|0;
   $300 = $299<<1;
   $301 = $compptr;
   $302 = (($301) + 36|0);
   HEAP32[$302>>2] = $300;
  } else {
   $303 = $compptr;
   $304 = (($303) + 40|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = $compptr;
   $307 = (($306) + 36|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = $308<<1;
   $310 = ($305|0)>($309|0);
   if ($310) {
    $311 = $compptr;
    $312 = (($311) + 36|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = $313<<1;
    $315 = $compptr;
    $316 = (($315) + 40|0);
    HEAP32[$316>>2] = $314;
   }
  }
  $317 = $0;
  $318 = (($317) + 64|0);
  $319 = HEAP32[$318>>2]|0;
  $320 = $compptr;
  $321 = (($320) + 8|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = Math_imul($319, $322)|0;
  $324 = $0;
  $325 = (($324) + 272|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = $0;
  $328 = (($327) + 380|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = Math_imul($326, $329)|0;
  $331 = (_jdiv_round_up($323,$330)|0);
  $332 = $compptr;
  $333 = (($332) + 28|0);
  HEAP32[$333>>2] = $331;
  $334 = $0;
  $335 = (($334) + 68|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = $compptr;
  $338 = (($337) + 12|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = Math_imul($336, $339)|0;
  $341 = $0;
  $342 = (($341) + 276|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = $0;
  $345 = (($344) + 380|0);
  $346 = HEAP32[$345>>2]|0;
  $347 = Math_imul($343, $346)|0;
  $348 = (_jdiv_round_up($340,$347)|0);
  $349 = $compptr;
  $350 = (($349) + 32|0);
  HEAP32[$350>>2] = $348;
  $351 = $0;
  $352 = (($351) + 64|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = $compptr;
  $355 = (($354) + 8|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = $compptr;
  $358 = (($357) + 36|0);
  $359 = HEAP32[$358>>2]|0;
  $360 = Math_imul($356, $359)|0;
  $361 = Math_imul($353, $360)|0;
  $362 = $0;
  $363 = (($362) + 272|0);
  $364 = HEAP32[$363>>2]|0;
  $365 = $0;
  $366 = (($365) + 380|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = Math_imul($364, $367)|0;
  $369 = (_jdiv_round_up($361,$368)|0);
  $370 = $compptr;
  $371 = (($370) + 44|0);
  HEAP32[$371>>2] = $369;
  $372 = $0;
  $373 = (($372) + 68|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = $compptr;
  $376 = (($375) + 12|0);
  $377 = HEAP32[$376>>2]|0;
  $378 = $compptr;
  $379 = (($378) + 40|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = Math_imul($377, $380)|0;
  $382 = Math_imul($374, $381)|0;
  $383 = $0;
  $384 = (($383) + 276|0);
  $385 = HEAP32[$384>>2]|0;
  $386 = $0;
  $387 = (($386) + 380|0);
  $388 = HEAP32[$387>>2]|0;
  $389 = Math_imul($385, $388)|0;
  $390 = (_jdiv_round_up($382,$389)|0);
  $391 = $compptr;
  $392 = (($391) + 48|0);
  HEAP32[$392>>2] = $390;
  $393 = $compptr;
  $394 = (($393) + 52|0);
  HEAP32[$394>>2] = 0;
  $395 = $ci;
  $396 = (($395) + 1)|0;
  $ci = $396;
  $397 = $compptr;
  $398 = (($397) + 88|0);
  $compptr = $398;
 }
 $399 = $0;
 $400 = (($399) + 68|0);
 $401 = HEAP32[$400>>2]|0;
 $402 = $0;
 $403 = (($402) + 276|0);
 $404 = HEAP32[$403>>2]|0;
 $405 = $0;
 $406 = (($405) + 380|0);
 $407 = HEAP32[$406>>2]|0;
 $408 = Math_imul($404, $407)|0;
 $409 = (_jdiv_round_up($401,$408)|0);
 $410 = $0;
 $411 = (($410) + 288|0);
 HEAP32[$411>>2] = $409;
 STACKTOP = sp;return;
}
function _validate_script($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Ah = 0, $Al = 0, $Se = 0, $Ss = 0, $ci = 0, $coefi = 0, $component_sent = 0, $last_bitpos = 0, $last_bitpos_ptr = 0, $ncomps = 0, $scanno = 0, $scanptr = 0, $thisi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2656|0;
 $component_sent = sp + 2568|0;
 $last_bitpos = sp;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 200|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<=(0);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 20|0);
  HEAP32[$7>>2] = 20;
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 24|0);
  HEAP32[$10>>2] = 0;
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  FUNCTION_TABLE_vi[$13 & 511]($14);
 }
 $15 = $0;
 $16 = (($15) + 204|0);
 $17 = HEAP32[$16>>2]|0;
 $scanptr = $17;
 $18 = $scanptr;
 $19 = (($18) + 20|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)!=(0);
 if ($21) {
  label = 5;
 } else {
  $22 = $scanptr;
  $23 = (($22) + 24|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)!=(63);
  if ($25) {
   label = 5;
  } else {
   $41 = $0;
   $42 = (($41) + 268|0);
   HEAP32[$42>>2] = 0;
   $ci = 0;
   while(1) {
    $43 = $ci;
    $44 = $0;
    $45 = (($44) + 76|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = ($43|0)<($46|0);
    if (!($47)) {
     break;
    }
    $48 = $ci;
    $49 = (($component_sent) + ($48<<2)|0);
    HEAP32[$49>>2] = 0;
    $50 = $ci;
    $51 = (($50) + 1)|0;
    $ci = $51;
   }
  }
 }
 if ((label|0) == 5) {
  $26 = $0;
  $27 = (($26) + 268|0);
  HEAP32[$27>>2] = 1;
  $last_bitpos_ptr = $last_bitpos;
  $ci = 0;
  while(1) {
   $28 = $ci;
   $29 = $0;
   $30 = (($29) + 76|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($28|0)<($31|0);
   if (!($32)) {
    break;
   }
   $coefi = 0;
   while(1) {
    $33 = $coefi;
    $34 = ($33|0)<(64);
    if (!($34)) {
     break;
    }
    $35 = $last_bitpos_ptr;
    $36 = (($35) + 4|0);
    $last_bitpos_ptr = $36;
    HEAP32[$35>>2] = -1;
    $37 = $coefi;
    $38 = (($37) + 1)|0;
    $coefi = $38;
   }
   $39 = $ci;
   $40 = (($39) + 1)|0;
   $ci = $40;
  }
 }
 $scanno = 1;
 while(1) {
  $52 = $scanno;
  $53 = $0;
  $54 = (($53) + 200|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($52|0)<=($55|0);
  if (!($56)) {
   break;
  }
  $57 = $scanptr;
  $58 = HEAP32[$57>>2]|0;
  $ncomps = $58;
  $59 = $ncomps;
  $60 = ($59|0)<=(0);
  if ($60) {
   label = 23;
  } else {
   $61 = $ncomps;
   $62 = ($61|0)>(4);
   if ($62) {
    label = 23;
   }
  }
  if ((label|0) == 23) {
   label = 0;
   $63 = $0;
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + 20|0);
   HEAP32[$65>>2] = 27;
   $66 = $ncomps;
   $67 = $0;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + 24|0);
   HEAP32[$69>>2] = $66;
   $70 = $0;
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + 24|0);
   $73 = (($72) + 4|0);
   HEAP32[$73>>2] = 4;
   $74 = $0;
   $75 = HEAP32[$74>>2]|0;
   $76 = HEAP32[$75>>2]|0;
   $77 = $0;
   FUNCTION_TABLE_vi[$76 & 511]($77);
  }
  $ci = 0;
  while(1) {
   $78 = $ci;
   $79 = $ncomps;
   $80 = ($78|0)<($79|0);
   if (!($80)) {
    break;
   }
   $81 = $ci;
   $82 = $scanptr;
   $83 = (($82) + 4|0);
   $84 = (($83) + ($81<<2)|0);
   $85 = HEAP32[$84>>2]|0;
   $thisi = $85;
   $86 = $thisi;
   $87 = ($86|0)<(0);
   if ($87) {
    label = 28;
   } else {
    $88 = $thisi;
    $89 = $0;
    $90 = (($89) + 76|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($88|0)>=($91|0);
    if ($92) {
     label = 28;
    }
   }
   if ((label|0) == 28) {
    label = 0;
    $93 = $0;
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + 20|0);
    HEAP32[$95>>2] = 20;
    $96 = $scanno;
    $97 = $0;
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) + 24|0);
    HEAP32[$99>>2] = $96;
    $100 = $0;
    $101 = HEAP32[$100>>2]|0;
    $102 = HEAP32[$101>>2]|0;
    $103 = $0;
    FUNCTION_TABLE_vi[$102 & 511]($103);
   }
   $104 = $ci;
   $105 = ($104|0)>(0);
   if ($105) {
    $106 = $thisi;
    $107 = $ci;
    $108 = (($107) - 1)|0;
    $109 = $scanptr;
    $110 = (($109) + 4|0);
    $111 = (($110) + ($108<<2)|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($106|0)<=($112|0);
    if ($113) {
     $114 = $0;
     $115 = HEAP32[$114>>2]|0;
     $116 = (($115) + 20|0);
     HEAP32[$116>>2] = 20;
     $117 = $scanno;
     $118 = $0;
     $119 = HEAP32[$118>>2]|0;
     $120 = (($119) + 24|0);
     HEAP32[$120>>2] = $117;
     $121 = $0;
     $122 = HEAP32[$121>>2]|0;
     $123 = HEAP32[$122>>2]|0;
     $124 = $0;
     FUNCTION_TABLE_vi[$123 & 511]($124);
    }
   }
   $125 = $ci;
   $126 = (($125) + 1)|0;
   $ci = $126;
  }
  $127 = $scanptr;
  $128 = (($127) + 20|0);
  $129 = HEAP32[$128>>2]|0;
  $Ss = $129;
  $130 = $scanptr;
  $131 = (($130) + 24|0);
  $132 = HEAP32[$131>>2]|0;
  $Se = $132;
  $133 = $scanptr;
  $134 = (($133) + 28|0);
  $135 = HEAP32[$134>>2]|0;
  $Ah = $135;
  $136 = $scanptr;
  $137 = (($136) + 32|0);
  $138 = HEAP32[$137>>2]|0;
  $Al = $138;
  $139 = $0;
  $140 = (($139) + 268|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($141|0)!=(0);
  if ($142) {
   $143 = $Ss;
   $144 = ($143|0)<(0);
   if ($144) {
    label = 43;
   } else {
    $145 = $Ss;
    $146 = ($145|0)>=(64);
    if ($146) {
     label = 43;
    } else {
     $147 = $Se;
     $148 = $Ss;
     $149 = ($147|0)<($148|0);
     if ($149) {
      label = 43;
     } else {
      $150 = $Se;
      $151 = ($150|0)>=(64);
      if ($151) {
       label = 43;
      } else {
       $152 = $Ah;
       $153 = ($152|0)<(0);
       if ($153) {
        label = 43;
       } else {
        $154 = $Ah;
        $155 = ($154|0)>(10);
        if ($155) {
         label = 43;
        } else {
         $156 = $Al;
         $157 = ($156|0)<(0);
         if ($157) {
          label = 43;
         } else {
          $158 = $Al;
          $159 = ($158|0)>(10);
          if ($159) {
           label = 43;
          }
         }
        }
       }
      }
     }
    }
   }
   if ((label|0) == 43) {
    label = 0;
    $160 = $0;
    $161 = HEAP32[$160>>2]|0;
    $162 = (($161) + 20|0);
    HEAP32[$162>>2] = 18;
    $163 = $scanno;
    $164 = $0;
    $165 = HEAP32[$164>>2]|0;
    $166 = (($165) + 24|0);
    HEAP32[$166>>2] = $163;
    $167 = $0;
    $168 = HEAP32[$167>>2]|0;
    $169 = HEAP32[$168>>2]|0;
    $170 = $0;
    FUNCTION_TABLE_vi[$169 & 511]($170);
   }
   $171 = $Ss;
   $172 = ($171|0)==(0);
   if ($172) {
    $173 = $Se;
    $174 = ($173|0)!=(0);
    if ($174) {
     $175 = $0;
     $176 = HEAP32[$175>>2]|0;
     $177 = (($176) + 20|0);
     HEAP32[$177>>2] = 18;
     $178 = $scanno;
     $179 = $0;
     $180 = HEAP32[$179>>2]|0;
     $181 = (($180) + 24|0);
     HEAP32[$181>>2] = $178;
     $182 = $0;
     $183 = HEAP32[$182>>2]|0;
     $184 = HEAP32[$183>>2]|0;
     $185 = $0;
     FUNCTION_TABLE_vi[$184 & 511]($185);
    }
   } else {
    $186 = $ncomps;
    $187 = ($186|0)!=(1);
    if ($187) {
     $188 = $0;
     $189 = HEAP32[$188>>2]|0;
     $190 = (($189) + 20|0);
     HEAP32[$190>>2] = 18;
     $191 = $scanno;
     $192 = $0;
     $193 = HEAP32[$192>>2]|0;
     $194 = (($193) + 24|0);
     HEAP32[$194>>2] = $191;
     $195 = $0;
     $196 = HEAP32[$195>>2]|0;
     $197 = HEAP32[$196>>2]|0;
     $198 = $0;
     FUNCTION_TABLE_vi[$197 & 511]($198);
    }
   }
   $ci = 0;
   while(1) {
    $199 = $ci;
    $200 = $ncomps;
    $201 = ($199|0)<($200|0);
    if (!($201)) {
     break;
    }
    $202 = $ci;
    $203 = $scanptr;
    $204 = (($203) + 4|0);
    $205 = (($204) + ($202<<2)|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = (($last_bitpos) + ($206<<8)|0);
    $last_bitpos_ptr = $207;
    $208 = $Ss;
    $209 = ($208|0)!=(0);
    if ($209) {
     $210 = $last_bitpos_ptr;
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)<(0);
     if ($212) {
      $213 = $0;
      $214 = HEAP32[$213>>2]|0;
      $215 = (($214) + 20|0);
      HEAP32[$215>>2] = 18;
      $216 = $scanno;
      $217 = $0;
      $218 = HEAP32[$217>>2]|0;
      $219 = (($218) + 24|0);
      HEAP32[$219>>2] = $216;
      $220 = $0;
      $221 = HEAP32[$220>>2]|0;
      $222 = HEAP32[$221>>2]|0;
      $223 = $0;
      FUNCTION_TABLE_vi[$222 & 511]($223);
     }
    }
    $224 = $Ss;
    $coefi = $224;
    while(1) {
     $225 = $coefi;
     $226 = $Se;
     $227 = ($225|0)<=($226|0);
     if (!($227)) {
      break;
     }
     $228 = $coefi;
     $229 = $last_bitpos_ptr;
     $230 = (($229) + ($228<<2)|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = ($231|0)<(0);
     if ($232) {
      $233 = $Ah;
      $234 = ($233|0)!=(0);
      if ($234) {
       $235 = $0;
       $236 = HEAP32[$235>>2]|0;
       $237 = (($236) + 20|0);
       HEAP32[$237>>2] = 18;
       $238 = $scanno;
       $239 = $0;
       $240 = HEAP32[$239>>2]|0;
       $241 = (($240) + 24|0);
       HEAP32[$241>>2] = $238;
       $242 = $0;
       $243 = HEAP32[$242>>2]|0;
       $244 = HEAP32[$243>>2]|0;
       $245 = $0;
       FUNCTION_TABLE_vi[$244 & 511]($245);
      }
     } else {
      $246 = $Ah;
      $247 = $coefi;
      $248 = $last_bitpos_ptr;
      $249 = (($248) + ($247<<2)|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = ($246|0)!=($250|0);
      if ($251) {
       label = 64;
      } else {
       $252 = $Al;
       $253 = $Ah;
       $254 = (($253) - 1)|0;
       $255 = ($252|0)!=($254|0);
       if ($255) {
        label = 64;
       }
      }
      if ((label|0) == 64) {
       label = 0;
       $256 = $0;
       $257 = HEAP32[$256>>2]|0;
       $258 = (($257) + 20|0);
       HEAP32[$258>>2] = 18;
       $259 = $scanno;
       $260 = $0;
       $261 = HEAP32[$260>>2]|0;
       $262 = (($261) + 24|0);
       HEAP32[$262>>2] = $259;
       $263 = $0;
       $264 = HEAP32[$263>>2]|0;
       $265 = HEAP32[$264>>2]|0;
       $266 = $0;
       FUNCTION_TABLE_vi[$265 & 511]($266);
      }
     }
     $267 = $Al;
     $268 = $coefi;
     $269 = $last_bitpos_ptr;
     $270 = (($269) + ($268<<2)|0);
     HEAP32[$270>>2] = $267;
     $271 = $coefi;
     $272 = (($271) + 1)|0;
     $coefi = $272;
    }
    $273 = $ci;
    $274 = (($273) + 1)|0;
    $ci = $274;
   }
  } else {
   $275 = $Ss;
   $276 = ($275|0)!=(0);
   if ($276) {
    label = 75;
   } else {
    $277 = $Se;
    $278 = ($277|0)!=(63);
    if ($278) {
     label = 75;
    } else {
     $279 = $Ah;
     $280 = ($279|0)!=(0);
     if ($280) {
      label = 75;
     } else {
      $281 = $Al;
      $282 = ($281|0)!=(0);
      if ($282) {
       label = 75;
      }
     }
    }
   }
   if ((label|0) == 75) {
    label = 0;
    $283 = $0;
    $284 = HEAP32[$283>>2]|0;
    $285 = (($284) + 20|0);
    HEAP32[$285>>2] = 18;
    $286 = $scanno;
    $287 = $0;
    $288 = HEAP32[$287>>2]|0;
    $289 = (($288) + 24|0);
    HEAP32[$289>>2] = $286;
    $290 = $0;
    $291 = HEAP32[$290>>2]|0;
    $292 = HEAP32[$291>>2]|0;
    $293 = $0;
    FUNCTION_TABLE_vi[$292 & 511]($293);
   }
   $ci = 0;
   while(1) {
    $294 = $ci;
    $295 = $ncomps;
    $296 = ($294|0)<($295|0);
    if (!($296)) {
     break;
    }
    $297 = $ci;
    $298 = $scanptr;
    $299 = (($298) + 4|0);
    $300 = (($299) + ($297<<2)|0);
    $301 = HEAP32[$300>>2]|0;
    $thisi = $301;
    $302 = $thisi;
    $303 = (($component_sent) + ($302<<2)|0);
    $304 = HEAP32[$303>>2]|0;
    $305 = ($304|0)!=(0);
    if ($305) {
     $306 = $0;
     $307 = HEAP32[$306>>2]|0;
     $308 = (($307) + 20|0);
     HEAP32[$308>>2] = 20;
     $309 = $scanno;
     $310 = $0;
     $311 = HEAP32[$310>>2]|0;
     $312 = (($311) + 24|0);
     HEAP32[$312>>2] = $309;
     $313 = $0;
     $314 = HEAP32[$313>>2]|0;
     $315 = HEAP32[$314>>2]|0;
     $316 = $0;
     FUNCTION_TABLE_vi[$315 & 511]($316);
    }
    $317 = $thisi;
    $318 = (($component_sent) + ($317<<2)|0);
    HEAP32[$318>>2] = 1;
    $319 = $ci;
    $320 = (($319) + 1)|0;
    $ci = $320;
   }
  }
  $321 = $scanptr;
  $322 = (($321) + 36|0);
  $scanptr = $322;
  $323 = $scanno;
  $324 = (($323) + 1)|0;
  $scanno = $324;
 }
 $325 = $0;
 $326 = (($325) + 268|0);
 $327 = HEAP32[$326>>2]|0;
 $328 = ($327|0)!=(0);
 if ($328) {
  $ci = 0;
  while(1) {
   $329 = $ci;
   $330 = $0;
   $331 = (($330) + 76|0);
   $332 = HEAP32[$331>>2]|0;
   $333 = ($329|0)<($332|0);
   if (!($333)) {
    break;
   }
   $334 = $ci;
   $335 = (($last_bitpos) + ($334<<8)|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = ($336|0)<(0);
   if ($337) {
    $338 = $0;
    $339 = HEAP32[$338>>2]|0;
    $340 = (($339) + 20|0);
    HEAP32[$340>>2] = 46;
    $341 = $0;
    $342 = HEAP32[$341>>2]|0;
    $343 = HEAP32[$342>>2]|0;
    $344 = $0;
    FUNCTION_TABLE_vi[$343 & 511]($344);
   }
   $345 = $ci;
   $346 = (($345) + 1)|0;
   $ci = $346;
  }
  STACKTOP = sp;return;
 } else {
  $ci = 0;
  while(1) {
   $347 = $ci;
   $348 = $0;
   $349 = (($348) + 76|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($347|0)<($350|0);
   if (!($351)) {
    break;
   }
   $352 = $ci;
   $353 = (($component_sent) + ($352<<2)|0);
   $354 = HEAP32[$353>>2]|0;
   $355 = ($354|0)!=(0);
   if (!($355)) {
    $356 = $0;
    $357 = HEAP32[$356>>2]|0;
    $358 = (($357) + 20|0);
    HEAP32[$358>>2] = 46;
    $359 = $0;
    $360 = HEAP32[$359>>2]|0;
    $361 = HEAP32[$360>>2]|0;
    $362 = $0;
    FUNCTION_TABLE_vi[$361 & 511]($362);
   }
   $363 = $ci;
   $364 = (($363) + 1)|0;
   $ci = $364;
  }
  STACKTOP = sp;return;
 }
}
function _reduce_script($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $idxin = 0, $idxout = 0, $scanptr = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 204|0);
 $3 = HEAP32[$2>>2]|0;
 $scanptr = $3;
 $idxout = 0;
 $idxin = 0;
 while(1) {
  $4 = $idxin;
  $5 = $0;
  $6 = (($5) + 200|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $idxin;
  $10 = $idxout;
  $11 = ($9|0)!=($10|0);
  if ($11) {
   $12 = $idxout;
   $13 = $scanptr;
   $14 = (($13) + (($12*36)|0)|0);
   $15 = $idxin;
   $16 = $scanptr;
   $17 = (($16) + (($15*36)|0)|0);
   dest=$14+0|0; src=$17+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  }
  $18 = $idxout;
  $19 = $scanptr;
  $20 = (($19) + (($18*36)|0)|0);
  $21 = (($20) + 20|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = (($23) + 388|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($22|0)>($25|0);
  if ($26) {
  } else {
   $27 = $idxout;
   $28 = $scanptr;
   $29 = (($28) + (($27*36)|0)|0);
   $30 = (($29) + 24|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $0;
   $33 = (($32) + 388|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($31|0)>($34|0);
   if ($35) {
    $36 = $0;
    $37 = (($36) + 388|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $idxout;
    $40 = $scanptr;
    $41 = (($40) + (($39*36)|0)|0);
    $42 = (($41) + 24|0);
    HEAP32[$42>>2] = $38;
   }
   $43 = $idxout;
   $44 = (($43) + 1)|0;
   $idxout = $44;
  }
  $45 = $idxin;
  $46 = (($45) + 1)|0;
  $idxin = $46;
 }
 $47 = $idxout;
 $48 = $0;
 $49 = (($48) + 200|0);
 HEAP32[$49>>2] = $47;
 STACKTOP = sp;return;
}
function _jpeg_calc_trans_dimensions($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 280|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = (($4) + 284|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3|0)!=($6|0);
 if (!($7)) {
  $28 = $0;
  $29 = (($28) + 280|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $0;
  $32 = (($31) + 380|0);
  HEAP32[$32>>2] = $30;
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 HEAP32[$10>>2] = 7;
 $11 = $0;
 $12 = (($11) + 280|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 24|0);
 HEAP32[$16>>2] = $13;
 $17 = $0;
 $18 = (($17) + 284|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = HEAP32[$20>>2]|0;
 $22 = (($21) + 24|0);
 $23 = (($22) + 4|0);
 HEAP32[$23>>2] = $19;
 $24 = $0;
 $25 = HEAP32[$24>>2]|0;
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 FUNCTION_TABLE_vi[$26 & 511]($27);
 $28 = $0;
 $29 = (($28) + 280|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $0;
 $32 = (($31) + 380|0);
 HEAP32[$32>>2] = $30;
 STACKTOP = sp;return;
}
function _select_scan_parameters($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ci = 0, $master = 0, $scanptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 204|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 do {
  if ($4) {
   $5 = $0;
   $6 = (($5) + 392|0);
   $7 = HEAP32[$6>>2]|0;
   $master = $7;
   $8 = $0;
   $9 = (($8) + 204|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = $master;
   $12 = (($11) + 32|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($10) + (($13*36)|0)|0);
   $scanptr = $14;
   $15 = $scanptr;
   $16 = HEAP32[$15>>2]|0;
   $17 = $0;
   $18 = (($17) + 292|0);
   HEAP32[$18>>2] = $16;
   $ci = 0;
   while(1) {
    $19 = $ci;
    $20 = $scanptr;
    $21 = HEAP32[$20>>2]|0;
    $22 = ($19|0)<($21|0);
    if (!($22)) {
     break;
    }
    $23 = $ci;
    $24 = $scanptr;
    $25 = (($24) + 4|0);
    $26 = (($25) + ($23<<2)|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = $0;
    $29 = (($28) + 84|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + (($27*88)|0)|0);
    $32 = $ci;
    $33 = $0;
    $34 = (($33) + 296|0);
    $35 = (($34) + ($32<<2)|0);
    HEAP32[$35>>2] = $31;
    $36 = $ci;
    $37 = (($36) + 1)|0;
    $ci = $37;
   }
   $38 = $0;
   $39 = (($38) + 268|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0);
   if (!($41)) {
    break;
   }
   $42 = $scanptr;
   $43 = (($42) + 20|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $0;
   $46 = (($45) + 364|0);
   HEAP32[$46>>2] = $44;
   $47 = $scanptr;
   $48 = (($47) + 24|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $0;
   $51 = (($50) + 368|0);
   HEAP32[$51>>2] = $49;
   $52 = $scanptr;
   $53 = (($52) + 28|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $0;
   $56 = (($55) + 372|0);
   HEAP32[$56>>2] = $54;
   $57 = $scanptr;
   $58 = (($57) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $0;
   $61 = (($60) + 376|0);
   HEAP32[$61>>2] = $59;
   STACKTOP = sp;return;
  } else {
   $62 = $0;
   $63 = (($62) + 76|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($64|0)>(4);
   if ($65) {
    $66 = $0;
    $67 = HEAP32[$66>>2]|0;
    $68 = (($67) + 20|0);
    HEAP32[$68>>2] = 27;
    $69 = $0;
    $70 = (($69) + 76|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $0;
    $73 = HEAP32[$72>>2]|0;
    $74 = (($73) + 24|0);
    HEAP32[$74>>2] = $71;
    $75 = $0;
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + 24|0);
    $78 = (($77) + 4|0);
    HEAP32[$78>>2] = 4;
    $79 = $0;
    $80 = HEAP32[$79>>2]|0;
    $81 = HEAP32[$80>>2]|0;
    $82 = $0;
    FUNCTION_TABLE_vi[$81 & 511]($82);
   }
   $83 = $0;
   $84 = (($83) + 76|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $0;
   $87 = (($86) + 292|0);
   HEAP32[$87>>2] = $85;
   $ci = 0;
   while(1) {
    $88 = $ci;
    $89 = $0;
    $90 = (($89) + 76|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($88|0)<($91|0);
    if (!($92)) {
     break;
    }
    $93 = $ci;
    $94 = $0;
    $95 = (($94) + 84|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($96) + (($93*88)|0)|0);
    $98 = $ci;
    $99 = $0;
    $100 = (($99) + 296|0);
    $101 = (($100) + ($98<<2)|0);
    HEAP32[$101>>2] = $97;
    $102 = $ci;
    $103 = (($102) + 1)|0;
    $ci = $103;
   }
  }
 } while(0);
 $104 = $0;
 $105 = (($104) + 364|0);
 HEAP32[$105>>2] = 0;
 $106 = $0;
 $107 = (($106) + 380|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = $0;
 $110 = (($109) + 380|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = Math_imul($108, $111)|0;
 $113 = (($112) - 1)|0;
 $114 = $0;
 $115 = (($114) + 368|0);
 HEAP32[$115>>2] = $113;
 $116 = $0;
 $117 = (($116) + 372|0);
 HEAP32[$117>>2] = 0;
 $118 = $0;
 $119 = (($118) + 376|0);
 HEAP32[$119>>2] = 0;
 STACKTOP = sp;return;
}
function _per_scan_setup($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0, $mcublks = 0;
 var $nominal = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 292|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 296|0);
  $7 = HEAP32[$6>>2]|0;
  $compptr = $7;
  $8 = $compptr;
  $9 = (($8) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  $12 = (($11) + 312|0);
  HEAP32[$12>>2] = $10;
  $13 = $compptr;
  $14 = (($13) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = (($16) + 316|0);
  HEAP32[$17>>2] = $15;
  $18 = $compptr;
  $19 = (($18) + 56|0);
  HEAP32[$19>>2] = 1;
  $20 = $compptr;
  $21 = (($20) + 60|0);
  HEAP32[$21>>2] = 1;
  $22 = $compptr;
  $23 = (($22) + 64|0);
  HEAP32[$23>>2] = 1;
  $24 = $compptr;
  $25 = (($24) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $compptr;
  $28 = (($27) + 68|0);
  HEAP32[$28>>2] = $26;
  $29 = $compptr;
  $30 = (($29) + 72|0);
  HEAP32[$30>>2] = 1;
  $31 = $compptr;
  $32 = (($31) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $compptr;
  $35 = (($34) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($33>>>0) % ($36>>>0))&-1;
  $tmp = $37;
  $38 = $tmp;
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = $compptr;
   $41 = (($40) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $tmp = $42;
  }
  $43 = $tmp;
  $44 = $compptr;
  $45 = (($44) + 76|0);
  HEAP32[$45>>2] = $43;
  $46 = $0;
  $47 = (($46) + 320|0);
  HEAP32[$47>>2] = 1;
  $48 = $0;
  $49 = (($48) + 324|0);
  HEAP32[$49>>2] = 0;
 } else {
  $50 = $0;
  $51 = (($50) + 292|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)<=(0);
  if ($53) {
   label = 7;
  } else {
   $54 = $0;
   $55 = (($54) + 292|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($56|0)>(4);
   if ($57) {
    label = 7;
   }
  }
  if ((label|0) == 7) {
   $58 = $0;
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + 20|0);
   HEAP32[$60>>2] = 27;
   $61 = $0;
   $62 = (($61) + 292|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $0;
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + 24|0);
   HEAP32[$66>>2] = $63;
   $67 = $0;
   $68 = HEAP32[$67>>2]|0;
   $69 = (($68) + 24|0);
   $70 = (($69) + 4|0);
   HEAP32[$70>>2] = 4;
   $71 = $0;
   $72 = HEAP32[$71>>2]|0;
   $73 = HEAP32[$72>>2]|0;
   $74 = $0;
   FUNCTION_TABLE_vi[$73 & 511]($74);
  }
  $75 = $0;
  $76 = (($75) + 64|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $0;
  $79 = (($78) + 272|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $0;
  $82 = (($81) + 380|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = Math_imul($80, $83)|0;
  $85 = (_jdiv_round_up($77,$84)|0);
  $86 = $0;
  $87 = (($86) + 312|0);
  HEAP32[$87>>2] = $85;
  $88 = $0;
  $89 = (($88) + 68|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = $0;
  $92 = (($91) + 276|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = $0;
  $95 = (($94) + 380|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = Math_imul($93, $96)|0;
  $98 = (_jdiv_round_up($90,$97)|0);
  $99 = $0;
  $100 = (($99) + 316|0);
  HEAP32[$100>>2] = $98;
  $101 = $0;
  $102 = (($101) + 320|0);
  HEAP32[$102>>2] = 0;
  $ci = 0;
  while(1) {
   $103 = $ci;
   $104 = $0;
   $105 = (($104) + 292|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = ($103|0)<($106|0);
   if (!($107)) {
    break;
   }
   $108 = $ci;
   $109 = $0;
   $110 = (($109) + 296|0);
   $111 = (($110) + ($108<<2)|0);
   $112 = HEAP32[$111>>2]|0;
   $compptr = $112;
   $113 = $compptr;
   $114 = (($113) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $compptr;
   $117 = (($116) + 56|0);
   HEAP32[$117>>2] = $115;
   $118 = $compptr;
   $119 = (($118) + 12|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $compptr;
   $122 = (($121) + 60|0);
   HEAP32[$122>>2] = $120;
   $123 = $compptr;
   $124 = (($123) + 56|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = $compptr;
   $127 = (($126) + 60|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = Math_imul($125, $128)|0;
   $130 = $compptr;
   $131 = (($130) + 64|0);
   HEAP32[$131>>2] = $129;
   $132 = $compptr;
   $133 = (($132) + 56|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $compptr;
   $136 = (($135) + 36|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = Math_imul($134, $137)|0;
   $139 = $compptr;
   $140 = (($139) + 68|0);
   HEAP32[$140>>2] = $138;
   $141 = $compptr;
   $142 = (($141) + 28|0);
   $143 = HEAP32[$142>>2]|0;
   $144 = $compptr;
   $145 = (($144) + 56|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = (($143>>>0) % ($146>>>0))&-1;
   $tmp = $147;
   $148 = $tmp;
   $149 = ($148|0)==(0);
   if ($149) {
    $150 = $compptr;
    $151 = (($150) + 56|0);
    $152 = HEAP32[$151>>2]|0;
    $tmp = $152;
   }
   $153 = $tmp;
   $154 = $compptr;
   $155 = (($154) + 72|0);
   HEAP32[$155>>2] = $153;
   $156 = $compptr;
   $157 = (($156) + 32|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $compptr;
   $160 = (($159) + 60|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($158>>>0) % ($161>>>0))&-1;
   $tmp = $162;
   $163 = $tmp;
   $164 = ($163|0)==(0);
   if ($164) {
    $165 = $compptr;
    $166 = (($165) + 60|0);
    $167 = HEAP32[$166>>2]|0;
    $tmp = $167;
   }
   $168 = $tmp;
   $169 = $compptr;
   $170 = (($169) + 76|0);
   HEAP32[$170>>2] = $168;
   $171 = $compptr;
   $172 = (($171) + 64|0);
   $173 = HEAP32[$172>>2]|0;
   $mcublks = $173;
   $174 = $0;
   $175 = (($174) + 320|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $mcublks;
   $178 = (($176) + ($177))|0;
   $179 = ($178|0)>(10);
   if ($179) {
    $180 = $0;
    $181 = HEAP32[$180>>2]|0;
    $182 = (($181) + 20|0);
    HEAP32[$182>>2] = 14;
    $183 = $0;
    $184 = HEAP32[$183>>2]|0;
    $185 = HEAP32[$184>>2]|0;
    $186 = $0;
    FUNCTION_TABLE_vi[$185 & 511]($186);
   }
   while(1) {
    $187 = $mcublks;
    $188 = (($187) + -1)|0;
    $mcublks = $188;
    $189 = ($187|0)>(0);
    if (!($189)) {
     break;
    }
    $190 = $ci;
    $191 = $0;
    $192 = (($191) + 320|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = (($193) + 1)|0;
    HEAP32[$192>>2] = $194;
    $195 = $0;
    $196 = (($195) + 324|0);
    $197 = (($196) + ($193<<2)|0);
    HEAP32[$197>>2] = $190;
   }
   $198 = $ci;
   $199 = (($198) + 1)|0;
   $ci = $199;
  }
 }
 $200 = $0;
 $201 = (($200) + 240|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = ($202|0)>(0);
 if (!($203)) {
  STACKTOP = sp;return;
 }
 $204 = $0;
 $205 = (($204) + 240|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = $0;
 $208 = (($207) + 312|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = Math_imul($206, $209)|0;
 $nominal = $210;
 $211 = $nominal;
 $212 = ($211|0)<(65535);
 if ($212) {
  $213 = $nominal;
  $216 = $213;
 } else {
  $216 = 65535;
 }
 $214 = $0;
 $215 = (($214) + 236|0);
 HEAP32[$215>>2] = $216;
 STACKTOP = sp;return;
}
function _jpeg_abort($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $pool = 1;
 while(1) {
  $5 = $pool;
  $6 = ($5|0)>(0);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = (($7) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = $pool;
  FUNCTION_TABLE_vii[$11 & 511]($12,$13);
  $14 = $pool;
  $15 = (($14) + -1)|0;
  $pool = $15;
 }
 $16 = $0;
 $17 = (($16) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $0;
  $21 = (($20) + 20|0);
  HEAP32[$21>>2] = 200;
  $22 = $0;
  $23 = (($22) + 312|0);
  HEAP32[$23>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $24 = $0;
  $25 = (($24) + 20|0);
  HEAP32[$25>>2] = 100;
  STACKTOP = sp;return;
 }
}
function _jpeg_destroy($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 40|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  FUNCTION_TABLE_vi[$9 & 511]($10);
 }
 $11 = $0;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = (($13) + 20|0);
 HEAP32[$14>>2] = 0;
 STACKTOP = sp;return;
}
function _jpeg_alloc_quant_table($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tbl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,0,132)|0);
 $tbl = $6;
 $7 = $tbl;
 $8 = (($7) + 128|0);
 HEAP32[$8>>2] = 0;
 $9 = $tbl;
 STACKTOP = sp;return ($9|0);
}
function _jpeg_alloc_huff_table($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tbl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,0,280)|0);
 $tbl = $6;
 $7 = $tbl;
 $8 = (($7) + 276|0);
 HEAP32[$8>>2] = 0;
 $9 = $tbl;
 STACKTOP = sp;return ($9|0);
}
function _jpeg_add_quant_table($cinfo,$which_tbl,$basic_table,$scale_factor,$force_baseline) {
 $cinfo = $cinfo|0;
 $which_tbl = $which_tbl|0;
 $basic_table = $basic_table|0;
 $scale_factor = $scale_factor|0;
 $force_baseline = $force_baseline|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $i = 0, $qtblptr = 0, $temp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $which_tbl;
 $2 = $basic_table;
 $3 = $scale_factor;
 $4 = $force_baseline;
 $5 = $0;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(100);
 if ($8) {
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 20|0);
  HEAP32[$11>>2] = 21;
  $12 = $0;
  $13 = (($12) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 24|0);
  HEAP32[$17>>2] = $14;
  $18 = $0;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  FUNCTION_TABLE_vi[$20 & 511]($21);
 }
 $22 = $1;
 $23 = ($22|0)<(0);
 if ($23) {
  label = 5;
 } else {
  $24 = $1;
  $25 = ($24|0)>=(4);
  if ($25) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $26 = $0;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 20|0);
  HEAP32[$28>>2] = 32;
  $29 = $1;
  $30 = $0;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 24|0);
  HEAP32[$32>>2] = $29;
  $33 = $0;
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $36 = $0;
  FUNCTION_TABLE_vi[$35 & 511]($36);
 }
 $37 = $1;
 $38 = $0;
 $39 = (($38) + 88|0);
 $40 = (($39) + ($37<<2)|0);
 $qtblptr = $40;
 $41 = $qtblptr;
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $44 = $0;
  $45 = (_jpeg_alloc_quant_table($44)|0);
  $46 = $qtblptr;
  HEAP32[$46>>2] = $45;
 }
 $i = 0;
 while(1) {
  $47 = $i;
  $48 = ($47|0)<(64);
  if (!($48)) {
   break;
  }
  $49 = $i;
  $50 = $2;
  $51 = (($50) + ($49<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $3;
  $54 = Math_imul($52, $53)|0;
  $55 = (($54) + 50)|0;
  $56 = (($55|0) / 100)&-1;
  $temp = $56;
  $57 = $temp;
  $58 = ($57|0)<=(0);
  if ($58) {
   $temp = 1;
  }
  $59 = $temp;
  $60 = ($59|0)>(32767);
  if ($60) {
   $temp = 32767;
  }
  $61 = $4;
  $62 = ($61|0)!=(0);
  if ($62) {
   $63 = $temp;
   $64 = ($63|0)>(255);
   if ($64) {
    $temp = 255;
   }
  }
  $65 = $temp;
  $66 = $65&65535;
  $67 = $i;
  $68 = $qtblptr;
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + ($67<<1)|0);
  HEAP16[$70>>1] = $66;
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
 }
 $73 = $qtblptr;
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + 128|0);
 HEAP32[$75>>2] = 0;
 STACKTOP = sp;return;
}
function _jpeg_set_linear_quality($cinfo,$scale_factor,$force_baseline) {
 $cinfo = $cinfo|0;
 $scale_factor = $scale_factor|0;
 $force_baseline = $force_baseline|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $scale_factor;
 $2 = $force_baseline;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 _jpeg_add_quant_table($3,0,920,$4,$5);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 _jpeg_add_quant_table($6,1,1176,$7,$8);
 STACKTOP = sp;return;
}
function _jpeg_quality_scaling($quality) {
 $quality = $quality|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $quality;
 $1 = $0;
 $2 = ($1|0)<=(0);
 if ($2) {
  $0 = 1;
 }
 $3 = $0;
 $4 = ($3|0)>(100);
 if ($4) {
  $0 = 100;
 }
 $5 = $0;
 $6 = ($5|0)<(50);
 if ($6) {
  $7 = $0;
  $8 = (5000 / ($7|0))&-1;
  $0 = $8;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $9 = $0;
  $10 = $9<<1;
  $11 = (200 - ($10))|0;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return 0|0;
}
function _jpeg_set_quality($cinfo,$quality,$force_baseline) {
 $cinfo = $cinfo|0;
 $quality = $quality|0;
 $force_baseline = $force_baseline|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $quality;
 $2 = $force_baseline;
 $3 = $1;
 $4 = (_jpeg_quality_scaling($3)|0);
 $1 = $4;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 _jpeg_set_linear_quality($5,$6,$7);
 STACKTOP = sp;return;
}
function _jpeg_set_defaults($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(100);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 20|0);
  HEAP32[$7>>2] = 21;
  $8 = $0;
  $9 = (($8) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 24|0);
  HEAP32[$13>>2] = $10;
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = $0;
  FUNCTION_TABLE_vi[$16 & 511]($17);
 }
 $18 = $0;
 $19 = (($18) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = $0;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = HEAP32[$24>>2]|0;
  $26 = $0;
  $27 = (FUNCTION_TABLE_iiii[$25 & 511]($26,0,880)|0);
  $28 = $0;
  $29 = (($28) + 84|0);
  HEAP32[$29>>2] = $27;
 }
 $30 = $0;
 $31 = (($30) + 56|0);
 HEAP32[$31>>2] = 1;
 $32 = $0;
 $33 = (($32) + 60|0);
 HEAP32[$33>>2] = 1;
 $34 = $0;
 $35 = (($34) + 72|0);
 HEAP32[$35>>2] = 8;
 $36 = $0;
 _jpeg_set_quality($36,75,1);
 $37 = $0;
 _std_huff_tables($37);
 $i = 0;
 while(1) {
  $38 = $i;
  $39 = ($38|0)<(16);
  if (!($39)) {
   break;
  }
  $40 = $i;
  $41 = $0;
  $42 = (($41) + 152|0);
  $43 = (($42) + ($40)|0);
  HEAP8[$43>>0] = 0;
  $44 = $i;
  $45 = $0;
  $46 = (($45) + 168|0);
  $47 = (($46) + ($44)|0);
  HEAP8[$47>>0] = 1;
  $48 = $i;
  $49 = $0;
  $50 = (($49) + 184|0);
  $51 = (($50) + ($48)|0);
  HEAP8[$51>>0] = 5;
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 $54 = $0;
 $55 = (($54) + 204|0);
 HEAP32[$55>>2] = 0;
 $56 = $0;
 $57 = (($56) + 200|0);
 HEAP32[$57>>2] = 0;
 $58 = $0;
 $59 = (($58) + 208|0);
 HEAP32[$59>>2] = 0;
 $60 = $0;
 $61 = (($60) + 72|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = ($62|0)>(8);
 $64 = $63 ? 1 : 0;
 $65 = $0;
 $66 = (($65) + 212|0);
 HEAP32[$66>>2] = $64;
 $67 = $0;
 $68 = (($67) + 216|0);
 HEAP32[$68>>2] = 0;
 $69 = $0;
 $70 = (($69) + 220|0);
 HEAP32[$70>>2] = 0;
 $71 = $0;
 $72 = (($71) + 224|0);
 HEAP32[$72>>2] = 1;
 $73 = $0;
 $74 = (($73) + 228|0);
 HEAP32[$74>>2] = 0;
 $75 = $0;
 $76 = (($75) + 232|0);
 HEAP32[$76>>2] = 0;
 $77 = $0;
 $78 = (($77) + 236|0);
 HEAP32[$78>>2] = 0;
 $79 = $0;
 $80 = (($79) + 240|0);
 HEAP32[$80>>2] = 0;
 $81 = $0;
 $82 = (($81) + 248|0);
 HEAP8[$82>>0] = 1;
 $83 = $0;
 $84 = (($83) + 249|0);
 HEAP8[$84>>0] = 1;
 $85 = $0;
 $86 = (($85) + 250|0);
 HEAP8[$86>>0] = 0;
 $87 = $0;
 $88 = (($87) + 252|0);
 HEAP16[$88>>1] = 1;
 $89 = $0;
 $90 = (($89) + 254|0);
 HEAP16[$90>>1] = 1;
 $91 = $0;
 $92 = (($91) + 260|0);
 HEAP32[$92>>2] = 0;
 $93 = $0;
 _jpeg_default_colorspace($93);
 STACKTOP = sp;return;
}
function _std_huff_tables($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = $0;
 $3 = (($2) + 120|0);
 _add_huff_table($1,$3,1432,1456);
 $4 = $0;
 $5 = $0;
 $6 = (($5) + 136|0);
 _add_huff_table($4,$6,1512,1536);
 $7 = $0;
 $8 = $0;
 $9 = (($8) + 120|0);
 $10 = (($9) + 4|0);
 _add_huff_table($7,$10,1472,1496);
 $11 = $0;
 $12 = $0;
 $13 = (($12) + 136|0);
 $14 = (($13) + 4|0);
 _add_huff_table($11,$14,1704,1728);
 STACKTOP = sp;return;
}
function _jpeg_default_colorspace($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 4:  {
  $8 = $0;
  _jpeg_set_colorspace($8,4);
  break;
 }
 case 0:  {
  $4 = $0;
  _jpeg_set_colorspace($4,0);
  break;
 }
 case 3:  {
  $7 = $0;
  _jpeg_set_colorspace($7,3);
  break;
 }
 case 6:  {
  $10 = $0;
  _jpeg_set_colorspace($10,6);
  break;
 }
 case 7:  {
  $11 = $0;
  _jpeg_set_colorspace($11,7);
  break;
 }
 case 2:  {
  $6 = $0;
  _jpeg_set_colorspace($6,3);
  break;
 }
 case 5:  {
  $9 = $0;
  _jpeg_set_colorspace($9,5);
  break;
 }
 case 1:  {
  $5 = $0;
  _jpeg_set_colorspace($5,1);
  break;
 }
 default: {
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 20|0);
  HEAP32[$14>>2] = 10;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  FUNCTION_TABLE_vi[$17 & 511]($18);
 }
 }
 STACKTOP = sp;return;
}
function _jpeg_set_colorspace($cinfo,$colorspace) {
 $cinfo = $cinfo|0;
 $colorspace = $colorspace|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $colorspace;
 $2 = $0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(100);
 if ($5) {
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + 20|0);
  HEAP32[$8>>2] = 21;
  $9 = $0;
  $10 = (($9) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 24|0);
  HEAP32[$14>>2] = $11;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  FUNCTION_TABLE_vi[$17 & 511]($18);
 }
 $19 = $1;
 $20 = $0;
 $21 = (($20) + 80|0);
 HEAP32[$21>>2] = $19;
 $22 = $0;
 $23 = (($22) + 244|0);
 HEAP32[$23>>2] = 0;
 $24 = $0;
 $25 = (($24) + 256|0);
 HEAP32[$25>>2] = 0;
 $26 = $1;
 switch ($26|0) {
 case 1:  {
  $81 = $0;
  $82 = (($81) + 244|0);
  HEAP32[$82>>2] = 1;
  $83 = $0;
  $84 = (($83) + 76|0);
  HEAP32[$84>>2] = 1;
  $85 = $0;
  $86 = (($85) + 84|0);
  $87 = HEAP32[$86>>2]|0;
  $compptr = $87;
  $88 = $compptr;
  HEAP32[$88>>2] = 1;
  $89 = $compptr;
  $90 = (($89) + 8|0);
  HEAP32[$90>>2] = 1;
  $91 = $compptr;
  $92 = (($91) + 12|0);
  HEAP32[$92>>2] = 1;
  $93 = $compptr;
  $94 = (($93) + 16|0);
  HEAP32[$94>>2] = 0;
  $95 = $compptr;
  $96 = (($95) + 20|0);
  HEAP32[$96>>2] = 0;
  $97 = $compptr;
  $98 = (($97) + 24|0);
  HEAP32[$98>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $99 = $0;
  $100 = (($99) + 256|0);
  HEAP32[$100>>2] = 1;
  $101 = $0;
  $102 = (($101) + 76|0);
  HEAP32[$102>>2] = 3;
  $103 = $0;
  $104 = (($103) + 84|0);
  $105 = HEAP32[$104>>2]|0;
  $compptr = $105;
  $106 = $compptr;
  HEAP32[$106>>2] = 82;
  $107 = $compptr;
  $108 = (($107) + 8|0);
  HEAP32[$108>>2] = 1;
  $109 = $compptr;
  $110 = (($109) + 12|0);
  HEAP32[$110>>2] = 1;
  $111 = $compptr;
  $112 = (($111) + 16|0);
  HEAP32[$112>>2] = 0;
  $113 = $0;
  $114 = (($113) + 260|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($115|0)==(1);
  $117 = $116 ? 1 : 0;
  $118 = $compptr;
  $119 = (($118) + 20|0);
  HEAP32[$119>>2] = $117;
  $120 = $0;
  $121 = (($120) + 260|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = ($122|0)==(1);
  $124 = $123 ? 1 : 0;
  $125 = $compptr;
  $126 = (($125) + 24|0);
  HEAP32[$126>>2] = $124;
  $127 = $0;
  $128 = (($127) + 84|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + 88|0);
  $compptr = $130;
  $131 = $compptr;
  HEAP32[$131>>2] = 71;
  $132 = $compptr;
  $133 = (($132) + 8|0);
  HEAP32[$133>>2] = 1;
  $134 = $compptr;
  $135 = (($134) + 12|0);
  HEAP32[$135>>2] = 1;
  $136 = $compptr;
  $137 = (($136) + 16|0);
  HEAP32[$137>>2] = 0;
  $138 = $compptr;
  $139 = (($138) + 20|0);
  HEAP32[$139>>2] = 0;
  $140 = $compptr;
  $141 = (($140) + 24|0);
  HEAP32[$141>>2] = 0;
  $142 = $0;
  $143 = (($142) + 84|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($144) + 176|0);
  $compptr = $145;
  $146 = $compptr;
  HEAP32[$146>>2] = 66;
  $147 = $compptr;
  $148 = (($147) + 8|0);
  HEAP32[$148>>2] = 1;
  $149 = $compptr;
  $150 = (($149) + 12|0);
  HEAP32[$150>>2] = 1;
  $151 = $compptr;
  $152 = (($151) + 16|0);
  HEAP32[$152>>2] = 0;
  $153 = $0;
  $154 = (($153) + 260|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)==(1);
  $157 = $156 ? 1 : 0;
  $158 = $compptr;
  $159 = (($158) + 20|0);
  HEAP32[$159>>2] = $157;
  $160 = $0;
  $161 = (($160) + 260|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = ($162|0)==(1);
  $164 = $163 ? 1 : 0;
  $165 = $compptr;
  $166 = (($165) + 24|0);
  HEAP32[$166>>2] = $164;
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $27 = $0;
  $28 = (($27) + 36|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $0;
  $31 = (($30) + 76|0);
  HEAP32[$31>>2] = $29;
  $32 = $0;
  $33 = (($32) + 76|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)<(1);
  if ($35) {
   label = 6;
  } else {
   $36 = $0;
   $37 = (($36) + 76|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)>(10);
   if ($39) {
    label = 6;
   }
  }
  if ((label|0) == 6) {
   $40 = $0;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 20|0);
   HEAP32[$42>>2] = 27;
   $43 = $0;
   $44 = (($43) + 76|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $0;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + 24|0);
   HEAP32[$48>>2] = $45;
   $49 = $0;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 24|0);
   $52 = (($51) + 4|0);
   HEAP32[$52>>2] = 10;
   $53 = $0;
   $54 = HEAP32[$53>>2]|0;
   $55 = HEAP32[$54>>2]|0;
   $56 = $0;
   FUNCTION_TABLE_vi[$55 & 511]($56);
  }
  $ci = 0;
  while(1) {
   $57 = $ci;
   $58 = $0;
   $59 = (($58) + 76|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($57|0)<($60|0);
   if (!($61)) {
    break;
   }
   $62 = $ci;
   $63 = $0;
   $64 = (($63) + 84|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + (($62*88)|0)|0);
   $compptr = $66;
   $67 = $ci;
   $68 = $compptr;
   HEAP32[$68>>2] = $67;
   $69 = $compptr;
   $70 = (($69) + 8|0);
   HEAP32[$70>>2] = 1;
   $71 = $compptr;
   $72 = (($71) + 12|0);
   HEAP32[$72>>2] = 1;
   $73 = $compptr;
   $74 = (($73) + 16|0);
   HEAP32[$74>>2] = 0;
   $75 = $compptr;
   $76 = (($75) + 20|0);
   HEAP32[$76>>2] = 0;
   $77 = $compptr;
   $78 = (($77) + 24|0);
   HEAP32[$78>>2] = 0;
   $79 = $ci;
   $80 = (($79) + 1)|0;
   $ci = $80;
  }
  STACKTOP = sp;return;
  break;
 }
 case 3:  {
  $167 = $0;
  $168 = (($167) + 244|0);
  HEAP32[$168>>2] = 1;
  $169 = $0;
  $170 = (($169) + 76|0);
  HEAP32[$170>>2] = 3;
  $171 = $0;
  $172 = (($171) + 84|0);
  $173 = HEAP32[$172>>2]|0;
  $compptr = $173;
  $174 = $compptr;
  HEAP32[$174>>2] = 1;
  $175 = $compptr;
  $176 = (($175) + 8|0);
  HEAP32[$176>>2] = 2;
  $177 = $compptr;
  $178 = (($177) + 12|0);
  HEAP32[$178>>2] = 2;
  $179 = $compptr;
  $180 = (($179) + 16|0);
  HEAP32[$180>>2] = 0;
  $181 = $compptr;
  $182 = (($181) + 20|0);
  HEAP32[$182>>2] = 0;
  $183 = $compptr;
  $184 = (($183) + 24|0);
  HEAP32[$184>>2] = 0;
  $185 = $0;
  $186 = (($185) + 84|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = (($187) + 88|0);
  $compptr = $188;
  $189 = $compptr;
  HEAP32[$189>>2] = 2;
  $190 = $compptr;
  $191 = (($190) + 8|0);
  HEAP32[$191>>2] = 1;
  $192 = $compptr;
  $193 = (($192) + 12|0);
  HEAP32[$193>>2] = 1;
  $194 = $compptr;
  $195 = (($194) + 16|0);
  HEAP32[$195>>2] = 1;
  $196 = $compptr;
  $197 = (($196) + 20|0);
  HEAP32[$197>>2] = 1;
  $198 = $compptr;
  $199 = (($198) + 24|0);
  HEAP32[$199>>2] = 1;
  $200 = $0;
  $201 = (($200) + 84|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = (($202) + 176|0);
  $compptr = $203;
  $204 = $compptr;
  HEAP32[$204>>2] = 3;
  $205 = $compptr;
  $206 = (($205) + 8|0);
  HEAP32[$206>>2] = 1;
  $207 = $compptr;
  $208 = (($207) + 12|0);
  HEAP32[$208>>2] = 1;
  $209 = $compptr;
  $210 = (($209) + 16|0);
  HEAP32[$210>>2] = 1;
  $211 = $compptr;
  $212 = (($211) + 20|0);
  HEAP32[$212>>2] = 1;
  $213 = $compptr;
  $214 = (($213) + 24|0);
  HEAP32[$214>>2] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 4:  {
  $215 = $0;
  $216 = (($215) + 256|0);
  HEAP32[$216>>2] = 1;
  $217 = $0;
  $218 = (($217) + 76|0);
  HEAP32[$218>>2] = 4;
  $219 = $0;
  $220 = (($219) + 84|0);
  $221 = HEAP32[$220>>2]|0;
  $compptr = $221;
  $222 = $compptr;
  HEAP32[$222>>2] = 67;
  $223 = $compptr;
  $224 = (($223) + 8|0);
  HEAP32[$224>>2] = 1;
  $225 = $compptr;
  $226 = (($225) + 12|0);
  HEAP32[$226>>2] = 1;
  $227 = $compptr;
  $228 = (($227) + 16|0);
  HEAP32[$228>>2] = 0;
  $229 = $compptr;
  $230 = (($229) + 20|0);
  HEAP32[$230>>2] = 0;
  $231 = $compptr;
  $232 = (($231) + 24|0);
  HEAP32[$232>>2] = 0;
  $233 = $0;
  $234 = (($233) + 84|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = (($235) + 88|0);
  $compptr = $236;
  $237 = $compptr;
  HEAP32[$237>>2] = 77;
  $238 = $compptr;
  $239 = (($238) + 8|0);
  HEAP32[$239>>2] = 1;
  $240 = $compptr;
  $241 = (($240) + 12|0);
  HEAP32[$241>>2] = 1;
  $242 = $compptr;
  $243 = (($242) + 16|0);
  HEAP32[$243>>2] = 0;
  $244 = $compptr;
  $245 = (($244) + 20|0);
  HEAP32[$245>>2] = 0;
  $246 = $compptr;
  $247 = (($246) + 24|0);
  HEAP32[$247>>2] = 0;
  $248 = $0;
  $249 = (($248) + 84|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = (($250) + 176|0);
  $compptr = $251;
  $252 = $compptr;
  HEAP32[$252>>2] = 89;
  $253 = $compptr;
  $254 = (($253) + 8|0);
  HEAP32[$254>>2] = 1;
  $255 = $compptr;
  $256 = (($255) + 12|0);
  HEAP32[$256>>2] = 1;
  $257 = $compptr;
  $258 = (($257) + 16|0);
  HEAP32[$258>>2] = 0;
  $259 = $compptr;
  $260 = (($259) + 20|0);
  HEAP32[$260>>2] = 0;
  $261 = $compptr;
  $262 = (($261) + 24|0);
  HEAP32[$262>>2] = 0;
  $263 = $0;
  $264 = (($263) + 84|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = (($265) + 264|0);
  $compptr = $266;
  $267 = $compptr;
  HEAP32[$267>>2] = 75;
  $268 = $compptr;
  $269 = (($268) + 8|0);
  HEAP32[$269>>2] = 1;
  $270 = $compptr;
  $271 = (($270) + 12|0);
  HEAP32[$271>>2] = 1;
  $272 = $compptr;
  $273 = (($272) + 16|0);
  HEAP32[$273>>2] = 0;
  $274 = $compptr;
  $275 = (($274) + 20|0);
  HEAP32[$275>>2] = 0;
  $276 = $compptr;
  $277 = (($276) + 24|0);
  HEAP32[$277>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 7:  {
  $411 = $0;
  $412 = (($411) + 244|0);
  HEAP32[$412>>2] = 1;
  $413 = $0;
  $414 = (($413) + 248|0);
  HEAP8[$414>>0] = 2;
  $415 = $0;
  $416 = (($415) + 76|0);
  HEAP32[$416>>2] = 3;
  $417 = $0;
  $418 = (($417) + 84|0);
  $419 = HEAP32[$418>>2]|0;
  $compptr = $419;
  $420 = $compptr;
  HEAP32[$420>>2] = 1;
  $421 = $compptr;
  $422 = (($421) + 8|0);
  HEAP32[$422>>2] = 2;
  $423 = $compptr;
  $424 = (($423) + 12|0);
  HEAP32[$424>>2] = 2;
  $425 = $compptr;
  $426 = (($425) + 16|0);
  HEAP32[$426>>2] = 0;
  $427 = $compptr;
  $428 = (($427) + 20|0);
  HEAP32[$428>>2] = 0;
  $429 = $compptr;
  $430 = (($429) + 24|0);
  HEAP32[$430>>2] = 0;
  $431 = $0;
  $432 = (($431) + 84|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = (($433) + 88|0);
  $compptr = $434;
  $435 = $compptr;
  HEAP32[$435>>2] = 34;
  $436 = $compptr;
  $437 = (($436) + 8|0);
  HEAP32[$437>>2] = 1;
  $438 = $compptr;
  $439 = (($438) + 12|0);
  HEAP32[$439>>2] = 1;
  $440 = $compptr;
  $441 = (($440) + 16|0);
  HEAP32[$441>>2] = 1;
  $442 = $compptr;
  $443 = (($442) + 20|0);
  HEAP32[$443>>2] = 1;
  $444 = $compptr;
  $445 = (($444) + 24|0);
  HEAP32[$445>>2] = 1;
  $446 = $0;
  $447 = (($446) + 84|0);
  $448 = HEAP32[$447>>2]|0;
  $449 = (($448) + 176|0);
  $compptr = $449;
  $450 = $compptr;
  HEAP32[$450>>2] = 35;
  $451 = $compptr;
  $452 = (($451) + 8|0);
  HEAP32[$452>>2] = 1;
  $453 = $compptr;
  $454 = (($453) + 12|0);
  HEAP32[$454>>2] = 1;
  $455 = $compptr;
  $456 = (($455) + 16|0);
  HEAP32[$456>>2] = 1;
  $457 = $compptr;
  $458 = (($457) + 20|0);
  HEAP32[$458>>2] = 1;
  $459 = $compptr;
  $460 = (($459) + 24|0);
  HEAP32[$460>>2] = 1;
  STACKTOP = sp;return;
  break;
 }
 case 5:  {
  $278 = $0;
  $279 = (($278) + 256|0);
  HEAP32[$279>>2] = 1;
  $280 = $0;
  $281 = (($280) + 76|0);
  HEAP32[$281>>2] = 4;
  $282 = $0;
  $283 = (($282) + 84|0);
  $284 = HEAP32[$283>>2]|0;
  $compptr = $284;
  $285 = $compptr;
  HEAP32[$285>>2] = 1;
  $286 = $compptr;
  $287 = (($286) + 8|0);
  HEAP32[$287>>2] = 2;
  $288 = $compptr;
  $289 = (($288) + 12|0);
  HEAP32[$289>>2] = 2;
  $290 = $compptr;
  $291 = (($290) + 16|0);
  HEAP32[$291>>2] = 0;
  $292 = $compptr;
  $293 = (($292) + 20|0);
  HEAP32[$293>>2] = 0;
  $294 = $compptr;
  $295 = (($294) + 24|0);
  HEAP32[$295>>2] = 0;
  $296 = $0;
  $297 = (($296) + 84|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = (($298) + 88|0);
  $compptr = $299;
  $300 = $compptr;
  HEAP32[$300>>2] = 2;
  $301 = $compptr;
  $302 = (($301) + 8|0);
  HEAP32[$302>>2] = 1;
  $303 = $compptr;
  $304 = (($303) + 12|0);
  HEAP32[$304>>2] = 1;
  $305 = $compptr;
  $306 = (($305) + 16|0);
  HEAP32[$306>>2] = 1;
  $307 = $compptr;
  $308 = (($307) + 20|0);
  HEAP32[$308>>2] = 1;
  $309 = $compptr;
  $310 = (($309) + 24|0);
  HEAP32[$310>>2] = 1;
  $311 = $0;
  $312 = (($311) + 84|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = (($313) + 176|0);
  $compptr = $314;
  $315 = $compptr;
  HEAP32[$315>>2] = 3;
  $316 = $compptr;
  $317 = (($316) + 8|0);
  HEAP32[$317>>2] = 1;
  $318 = $compptr;
  $319 = (($318) + 12|0);
  HEAP32[$319>>2] = 1;
  $320 = $compptr;
  $321 = (($320) + 16|0);
  HEAP32[$321>>2] = 1;
  $322 = $compptr;
  $323 = (($322) + 20|0);
  HEAP32[$323>>2] = 1;
  $324 = $compptr;
  $325 = (($324) + 24|0);
  HEAP32[$325>>2] = 1;
  $326 = $0;
  $327 = (($326) + 84|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = (($328) + 264|0);
  $compptr = $329;
  $330 = $compptr;
  HEAP32[$330>>2] = 4;
  $331 = $compptr;
  $332 = (($331) + 8|0);
  HEAP32[$332>>2] = 2;
  $333 = $compptr;
  $334 = (($333) + 12|0);
  HEAP32[$334>>2] = 2;
  $335 = $compptr;
  $336 = (($335) + 16|0);
  HEAP32[$336>>2] = 0;
  $337 = $compptr;
  $338 = (($337) + 20|0);
  HEAP32[$338>>2] = 0;
  $339 = $compptr;
  $340 = (($339) + 24|0);
  HEAP32[$340>>2] = 0;
  STACKTOP = sp;return;
  break;
 }
 case 6:  {
  $341 = $0;
  $342 = (($341) + 244|0);
  HEAP32[$342>>2] = 1;
  $343 = $0;
  $344 = (($343) + 248|0);
  HEAP8[$344>>0] = 2;
  $345 = $0;
  $346 = (($345) + 76|0);
  HEAP32[$346>>2] = 3;
  $347 = $0;
  $348 = (($347) + 84|0);
  $349 = HEAP32[$348>>2]|0;
  $compptr = $349;
  $350 = $compptr;
  HEAP32[$350>>2] = 114;
  $351 = $compptr;
  $352 = (($351) + 8|0);
  HEAP32[$352>>2] = 1;
  $353 = $compptr;
  $354 = (($353) + 12|0);
  HEAP32[$354>>2] = 1;
  $355 = $compptr;
  $356 = (($355) + 16|0);
  HEAP32[$356>>2] = 0;
  $357 = $0;
  $358 = (($357) + 260|0);
  $359 = HEAP32[$358>>2]|0;
  $360 = ($359|0)==(1);
  $361 = $360 ? 1 : 0;
  $362 = $compptr;
  $363 = (($362) + 20|0);
  HEAP32[$363>>2] = $361;
  $364 = $0;
  $365 = (($364) + 260|0);
  $366 = HEAP32[$365>>2]|0;
  $367 = ($366|0)==(1);
  $368 = $367 ? 1 : 0;
  $369 = $compptr;
  $370 = (($369) + 24|0);
  HEAP32[$370>>2] = $368;
  $371 = $0;
  $372 = (($371) + 84|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = (($373) + 88|0);
  $compptr = $374;
  $375 = $compptr;
  HEAP32[$375>>2] = 103;
  $376 = $compptr;
  $377 = (($376) + 8|0);
  HEAP32[$377>>2] = 1;
  $378 = $compptr;
  $379 = (($378) + 12|0);
  HEAP32[$379>>2] = 1;
  $380 = $compptr;
  $381 = (($380) + 16|0);
  HEAP32[$381>>2] = 0;
  $382 = $compptr;
  $383 = (($382) + 20|0);
  HEAP32[$383>>2] = 0;
  $384 = $compptr;
  $385 = (($384) + 24|0);
  HEAP32[$385>>2] = 0;
  $386 = $0;
  $387 = (($386) + 84|0);
  $388 = HEAP32[$387>>2]|0;
  $389 = (($388) + 176|0);
  $compptr = $389;
  $390 = $compptr;
  HEAP32[$390>>2] = 98;
  $391 = $compptr;
  $392 = (($391) + 8|0);
  HEAP32[$392>>2] = 1;
  $393 = $compptr;
  $394 = (($393) + 12|0);
  HEAP32[$394>>2] = 1;
  $395 = $compptr;
  $396 = (($395) + 16|0);
  HEAP32[$396>>2] = 0;
  $397 = $0;
  $398 = (($397) + 260|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = ($399|0)==(1);
  $401 = $400 ? 1 : 0;
  $402 = $compptr;
  $403 = (($402) + 20|0);
  HEAP32[$403>>2] = $401;
  $404 = $0;
  $405 = (($404) + 260|0);
  $406 = HEAP32[$405>>2]|0;
  $407 = ($406|0)==(1);
  $408 = $407 ? 1 : 0;
  $409 = $compptr;
  $410 = (($409) + 24|0);
  HEAP32[$410>>2] = $408;
  STACKTOP = sp;return;
  break;
 }
 default: {
  $461 = $0;
  $462 = HEAP32[$461>>2]|0;
  $463 = (($462) + 20|0);
  HEAP32[$463>>2] = 11;
  $464 = $0;
  $465 = HEAP32[$464>>2]|0;
  $466 = HEAP32[$465>>2]|0;
  $467 = $0;
  FUNCTION_TABLE_vi[$466 & 511]($467);
  STACKTOP = sp;return;
 }
 }
}
function _add_huff_table($cinfo,$htblptr,$bits,$val) {
 $cinfo = $cinfo|0;
 $htblptr = $htblptr|0;
 $bits = $bits|0;
 $val = $val|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $len = 0, $nsymbols = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $htblptr;
 $2 = $bits;
 $3 = $val;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = $0;
  $8 = (_jpeg_alloc_huff_table($7)|0);
  $9 = $1;
  HEAP32[$9>>2] = $8;
 }
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 dest=$11+0|0; src=$12+0|0; stop=dest+17|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $nsymbols = 0;
 $len = 1;
 while(1) {
  $13 = $len;
  $14 = ($13|0)<=(16);
  if (!($14)) {
   break;
  }
  $15 = $len;
  $16 = $2;
  $17 = (($16) + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = $nsymbols;
  $21 = (($20) + ($19))|0;
  $nsymbols = $21;
  $22 = $len;
  $23 = (($22) + 1)|0;
  $len = $23;
 }
 $24 = $nsymbols;
 $25 = ($24|0)<(1);
 if ($25) {
  label = 9;
 } else {
  $26 = $nsymbols;
  $27 = ($26|0)>(256);
  if ($27) {
   label = 9;
  }
 }
 if ((label|0) == 9) {
  $28 = $0;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 20|0);
  HEAP32[$30>>2] = 9;
  $31 = $0;
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $34 = $0;
  FUNCTION_TABLE_vi[$33 & 511]($34);
 }
 $35 = $1;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 17|0);
 $38 = $3;
 $39 = $nsymbols;
 $40 = $39;
 _memcpy(($37|0),($38|0),($40|0))|0;
 $41 = $1;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 276|0);
 HEAP32[$43>>2] = 0;
 STACKTOP = sp;return;
}
function _jinit_c_prep_controller($cinfo,$need_full_buffer) {
 $cinfo = $cinfo|0;
 $need_full_buffer = $need_full_buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $ci = 0, $compptr = 0, $prep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $need_full_buffer;
 $2 = $1;
 $3 = ($2|0)!=(0);
 if ($3) {
  $4 = $0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  HEAP32[$6>>2] = 3;
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  FUNCTION_TABLE_vi[$9 & 511]($10);
 }
 $11 = $0;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (FUNCTION_TABLE_iiii[$14 & 511]($15,1,64)|0);
 $prep = $16;
 $17 = $prep;
 $18 = $0;
 $19 = (($18) + 400|0);
 HEAP32[$19>>2] = $17;
 $20 = $prep;
 HEAP32[$20>>2] = 123;
 $21 = $0;
 $22 = (($21) + 416|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $prep;
  $28 = (($27) + 4|0);
  HEAP32[$28>>2] = 124;
  $29 = $0;
  _create_context_buffer($29);
  STACKTOP = sp;return;
 }
 $30 = $prep;
 $31 = (($30) + 4|0);
 HEAP32[$31>>2] = 125;
 $ci = 0;
 $32 = $0;
 $33 = (($32) + 84|0);
 $34 = HEAP32[$33>>2]|0;
 $compptr = $34;
 while(1) {
  $35 = $ci;
  $36 = $0;
  $37 = (($36) + 76|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($35|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = $0;
  $41 = (($40) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $0;
  $46 = $compptr;
  $47 = (($46) + 28|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $0;
  $50 = (($49) + 280|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($48, $51)|0;
  $53 = $0;
  $54 = (($53) + 272|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = Math_imul($52, $55)|0;
  $57 = $compptr;
  $58 = (($57) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($56|0) / ($59|0))&-1;
  $61 = $0;
  $62 = (($61) + 276|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (FUNCTION_TABLE_iiiii[$44 & 511]($45,1,$60,$63)|0);
  $65 = $ci;
  $66 = $prep;
  $67 = (($66) + 8|0);
  $68 = (($67) + ($65<<2)|0);
  HEAP32[$68>>2] = $64;
  $69 = $ci;
  $70 = (($69) + 1)|0;
  $ci = $70;
  $71 = $compptr;
  $72 = (($71) + 88|0);
  $compptr = $72;
 }
 STACKTOP = sp;return;
}
function _start_pass_prep($cinfo,$pass_mode) {
 $cinfo = $cinfo|0;
 $pass_mode = $pass_mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $prep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $pass_mode;
 $2 = $0;
 $3 = (($2) + 400|0);
 $4 = HEAP32[$3>>2]|0;
 $prep = $4;
 $5 = $1;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 20|0);
  HEAP32[$9>>2] = 3;
  $10 = $0;
  $11 = HEAP32[$10>>2]|0;
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  FUNCTION_TABLE_vi[$12 & 511]($13);
 }
 $14 = $0;
 $15 = (($14) + 32|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $prep;
 $18 = (($17) + 48|0);
 HEAP32[$18>>2] = $16;
 $19 = $prep;
 $20 = (($19) + 52|0);
 HEAP32[$20>>2] = 0;
 $21 = $prep;
 $22 = (($21) + 56|0);
 HEAP32[$22>>2] = 0;
 $23 = $0;
 $24 = (($23) + 276|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = $25<<1;
 $27 = $prep;
 $28 = (($27) + 60|0);
 HEAP32[$28>>2] = $26;
 STACKTOP = sp;return;
}
function _pre_process_context($cinfo,$input_buf,$in_row_ctr,$in_rows_avail,$output_buf,$out_row_group_ctr,$out_row_groups_avail) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_ctr = $in_row_ctr|0;
 $in_rows_avail = $in_rows_avail|0;
 $output_buf = $output_buf|0;
 $out_row_group_ctr = $out_row_group_ctr|0;
 $out_row_groups_avail = $out_row_groups_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf_height = 0, $ci = 0, $inrows = 0, $numrows = 0;
 var $prep = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_ctr;
 $3 = $in_rows_avail;
 $4 = $output_buf;
 $5 = $out_row_group_ctr;
 $6 = $out_row_groups_avail;
 $7 = $0;
 $8 = (($7) + 400|0);
 $9 = HEAP32[$8>>2]|0;
 $prep = $9;
 $10 = $0;
 $11 = (($10) + 276|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12*3)|0;
 $buf_height = $13;
 while(1) {
  $14 = $5;
  $15 = HEAP32[$14>>2]|0;
  $16 = $6;
  $17 = ($15>>>0)<($16>>>0);
  if (!($17)) {
   label = 34;
   break;
  }
  $18 = $2;
  $19 = HEAP32[$18>>2]|0;
  $20 = $3;
  $21 = ($19>>>0)<($20>>>0);
  if ($21) {
   $22 = $3;
   $23 = $2;
   $24 = HEAP32[$23>>2]|0;
   $25 = (($22) - ($24))|0;
   $inrows = $25;
   $26 = $prep;
   $27 = (($26) + 60|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = $prep;
   $30 = (($29) + 52|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($28) - ($31))|0;
   $numrows = $32;
   $33 = $numrows;
   $34 = $inrows;
   $35 = ($33>>>0)<($34>>>0);
   if ($35) {
    $36 = $numrows;
    $38 = $36;
   } else {
    $37 = $inrows;
    $38 = $37;
   }
   $numrows = $38;
   $39 = $0;
   $40 = (($39) + 412|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $0;
   $45 = $1;
   $46 = $2;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($45) + ($47<<2)|0);
   $49 = $prep;
   $50 = (($49) + 8|0);
   $51 = $prep;
   $52 = (($51) + 52|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $numrows;
   FUNCTION_TABLE_viiiii[$43 & 255]($44,$48,$50,$53,$54);
   $55 = $prep;
   $56 = (($55) + 48|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $0;
   $59 = (($58) + 32|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = ($57|0)==($60|0);
   if ($61) {
    $ci = 0;
    while(1) {
     $62 = $ci;
     $63 = $0;
     $64 = (($63) + 76|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($62|0)<($65|0);
     if (!($66)) {
      break;
     }
     $row = 1;
     while(1) {
      $67 = $row;
      $68 = $0;
      $69 = (($68) + 276|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($67|0)<=($70|0);
      if (!($71)) {
       break;
      }
      $72 = $ci;
      $73 = $prep;
      $74 = (($73) + 8|0);
      $75 = (($74) + ($72<<2)|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = $ci;
      $78 = $prep;
      $79 = (($78) + 8|0);
      $80 = (($79) + ($77<<2)|0);
      $81 = HEAP32[$80>>2]|0;
      $82 = $row;
      $83 = (0 - ($82))|0;
      $84 = $0;
      $85 = (($84) + 28|0);
      $86 = HEAP32[$85>>2]|0;
      _jcopy_sample_rows($76,0,$81,$83,1,$86);
      $87 = $row;
      $88 = (($87) + 1)|0;
      $row = $88;
     }
     $89 = $ci;
     $90 = (($89) + 1)|0;
     $ci = $90;
    }
   }
   $91 = $numrows;
   $92 = $2;
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + ($91))|0;
   HEAP32[$92>>2] = $94;
   $95 = $numrows;
   $96 = $prep;
   $97 = (($96) + 52|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = (($98) + ($95))|0;
   HEAP32[$97>>2] = $99;
   $100 = $numrows;
   $101 = $prep;
   $102 = (($101) + 48|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) - ($100))|0;
   HEAP32[$102>>2] = $104;
  } else {
   $105 = $prep;
   $106 = (($105) + 48|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)!=(0);
   if ($108) {
    break;
   }
   $109 = $prep;
   $110 = (($109) + 52|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $prep;
   $113 = (($112) + 60|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = ($111|0)<($114|0);
   if ($115) {
    $ci = 0;
    while(1) {
     $116 = $ci;
     $117 = $0;
     $118 = (($117) + 76|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ($116|0)<($119|0);
     if (!($120)) {
      break;
     }
     $121 = $ci;
     $122 = $prep;
     $123 = (($122) + 8|0);
     $124 = (($123) + ($121<<2)|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $0;
     $127 = (($126) + 28|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $prep;
     $130 = (($129) + 52|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = $prep;
     $133 = (($132) + 60|0);
     $134 = HEAP32[$133>>2]|0;
     _expand_bottom_edge($125,$128,$131,$134);
     $135 = $ci;
     $136 = (($135) + 1)|0;
     $ci = $136;
    }
    $137 = $prep;
    $138 = (($137) + 60|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $prep;
    $141 = (($140) + 52|0);
    HEAP32[$141>>2] = $139;
   }
  }
  $142 = $prep;
  $143 = (($142) + 52|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = $prep;
  $146 = (($145) + 60|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = ($144|0)==($147|0);
  if ($148) {
   $149 = $0;
   $150 = (($149) + 416|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = (($151) + 4|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $0;
   $155 = $prep;
   $156 = (($155) + 8|0);
   $157 = $prep;
   $158 = (($157) + 56|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = $4;
   $161 = $5;
   $162 = HEAP32[$161>>2]|0;
   FUNCTION_TABLE_viiiii[$153 & 255]($154,$156,$159,$160,$162);
   $163 = $5;
   $164 = HEAP32[$163>>2]|0;
   $165 = (($164) + 1)|0;
   HEAP32[$163>>2] = $165;
   $166 = $0;
   $167 = (($166) + 276|0);
   $168 = HEAP32[$167>>2]|0;
   $169 = $prep;
   $170 = (($169) + 56|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (($171) + ($168))|0;
   HEAP32[$170>>2] = $172;
   $173 = $prep;
   $174 = (($173) + 56|0);
   $175 = HEAP32[$174>>2]|0;
   $176 = $buf_height;
   $177 = ($175|0)>=($176|0);
   if ($177) {
    $178 = $prep;
    $179 = (($178) + 56|0);
    HEAP32[$179>>2] = 0;
   }
   $180 = $prep;
   $181 = (($180) + 52|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = $buf_height;
   $184 = ($182|0)>=($183|0);
   if ($184) {
    $185 = $prep;
    $186 = (($185) + 52|0);
    HEAP32[$186>>2] = 0;
   }
   $187 = $prep;
   $188 = (($187) + 52|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = $0;
   $191 = (($190) + 276|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = (($189) + ($192))|0;
   $194 = $prep;
   $195 = (($194) + 60|0);
   HEAP32[$195>>2] = $193;
  }
 }
 if ((label|0) == 34) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _create_context_buffer($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $ci = 0;
 var $compptr = 0, $fake_buffer = 0, $i = 0, $prep = 0, $rgroup_height = 0, $true_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 400|0);
 $3 = HEAP32[$2>>2]|0;
 $prep = $3;
 $4 = $0;
 $5 = (($4) + 276|0);
 $6 = HEAP32[$5>>2]|0;
 $rgroup_height = $6;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $0;
 $13 = (($12) + 76|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14*5)|0;
 $16 = $rgroup_height;
 $17 = Math_imul($15, $16)|0;
 $18 = $17<<2;
 $19 = (FUNCTION_TABLE_iiii[$10 & 511]($11,1,$18)|0);
 $fake_buffer = $19;
 $ci = 0;
 $20 = $0;
 $21 = (($20) + 84|0);
 $22 = HEAP32[$21>>2]|0;
 $compptr = $22;
 while(1) {
  $23 = $ci;
  $24 = $0;
  $25 = (($24) + 76|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23|0)<($26|0);
  if (!($27)) {
   break;
  }
  $28 = $0;
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $0;
  $34 = $compptr;
  $35 = (($34) + 28|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $0;
  $38 = (($37) + 280|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $41 = $0;
  $42 = (($41) + 272|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = Math_imul($40, $43)|0;
  $45 = $compptr;
  $46 = (($45) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($44|0) / ($47|0))&-1;
  $49 = $rgroup_height;
  $50 = ($49*3)|0;
  $51 = (FUNCTION_TABLE_iiiii[$32 & 511]($33,1,$48,$50)|0);
  $true_buffer = $51;
  $52 = $fake_buffer;
  $53 = $rgroup_height;
  $54 = (($52) + ($53<<2)|0);
  $55 = $true_buffer;
  $56 = $rgroup_height;
  $57 = ($56*3)|0;
  $58 = $57<<2;
  _memcpy(($54|0),($55|0),($58|0))|0;
  $i = 0;
  while(1) {
   $59 = $i;
   $60 = $rgroup_height;
   $61 = ($59|0)<($60|0);
   if (!($61)) {
    break;
   }
   $62 = $rgroup_height;
   $63 = $62<<1;
   $64 = $i;
   $65 = (($63) + ($64))|0;
   $66 = $true_buffer;
   $67 = (($66) + ($65<<2)|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $i;
   $70 = $fake_buffer;
   $71 = (($70) + ($69<<2)|0);
   HEAP32[$71>>2] = $68;
   $72 = $i;
   $73 = $true_buffer;
   $74 = (($73) + ($72<<2)|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $rgroup_height;
   $77 = $76<<2;
   $78 = $i;
   $79 = (($77) + ($78))|0;
   $80 = $fake_buffer;
   $81 = (($80) + ($79<<2)|0);
   HEAP32[$81>>2] = $75;
   $82 = $i;
   $83 = (($82) + 1)|0;
   $i = $83;
  }
  $84 = $fake_buffer;
  $85 = $rgroup_height;
  $86 = (($84) + ($85<<2)|0);
  $87 = $ci;
  $88 = $prep;
  $89 = (($88) + 8|0);
  $90 = (($89) + ($87<<2)|0);
  HEAP32[$90>>2] = $86;
  $91 = $rgroup_height;
  $92 = ($91*5)|0;
  $93 = $fake_buffer;
  $94 = (($93) + ($92<<2)|0);
  $fake_buffer = $94;
  $95 = $ci;
  $96 = (($95) + 1)|0;
  $ci = $96;
  $97 = $compptr;
  $98 = (($97) + 88|0);
  $compptr = $98;
 }
 STACKTOP = sp;return;
}
function _pre_process_data($cinfo,$input_buf,$in_row_ctr,$in_rows_avail,$output_buf,$out_row_group_ctr,$out_row_groups_avail) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_ctr = $in_row_ctr|0;
 $in_rows_avail = $in_rows_avail|0;
 $output_buf = $output_buf|0;
 $out_row_group_ctr = $out_row_group_ctr|0;
 $out_row_groups_avail = $out_row_groups_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0, $inrows = 0;
 var $numrows = 0, $prep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_ctr;
 $3 = $in_rows_avail;
 $4 = $output_buf;
 $5 = $out_row_group_ctr;
 $6 = $out_row_groups_avail;
 $7 = $0;
 $8 = (($7) + 400|0);
 $9 = HEAP32[$8>>2]|0;
 $prep = $9;
 while(1) {
  $10 = $2;
  $11 = HEAP32[$10>>2]|0;
  $12 = $3;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = $5;
   $15 = HEAP32[$14>>2]|0;
   $16 = $6;
   $17 = ($15>>>0)<($16>>>0);
   $176 = $17;
  } else {
   $176 = 0;
  }
  if (!($176)) {
   label = 25;
   break;
  }
  $18 = $3;
  $19 = $2;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($18) - ($20))|0;
  $inrows = $21;
  $22 = $0;
  $23 = (($22) + 276|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $prep;
  $26 = (($25) + 52|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($24) - ($27))|0;
  $numrows = $28;
  $29 = $numrows;
  $30 = $inrows;
  $31 = ($29>>>0)<($30>>>0);
  if ($31) {
   $32 = $numrows;
   $34 = $32;
  } else {
   $33 = $inrows;
   $34 = $33;
  }
  $numrows = $34;
  $35 = $0;
  $36 = (($35) + 412|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = $0;
  $41 = $1;
  $42 = $2;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + ($43<<2)|0);
  $45 = $prep;
  $46 = (($45) + 8|0);
  $47 = $prep;
  $48 = (($47) + 52|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $numrows;
  FUNCTION_TABLE_viiiii[$39 & 255]($40,$44,$46,$49,$50);
  $51 = $numrows;
  $52 = $2;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($51))|0;
  HEAP32[$52>>2] = $54;
  $55 = $numrows;
  $56 = $prep;
  $57 = (($56) + 52|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($55))|0;
  HEAP32[$57>>2] = $59;
  $60 = $numrows;
  $61 = $prep;
  $62 = (($61) + 48|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) - ($60))|0;
  HEAP32[$62>>2] = $64;
  $65 = $prep;
  $66 = (($65) + 48|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = $prep;
   $70 = (($69) + 52|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $0;
   $73 = (($72) + 276|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($71|0)<($74|0);
   if ($75) {
    $ci = 0;
    while(1) {
     $76 = $ci;
     $77 = $0;
     $78 = (($77) + 76|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($76|0)<($79|0);
     if (!($80)) {
      break;
     }
     $81 = $ci;
     $82 = $prep;
     $83 = (($82) + 8|0);
     $84 = (($83) + ($81<<2)|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = $0;
     $87 = (($86) + 28|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $prep;
     $90 = (($89) + 52|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = $0;
     $93 = (($92) + 276|0);
     $94 = HEAP32[$93>>2]|0;
     _expand_bottom_edge($85,$88,$91,$94);
     $95 = $ci;
     $96 = (($95) + 1)|0;
     $ci = $96;
    }
    $97 = $0;
    $98 = (($97) + 276|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $prep;
    $101 = (($100) + 52|0);
    HEAP32[$101>>2] = $99;
   }
  }
  $102 = $prep;
  $103 = (($102) + 52|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = $0;
  $106 = (($105) + 276|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($104|0)==($107|0);
  if ($108) {
   $109 = $0;
   $110 = (($109) + 416|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = (($111) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $0;
   $115 = $prep;
   $116 = (($115) + 8|0);
   $117 = $4;
   $118 = $5;
   $119 = HEAP32[$118>>2]|0;
   FUNCTION_TABLE_viiiii[$113 & 255]($114,$116,0,$117,$119);
   $120 = $prep;
   $121 = (($120) + 52|0);
   HEAP32[$121>>2] = 0;
   $122 = $5;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($123) + 1)|0;
   HEAP32[$122>>2] = $124;
  }
  $125 = $prep;
  $126 = (($125) + 48|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($127|0)==(0);
  if ($128) {
   $129 = $5;
   $130 = HEAP32[$129>>2]|0;
   $131 = $6;
   $132 = ($130>>>0)<($131>>>0);
   if ($132) {
    break;
   }
  }
 }
 if ((label|0) == 25) {
  STACKTOP = sp;return;
 }
 $ci = 0;
 $133 = $0;
 $134 = (($133) + 84|0);
 $135 = HEAP32[$134>>2]|0;
 $compptr = $135;
 while(1) {
  $136 = $ci;
  $137 = $0;
  $138 = (($137) + 76|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = ($136|0)<($139|0);
  if (!($140)) {
   break;
  }
  $141 = $compptr;
  $142 = (($141) + 12|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $compptr;
  $145 = (($144) + 40|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = Math_imul($143, $146)|0;
  $148 = $0;
  $149 = (($148) + 284|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($147|0) / ($150|0))&-1;
  $numrows = $151;
  $152 = $ci;
  $153 = $4;
  $154 = (($153) + ($152<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $compptr;
  $157 = (($156) + 28|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $compptr;
  $160 = (($159) + 36|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = Math_imul($158, $161)|0;
  $163 = $5;
  $164 = HEAP32[$163>>2]|0;
  $165 = $numrows;
  $166 = Math_imul($164, $165)|0;
  $167 = $6;
  $168 = $numrows;
  $169 = Math_imul($167, $168)|0;
  _expand_bottom_edge($155,$162,$166,$169);
  $170 = $ci;
  $171 = (($170) + 1)|0;
  $ci = $171;
  $172 = $compptr;
  $173 = (($172) + 88|0);
  $compptr = $173;
 }
 $174 = $6;
 $175 = $5;
 HEAP32[$175>>2] = $174;
 STACKTOP = sp;return;
}
function _expand_bottom_edge($image_data,$num_cols,$input_rows,$output_rows) {
 $image_data = $image_data|0;
 $num_cols = $num_cols|0;
 $input_rows = $input_rows|0;
 $output_rows = $output_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $image_data;
 $1 = $num_cols;
 $2 = $input_rows;
 $3 = $output_rows;
 $4 = $2;
 $row = $4;
 while(1) {
  $5 = $row;
  $6 = $3;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $0;
  $9 = $2;
  $10 = (($9) - 1)|0;
  $11 = $0;
  $12 = $row;
  $13 = $1;
  _jcopy_sample_rows($8,$10,$11,$12,1,$13);
  $14 = $row;
  $15 = (($14) + 1)|0;
  $row = $15;
 }
 STACKTOP = sp;return;
}
function _jinit_downsampler($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0, $downsample = 0, $h_in_group = 0, $h_out_group = 0, $smoothok = 0, $v_in_group = 0;
 var $v_out_group = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $smoothok = 1;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,112)|0);
 $downsample = $6;
 $7 = $downsample;
 $8 = $0;
 $9 = (($8) + 416|0);
 HEAP32[$9>>2] = $7;
 $10 = $downsample;
 HEAP32[$10>>2] = 126;
 $11 = $downsample;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 127;
 $13 = $downsample;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = (($15) + 220|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $0;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 20|0);
  HEAP32[$21>>2] = 26;
  $22 = $0;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = $0;
  FUNCTION_TABLE_vi[$24 & 511]($25);
 }
 $ci = 0;
 $26 = $0;
 $27 = (($26) + 84|0);
 $28 = HEAP32[$27>>2]|0;
 $compptr = $28;
 while(1) {
  $29 = $ci;
  $30 = $0;
  $31 = (($30) + 76|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $compptr;
  $35 = (($34) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $compptr;
  $38 = (($37) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $41 = $0;
  $42 = (($41) + 280|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($40|0) / ($43|0))&-1;
  $h_out_group = $44;
  $45 = $compptr;
  $46 = (($45) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $compptr;
  $49 = (($48) + 40|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = Math_imul($47, $50)|0;
  $52 = $0;
  $53 = (($52) + 284|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($51|0) / ($54|0))&-1;
  $v_out_group = $55;
  $56 = $0;
  $57 = (($56) + 272|0);
  $58 = HEAP32[$57>>2]|0;
  $h_in_group = $58;
  $59 = $0;
  $60 = (($59) + 276|0);
  $61 = HEAP32[$60>>2]|0;
  $v_in_group = $61;
  $62 = $v_out_group;
  $63 = $ci;
  $64 = $downsample;
  $65 = (($64) + 52|0);
  $66 = (($65) + ($63<<2)|0);
  HEAP32[$66>>2] = $62;
  $67 = $h_in_group;
  $68 = $h_out_group;
  $69 = ($67|0)==($68|0);
  if ($69) {
   $70 = $v_in_group;
   $71 = $v_out_group;
   $72 = ($70|0)==($71|0);
   if ($72) {
    $73 = $0;
    $74 = (($73) + 228|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)!=(0);
    if ($76) {
     $77 = $ci;
     $78 = $downsample;
     $79 = (($78) + 12|0);
     $80 = (($79) + ($77<<2)|0);
     HEAP32[$80>>2] = 128;
     $81 = $downsample;
     $82 = (($81) + 8|0);
     HEAP32[$82>>2] = 1;
    } else {
     $83 = $ci;
     $84 = $downsample;
     $85 = (($84) + 12|0);
     $86 = (($85) + ($83<<2)|0);
     HEAP32[$86>>2] = 129;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $87 = $h_in_group;
   $88 = $h_out_group;
   $89 = $88<<1;
   $90 = ($87|0)==($89|0);
   if ($90) {
    $91 = $v_in_group;
    $92 = $v_out_group;
    $93 = ($91|0)==($92|0);
    if ($93) {
     $smoothok = 0;
     $94 = $ci;
     $95 = $downsample;
     $96 = (($95) + 12|0);
     $97 = (($96) + ($94<<2)|0);
     HEAP32[$97>>2] = 130;
    } else {
     label = 14;
    }
   } else {
    label = 14;
   }
   if ((label|0) == 14) {
    label = 0;
    $98 = $h_in_group;
    $99 = $h_out_group;
    $100 = $99<<1;
    $101 = ($98|0)==($100|0);
    if ($101) {
     $102 = $v_in_group;
     $103 = $v_out_group;
     $104 = $103<<1;
     $105 = ($102|0)==($104|0);
     if ($105) {
      $106 = $0;
      $107 = (($106) + 228|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ($108|0)!=(0);
      if ($109) {
       $110 = $ci;
       $111 = $downsample;
       $112 = (($111) + 12|0);
       $113 = (($112) + ($110<<2)|0);
       HEAP32[$113>>2] = 131;
       $114 = $downsample;
       $115 = (($114) + 8|0);
       HEAP32[$115>>2] = 1;
      } else {
       $116 = $ci;
       $117 = $downsample;
       $118 = (($117) + 12|0);
       $119 = (($118) + ($116<<2)|0);
       HEAP32[$119>>2] = 132;
      }
     } else {
      label = 20;
     }
    } else {
     label = 20;
    }
    if ((label|0) == 20) {
     label = 0;
     $120 = $h_in_group;
     $121 = $h_out_group;
     $122 = (($120|0) % ($121|0))&-1;
     $123 = ($122|0)==(0);
     if ($123) {
      $124 = $v_in_group;
      $125 = $v_out_group;
      $126 = (($124|0) % ($125|0))&-1;
      $127 = ($126|0)==(0);
      if ($127) {
       $smoothok = 0;
       $128 = $ci;
       $129 = $downsample;
       $130 = (($129) + 12|0);
       $131 = (($130) + ($128<<2)|0);
       HEAP32[$131>>2] = 133;
       $132 = $h_in_group;
       $133 = $h_out_group;
       $134 = (($132|0) / ($133|0))&-1;
       $135 = $134&255;
       $136 = $ci;
       $137 = $downsample;
       $138 = (($137) + 92|0);
       $139 = (($138) + ($136)|0);
       HEAP8[$139>>0] = $135;
       $140 = $v_in_group;
       $141 = $v_out_group;
       $142 = (($140|0) / ($141|0))&-1;
       $143 = $142&255;
       $144 = $ci;
       $145 = $downsample;
       $146 = (($145) + 102|0);
       $147 = (($146) + ($144)|0);
       HEAP8[$147>>0] = $143;
      } else {
       label = 23;
      }
     } else {
      label = 23;
     }
     if ((label|0) == 23) {
      label = 0;
      $148 = $0;
      $149 = HEAP32[$148>>2]|0;
      $150 = (($149) + 20|0);
      HEAP32[$150>>2] = 39;
      $151 = $0;
      $152 = HEAP32[$151>>2]|0;
      $153 = HEAP32[$152>>2]|0;
      $154 = $0;
      FUNCTION_TABLE_vi[$153 & 511]($154);
     }
    }
   }
  }
  $155 = $ci;
  $156 = (($155) + 1)|0;
  $ci = $156;
  $157 = $compptr;
  $158 = (($157) + 88|0);
  $compptr = $158;
 }
 $159 = $0;
 $160 = (($159) + 228|0);
 $161 = HEAP32[$160>>2]|0;
 $162 = ($161|0)!=(0);
 if (!($162)) {
  STACKTOP = sp;return;
 }
 $163 = $smoothok;
 $164 = ($163|0)!=(0);
 if ($164) {
  STACKTOP = sp;return;
 }
 $165 = $0;
 $166 = HEAP32[$165>>2]|0;
 $167 = (($166) + 20|0);
 HEAP32[$167>>2] = 101;
 $168 = $0;
 $169 = HEAP32[$168>>2]|0;
 $170 = (($169) + 4|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = $0;
 FUNCTION_TABLE_vii[$171 & 511]($172,0);
 STACKTOP = sp;return;
}
function _start_pass_downsample($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return;
}
function _sep_downsample($cinfo,$input_buf,$in_row_index,$output_buf,$out_row_group_index) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_index = $in_row_index|0;
 $output_buf = $output_buf|0;
 $out_row_group_index = $out_row_group_index|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $compptr = 0, $downsample = 0, $in_ptr = 0, $out_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_index;
 $3 = $output_buf;
 $4 = $out_row_group_index;
 $5 = $0;
 $6 = (($5) + 416|0);
 $7 = HEAP32[$6>>2]|0;
 $downsample = $7;
 $ci = 0;
 $8 = $0;
 $9 = (($8) + 84|0);
 $10 = HEAP32[$9>>2]|0;
 $compptr = $10;
 while(1) {
  $11 = $ci;
  $12 = $0;
  $13 = (($12) + 76|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($11|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $ci;
  $17 = $1;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $2;
  $21 = (($19) + ($20<<2)|0);
  $in_ptr = $21;
  $22 = $ci;
  $23 = $3;
  $24 = (($23) + ($22<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $4;
  $27 = $ci;
  $28 = $downsample;
  $29 = (($28) + 52|0);
  $30 = (($29) + ($27<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($26, $31)|0;
  $33 = (($25) + ($32<<2)|0);
  $out_ptr = $33;
  $34 = $ci;
  $35 = $downsample;
  $36 = (($35) + 12|0);
  $37 = (($36) + ($34<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $0;
  $40 = $compptr;
  $41 = $in_ptr;
  $42 = $out_ptr;
  FUNCTION_TABLE_viiii[$38 & 511]($39,$40,$41,$42);
  $43 = $ci;
  $44 = (($43) + 1)|0;
  $ci = $44;
  $45 = $compptr;
  $46 = (($45) + 88|0);
  $compptr = $46;
 }
 STACKTOP = sp;return;
}
function _fullsize_smooth_downsample($cinfo,$compptr,$input_data,$output_data) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $input_data = $input_data|0;
 $output_data = $output_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $above_ptr = 0, $below_ptr = 0, $colctr = 0, $colsum = 0, $inptr = 0, $inrow = 0;
 var $lastcolsum = 0, $memberscale = 0, $membersum = 0, $neighscale = 0, $neighsum = 0, $nextcolsum = 0, $outptr = 0, $output_cols = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $input_data;
 $3 = $output_data;
 $4 = $1;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (($7) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($6, $9)|0;
 $output_cols = $10;
 $11 = $2;
 $12 = (($11) + -4|0);
 $13 = $0;
 $14 = (($13) + 276|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 2)|0;
 $17 = $0;
 $18 = (($17) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $output_cols;
 _expand_right_edge($12,$16,$19,$20);
 $21 = $0;
 $22 = (($21) + 228|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23<<9;
 $25 = (65536 - ($24))|0;
 $memberscale = $25;
 $26 = $0;
 $27 = (($26) + 228|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = $28<<6;
 $neighscale = $29;
 $inrow = 0;
 while(1) {
  $30 = $inrow;
  $31 = $0;
  $32 = (($31) + 276|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ($30|0)<($33|0);
  if (!($34)) {
   break;
  }
  $35 = $inrow;
  $36 = $3;
  $37 = (($36) + ($35<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $outptr = $38;
  $39 = $inrow;
  $40 = $2;
  $41 = (($40) + ($39<<2)|0);
  $42 = HEAP32[$41>>2]|0;
  $inptr = $42;
  $43 = $inrow;
  $44 = (($43) - 1)|0;
  $45 = $2;
  $46 = (($45) + ($44<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $above_ptr = $47;
  $48 = $inrow;
  $49 = (($48) + 1)|0;
  $50 = $2;
  $51 = (($50) + ($49<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $below_ptr = $52;
  $53 = $above_ptr;
  $54 = (($53) + 1|0);
  $above_ptr = $54;
  $55 = HEAP8[$53>>0]|0;
  $56 = $55&255;
  $57 = $below_ptr;
  $58 = (($57) + 1|0);
  $below_ptr = $58;
  $59 = HEAP8[$57>>0]|0;
  $60 = $59&255;
  $61 = (($56) + ($60))|0;
  $62 = $inptr;
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = (($61) + ($64))|0;
  $colsum = $65;
  $66 = $inptr;
  $67 = (($66) + 1|0);
  $inptr = $67;
  $68 = HEAP8[$66>>0]|0;
  $69 = $68&255;
  $membersum = $69;
  $70 = $above_ptr;
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $below_ptr;
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = (($72) + ($75))|0;
  $77 = $inptr;
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (($76) + ($79))|0;
  $nextcolsum = $80;
  $81 = $colsum;
  $82 = $colsum;
  $83 = $membersum;
  $84 = (($82) - ($83))|0;
  $85 = (($81) + ($84))|0;
  $86 = $nextcolsum;
  $87 = (($85) + ($86))|0;
  $neighsum = $87;
  $88 = $membersum;
  $89 = $memberscale;
  $90 = Math_imul($88, $89)|0;
  $91 = $neighsum;
  $92 = $neighscale;
  $93 = Math_imul($91, $92)|0;
  $94 = (($90) + ($93))|0;
  $membersum = $94;
  $95 = $membersum;
  $96 = (($95) + 32768)|0;
  $97 = $96 >> 16;
  $98 = $97&255;
  $99 = $outptr;
  $100 = (($99) + 1|0);
  $outptr = $100;
  HEAP8[$99>>0] = $98;
  $101 = $colsum;
  $lastcolsum = $101;
  $102 = $nextcolsum;
  $colsum = $102;
  $103 = $output_cols;
  $104 = (($103) - 2)|0;
  $colctr = $104;
  while(1) {
   $105 = $colctr;
   $106 = ($105>>>0)>(0);
   if (!($106)) {
    break;
   }
   $107 = $inptr;
   $108 = (($107) + 1|0);
   $inptr = $108;
   $109 = HEAP8[$107>>0]|0;
   $110 = $109&255;
   $membersum = $110;
   $111 = $above_ptr;
   $112 = (($111) + 1|0);
   $above_ptr = $112;
   $113 = $below_ptr;
   $114 = (($113) + 1|0);
   $below_ptr = $114;
   $115 = $above_ptr;
   $116 = HEAP8[$115>>0]|0;
   $117 = $116&255;
   $118 = $below_ptr;
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = (($117) + ($120))|0;
   $122 = $inptr;
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $125 = (($121) + ($124))|0;
   $nextcolsum = $125;
   $126 = $lastcolsum;
   $127 = $colsum;
   $128 = $membersum;
   $129 = (($127) - ($128))|0;
   $130 = (($126) + ($129))|0;
   $131 = $nextcolsum;
   $132 = (($130) + ($131))|0;
   $neighsum = $132;
   $133 = $membersum;
   $134 = $memberscale;
   $135 = Math_imul($133, $134)|0;
   $136 = $neighsum;
   $137 = $neighscale;
   $138 = Math_imul($136, $137)|0;
   $139 = (($135) + ($138))|0;
   $membersum = $139;
   $140 = $membersum;
   $141 = (($140) + 32768)|0;
   $142 = $141 >> 16;
   $143 = $142&255;
   $144 = $outptr;
   $145 = (($144) + 1|0);
   $outptr = $145;
   HEAP8[$144>>0] = $143;
   $146 = $colsum;
   $lastcolsum = $146;
   $147 = $nextcolsum;
   $colsum = $147;
   $148 = $colctr;
   $149 = (($148) + -1)|0;
   $colctr = $149;
  }
  $150 = $inptr;
  $151 = HEAP8[$150>>0]|0;
  $152 = $151&255;
  $membersum = $152;
  $153 = $lastcolsum;
  $154 = $colsum;
  $155 = $membersum;
  $156 = (($154) - ($155))|0;
  $157 = (($153) + ($156))|0;
  $158 = $colsum;
  $159 = (($157) + ($158))|0;
  $neighsum = $159;
  $160 = $membersum;
  $161 = $memberscale;
  $162 = Math_imul($160, $161)|0;
  $163 = $neighsum;
  $164 = $neighscale;
  $165 = Math_imul($163, $164)|0;
  $166 = (($162) + ($165))|0;
  $membersum = $166;
  $167 = $membersum;
  $168 = (($167) + 32768)|0;
  $169 = $168 >> 16;
  $170 = $169&255;
  $171 = $outptr;
  HEAP8[$171>>0] = $170;
  $172 = $inrow;
  $173 = (($172) + 1)|0;
  $inrow = $173;
 }
 STACKTOP = sp;return;
}
function _fullsize_downsample($cinfo,$compptr,$input_data,$output_data) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $input_data = $input_data|0;
 $output_data = $output_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $input_data;
 $3 = $output_data;
 $4 = $2;
 $5 = $3;
 $6 = $0;
 $7 = (($6) + 276|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 _jcopy_sample_rows($4,0,$5,0,$8,$11);
 $12 = $3;
 $13 = $0;
 $14 = (($13) + 276|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = (($16) + 28|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $1;
 $20 = (($19) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = (($22) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = Math_imul($21, $24)|0;
 _expand_right_edge($12,$15,$18,$25);
 STACKTOP = sp;return;
}
function _h2v1_downsample($cinfo,$compptr,$input_data,$output_data) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $input_data = $input_data|0;
 $output_data = $output_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bias = 0, $inptr = 0;
 var $inrow = 0, $outcol = 0, $outptr = 0, $output_cols = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $input_data;
 $3 = $output_data;
 $4 = $1;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (($7) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($6, $9)|0;
 $output_cols = $10;
 $11 = $2;
 $12 = $0;
 $13 = (($12) + 276|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $output_cols;
 $19 = $18<<1;
 _expand_right_edge($11,$14,$17,$19);
 $inrow = 0;
 while(1) {
  $20 = $inrow;
  $21 = $0;
  $22 = (($21) + 276|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $inrow;
  $26 = $3;
  $27 = (($26) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $outptr = $28;
  $29 = $inrow;
  $30 = $2;
  $31 = (($30) + ($29<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $inptr = $32;
  $bias = 0;
  $outcol = 0;
  while(1) {
   $33 = $outcol;
   $34 = $output_cols;
   $35 = ($33>>>0)<($34>>>0);
   if (!($35)) {
    break;
   }
   $36 = $inptr;
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = $inptr;
   $40 = (($39) + 1|0);
   $41 = HEAP8[$40>>0]|0;
   $42 = $41&255;
   $43 = (($38) + ($42))|0;
   $44 = $bias;
   $45 = (($43) + ($44))|0;
   $46 = $45 >> 1;
   $47 = $46&255;
   $48 = $outptr;
   $49 = (($48) + 1|0);
   $outptr = $49;
   HEAP8[$48>>0] = $47;
   $50 = $bias;
   $51 = $50 ^ 1;
   $bias = $51;
   $52 = $inptr;
   $53 = (($52) + 2|0);
   $inptr = $53;
   $54 = $outcol;
   $55 = (($54) + 1)|0;
   $outcol = $55;
  }
  $56 = $inrow;
  $57 = (($56) + 1)|0;
  $inrow = $57;
 }
 STACKTOP = sp;return;
}
function _h2v2_smooth_downsample($cinfo,$compptr,$input_data,$output_data) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $input_data = $input_data|0;
 $output_data = $output_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $above_ptr = 0, $below_ptr = 0, $colctr = 0, $inptr0 = 0, $inptr1 = 0, $inrow = 0, $memberscale = 0;
 var $membersum = 0, $neighscale = 0, $neighsum = 0, $outptr = 0, $output_cols = 0, $outrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $input_data;
 $3 = $output_data;
 $4 = $1;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (($7) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($6, $9)|0;
 $output_cols = $10;
 $11 = $2;
 $12 = (($11) + -4|0);
 $13 = $0;
 $14 = (($13) + 276|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 2)|0;
 $17 = $0;
 $18 = (($17) + 28|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $output_cols;
 $21 = $20<<1;
 _expand_right_edge($12,$16,$19,$21);
 $22 = $0;
 $23 = (($22) + 228|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24*80)|0;
 $26 = (16384 - ($25))|0;
 $memberscale = $26;
 $27 = $0;
 $28 = (($27) + 228|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29<<4;
 $neighscale = $30;
 $outrow = 0;
 $inrow = 0;
 while(1) {
  $31 = $inrow;
  $32 = $0;
  $33 = (($32) + 276|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($31|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = $outrow;
  $37 = $3;
  $38 = (($37) + ($36<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $outptr = $39;
  $40 = $inrow;
  $41 = $2;
  $42 = (($41) + ($40<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $inptr0 = $43;
  $44 = $inrow;
  $45 = (($44) + 1)|0;
  $46 = $2;
  $47 = (($46) + ($45<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $inptr1 = $48;
  $49 = $inrow;
  $50 = (($49) - 1)|0;
  $51 = $2;
  $52 = (($51) + ($50<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $above_ptr = $53;
  $54 = $inrow;
  $55 = (($54) + 2)|0;
  $56 = $2;
  $57 = (($56) + ($55<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $below_ptr = $58;
  $59 = $inptr0;
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $inptr0;
  $63 = (($62) + 1|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = (($61) + ($65))|0;
  $67 = $inptr1;
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (($66) + ($69))|0;
  $71 = $inptr1;
  $72 = (($71) + 1|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = (($70) + ($74))|0;
  $membersum = $75;
  $76 = $above_ptr;
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $above_ptr;
  $80 = (($79) + 1|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = (($78) + ($82))|0;
  $84 = $below_ptr;
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = (($83) + ($86))|0;
  $88 = $below_ptr;
  $89 = (($88) + 1|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = (($87) + ($91))|0;
  $93 = $inptr0;
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = (($92) + ($95))|0;
  $97 = $inptr0;
  $98 = (($97) + 2|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = (($96) + ($100))|0;
  $102 = $inptr1;
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = (($101) + ($104))|0;
  $106 = $inptr1;
  $107 = (($106) + 2|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = (($105) + ($109))|0;
  $neighsum = $110;
  $111 = $neighsum;
  $112 = $neighsum;
  $113 = (($112) + ($111))|0;
  $neighsum = $113;
  $114 = $above_ptr;
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = $above_ptr;
  $118 = (($117) + 2|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = (($116) + ($120))|0;
  $122 = $below_ptr;
  $123 = HEAP8[$122>>0]|0;
  $124 = $123&255;
  $125 = (($121) + ($124))|0;
  $126 = $below_ptr;
  $127 = (($126) + 2|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128&255;
  $130 = (($125) + ($129))|0;
  $131 = $neighsum;
  $132 = (($131) + ($130))|0;
  $neighsum = $132;
  $133 = $membersum;
  $134 = $memberscale;
  $135 = Math_imul($133, $134)|0;
  $136 = $neighsum;
  $137 = $neighscale;
  $138 = Math_imul($136, $137)|0;
  $139 = (($135) + ($138))|0;
  $membersum = $139;
  $140 = $membersum;
  $141 = (($140) + 32768)|0;
  $142 = $141 >> 16;
  $143 = $142&255;
  $144 = $outptr;
  $145 = (($144) + 1|0);
  $outptr = $145;
  HEAP8[$144>>0] = $143;
  $146 = $inptr0;
  $147 = (($146) + 2|0);
  $inptr0 = $147;
  $148 = $inptr1;
  $149 = (($148) + 2|0);
  $inptr1 = $149;
  $150 = $above_ptr;
  $151 = (($150) + 2|0);
  $above_ptr = $151;
  $152 = $below_ptr;
  $153 = (($152) + 2|0);
  $below_ptr = $153;
  $154 = $output_cols;
  $155 = (($154) - 2)|0;
  $colctr = $155;
  while(1) {
   $156 = $colctr;
   $157 = ($156>>>0)>(0);
   if (!($157)) {
    break;
   }
   $158 = $inptr0;
   $159 = HEAP8[$158>>0]|0;
   $160 = $159&255;
   $161 = $inptr0;
   $162 = (($161) + 1|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($160) + ($164))|0;
   $166 = $inptr1;
   $167 = HEAP8[$166>>0]|0;
   $168 = $167&255;
   $169 = (($165) + ($168))|0;
   $170 = $inptr1;
   $171 = (($170) + 1|0);
   $172 = HEAP8[$171>>0]|0;
   $173 = $172&255;
   $174 = (($169) + ($173))|0;
   $membersum = $174;
   $175 = $above_ptr;
   $176 = HEAP8[$175>>0]|0;
   $177 = $176&255;
   $178 = $above_ptr;
   $179 = (($178) + 1|0);
   $180 = HEAP8[$179>>0]|0;
   $181 = $180&255;
   $182 = (($177) + ($181))|0;
   $183 = $below_ptr;
   $184 = HEAP8[$183>>0]|0;
   $185 = $184&255;
   $186 = (($182) + ($185))|0;
   $187 = $below_ptr;
   $188 = (($187) + 1|0);
   $189 = HEAP8[$188>>0]|0;
   $190 = $189&255;
   $191 = (($186) + ($190))|0;
   $192 = $inptr0;
   $193 = (($192) + -1|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = $194&255;
   $196 = (($191) + ($195))|0;
   $197 = $inptr0;
   $198 = (($197) + 2|0);
   $199 = HEAP8[$198>>0]|0;
   $200 = $199&255;
   $201 = (($196) + ($200))|0;
   $202 = $inptr1;
   $203 = (($202) + -1|0);
   $204 = HEAP8[$203>>0]|0;
   $205 = $204&255;
   $206 = (($201) + ($205))|0;
   $207 = $inptr1;
   $208 = (($207) + 2|0);
   $209 = HEAP8[$208>>0]|0;
   $210 = $209&255;
   $211 = (($206) + ($210))|0;
   $neighsum = $211;
   $212 = $neighsum;
   $213 = $neighsum;
   $214 = (($213) + ($212))|0;
   $neighsum = $214;
   $215 = $above_ptr;
   $216 = (($215) + -1|0);
   $217 = HEAP8[$216>>0]|0;
   $218 = $217&255;
   $219 = $above_ptr;
   $220 = (($219) + 2|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $221&255;
   $223 = (($218) + ($222))|0;
   $224 = $below_ptr;
   $225 = (($224) + -1|0);
   $226 = HEAP8[$225>>0]|0;
   $227 = $226&255;
   $228 = (($223) + ($227))|0;
   $229 = $below_ptr;
   $230 = (($229) + 2|0);
   $231 = HEAP8[$230>>0]|0;
   $232 = $231&255;
   $233 = (($228) + ($232))|0;
   $234 = $neighsum;
   $235 = (($234) + ($233))|0;
   $neighsum = $235;
   $236 = $membersum;
   $237 = $memberscale;
   $238 = Math_imul($236, $237)|0;
   $239 = $neighsum;
   $240 = $neighscale;
   $241 = Math_imul($239, $240)|0;
   $242 = (($238) + ($241))|0;
   $membersum = $242;
   $243 = $membersum;
   $244 = (($243) + 32768)|0;
   $245 = $244 >> 16;
   $246 = $245&255;
   $247 = $outptr;
   $248 = (($247) + 1|0);
   $outptr = $248;
   HEAP8[$247>>0] = $246;
   $249 = $inptr0;
   $250 = (($249) + 2|0);
   $inptr0 = $250;
   $251 = $inptr1;
   $252 = (($251) + 2|0);
   $inptr1 = $252;
   $253 = $above_ptr;
   $254 = (($253) + 2|0);
   $above_ptr = $254;
   $255 = $below_ptr;
   $256 = (($255) + 2|0);
   $below_ptr = $256;
   $257 = $colctr;
   $258 = (($257) + -1)|0;
   $colctr = $258;
  }
  $259 = $inptr0;
  $260 = HEAP8[$259>>0]|0;
  $261 = $260&255;
  $262 = $inptr0;
  $263 = (($262) + 1|0);
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = (($261) + ($265))|0;
  $267 = $inptr1;
  $268 = HEAP8[$267>>0]|0;
  $269 = $268&255;
  $270 = (($266) + ($269))|0;
  $271 = $inptr1;
  $272 = (($271) + 1|0);
  $273 = HEAP8[$272>>0]|0;
  $274 = $273&255;
  $275 = (($270) + ($274))|0;
  $membersum = $275;
  $276 = $above_ptr;
  $277 = HEAP8[$276>>0]|0;
  $278 = $277&255;
  $279 = $above_ptr;
  $280 = (($279) + 1|0);
  $281 = HEAP8[$280>>0]|0;
  $282 = $281&255;
  $283 = (($278) + ($282))|0;
  $284 = $below_ptr;
  $285 = HEAP8[$284>>0]|0;
  $286 = $285&255;
  $287 = (($283) + ($286))|0;
  $288 = $below_ptr;
  $289 = (($288) + 1|0);
  $290 = HEAP8[$289>>0]|0;
  $291 = $290&255;
  $292 = (($287) + ($291))|0;
  $293 = $inptr0;
  $294 = (($293) + -1|0);
  $295 = HEAP8[$294>>0]|0;
  $296 = $295&255;
  $297 = (($292) + ($296))|0;
  $298 = $inptr0;
  $299 = (($298) + 1|0);
  $300 = HEAP8[$299>>0]|0;
  $301 = $300&255;
  $302 = (($297) + ($301))|0;
  $303 = $inptr1;
  $304 = (($303) + -1|0);
  $305 = HEAP8[$304>>0]|0;
  $306 = $305&255;
  $307 = (($302) + ($306))|0;
  $308 = $inptr1;
  $309 = (($308) + 1|0);
  $310 = HEAP8[$309>>0]|0;
  $311 = $310&255;
  $312 = (($307) + ($311))|0;
  $neighsum = $312;
  $313 = $neighsum;
  $314 = $neighsum;
  $315 = (($314) + ($313))|0;
  $neighsum = $315;
  $316 = $above_ptr;
  $317 = (($316) + -1|0);
  $318 = HEAP8[$317>>0]|0;
  $319 = $318&255;
  $320 = $above_ptr;
  $321 = (($320) + 1|0);
  $322 = HEAP8[$321>>0]|0;
  $323 = $322&255;
  $324 = (($319) + ($323))|0;
  $325 = $below_ptr;
  $326 = (($325) + -1|0);
  $327 = HEAP8[$326>>0]|0;
  $328 = $327&255;
  $329 = (($324) + ($328))|0;
  $330 = $below_ptr;
  $331 = (($330) + 1|0);
  $332 = HEAP8[$331>>0]|0;
  $333 = $332&255;
  $334 = (($329) + ($333))|0;
  $335 = $neighsum;
  $336 = (($335) + ($334))|0;
  $neighsum = $336;
  $337 = $membersum;
  $338 = $memberscale;
  $339 = Math_imul($337, $338)|0;
  $340 = $neighsum;
  $341 = $neighscale;
  $342 = Math_imul($340, $341)|0;
  $343 = (($339) + ($342))|0;
  $membersum = $343;
  $344 = $membersum;
  $345 = (($344) + 32768)|0;
  $346 = $345 >> 16;
  $347 = $346&255;
  $348 = $outptr;
  HEAP8[$348>>0] = $347;
  $349 = $inrow;
  $350 = (($349) + 2)|0;
  $inrow = $350;
  $351 = $outrow;
  $352 = (($351) + 1)|0;
  $outrow = $352;
 }
 STACKTOP = sp;return;
}
function _h2v2_downsample($cinfo,$compptr,$input_data,$output_data) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $input_data = $input_data|0;
 $output_data = $output_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $bias = 0, $inptr0 = 0, $inptr1 = 0, $inrow = 0;
 var $outcol = 0, $outptr = 0, $output_cols = 0, $outrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $input_data;
 $3 = $output_data;
 $4 = $1;
 $5 = (($4) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 $8 = (($7) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($6, $9)|0;
 $output_cols = $10;
 $11 = $2;
 $12 = $0;
 $13 = (($12) + 276|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 $16 = (($15) + 28|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $output_cols;
 $19 = $18<<1;
 _expand_right_edge($11,$14,$17,$19);
 $outrow = 0;
 $inrow = 0;
 while(1) {
  $20 = $inrow;
  $21 = $0;
  $22 = (($21) + 276|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($20|0)<($23|0);
  if (!($24)) {
   break;
  }
  $25 = $outrow;
  $26 = $3;
  $27 = (($26) + ($25<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $outptr = $28;
  $29 = $inrow;
  $30 = $2;
  $31 = (($30) + ($29<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $inptr0 = $32;
  $33 = $inrow;
  $34 = (($33) + 1)|0;
  $35 = $2;
  $36 = (($35) + ($34<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $inptr1 = $37;
  $bias = 1;
  $outcol = 0;
  while(1) {
   $38 = $outcol;
   $39 = $output_cols;
   $40 = ($38>>>0)<($39>>>0);
   if (!($40)) {
    break;
   }
   $41 = $inptr0;
   $42 = HEAP8[$41>>0]|0;
   $43 = $42&255;
   $44 = $inptr0;
   $45 = (($44) + 1|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = (($43) + ($47))|0;
   $49 = $inptr1;
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = (($48) + ($51))|0;
   $53 = $inptr1;
   $54 = (($53) + 1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = (($52) + ($56))|0;
   $58 = $bias;
   $59 = (($57) + ($58))|0;
   $60 = $59 >> 2;
   $61 = $60&255;
   $62 = $outptr;
   $63 = (($62) + 1|0);
   $outptr = $63;
   HEAP8[$62>>0] = $61;
   $64 = $bias;
   $65 = $64 ^ 3;
   $bias = $65;
   $66 = $inptr0;
   $67 = (($66) + 2|0);
   $inptr0 = $67;
   $68 = $inptr1;
   $69 = (($68) + 2|0);
   $inptr1 = $69;
   $70 = $outcol;
   $71 = (($70) + 1)|0;
   $outcol = $71;
  }
  $72 = $inrow;
  $73 = (($72) + 2)|0;
  $inrow = $73;
  $74 = $outrow;
  $75 = (($74) + 1)|0;
  $outrow = $75;
 }
 STACKTOP = sp;return;
}
function _int_downsample($cinfo,$compptr,$input_data,$output_data) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $input_data = $input_data|0;
 $output_data = $output_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $downsample = 0;
 var $h = 0, $h_expand = 0, $inptr = 0, $inrow = 0, $numpix = 0, $numpix2 = 0, $outcol = 0, $outcol_h = 0, $outptr = 0, $output_cols = 0, $outrow = 0, $outvalue = 0, $v = 0, $v_expand = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $input_data;
 $3 = $output_data;
 $4 = $0;
 $5 = (($4) + 416|0);
 $6 = HEAP32[$5>>2]|0;
 $downsample = $6;
 $7 = $1;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $1;
 $11 = (($10) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = Math_imul($9, $12)|0;
 $output_cols = $13;
 $14 = $1;
 $15 = (($14) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $downsample;
 $18 = (($17) + 92|0);
 $19 = (($18) + ($16)|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $h_expand = $21;
 $22 = $1;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $downsample;
 $26 = (($25) + 102|0);
 $27 = (($26) + ($24)|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $v_expand = $29;
 $30 = $h_expand;
 $31 = $v_expand;
 $32 = Math_imul($30, $31)|0;
 $numpix = $32;
 $33 = $numpix;
 $34 = (($33|0) / 2)&-1;
 $numpix2 = $34;
 $35 = $2;
 $36 = $0;
 $37 = (($36) + 276|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $0;
 $40 = (($39) + 28|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $output_cols;
 $43 = $h_expand;
 $44 = Math_imul($42, $43)|0;
 _expand_right_edge($35,$38,$41,$44);
 $outrow = 0;
 $inrow = 0;
 while(1) {
  $45 = $inrow;
  $46 = $0;
  $47 = (($46) + 276|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($45|0)<($48|0);
  if (!($49)) {
   break;
  }
  $50 = $outrow;
  $51 = $3;
  $52 = (($51) + ($50<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $outptr = $53;
  $outcol = 0;
  $outcol_h = 0;
  while(1) {
   $54 = $outcol;
   $55 = $output_cols;
   $56 = ($54>>>0)<($55>>>0);
   if (!($56)) {
    break;
   }
   $outvalue = 0;
   $v = 0;
   while(1) {
    $57 = $v;
    $58 = $v_expand;
    $59 = ($57|0)<($58|0);
    if (!($59)) {
     break;
    }
    $60 = $inrow;
    $61 = $v;
    $62 = (($60) + ($61))|0;
    $63 = $2;
    $64 = (($63) + ($62<<2)|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $outcol_h;
    $67 = (($65) + ($66)|0);
    $inptr = $67;
    $h = 0;
    while(1) {
     $68 = $h;
     $69 = $h_expand;
     $70 = ($68|0)<($69|0);
     if (!($70)) {
      break;
     }
     $71 = $inptr;
     $72 = (($71) + 1|0);
     $inptr = $72;
     $73 = HEAP8[$71>>0]|0;
     $74 = $73&255;
     $75 = $outvalue;
     $76 = (($75) + ($74))|0;
     $outvalue = $76;
     $77 = $h;
     $78 = (($77) + 1)|0;
     $h = $78;
    }
    $79 = $v;
    $80 = (($79) + 1)|0;
    $v = $80;
   }
   $81 = $outvalue;
   $82 = $numpix2;
   $83 = (($81) + ($82))|0;
   $84 = $numpix;
   $85 = (($83|0) / ($84|0))&-1;
   $86 = $85&255;
   $87 = $outptr;
   $88 = (($87) + 1|0);
   $outptr = $88;
   HEAP8[$87>>0] = $86;
   $89 = $outcol;
   $90 = (($89) + 1)|0;
   $outcol = $90;
   $91 = $h_expand;
   $92 = $outcol_h;
   $93 = (($92) + ($91))|0;
   $outcol_h = $93;
  }
  $94 = $v_expand;
  $95 = $inrow;
  $96 = (($95) + ($94))|0;
  $inrow = $96;
  $97 = $outrow;
  $98 = (($97) + 1)|0;
  $outrow = $98;
 }
 STACKTOP = sp;return;
}
function _expand_right_edge($image_data,$num_rows,$input_cols,$output_cols) {
 $image_data = $image_data|0;
 $num_rows = $num_rows|0;
 $input_cols = $input_cols|0;
 $output_cols = $output_cols|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $numcols = 0, $pixval = 0, $ptr = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $image_data;
 $1 = $num_rows;
 $2 = $input_cols;
 $3 = $output_cols;
 $4 = $3;
 $5 = $2;
 $6 = (($4) - ($5))|0;
 $numcols = $6;
 $7 = $numcols;
 $8 = ($7|0)>(0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $row = 0;
 while(1) {
  $9 = $row;
  $10 = $1;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $row;
  $13 = $0;
  $14 = (($13) + ($12<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $2;
  $17 = (($15) + ($16)|0);
  $ptr = $17;
  $18 = $ptr;
  $19 = (($18) + -1|0);
  $20 = HEAP8[$19>>0]|0;
  $pixval = $20;
  $21 = $numcols;
  $count = $21;
  while(1) {
   $22 = $count;
   $23 = ($22|0)>(0);
   if (!($23)) {
    break;
   }
   $24 = $pixval;
   $25 = $ptr;
   $26 = (($25) + 1|0);
   $ptr = $26;
   HEAP8[$25>>0] = $24;
   $27 = $count;
   $28 = (($27) + -1)|0;
   $count = $28;
  }
  $29 = $row;
  $30 = (($29) + 1)|0;
  $row = $30;
 }
 STACKTOP = sp;return;
}
function _jpeg_CreateDecompress($cinfo,$version,$structsize) {
 $cinfo = $cinfo|0;
 $version = $version|0;
 $structsize = $structsize|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $client_data = 0, $err = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $version;
 $2 = $structsize;
 $3 = $0;
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ($5|0)!=(90);
 if ($6) {
  $7 = $0;
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 20|0);
  HEAP32[$9>>2] = 13;
  $10 = $0;
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 24|0);
  HEAP32[$12>>2] = 90;
  $13 = $1;
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 24|0);
  $17 = (($16) + 4|0);
  HEAP32[$17>>2] = $13;
  $18 = $0;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  FUNCTION_TABLE_vi[$20 & 511]($21);
 }
 $22 = $2;
 $23 = ($22|0)!=(488);
 if ($23) {
  $24 = $0;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 20|0);
  HEAP32[$26>>2] = 22;
  $27 = $0;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 24|0);
  HEAP32[$29>>2] = 488;
  $30 = $2;
  $31 = $0;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 24|0);
  $34 = (($33) + 4|0);
  HEAP32[$34>>2] = $30;
  $35 = $0;
  $36 = HEAP32[$35>>2]|0;
  $37 = HEAP32[$36>>2]|0;
  $38 = $0;
  FUNCTION_TABLE_vi[$37 & 511]($38);
 }
 $39 = $0;
 $40 = HEAP32[$39>>2]|0;
 $err = $40;
 $41 = $0;
 $42 = (($41) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $client_data = $43;
 $44 = $0;
 _memset(($44|0),0,488)|0;
 $45 = $err;
 $46 = $0;
 HEAP32[$46>>2] = $45;
 $47 = $client_data;
 $48 = $0;
 $49 = (($48) + 12|0);
 HEAP32[$49>>2] = $47;
 $50 = $0;
 $51 = (($50) + 16|0);
 HEAP32[$51>>2] = 1;
 $52 = $0;
 _jinit_memory_mgr($52);
 $53 = $0;
 $54 = (($53) + 8|0);
 HEAP32[$54>>2] = 0;
 $55 = $0;
 $56 = (($55) + 24|0);
 HEAP32[$56>>2] = 0;
 $i = 0;
 while(1) {
  $57 = $i;
  $58 = ($57|0)<(4);
  if (!($58)) {
   break;
  }
  $59 = $i;
  $60 = $0;
  $61 = (($60) + 164|0);
  $62 = (($61) + ($59<<2)|0);
  HEAP32[$62>>2] = 0;
  $63 = $i;
  $64 = (($63) + 1)|0;
  $i = $64;
 }
 $i = 0;
 while(1) {
  $65 = $i;
  $66 = ($65|0)<(4);
  if (!($66)) {
   break;
  }
  $67 = $i;
  $68 = $0;
  $69 = (($68) + 180|0);
  $70 = (($69) + ($67<<2)|0);
  HEAP32[$70>>2] = 0;
  $71 = $i;
  $72 = $0;
  $73 = (($72) + 196|0);
  $74 = (($73) + ($71<<2)|0);
  HEAP32[$74>>2] = 0;
  $75 = $i;
  $76 = (($75) + 1)|0;
  $i = $76;
 }
 $77 = $0;
 $78 = (($77) + 312|0);
 HEAP32[$78>>2] = 0;
 $79 = $0;
 _jinit_marker_reader($79);
 $80 = $0;
 _jinit_input_controller($80);
 $81 = $0;
 $82 = (($81) + 20|0);
 HEAP32[$82>>2] = 200;
 STACKTOP = sp;return;
}
function _jpeg_destroy_decompress($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 _jpeg_destroy($1);
 STACKTOP = sp;return;
}
function _jpeg_abort_decompress($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 _jpeg_abort($1);
 STACKTOP = sp;return;
}
function _jpeg_read_header($cinfo,$require_image) {
 $cinfo = $cinfo|0;
 $require_image = $require_image|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retcode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $require_image;
 $2 = $0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(200);
 if ($5) {
  $6 = $0;
  $7 = (($6) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(201);
  if ($9) {
   $10 = $0;
   $11 = HEAP32[$10>>2]|0;
   $12 = (($11) + 20|0);
   HEAP32[$12>>2] = 21;
   $13 = $0;
   $14 = (($13) + 20|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $0;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + 24|0);
   HEAP32[$18>>2] = $15;
   $19 = $0;
   $20 = HEAP32[$19>>2]|0;
   $21 = HEAP32[$20>>2]|0;
   $22 = $0;
   FUNCTION_TABLE_vi[$21 & 511]($22);
  }
 }
 $23 = $0;
 $24 = (_jpeg_consume_input($23)|0);
 $retcode = $24;
 $25 = $retcode;
 if ((($25|0) == 0)) {
  $36 = $retcode;
  STACKTOP = sp;return ($36|0);
 } else if ((($25|0) == 2)) {
  $26 = $1;
  $27 = ($26|0)!=(0);
  if ($27) {
   $28 = $0;
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 20|0);
   HEAP32[$30>>2] = 53;
   $31 = $0;
   $32 = HEAP32[$31>>2]|0;
   $33 = HEAP32[$32>>2]|0;
   $34 = $0;
   FUNCTION_TABLE_vi[$33 & 511]($34);
  }
  $35 = $0;
  _jpeg_abort($35);
  $retcode = 2;
  $36 = $retcode;
  STACKTOP = sp;return ($36|0);
 } else if ((($25|0) == 1)) {
  $retcode = 1;
  $36 = $retcode;
  STACKTOP = sp;return ($36|0);
 } else {
  $36 = $retcode;
  STACKTOP = sp;return ($36|0);
 }
 return 0|0;
}
function _jpeg_consume_input($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $retcode = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $retcode = 0;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 switch ($3|0) {
 case 201:  {
  break;
 }
 case 200:  {
  $4 = $0;
  $5 = (($4) + 460|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $0;
  FUNCTION_TABLE_vi[$8 & 511]($9);
  $10 = $0;
  $11 = (($10) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  FUNCTION_TABLE_vi[$14 & 511]($15);
  $16 = $0;
  $17 = (($16) + 20|0);
  HEAP32[$17>>2] = 201;
  break;
 }
 case 210: case 208: case 207: case 206: case 205: case 204: case 203:  {
  $29 = $0;
  $30 = (($29) + 460|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = HEAP32[$31>>2]|0;
  $33 = $0;
  $34 = (FUNCTION_TABLE_ii[$32 & 255]($33)|0);
  $retcode = $34;
  $48 = $retcode;
  STACKTOP = sp;return ($48|0);
  break;
 }
 case 202:  {
  $retcode = 1;
  $48 = $retcode;
  STACKTOP = sp;return ($48|0);
  break;
 }
 default: {
  $35 = $0;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 20|0);
  HEAP32[$37>>2] = 21;
  $38 = $0;
  $39 = (($38) + 20|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $0;
  $42 = HEAP32[$41>>2]|0;
  $43 = (($42) + 24|0);
  HEAP32[$43>>2] = $40;
  $44 = $0;
  $45 = HEAP32[$44>>2]|0;
  $46 = HEAP32[$45>>2]|0;
  $47 = $0;
  FUNCTION_TABLE_vi[$46 & 511]($47);
  $48 = $retcode;
  STACKTOP = sp;return ($48|0);
 }
 }
 $18 = $0;
 $19 = (($18) + 460|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = HEAP32[$20>>2]|0;
 $22 = $0;
 $23 = (FUNCTION_TABLE_ii[$21 & 255]($22)|0);
 $retcode = $23;
 $24 = $retcode;
 $25 = ($24|0)==(1);
 if ($25) {
  $26 = $0;
  _default_decompress_parms($26);
  $27 = $0;
  $28 = (($27) + 20|0);
  HEAP32[$28>>2] = 202;
 }
 $48 = $retcode;
 STACKTOP = sp;return ($48|0);
}
function _default_decompress_parms($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_mp = 0, $cid0 = 0, $cid1 = 0, $cid2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 if ((($3|0) == 3)) {
  $8 = $0;
  $9 = (($8) + 216|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = HEAP32[$10>>2]|0;
  $cid0 = $11;
  $12 = $0;
  $13 = (($12) + 216|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 88|0);
  $16 = HEAP32[$15>>2]|0;
  $cid1 = $16;
  $17 = $0;
  $18 = (($17) + 216|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + 176|0);
  $21 = HEAP32[$20>>2]|0;
  $cid2 = $21;
  $22 = $cid0;
  $23 = ($22|0)==(1);
  if ($23) {
   $24 = $cid1;
   $25 = ($24|0)==(2);
   if ($25) {
    $26 = $cid2;
    $27 = ($26|0)==(3);
    if ($27) {
     $28 = $0;
     $29 = (($28) + 40|0);
     HEAP32[$29>>2] = 3;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   $30 = $cid0;
   $31 = ($30|0)==(1);
   if ($31) {
    $32 = $cid1;
    $33 = ($32|0)==(34);
    if ($33) {
     $34 = $cid2;
     $35 = ($34|0)==(35);
     if ($35) {
      $36 = $0;
      $37 = (($36) + 40|0);
      HEAP32[$37>>2] = 7;
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
   if ((label|0) == 11) {
    $38 = $cid0;
    $39 = ($38|0)==(82);
    if ($39) {
     $40 = $cid1;
     $41 = ($40|0)==(71);
     if ($41) {
      $42 = $cid2;
      $43 = ($42|0)==(66);
      if ($43) {
       $44 = $0;
       $45 = (($44) + 40|0);
       HEAP32[$45>>2] = 2;
      } else {
       label = 15;
      }
     } else {
      label = 15;
     }
    } else {
     label = 15;
    }
    if ((label|0) == 15) {
     $46 = $cid0;
     $47 = ($46|0)==(114);
     if ($47) {
      $48 = $cid1;
      $49 = ($48|0)==(103);
      if ($49) {
       $50 = $cid2;
       $51 = ($50|0)==(98);
       if ($51) {
        $52 = $0;
        $53 = (($52) + 40|0);
        HEAP32[$53>>2] = 6;
       } else {
        label = 19;
       }
      } else {
       label = 19;
      }
     } else {
      label = 19;
     }
     if ((label|0) == 19) {
      $54 = $0;
      $55 = (($54) + 284|0);
      $56 = HEAP32[$55>>2]|0;
      $57 = ($56|0)!=(0);
      if ($57) {
       $58 = $0;
       $59 = (($58) + 40|0);
       HEAP32[$59>>2] = 3;
      } else {
       $60 = $0;
       $61 = (($60) + 296|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($62|0)!=(0);
       if ($63) {
        $64 = $0;
        $65 = (($64) + 300|0);
        $66 = HEAP8[$65>>0]|0;
        $67 = $66&255;
        if ((($67|0) == 0)) {
         $68 = $0;
         $69 = (($68) + 40|0);
         HEAP32[$69>>2] = 2;
        } else if ((($67|0) == 1)) {
         $70 = $0;
         $71 = (($70) + 40|0);
         HEAP32[$71>>2] = 3;
        } else {
         $72 = $0;
         $73 = HEAP32[$72>>2]|0;
         $74 = (($73) + 20|0);
         HEAP32[$74>>2] = 116;
         $75 = $0;
         $76 = (($75) + 300|0);
         $77 = HEAP8[$76>>0]|0;
         $78 = $77&255;
         $79 = $0;
         $80 = HEAP32[$79>>2]|0;
         $81 = (($80) + 24|0);
         HEAP32[$81>>2] = $78;
         $82 = $0;
         $83 = HEAP32[$82>>2]|0;
         $84 = (($83) + 4|0);
         $85 = HEAP32[$84>>2]|0;
         $86 = $0;
         FUNCTION_TABLE_vii[$85 & 511]($86,-1);
         $87 = $0;
         $88 = (($87) + 40|0);
         HEAP32[$88>>2] = 3;
        }
       } else {
        $89 = $0;
        $90 = HEAP32[$89>>2]|0;
        $91 = (($90) + 24|0);
        $_mp = $91;
        $92 = $cid0;
        $93 = $_mp;
        HEAP32[$93>>2] = $92;
        $94 = $cid1;
        $95 = $_mp;
        $96 = (($95) + 4|0);
        HEAP32[$96>>2] = $94;
        $97 = $cid2;
        $98 = $_mp;
        $99 = (($98) + 8|0);
        HEAP32[$99>>2] = $97;
        $100 = $0;
        $101 = HEAP32[$100>>2]|0;
        $102 = (($101) + 20|0);
        HEAP32[$102>>2] = 113;
        $103 = $0;
        $104 = HEAP32[$103>>2]|0;
        $105 = (($104) + 4|0);
        $106 = HEAP32[$105>>2]|0;
        $107 = $0;
        FUNCTION_TABLE_vii[$106 & 511]($107,1);
        $108 = $0;
        $109 = (($108) + 40|0);
        HEAP32[$109>>2] = 3;
       }
      }
     }
    }
   }
  }
  $110 = $0;
  $111 = (($110) + 44|0);
  HEAP32[$111>>2] = 2;
 } else if ((($3|0) == 1)) {
  $4 = $0;
  $5 = (($4) + 40|0);
  HEAP32[$5>>2] = 1;
  $6 = $0;
  $7 = (($6) + 44|0);
  HEAP32[$7>>2] = 1;
 } else if ((($3|0) == 4)) {
  $112 = $0;
  $113 = (($112) + 296|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114|0)!=(0);
  if ($115) {
   $116 = $0;
   $117 = (($116) + 300|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   if ((($119|0) == 2)) {
    $122 = $0;
    $123 = (($122) + 40|0);
    HEAP32[$123>>2] = 5;
   } else if ((($119|0) == 0)) {
    $120 = $0;
    $121 = (($120) + 40|0);
    HEAP32[$121>>2] = 4;
   } else {
    $124 = $0;
    $125 = HEAP32[$124>>2]|0;
    $126 = (($125) + 20|0);
    HEAP32[$126>>2] = 116;
    $127 = $0;
    $128 = (($127) + 300|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = $0;
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + 24|0);
    HEAP32[$133>>2] = $130;
    $134 = $0;
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $0;
    FUNCTION_TABLE_vii[$137 & 511]($138,-1);
    $139 = $0;
    $140 = (($139) + 40|0);
    HEAP32[$140>>2] = 5;
   }
  } else {
   $141 = $0;
   $142 = (($141) + 40|0);
   HEAP32[$142>>2] = 4;
  }
  $143 = $0;
  $144 = (($143) + 44|0);
  HEAP32[$144>>2] = 4;
 } else {
  $145 = $0;
  $146 = (($145) + 40|0);
  HEAP32[$146>>2] = 0;
  $147 = $0;
  $148 = (($147) + 44|0);
  HEAP32[$148>>2] = 0;
 }
 $149 = $0;
 $150 = (($149) + 428|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $0;
 $153 = (($152) + 48|0);
 HEAP32[$153>>2] = $151;
 $154 = $0;
 $155 = (($154) + 428|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = $0;
 $158 = (($157) + 52|0);
 HEAP32[$158>>2] = $156;
 $159 = $0;
 $160 = (($159) + 56|0);
 HEAPF64[$160>>3] = 1.0;
 $161 = $0;
 $162 = (($161) + 64|0);
 HEAP32[$162>>2] = 0;
 $163 = $0;
 $164 = (($163) + 68|0);
 HEAP32[$164>>2] = 0;
 $165 = $0;
 $166 = (($165) + 72|0);
 HEAP32[$166>>2] = 0;
 $167 = $0;
 $168 = (($167) + 76|0);
 HEAP32[$168>>2] = 1;
 $169 = $0;
 $170 = (($169) + 80|0);
 HEAP32[$170>>2] = 1;
 $171 = $0;
 $172 = (($171) + 84|0);
 HEAP32[$172>>2] = 0;
 $173 = $0;
 $174 = (($173) + 88|0);
 HEAP32[$174>>2] = 2;
 $175 = $0;
 $176 = (($175) + 92|0);
 HEAP32[$176>>2] = 1;
 $177 = $0;
 $178 = (($177) + 96|0);
 HEAP32[$178>>2] = 256;
 $179 = $0;
 $180 = (($179) + 136|0);
 HEAP32[$180>>2] = 0;
 $181 = $0;
 $182 = (($181) + 100|0);
 HEAP32[$182>>2] = 0;
 $183 = $0;
 $184 = (($183) + 104|0);
 HEAP32[$184>>2] = 0;
 $185 = $0;
 $186 = (($185) + 108|0);
 HEAP32[$186>>2] = 0;
 STACKTOP = sp;return;
}
function _jpeg_finish_decompress($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(205);
 if ($5) {
  label = 3;
 } else {
  $6 = $1;
  $7 = (($6) + 20|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(206);
  if ($9) {
   label = 3;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 3) {
  $10 = $1;
  $11 = (($10) + 64|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0);
  if ($13) {
   label = 7;
  } else {
   $14 = $1;
   $15 = (($14) + 140|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $1;
   $18 = (($17) + 116|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($16>>>0)<($19>>>0);
   if ($20) {
    $21 = $1;
    $22 = HEAP32[$21>>2]|0;
    $23 = (($22) + 20|0);
    HEAP32[$23>>2] = 69;
    $24 = $1;
    $25 = HEAP32[$24>>2]|0;
    $26 = HEAP32[$25>>2]|0;
    $27 = $1;
    FUNCTION_TABLE_vi[$26 & 511]($27);
   }
   $28 = $1;
   $29 = (($28) + 444|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $1;
   FUNCTION_TABLE_vi[$32 & 511]($33);
   $34 = $1;
   $35 = (($34) + 20|0);
   HEAP32[$35>>2] = 210;
  }
 }
 if ((label|0) == 7) {
  $36 = $1;
  $37 = (($36) + 20|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(207);
  if ($39) {
   $40 = $1;
   $41 = (($40) + 20|0);
   HEAP32[$41>>2] = 210;
  } else {
   $42 = $1;
   $43 = (($42) + 20|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)!=(210);
   if ($45) {
    $46 = $1;
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + 20|0);
    HEAP32[$48>>2] = 21;
    $49 = $1;
    $50 = (($49) + 20|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = $1;
    $53 = HEAP32[$52>>2]|0;
    $54 = (($53) + 24|0);
    HEAP32[$54>>2] = $51;
    $55 = $1;
    $56 = HEAP32[$55>>2]|0;
    $57 = HEAP32[$56>>2]|0;
    $58 = $1;
    FUNCTION_TABLE_vi[$57 & 511]($58);
   }
  }
 }
 while(1) {
  $59 = $1;
  $60 = (($59) + 460|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 20|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = ($63|0)!=(0);
  $65 = $64 ^ 1;
  if (!($65)) {
   label = 18;
   break;
  }
  $66 = $1;
  $67 = (($66) + 460|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[$68>>2]|0;
  $70 = $1;
  $71 = (FUNCTION_TABLE_ii[$69 & 255]($70)|0);
  $72 = ($71|0)==(0);
  if ($72) {
   label = 16;
   break;
  }
 }
 if ((label|0) == 16) {
  $0 = 0;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 else if ((label|0) == 18) {
  $73 = $1;
  $74 = (($73) + 24|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + 24|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $1;
  FUNCTION_TABLE_vi[$77 & 511]($78);
  $79 = $1;
  _jpeg_abort($79);
  $0 = 1;
  $80 = $0;
  STACKTOP = sp;return ($80|0);
 }
 return 0|0;
}
function _jpeg_start_decompress($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $retcode = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(202);
 do {
  if ($5) {
   $6 = $1;
   _jinit_master_decompress($6);
   $7 = $1;
   $8 = (($7) + 64|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)!=(0);
   if (!($10)) {
    $13 = $1;
    $14 = (($13) + 20|0);
    HEAP32[$14>>2] = 203;
    break;
   }
   $11 = $1;
   $12 = (($11) + 20|0);
   HEAP32[$12>>2] = 207;
   $0 = 1;
   $97 = $0;
   STACKTOP = sp;return ($97|0);
  }
 } while(0);
 $15 = $1;
 $16 = (($15) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(203);
 if ($18) {
  $19 = $1;
  $20 = (($19) + 460|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (($21) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0);
  do {
   if ($24) {
    while(1) {
     $25 = $1;
     $26 = (($25) + 8|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = ($27|0)!=(0|0);
     if ($28) {
      $29 = $1;
      $30 = (($29) + 8|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = HEAP32[$31>>2]|0;
      $33 = $1;
      FUNCTION_TABLE_vi[$32 & 511]($33);
     }
     $34 = $1;
     $35 = (($34) + 460|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = HEAP32[$36>>2]|0;
     $38 = $1;
     $39 = (FUNCTION_TABLE_ii[$37 & 255]($38)|0);
     $retcode = $39;
     $40 = $retcode;
     $41 = ($40|0)==(0);
     if ($41) {
      label = 11;
      break;
     }
     $42 = $retcode;
     $43 = ($42|0)==(2);
     if ($43) {
      label = 13;
      break;
     }
     $44 = $1;
     $45 = (($44) + 8|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)!=(0|0);
     do {
      if ($47) {
       $48 = $retcode;
       $49 = ($48|0)==(3);
       if (!($49)) {
        $50 = $retcode;
        $51 = ($50|0)==(1);
        if (!($51)) {
         break;
        }
       }
       $52 = $1;
       $53 = (($52) + 8|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = (($54) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = (($56) + 1)|0;
       HEAP32[$55>>2] = $57;
       $58 = $1;
       $59 = (($58) + 8|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = (($60) + 8|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($57|0)>=($62|0);
       if ($63) {
        $64 = $1;
        $65 = (($64) + 332|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = $1;
        $68 = (($67) + 8|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = (($69) + 8|0);
        $71 = HEAP32[$70>>2]|0;
        $72 = (($71) + ($66))|0;
        HEAP32[$70>>2] = $72;
       }
      }
     } while(0);
    }
    if ((label|0) == 11) {
     $0 = 0;
     $97 = $0;
     STACKTOP = sp;return ($97|0);
    }
    else if ((label|0) == 13) {
     break;
    }
   }
  } while(0);
  $73 = $1;
  $74 = (($73) + 144|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $1;
  $77 = (($76) + 152|0);
  HEAP32[$77>>2] = $75;
 } else {
  $78 = $1;
  $79 = (($78) + 20|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ($80|0)!=(204);
  if ($81) {
   $82 = $1;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) + 20|0);
   HEAP32[$84>>2] = 21;
   $85 = $1;
   $86 = (($85) + 20|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $1;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + 24|0);
   HEAP32[$90>>2] = $87;
   $91 = $1;
   $92 = HEAP32[$91>>2]|0;
   $93 = HEAP32[$92>>2]|0;
   $94 = $1;
   FUNCTION_TABLE_vi[$93 & 511]($94);
  }
 }
 $95 = $1;
 $96 = (_output_pass_setup($95)|0);
 $0 = $96;
 $97 = $0;
 STACKTOP = sp;return ($97|0);
}
function _output_pass_setup($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $last_scanline = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(204);
 if ($5) {
  $6 = $1;
  $7 = (($6) + 444|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  FUNCTION_TABLE_vi[$9 & 511]($10);
  $11 = $1;
  $12 = (($11) + 140|0);
  HEAP32[$12>>2] = 0;
  $13 = $1;
  $14 = (($13) + 20|0);
  HEAP32[$14>>2] = 204;
 }
 L4: while(1) {
  $15 = $1;
  $16 = (($15) + 444|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   label = 13;
   break;
  }
  while(1) {
   $21 = $1;
   $22 = (($21) + 140|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $1;
   $25 = (($24) + 116|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($23>>>0)<($26>>>0);
   if (!($27)) {
    break;
   }
   $28 = $1;
   $29 = (($28) + 8|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0|0);
   if ($31) {
    $32 = $1;
    $33 = (($32) + 140|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $1;
    $36 = (($35) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + 4|0);
    HEAP32[$38>>2] = $34;
    $39 = $1;
    $40 = (($39) + 116|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $1;
    $43 = (($42) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) + 8|0);
    HEAP32[$45>>2] = $41;
    $46 = $1;
    $47 = (($46) + 8|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = HEAP32[$48>>2]|0;
    $50 = $1;
    FUNCTION_TABLE_vi[$49 & 511]($50);
   }
   $51 = $1;
   $52 = (($51) + 140|0);
   $53 = HEAP32[$52>>2]|0;
   $last_scanline = $53;
   $54 = $1;
   $55 = (($54) + 448|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $1;
   $60 = $1;
   $61 = (($60) + 140|0);
   FUNCTION_TABLE_viiii[$58 & 511]($59,0,$61,0);
   $62 = $1;
   $63 = (($62) + 140|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $last_scanline;
   $66 = ($64|0)==($65|0);
   if ($66) {
    label = 10;
    break L4;
   }
  }
  $67 = $1;
  $68 = (($67) + 444|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = $1;
  FUNCTION_TABLE_vi[$71 & 511]($72);
  $73 = $1;
  $74 = (($73) + 444|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = HEAP32[$75>>2]|0;
  $77 = $1;
  FUNCTION_TABLE_vi[$76 & 511]($77);
  $78 = $1;
  $79 = (($78) + 140|0);
  HEAP32[$79>>2] = 0;
 }
 if ((label|0) == 10) {
  $0 = 0;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 else if ((label|0) == 13) {
  $80 = $1;
  $81 = (($80) + 68|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(0);
  $84 = $83 ? 206 : 205;
  $85 = $1;
  $86 = (($85) + 20|0);
  HEAP32[$86>>2] = $84;
  $0 = 1;
  $87 = $0;
  STACKTOP = sp;return ($87|0);
 }
 return 0|0;
}
function _jpeg_read_scanlines($cinfo,$scanlines,$max_lines) {
 $cinfo = $cinfo|0;
 $scanlines = $scanlines|0;
 $max_lines = $max_lines|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $row_ctr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $row_ctr = sp;
 $1 = $cinfo;
 $2 = $scanlines;
 $3 = $max_lines;
 $4 = $1;
 $5 = (($4) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(205);
 if ($7) {
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 20|0);
  HEAP32[$10>>2] = 21;
  $11 = $1;
  $12 = (($11) + 20|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 24|0);
  HEAP32[$16>>2] = $13;
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  FUNCTION_TABLE_vi[$19 & 511]($20);
 }
 $21 = $1;
 $22 = (($21) + 140|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = (($24) + 116|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($23>>>0)>=($26>>>0);
 if ($27) {
  $28 = $1;
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 20|0);
  HEAP32[$30>>2] = 126;
  $31 = $1;
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $1;
  FUNCTION_TABLE_vii[$34 & 511]($35,-1);
  $0 = 0;
  $73 = $0;
  STACKTOP = sp;return ($73|0);
 }
 $36 = $1;
 $37 = (($36) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if ($39) {
  $40 = $1;
  $41 = (($40) + 140|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $1;
  $44 = (($43) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 4|0);
  HEAP32[$46>>2] = $42;
  $47 = $1;
  $48 = (($47) + 116|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $1;
  $51 = (($50) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + 8|0);
  HEAP32[$53>>2] = $49;
  $54 = $1;
  $55 = (($54) + 8|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = HEAP32[$56>>2]|0;
  $58 = $1;
  FUNCTION_TABLE_vi[$57 & 511]($58);
 }
 HEAP32[$row_ctr>>2] = 0;
 $59 = $1;
 $60 = (($59) + 448|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = (($61) + 4|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = $1;
 $65 = $2;
 $66 = $3;
 FUNCTION_TABLE_viiii[$63 & 511]($64,$65,$row_ctr,$66);
 $67 = HEAP32[$row_ctr>>2]|0;
 $68 = $1;
 $69 = (($68) + 140|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + ($67))|0;
 HEAP32[$69>>2] = $71;
 $72 = HEAP32[$row_ctr>>2]|0;
 $0 = $72;
 $73 = $0;
 STACKTOP = sp;return ($73|0);
}
function _jinit_arith_decoder($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ci = 0, $coef_bit_ptr = 0, $entropy = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,192)|0);
 $entropy = $6;
 $7 = $entropy;
 $8 = $0;
 $9 = (($8) + 468|0);
 HEAP32[$9>>2] = $7;
 $10 = $entropy;
 HEAP32[$10>>2] = 134;
 $11 = $entropy;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 135;
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = ($13|0)<(16);
  if (!($14)) {
   break;
  }
  $15 = $i;
  $16 = $entropy;
  $17 = (($16) + 60|0);
  $18 = (($17) + ($15<<2)|0);
  HEAP32[$18>>2] = 0;
  $19 = $i;
  $20 = $entropy;
  $21 = (($20) + 124|0);
  $22 = (($21) + ($19<<2)|0);
  HEAP32[$22>>2] = 0;
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 $25 = $entropy;
 $26 = (($25) + 188|0);
 HEAP8[$26>>0] = 113;
 $27 = $0;
 $28 = (($27) + 224|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $0;
 $32 = (($31) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = $0;
 $36 = $0;
 $37 = (($36) + 36|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38<<6;
 $40 = $39<<2;
 $41 = (FUNCTION_TABLE_iiii[$34 & 511]($35,1,$40)|0);
 $42 = $0;
 $43 = (($42) + 160|0);
 HEAP32[$43>>2] = $41;
 $44 = $0;
 $45 = (($44) + 160|0);
 $46 = HEAP32[$45>>2]|0;
 $coef_bit_ptr = $46;
 $ci = 0;
 while(1) {
  $47 = $ci;
  $48 = $0;
  $49 = (($48) + 36|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($47|0)<($50|0);
  if (!($51)) {
   break;
  }
  $i = 0;
  while(1) {
   $52 = $i;
   $53 = ($52|0)<(64);
   if (!($53)) {
    break;
   }
   $54 = $coef_bit_ptr;
   $55 = (($54) + 4|0);
   $coef_bit_ptr = $55;
   HEAP32[$54>>2] = -1;
   $56 = $i;
   $57 = (($56) + 1)|0;
   $i = $57;
  }
  $58 = $ci;
  $59 = (($58) + 1)|0;
  $ci = $59;
 }
 STACKTOP = sp;return;
}
function _start_pass27($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $cindex = 0, $coef_bit_ptr = 0, $coefi = 0, $compptr = 0, $entropy = 0, $expected = 0, $tbl = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 468|0);
 $3 = HEAP32[$2>>2]|0;
 $entropy = $3;
 $4 = $0;
 $5 = (($4) + 224|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $0;
  $9 = (($8) + 412|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  do {
   if ($11) {
    $12 = $0;
    $13 = (($12) + 416|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)!=(0);
    if ($15) {
     label = 18;
     break;
    } else {
     label = 12;
     break;
    }
   } else {
    $16 = $0;
    $17 = (($16) + 416|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $0;
    $20 = (($19) + 412|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($18|0)<($21|0);
    if (!($22)) {
     $23 = $0;
     $24 = (($23) + 416|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $0;
     $27 = (($26) + 436|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($25|0)>($28|0);
     if (!($29)) {
      $30 = $0;
      $31 = (($30) + 340|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($32|0)!=(1);
      if ($33) {
       label = 18;
       break;
      } else {
       label = 12;
       break;
      }
     }
    }
    label = 18;
   }
  } while(0);
  L16: do {
   if ((label|0) == 12) {
    $34 = $0;
    $35 = (($34) + 420|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)!=(0);
    do {
     if ($37) {
      $38 = $0;
      $39 = (($38) + 420|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (($40) - 1)|0;
      $42 = $0;
      $43 = (($42) + 424|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($41|0)!=($44|0);
      if ($45) {
       label = 18;
       break L16;
      } else {
       break;
      }
     }
    } while(0);
    $46 = $0;
    $47 = (($46) + 424|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)>(13);
    if ($49) {
     label = 18;
    }
   }
  } while(0);
  if ((label|0) == 18) {
   $50 = $0;
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 20|0);
   HEAP32[$52>>2] = 17;
   $53 = $0;
   $54 = (($53) + 412|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $0;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 24|0);
   HEAP32[$58>>2] = $55;
   $59 = $0;
   $60 = (($59) + 416|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $0;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + 24|0);
   $65 = (($64) + 4|0);
   HEAP32[$65>>2] = $61;
   $66 = $0;
   $67 = (($66) + 420|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $0;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 24|0);
   $72 = (($71) + 8|0);
   HEAP32[$72>>2] = $68;
   $73 = $0;
   $74 = (($73) + 424|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $0;
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + 24|0);
   $79 = (($78) + 12|0);
   HEAP32[$79>>2] = $75;
   $80 = $0;
   $81 = HEAP32[$80>>2]|0;
   $82 = HEAP32[$81>>2]|0;
   $83 = $0;
   FUNCTION_TABLE_vi[$82 & 511]($83);
  }
  $ci = 0;
  while(1) {
   $84 = $ci;
   $85 = $0;
   $86 = (($85) + 340|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($84|0)<($87|0);
   if (!($88)) {
    break;
   }
   $89 = $ci;
   $90 = $0;
   $91 = (($90) + 344|0);
   $92 = (($91) + ($89<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $cindex = $95;
   $96 = $cindex;
   $97 = $0;
   $98 = (($97) + 160|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($99) + ($96<<8)|0);
   $coef_bit_ptr = $100;
   $101 = $0;
   $102 = (($101) + 412|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)!=(0);
   if ($104) {
    $105 = $coef_bit_ptr;
    $106 = HEAP32[$105>>2]|0;
    $107 = ($106|0)<(0);
    if ($107) {
     $108 = $0;
     $109 = HEAP32[$108>>2]|0;
     $110 = (($109) + 20|0);
     HEAP32[$110>>2] = 118;
     $111 = $cindex;
     $112 = $0;
     $113 = HEAP32[$112>>2]|0;
     $114 = (($113) + 24|0);
     HEAP32[$114>>2] = $111;
     $115 = $0;
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + 24|0);
     $118 = (($117) + 4|0);
     HEAP32[$118>>2] = 0;
     $119 = $0;
     $120 = HEAP32[$119>>2]|0;
     $121 = (($120) + 4|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $0;
     FUNCTION_TABLE_vii[$122 & 511]($123,-1);
    }
   }
   $124 = $0;
   $125 = (($124) + 412|0);
   $126 = HEAP32[$125>>2]|0;
   $coefi = $126;
   while(1) {
    $127 = $coefi;
    $128 = $0;
    $129 = (($128) + 416|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($127|0)<=($130|0);
    if (!($131)) {
     break;
    }
    $132 = $coefi;
    $133 = $coef_bit_ptr;
    $134 = (($133) + ($132<<2)|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135|0)<(0);
    if ($136) {
     $141 = 0;
    } else {
     $137 = $coefi;
     $138 = $coef_bit_ptr;
     $139 = (($138) + ($137<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = $140;
    }
    $expected = $141;
    $142 = $0;
    $143 = (($142) + 420|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = $expected;
    $146 = ($144|0)!=($145|0);
    if ($146) {
     $147 = $0;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($148) + 20|0);
     HEAP32[$149>>2] = 118;
     $150 = $cindex;
     $151 = $0;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($152) + 24|0);
     HEAP32[$153>>2] = $150;
     $154 = $coefi;
     $155 = $0;
     $156 = HEAP32[$155>>2]|0;
     $157 = (($156) + 24|0);
     $158 = (($157) + 4|0);
     HEAP32[$158>>2] = $154;
     $159 = $0;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($160) + 4|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $0;
     FUNCTION_TABLE_vii[$162 & 511]($163,-1);
    }
    $164 = $0;
    $165 = (($164) + 424|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $coefi;
    $168 = $coef_bit_ptr;
    $169 = (($168) + ($167<<2)|0);
    HEAP32[$169>>2] = $166;
    $170 = $coefi;
    $171 = (($170) + 1)|0;
    $coefi = $171;
   }
   $172 = $ci;
   $173 = (($172) + 1)|0;
   $ci = $173;
  }
  $174 = $0;
  $175 = (($174) + 420|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($176|0)==(0);
  if ($177) {
   $178 = $0;
   $179 = (($178) + 412|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($180|0)==(0);
   if ($181) {
    $182 = $entropy;
    $183 = (($182) + 4|0);
    HEAP32[$183>>2] = 136;
   } else {
    $184 = $entropy;
    $185 = (($184) + 4|0);
    HEAP32[$185>>2] = 137;
   }
  } else {
   $186 = $0;
   $187 = (($186) + 412|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = ($188|0)==(0);
   if ($189) {
    $190 = $entropy;
    $191 = (($190) + 4|0);
    HEAP32[$191>>2] = 138;
   } else {
    $192 = $entropy;
    $193 = (($192) + 4|0);
    HEAP32[$193>>2] = 139;
   }
  }
 } else {
  $194 = $0;
  $195 = (($194) + 412|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ($196|0)!=(0);
  if ($197) {
   label = 50;
  } else {
   $198 = $0;
   $199 = (($198) + 420|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = ($200|0)!=(0);
   if ($201) {
    label = 50;
   } else {
    $202 = $0;
    $203 = (($202) + 424|0);
    $204 = HEAP32[$203>>2]|0;
    $205 = ($204|0)!=(0);
    if ($205) {
     label = 50;
    } else {
     $206 = $0;
     $207 = (($206) + 416|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)<(64);
     if ($209) {
      $210 = $0;
      $211 = (($210) + 416|0);
      $212 = HEAP32[$211>>2]|0;
      $213 = $0;
      $214 = (($213) + 436|0);
      $215 = HEAP32[$214>>2]|0;
      $216 = ($212|0)!=($215|0);
      if ($216) {
       label = 50;
      }
     }
    }
   }
  }
  if ((label|0) == 50) {
   $217 = $0;
   $218 = HEAP32[$217>>2]|0;
   $219 = (($218) + 20|0);
   HEAP32[$219>>2] = 125;
   $220 = $0;
   $221 = HEAP32[$220>>2]|0;
   $222 = (($221) + 4|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = $0;
   FUNCTION_TABLE_vii[$223 & 511]($224,-1);
  }
  $225 = $entropy;
  $226 = (($225) + 4|0);
  HEAP32[$226>>2] = 140;
 }
 $ci = 0;
 while(1) {
  $227 = $ci;
  $228 = $0;
  $229 = (($228) + 340|0);
  $230 = HEAP32[$229>>2]|0;
  $231 = ($227|0)<($230|0);
  if (!($231)) {
   break;
  }
  $232 = $ci;
  $233 = $0;
  $234 = (($233) + 344|0);
  $235 = (($234) + ($232<<2)|0);
  $236 = HEAP32[$235>>2]|0;
  $compptr = $236;
  $237 = $0;
  $238 = (($237) + 224|0);
  $239 = HEAP32[$238>>2]|0;
  $240 = ($239|0)!=(0);
  if ($240) {
   $241 = $0;
   $242 = (($241) + 412|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = ($243|0)==(0);
   if ($244) {
    $245 = $0;
    $246 = (($245) + 420|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     label = 57;
    }
   }
  } else {
   label = 57;
  }
  if ((label|0) == 57) {
   label = 0;
   $249 = $compptr;
   $250 = (($249) + 20|0);
   $251 = HEAP32[$250>>2]|0;
   $tbl = $251;
   $252 = $tbl;
   $253 = ($252|0)<(0);
   if ($253) {
    label = 59;
   } else {
    $254 = $tbl;
    $255 = ($254|0)>=(16);
    if ($255) {
     label = 59;
    }
   }
   if ((label|0) == 59) {
    label = 0;
    $256 = $0;
    $257 = HEAP32[$256>>2]|0;
    $258 = (($257) + 20|0);
    HEAP32[$258>>2] = 50;
    $259 = $tbl;
    $260 = $0;
    $261 = HEAP32[$260>>2]|0;
    $262 = (($261) + 24|0);
    HEAP32[$262>>2] = $259;
    $263 = $0;
    $264 = HEAP32[$263>>2]|0;
    $265 = HEAP32[$264>>2]|0;
    $266 = $0;
    FUNCTION_TABLE_vi[$265 & 511]($266);
   }
   $267 = $tbl;
   $268 = $entropy;
   $269 = (($268) + 60|0);
   $270 = (($269) + ($267<<2)|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = ($271|0)==(0|0);
   if ($272) {
    $273 = $0;
    $274 = (($273) + 4|0);
    $275 = HEAP32[$274>>2]|0;
    $276 = HEAP32[$275>>2]|0;
    $277 = $0;
    $278 = (FUNCTION_TABLE_iiii[$276 & 511]($277,1,64)|0);
    $279 = $tbl;
    $280 = $entropy;
    $281 = (($280) + 60|0);
    $282 = (($281) + ($279<<2)|0);
    HEAP32[$282>>2] = $278;
   }
   $283 = $tbl;
   $284 = $entropy;
   $285 = (($284) + 60|0);
   $286 = (($285) + ($283<<2)|0);
   $287 = HEAP32[$286>>2]|0;
   dest=$287+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $288 = $ci;
   $289 = $entropy;
   $290 = (($289) + 24|0);
   $291 = (($290) + ($288<<2)|0);
   HEAP32[$291>>2] = 0;
   $292 = $ci;
   $293 = $entropy;
   $294 = (($293) + 40|0);
   $295 = (($294) + ($292<<2)|0);
   HEAP32[$295>>2] = 0;
  }
  $296 = $0;
  $297 = (($296) + 224|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = ($298|0)!=(0);
  if ($299) {
   label = 65;
  } else {
   $300 = $0;
   $301 = (($300) + 436|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = ($302|0)!=(0);
   if ($303) {
    label = 67;
   } else {
    label = 65;
   }
  }
  if ((label|0) == 65) {
   label = 0;
   $304 = $0;
   $305 = (($304) + 224|0);
   $306 = HEAP32[$305>>2]|0;
   $307 = ($306|0)!=(0);
   if ($307) {
    $308 = $0;
    $309 = (($308) + 412|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = ($310|0)!=(0);
    if ($311) {
     label = 67;
    }
   }
  }
  if ((label|0) == 67) {
   label = 0;
   $312 = $compptr;
   $313 = (($312) + 24|0);
   $314 = HEAP32[$313>>2]|0;
   $tbl = $314;
   $315 = $tbl;
   $316 = ($315|0)<(0);
   if ($316) {
    label = 69;
   } else {
    $317 = $tbl;
    $318 = ($317|0)>=(16);
    if ($318) {
     label = 69;
    }
   }
   if ((label|0) == 69) {
    label = 0;
    $319 = $0;
    $320 = HEAP32[$319>>2]|0;
    $321 = (($320) + 20|0);
    HEAP32[$321>>2] = 50;
    $322 = $tbl;
    $323 = $0;
    $324 = HEAP32[$323>>2]|0;
    $325 = (($324) + 24|0);
    HEAP32[$325>>2] = $322;
    $326 = $0;
    $327 = HEAP32[$326>>2]|0;
    $328 = HEAP32[$327>>2]|0;
    $329 = $0;
    FUNCTION_TABLE_vi[$328 & 511]($329);
   }
   $330 = $tbl;
   $331 = $entropy;
   $332 = (($331) + 124|0);
   $333 = (($332) + ($330<<2)|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = ($334|0)==(0|0);
   if ($335) {
    $336 = $0;
    $337 = (($336) + 4|0);
    $338 = HEAP32[$337>>2]|0;
    $339 = HEAP32[$338>>2]|0;
    $340 = $0;
    $341 = (FUNCTION_TABLE_iiii[$339 & 511]($340,1,256)|0);
    $342 = $tbl;
    $343 = $entropy;
    $344 = (($343) + 124|0);
    $345 = (($344) + ($342<<2)|0);
    HEAP32[$345>>2] = $341;
   }
   $346 = $tbl;
   $347 = $entropy;
   $348 = (($347) + 124|0);
   $349 = (($348) + ($346<<2)|0);
   $350 = HEAP32[$349>>2]|0;
   _memset(($350|0),0,256)|0;
  }
  $351 = $ci;
  $352 = (($351) + 1)|0;
  $ci = $352;
 }
 $353 = $entropy;
 $354 = (($353) + 12|0);
 HEAP32[$354>>2] = 0;
 $355 = $entropy;
 $356 = (($355) + 16|0);
 HEAP32[$356>>2] = 0;
 $357 = $entropy;
 $358 = (($357) + 20|0);
 HEAP32[$358>>2] = -16;
 $359 = $0;
 $360 = (($359) + 280|0);
 $361 = HEAP32[$360>>2]|0;
 $362 = $entropy;
 $363 = (($362) + 56|0);
 HEAP32[$363>>2] = $361;
 STACKTOP = sp;return;
}
function _finish_pass28($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return;
}
function _decode_mcu_DC_first($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blkn = 0;
 var $block = 0, $ci = 0, $entropy = 0, $m = 0, $sign = 0, $st = 0, $tbl = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $cinfo;
 $2 = $MCU_data;
 $3 = $1;
 $4 = (($3) + 468|0);
 $5 = HEAP32[$4>>2]|0;
 $entropy = $5;
 $6 = $1;
 $7 = (($6) + 280|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $entropy;
  $11 = (($10) + 56|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = $1;
   _process_restart($14);
  }
  $15 = $entropy;
  $16 = (($15) + 56|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + -1)|0;
  HEAP32[$16>>2] = $18;
 }
 $19 = $entropy;
 $20 = (($19) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(-1);
 if ($22) {
  $0 = 1;
  $178 = $0;
  STACKTOP = sp;return ($178|0);
 }
 $blkn = 0;
 L11: while(1) {
  $23 = $blkn;
  $24 = $1;
  $25 = (($24) + 368|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($23|0)<($26|0);
  if (!($27)) {
   label = 34;
   break;
  }
  $28 = $blkn;
  $29 = $2;
  $30 = (($29) + ($28<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $block = $31;
  $32 = $blkn;
  $33 = $1;
  $34 = (($33) + 372|0);
  $35 = (($34) + ($32<<2)|0);
  $36 = HEAP32[$35>>2]|0;
  $ci = $36;
  $37 = $ci;
  $38 = $1;
  $39 = (($38) + 344|0);
  $40 = (($39) + ($37<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 20|0);
  $43 = HEAP32[$42>>2]|0;
  $tbl = $43;
  $44 = $tbl;
  $45 = $entropy;
  $46 = (($45) + 60|0);
  $47 = (($46) + ($44<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $ci;
  $50 = $entropy;
  $51 = (($50) + 40|0);
  $52 = (($51) + ($49<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($48) + ($53)|0);
  $st = $54;
  $55 = $1;
  $56 = $st;
  $57 = (_arith_decode($55,$56)|0);
  $58 = ($57|0)==(0);
  if ($58) {
   $59 = $ci;
   $60 = $entropy;
   $61 = (($60) + 40|0);
   $62 = (($61) + ($59<<2)|0);
   HEAP32[$62>>2] = 0;
  } else {
   $63 = $1;
   $64 = $st;
   $65 = (($64) + 1|0);
   $66 = (_arith_decode($63,$65)|0);
   $sign = $66;
   $67 = $st;
   $68 = (($67) + 2|0);
   $st = $68;
   $69 = $sign;
   $70 = $st;
   $71 = (($70) + ($69)|0);
   $st = $71;
   $72 = $1;
   $73 = $st;
   $74 = (_arith_decode($72,$73)|0);
   $m = $74;
   $75 = ($74|0)!=(0);
   if ($75) {
    $76 = $tbl;
    $77 = $entropy;
    $78 = (($77) + 60|0);
    $79 = (($78) + ($76<<2)|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + 20|0);
    $st = $81;
    while(1) {
     $82 = $1;
     $83 = $st;
     $84 = (_arith_decode($82,$83)|0);
     $85 = ($84|0)!=(0);
     if (!($85)) {
      break;
     }
     $86 = $m;
     $87 = $86 << 1;
     $m = $87;
     $88 = ($87|0)==(32768);
     if ($88) {
      label = 15;
      break L11;
     }
     $99 = $st;
     $100 = (($99) + 1|0);
     $st = $100;
    }
   }
   $101 = $m;
   $102 = $tbl;
   $103 = $1;
   $104 = (($103) + 232|0);
   $105 = (($104) + ($102)|0);
   $106 = HEAP8[$105>>0]|0;
   $107 = $106&255;
   $108 = 1 << $107;
   $109 = $108 >> 1;
   $110 = ($101|0)<($109|0);
   if ($110) {
    $111 = $ci;
    $112 = $entropy;
    $113 = (($112) + 40|0);
    $114 = (($113) + ($111<<2)|0);
    HEAP32[$114>>2] = 0;
   } else {
    $115 = $m;
    $116 = $tbl;
    $117 = $1;
    $118 = (($117) + 248|0);
    $119 = (($118) + ($116)|0);
    $120 = HEAP8[$119>>0]|0;
    $121 = $120&255;
    $122 = 1 << $121;
    $123 = $122 >> 1;
    $124 = ($115|0)>($123|0);
    if ($124) {
     $125 = $sign;
     $126 = $125<<2;
     $127 = (12 + ($126))|0;
     $128 = $ci;
     $129 = $entropy;
     $130 = (($129) + 40|0);
     $131 = (($130) + ($128<<2)|0);
     HEAP32[$131>>2] = $127;
    } else {
     $132 = $sign;
     $133 = $132<<2;
     $134 = (4 + ($133))|0;
     $135 = $ci;
     $136 = $entropy;
     $137 = (($136) + 40|0);
     $138 = (($137) + ($135<<2)|0);
     HEAP32[$138>>2] = $134;
    }
   }
   $139 = $m;
   $v = $139;
   $140 = $st;
   $141 = (($140) + 14|0);
   $st = $141;
   while(1) {
    $142 = $m;
    $143 = $142 >> 1;
    $m = $143;
    $144 = ($143|0)!=(0);
    if (!($144)) {
     break;
    }
    $145 = $1;
    $146 = $st;
    $147 = (_arith_decode($145,$146)|0);
    $148 = ($147|0)!=(0);
    if ($148) {
     $149 = $m;
     $150 = $v;
     $151 = $150 | $149;
     $v = $151;
    }
   }
   $152 = $v;
   $153 = (($152) + 1)|0;
   $v = $153;
   $154 = $sign;
   $155 = ($154|0)!=(0);
   if ($155) {
    $156 = $v;
    $157 = (0 - ($156))|0;
    $v = $157;
   }
   $158 = $v;
   $159 = $ci;
   $160 = $entropy;
   $161 = (($160) + 24|0);
   $162 = (($161) + ($159<<2)|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($163) + ($158))|0;
   HEAP32[$162>>2] = $164;
  }
  $165 = $ci;
  $166 = $entropy;
  $167 = (($166) + 24|0);
  $168 = (($167) + ($165<<2)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $1;
  $171 = (($170) + 424|0);
  $172 = HEAP32[$171>>2]|0;
  $173 = $169 << $172;
  $174 = $173&65535;
  $175 = $block;
  HEAP16[$175>>1] = $174;
  $176 = $blkn;
  $177 = (($176) + 1)|0;
  $blkn = $177;
 }
 if ((label|0) == 15) {
  $89 = $1;
  $90 = HEAP32[$89>>2]|0;
  $91 = (($90) + 20|0);
  HEAP32[$91>>2] = 117;
  $92 = $1;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $1;
  FUNCTION_TABLE_vii[$95 & 511]($96,-1);
  $97 = $entropy;
  $98 = (($97) + 20|0);
  HEAP32[$98>>2] = -1;
  $0 = 1;
  $178 = $0;
  STACKTOP = sp;return ($178|0);
 }
 else if ((label|0) == 34) {
  $0 = 1;
  $178 = $0;
  STACKTOP = sp;return ($178|0);
 }
 return 0|0;
}
function _decode_mcu_AC_first($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $block = 0, $entropy = 0, $k = 0, $m = 0, $natural_order = 0, $sign = 0, $st = 0, $tbl = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $cinfo;
 $2 = $MCU_data;
 $3 = $1;
 $4 = (($3) + 468|0);
 $5 = HEAP32[$4>>2]|0;
 $entropy = $5;
 $6 = $1;
 $7 = (($6) + 280|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $entropy;
  $11 = (($10) + 56|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = $1;
   _process_restart($14);
  }
  $15 = $entropy;
  $16 = (($15) + 56|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + -1)|0;
  HEAP32[$16>>2] = $18;
 }
 $19 = $entropy;
 $20 = (($19) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(-1);
 if ($22) {
  $0 = 1;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 $23 = $1;
 $24 = (($23) + 432|0);
 $25 = HEAP32[$24>>2]|0;
 $natural_order = $25;
 $26 = $2;
 $27 = HEAP32[$26>>2]|0;
 $block = $27;
 $28 = $1;
 $29 = (($28) + 344|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 $tbl = $32;
 $33 = $1;
 $34 = (($33) + 412|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) - 1)|0;
 $k = $36;
 L11: while(1) {
  $37 = $tbl;
  $38 = $entropy;
  $39 = (($38) + 124|0);
  $40 = (($39) + ($37<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $k;
  $43 = ($42*3)|0;
  $44 = (($41) + ($43)|0);
  $st = $44;
  $45 = $1;
  $46 = $st;
  $47 = (_arith_decode($45,$46)|0);
  $48 = ($47|0)!=(0);
  if ($48) {
   label = 9;
   break;
  }
  while(1) {
   $49 = $k;
   $50 = (($49) + 1)|0;
   $k = $50;
   $51 = $1;
   $52 = $st;
   $53 = (($52) + 1|0);
   $54 = (_arith_decode($51,$53)|0);
   $55 = ($54|0)!=(0);
   if ($55) {
    break;
   }
   $56 = $st;
   $57 = (($56) + 3|0);
   $st = $57;
   $58 = $k;
   $59 = $1;
   $60 = (($59) + 416|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($58|0)>=($61|0);
   if ($62) {
    label = 14;
    break L11;
   }
  }
  $73 = $1;
  $74 = $entropy;
  $75 = (($74) + 188|0);
  $76 = (_arith_decode($73,$75)|0);
  $sign = $76;
  $77 = $st;
  $78 = (($77) + 2|0);
  $st = $78;
  $79 = $1;
  $80 = $st;
  $81 = (_arith_decode($79,$80)|0);
  $m = $81;
  $82 = ($81|0)!=(0);
  if ($82) {
   $83 = $1;
   $84 = $st;
   $85 = (_arith_decode($83,$84)|0);
   $86 = ($85|0)!=(0);
   if ($86) {
    $87 = $m;
    $88 = $87 << 1;
    $m = $88;
    $89 = $tbl;
    $90 = $entropy;
    $91 = (($90) + 124|0);
    $92 = (($91) + ($89<<2)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = $k;
    $95 = $tbl;
    $96 = $1;
    $97 = (($96) + 264|0);
    $98 = (($97) + ($95)|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = ($94|0)<=($100|0);
    $102 = $101 ? 189 : 217;
    $103 = (($93) + ($102)|0);
    $st = $103;
    while(1) {
     $104 = $1;
     $105 = $st;
     $106 = (_arith_decode($104,$105)|0);
     $107 = ($106|0)!=(0);
     if (!($107)) {
      break;
     }
     $108 = $m;
     $109 = $108 << 1;
     $m = $109;
     $110 = ($109|0)==(32768);
     if ($110) {
      label = 21;
      break L11;
     }
     $121 = $st;
     $122 = (($121) + 1|0);
     $st = $122;
    }
   }
  }
  $123 = $m;
  $v = $123;
  $124 = $st;
  $125 = (($124) + 14|0);
  $st = $125;
  while(1) {
   $126 = $m;
   $127 = $126 >> 1;
   $m = $127;
   $128 = ($127|0)!=(0);
   if (!($128)) {
    break;
   }
   $129 = $1;
   $130 = $st;
   $131 = (_arith_decode($129,$130)|0);
   $132 = ($131|0)!=(0);
   if ($132) {
    $133 = $m;
    $134 = $v;
    $135 = $134 | $133;
    $v = $135;
   }
  }
  $136 = $v;
  $137 = (($136) + 1)|0;
  $v = $137;
  $138 = $sign;
  $139 = ($138|0)!=(0);
  if ($139) {
   $140 = $v;
   $141 = (0 - ($140))|0;
   $v = $141;
  }
  $142 = $v;
  $143 = $1;
  $144 = (($143) + 424|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $142 << $145;
  $147 = $146&65535;
  $148 = $k;
  $149 = $natural_order;
  $150 = (($149) + ($148<<2)|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = $block;
  $153 = (($152) + ($151<<1)|0);
  HEAP16[$153>>1] = $147;
  $154 = $k;
  $155 = $1;
  $156 = (($155) + 416|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = ($154|0)<($157|0);
  if (!($158)) {
   break;
  }
 }
 if ((label|0) == 9) {
 }
 else if ((label|0) == 14) {
  $63 = $1;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + 20|0);
  HEAP32[$65>>2] = 117;
  $66 = $1;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $1;
  FUNCTION_TABLE_vii[$69 & 511]($70,-1);
  $71 = $entropy;
  $72 = (($71) + 20|0);
  HEAP32[$72>>2] = -1;
  $0 = 1;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 else if ((label|0) == 21) {
  $111 = $1;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + 20|0);
  HEAP32[$113>>2] = 117;
  $114 = $1;
  $115 = HEAP32[$114>>2]|0;
  $116 = (($115) + 4|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $1;
  FUNCTION_TABLE_vii[$117 & 511]($118,-1);
  $119 = $entropy;
  $120 = (($119) + 20|0);
  HEAP32[$120>>2] = -1;
  $0 = 1;
  $159 = $0;
  STACKTOP = sp;return ($159|0);
 }
 $0 = 1;
 $159 = $0;
 STACKTOP = sp;return ($159|0);
}
function _decode_mcu_DC_refine($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blkn = 0, $entropy = 0, $p1 = 0, $st = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $MCU_data;
 $2 = $0;
 $3 = (($2) + 468|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $0;
 $6 = (($5) + 280|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $entropy;
  $10 = (($9) + 56|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0);
  if ($12) {
   $13 = $0;
   _process_restart($13);
  }
  $14 = $entropy;
  $15 = (($14) + 56|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + -1)|0;
  HEAP32[$15>>2] = $17;
 }
 $18 = $entropy;
 $19 = (($18) + 188|0);
 $st = $19;
 $20 = $0;
 $21 = (($20) + 424|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = 1 << $22;
 $p1 = $23;
 $blkn = 0;
 while(1) {
  $24 = $blkn;
  $25 = $0;
  $26 = (($25) + 368|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($24|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $0;
  $30 = $st;
  $31 = (_arith_decode($29,$30)|0);
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $p1;
   $34 = $blkn;
   $35 = $1;
   $36 = (($35) + ($34<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = HEAP16[$37>>1]|0;
   $39 = $38 << 16 >> 16;
   $40 = $39 | $33;
   $41 = $40&65535;
   HEAP16[$37>>1] = $41;
  }
  $42 = $blkn;
  $43 = (($42) + 1)|0;
  $blkn = $43;
 }
 STACKTOP = sp;return 1;
}
function _decode_mcu_AC_refine($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0, $entropy = 0, $k = 0, $kex = 0, $m1 = 0, $natural_order = 0, $p1 = 0, $st = 0, $tbl = 0, $thiscoef = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $cinfo;
 $2 = $MCU_data;
 $3 = $1;
 $4 = (($3) + 468|0);
 $5 = HEAP32[$4>>2]|0;
 $entropy = $5;
 $6 = $1;
 $7 = (($6) + 280|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $entropy;
  $11 = (($10) + 56|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = $1;
   _process_restart($14);
  }
  $15 = $entropy;
  $16 = (($15) + 56|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + -1)|0;
  HEAP32[$16>>2] = $18;
 }
 $19 = $entropy;
 $20 = (($19) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(-1);
 if ($22) {
  $0 = 1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $23 = $1;
 $24 = (($23) + 432|0);
 $25 = HEAP32[$24>>2]|0;
 $natural_order = $25;
 $26 = $2;
 $27 = HEAP32[$26>>2]|0;
 $block = $27;
 $28 = $1;
 $29 = (($28) + 344|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 $tbl = $32;
 $33 = $1;
 $34 = (($33) + 424|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = 1 << $35;
 $p1 = $36;
 $37 = $1;
 $38 = (($37) + 424|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = -1 << $39;
 $m1 = $40;
 $41 = $1;
 $42 = (($41) + 416|0);
 $43 = HEAP32[$42>>2]|0;
 $kex = $43;
 while(1) {
  $44 = $kex;
  $45 = $natural_order;
  $46 = (($45) + ($44<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $block;
  $49 = (($48) + ($47<<1)|0);
  $50 = HEAP16[$49>>1]|0;
  $51 = ($50<<16>>16)!=(0);
  if ($51) {
   label = 9;
   break;
  }
  $52 = $kex;
  $53 = (($52) + -1)|0;
  $kex = $53;
  $54 = ($53|0)!=(0);
  if (!($54)) {
   break;
  }
 }
 if ((label|0) == 9) {
 }
 $55 = $1;
 $56 = (($55) + 412|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = (($57) - 1)|0;
 $k = $58;
 L18: while(1) {
  $59 = $tbl;
  $60 = $entropy;
  $61 = (($60) + 124|0);
  $62 = (($61) + ($59<<2)|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $k;
  $65 = ($64*3)|0;
  $66 = (($63) + ($65)|0);
  $st = $66;
  $67 = $k;
  $68 = $kex;
  $69 = ($67|0)>=($68|0);
  if ($69) {
   $70 = $1;
   $71 = $st;
   $72 = (_arith_decode($70,$71)|0);
   $73 = ($72|0)!=(0);
   if ($73) {
    label = 15;
    break;
   }
  }
  while(1) {
   $74 = $block;
   $75 = $k;
   $76 = (($75) + 1)|0;
   $k = $76;
   $77 = $natural_order;
   $78 = (($77) + ($76<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($74) + ($79<<1)|0);
   $thiscoef = $80;
   $81 = $thiscoef;
   $82 = HEAP16[$81>>1]|0;
   $83 = ($82<<16>>16)!=(0);
   if ($83) {
    label = 19;
    break;
   }
   $105 = $1;
   $106 = $st;
   $107 = (($106) + 1|0);
   $108 = (_arith_decode($105,$107)|0);
   $109 = ($108|0)!=(0);
   if ($109) {
    label = 26;
    break;
   }
   $121 = $st;
   $122 = (($121) + 3|0);
   $st = $122;
   $123 = $k;
   $124 = $1;
   $125 = (($124) + 416|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = ($123|0)>=($126|0);
   if ($127) {
    label = 31;
    break L18;
   }
  }
  if ((label|0) == 19) {
   label = 0;
   $84 = $1;
   $85 = $st;
   $86 = (($85) + 2|0);
   $87 = (_arith_decode($84,$86)|0);
   $88 = ($87|0)!=(0);
   if ($88) {
    $89 = $thiscoef;
    $90 = HEAP16[$89>>1]|0;
    $91 = $90 << 16 >> 16;
    $92 = ($91|0)<(0);
    if ($92) {
     $93 = $m1;
     $94 = $thiscoef;
     $95 = HEAP16[$94>>1]|0;
     $96 = $95 << 16 >> 16;
     $97 = (($96) + ($93))|0;
     $98 = $97&65535;
     HEAP16[$94>>1] = $98;
    } else {
     $99 = $p1;
     $100 = $thiscoef;
     $101 = HEAP16[$100>>1]|0;
     $102 = $101 << 16 >> 16;
     $103 = (($102) + ($99))|0;
     $104 = $103&65535;
     HEAP16[$100>>1] = $104;
    }
   }
  }
  else if ((label|0) == 26) {
   label = 0;
   $110 = $1;
   $111 = $entropy;
   $112 = (($111) + 188|0);
   $113 = (_arith_decode($110,$112)|0);
   $114 = ($113|0)!=(0);
   if ($114) {
    $115 = $m1;
    $116 = $115&65535;
    $117 = $thiscoef;
    HEAP16[$117>>1] = $116;
   } else {
    $118 = $p1;
    $119 = $118&65535;
    $120 = $thiscoef;
    HEAP16[$120>>1] = $119;
   }
  }
  $138 = $k;
  $139 = $1;
  $140 = (($139) + 416|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = ($138|0)<($141|0);
  if (!($142)) {
   break;
  }
 }
 if ((label|0) == 15) {
 }
 else if ((label|0) == 31) {
  $128 = $1;
  $129 = HEAP32[$128>>2]|0;
  $130 = (($129) + 20|0);
  HEAP32[$130>>2] = 117;
  $131 = $1;
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + 4|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $1;
  FUNCTION_TABLE_vii[$134 & 511]($135,-1);
  $136 = $entropy;
  $137 = (($136) + 20|0);
  HEAP32[$137>>2] = -1;
  $0 = 1;
  $143 = $0;
  STACKTOP = sp;return ($143|0);
 }
 $0 = 1;
 $143 = $0;
 STACKTOP = sp;return ($143|0);
}
function _decode_mcu($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blkn = 0, $block = 0, $ci = 0, $compptr = 0, $entropy = 0, $k = 0, $m = 0, $natural_order = 0, $sign = 0, $st = 0, $tbl = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $cinfo;
 $2 = $MCU_data;
 $3 = $1;
 $4 = (($3) + 468|0);
 $5 = HEAP32[$4>>2]|0;
 $entropy = $5;
 $6 = $1;
 $7 = (($6) + 280|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $entropy;
  $11 = (($10) + 56|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = $1;
   _process_restart($14);
  }
  $15 = $entropy;
  $16 = (($15) + 56|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + -1)|0;
  HEAP32[$16>>2] = $18;
 }
 $19 = $entropy;
 $20 = (($19) + 20|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)==(-1);
 if ($22) {
  $0 = 1;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 }
 $23 = $1;
 $24 = (($23) + 432|0);
 $25 = HEAP32[$24>>2]|0;
 $natural_order = $25;
 $blkn = 0;
 L11: while(1) {
  $26 = $blkn;
  $27 = $1;
  $28 = (($27) + 368|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)<($29|0);
  if (!($30)) {
   label = 63;
   break;
  }
  $31 = $blkn;
  $32 = $2;
  $33 = (($32) + ($31<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $block = $34;
  $35 = $blkn;
  $36 = $1;
  $37 = (($36) + 372|0);
  $38 = (($37) + ($35<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $ci = $39;
  $40 = $ci;
  $41 = $1;
  $42 = (($41) + 344|0);
  $43 = (($42) + ($40<<2)|0);
  $44 = HEAP32[$43>>2]|0;
  $compptr = $44;
  $45 = $compptr;
  $46 = (($45) + 20|0);
  $47 = HEAP32[$46>>2]|0;
  $tbl = $47;
  $48 = $tbl;
  $49 = $entropy;
  $50 = (($49) + 60|0);
  $51 = (($50) + ($48<<2)|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $ci;
  $54 = $entropy;
  $55 = (($54) + 40|0);
  $56 = (($55) + ($53<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($52) + ($57)|0);
  $st = $58;
  $59 = $1;
  $60 = $st;
  $61 = (_arith_decode($59,$60)|0);
  $62 = ($61|0)==(0);
  if ($62) {
   $63 = $ci;
   $64 = $entropy;
   $65 = (($64) + 40|0);
   $66 = (($65) + ($63<<2)|0);
   HEAP32[$66>>2] = 0;
  } else {
   $67 = $1;
   $68 = $st;
   $69 = (($68) + 1|0);
   $70 = (_arith_decode($67,$69)|0);
   $sign = $70;
   $71 = $st;
   $72 = (($71) + 2|0);
   $st = $72;
   $73 = $sign;
   $74 = $st;
   $75 = (($74) + ($73)|0);
   $st = $75;
   $76 = $1;
   $77 = $st;
   $78 = (_arith_decode($76,$77)|0);
   $m = $78;
   $79 = ($78|0)!=(0);
   if ($79) {
    $80 = $tbl;
    $81 = $entropy;
    $82 = (($81) + 60|0);
    $83 = (($82) + ($80<<2)|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + 20|0);
    $st = $85;
    while(1) {
     $86 = $1;
     $87 = $st;
     $88 = (_arith_decode($86,$87)|0);
     $89 = ($88|0)!=(0);
     if (!($89)) {
      break;
     }
     $90 = $m;
     $91 = $90 << 1;
     $m = $91;
     $92 = ($91|0)==(32768);
     if ($92) {
      label = 15;
      break L11;
     }
     $103 = $st;
     $104 = (($103) + 1|0);
     $st = $104;
    }
   }
   $105 = $m;
   $106 = $tbl;
   $107 = $1;
   $108 = (($107) + 232|0);
   $109 = (($108) + ($106)|0);
   $110 = HEAP8[$109>>0]|0;
   $111 = $110&255;
   $112 = 1 << $111;
   $113 = $112 >> 1;
   $114 = ($105|0)<($113|0);
   if ($114) {
    $115 = $ci;
    $116 = $entropy;
    $117 = (($116) + 40|0);
    $118 = (($117) + ($115<<2)|0);
    HEAP32[$118>>2] = 0;
   } else {
    $119 = $m;
    $120 = $tbl;
    $121 = $1;
    $122 = (($121) + 248|0);
    $123 = (($122) + ($120)|0);
    $124 = HEAP8[$123>>0]|0;
    $125 = $124&255;
    $126 = 1 << $125;
    $127 = $126 >> 1;
    $128 = ($119|0)>($127|0);
    if ($128) {
     $129 = $sign;
     $130 = $129<<2;
     $131 = (12 + ($130))|0;
     $132 = $ci;
     $133 = $entropy;
     $134 = (($133) + 40|0);
     $135 = (($134) + ($132<<2)|0);
     HEAP32[$135>>2] = $131;
    } else {
     $136 = $sign;
     $137 = $136<<2;
     $138 = (4 + ($137))|0;
     $139 = $ci;
     $140 = $entropy;
     $141 = (($140) + 40|0);
     $142 = (($141) + ($139<<2)|0);
     HEAP32[$142>>2] = $138;
    }
   }
   $143 = $m;
   $v = $143;
   $144 = $st;
   $145 = (($144) + 14|0);
   $st = $145;
   while(1) {
    $146 = $m;
    $147 = $146 >> 1;
    $m = $147;
    $148 = ($147|0)!=(0);
    if (!($148)) {
     break;
    }
    $149 = $1;
    $150 = $st;
    $151 = (_arith_decode($149,$150)|0);
    $152 = ($151|0)!=(0);
    if ($152) {
     $153 = $m;
     $154 = $v;
     $155 = $154 | $153;
     $v = $155;
    }
   }
   $156 = $v;
   $157 = (($156) + 1)|0;
   $v = $157;
   $158 = $sign;
   $159 = ($158|0)!=(0);
   if ($159) {
    $160 = $v;
    $161 = (0 - ($160))|0;
    $v = $161;
   }
   $162 = $v;
   $163 = $ci;
   $164 = $entropy;
   $165 = (($164) + 24|0);
   $166 = (($165) + ($163<<2)|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + ($162))|0;
   HEAP32[$166>>2] = $168;
  }
  $169 = $ci;
  $170 = $entropy;
  $171 = (($170) + 24|0);
  $172 = (($171) + ($169<<2)|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $173&65535;
  $175 = $block;
  HEAP16[$175>>1] = $174;
  $176 = $1;
  $177 = (($176) + 436|0);
  $178 = HEAP32[$177>>2]|0;
  $179 = ($178|0)==(0);
  if ($179) {
  } else {
   $180 = $compptr;
   $181 = (($180) + 24|0);
   $182 = HEAP32[$181>>2]|0;
   $tbl = $182;
   $k = 0;
   while(1) {
    $183 = $tbl;
    $184 = $entropy;
    $185 = (($184) + 124|0);
    $186 = (($185) + ($183<<2)|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = $k;
    $189 = ($188*3)|0;
    $190 = (($187) + ($189)|0);
    $st = $190;
    $191 = $1;
    $192 = $st;
    $193 = (_arith_decode($191,$192)|0);
    $194 = ($193|0)!=(0);
    if ($194) {
     label = 36;
     break;
    }
    while(1) {
     $195 = $k;
     $196 = (($195) + 1)|0;
     $k = $196;
     $197 = $1;
     $198 = $st;
     $199 = (($198) + 1|0);
     $200 = (_arith_decode($197,$199)|0);
     $201 = ($200|0)!=(0);
     if ($201) {
      break;
     }
     $202 = $st;
     $203 = (($202) + 3|0);
     $st = $203;
     $204 = $k;
     $205 = $1;
     $206 = (($205) + 436|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($204|0)>=($207|0);
     if ($208) {
      label = 41;
      break L11;
     }
    }
    $219 = $1;
    $220 = $entropy;
    $221 = (($220) + 188|0);
    $222 = (_arith_decode($219,$221)|0);
    $sign = $222;
    $223 = $st;
    $224 = (($223) + 2|0);
    $st = $224;
    $225 = $1;
    $226 = $st;
    $227 = (_arith_decode($225,$226)|0);
    $m = $227;
    $228 = ($227|0)!=(0);
    if ($228) {
     $229 = $1;
     $230 = $st;
     $231 = (_arith_decode($229,$230)|0);
     $232 = ($231|0)!=(0);
     if ($232) {
      $233 = $m;
      $234 = $233 << 1;
      $m = $234;
      $235 = $tbl;
      $236 = $entropy;
      $237 = (($236) + 124|0);
      $238 = (($237) + ($235<<2)|0);
      $239 = HEAP32[$238>>2]|0;
      $240 = $k;
      $241 = $tbl;
      $242 = $1;
      $243 = (($242) + 264|0);
      $244 = (($243) + ($241)|0);
      $245 = HEAP8[$244>>0]|0;
      $246 = $245&255;
      $247 = ($240|0)<=($246|0);
      $248 = $247 ? 189 : 217;
      $249 = (($239) + ($248)|0);
      $st = $249;
      while(1) {
       $250 = $1;
       $251 = $st;
       $252 = (_arith_decode($250,$251)|0);
       $253 = ($252|0)!=(0);
       if (!($253)) {
        break;
       }
       $254 = $m;
       $255 = $254 << 1;
       $m = $255;
       $256 = ($255|0)==(32768);
       if ($256) {
        label = 48;
        break L11;
       }
       $267 = $st;
       $268 = (($267) + 1|0);
       $st = $268;
      }
     }
    }
    $269 = $m;
    $v = $269;
    $270 = $st;
    $271 = (($270) + 14|0);
    $st = $271;
    while(1) {
     $272 = $m;
     $273 = $272 >> 1;
     $m = $273;
     $274 = ($273|0)!=(0);
     if (!($274)) {
      break;
     }
     $275 = $1;
     $276 = $st;
     $277 = (_arith_decode($275,$276)|0);
     $278 = ($277|0)!=(0);
     if ($278) {
      $279 = $m;
      $280 = $v;
      $281 = $280 | $279;
      $v = $281;
     }
    }
    $282 = $v;
    $283 = (($282) + 1)|0;
    $v = $283;
    $284 = $sign;
    $285 = ($284|0)!=(0);
    if ($285) {
     $286 = $v;
     $287 = (0 - ($286))|0;
     $v = $287;
    }
    $288 = $v;
    $289 = $288&65535;
    $290 = $k;
    $291 = $natural_order;
    $292 = (($291) + ($290<<2)|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $block;
    $295 = (($294) + ($293<<1)|0);
    HEAP16[$295>>1] = $289;
    $296 = $k;
    $297 = $1;
    $298 = (($297) + 436|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = ($296|0)<($299|0);
    if (!($300)) {
     break;
    }
   }
   if ((label|0) == 36) {
    label = 0;
   }
  }
  $301 = $blkn;
  $302 = (($301) + 1)|0;
  $blkn = $302;
 }
 if ((label|0) == 15) {
  $93 = $1;
  $94 = HEAP32[$93>>2]|0;
  $95 = (($94) + 20|0);
  HEAP32[$95>>2] = 117;
  $96 = $1;
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + 4|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = $1;
  FUNCTION_TABLE_vii[$99 & 511]($100,-1);
  $101 = $entropy;
  $102 = (($101) + 20|0);
  HEAP32[$102>>2] = -1;
  $0 = 1;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 }
 else if ((label|0) == 41) {
  $209 = $1;
  $210 = HEAP32[$209>>2]|0;
  $211 = (($210) + 20|0);
  HEAP32[$211>>2] = 117;
  $212 = $1;
  $213 = HEAP32[$212>>2]|0;
  $214 = (($213) + 4|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = $1;
  FUNCTION_TABLE_vii[$215 & 511]($216,-1);
  $217 = $entropy;
  $218 = (($217) + 20|0);
  HEAP32[$218>>2] = -1;
  $0 = 1;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 }
 else if ((label|0) == 48) {
  $257 = $1;
  $258 = HEAP32[$257>>2]|0;
  $259 = (($258) + 20|0);
  HEAP32[$259>>2] = 117;
  $260 = $1;
  $261 = HEAP32[$260>>2]|0;
  $262 = (($261) + 4|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = $1;
  FUNCTION_TABLE_vii[$263 & 511]($264,-1);
  $265 = $entropy;
  $266 = (($265) + 20|0);
  HEAP32[$266>>2] = -1;
  $0 = 1;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 }
 else if ((label|0) == 63) {
  $0 = 1;
  $303 = $0;
  STACKTOP = sp;return ($303|0);
 }
 return 0|0;
}
function _process_restart($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $ci = 0, $compptr = 0, $entropy = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 468|0);
 $3 = HEAP32[$2>>2]|0;
 $entropy = $3;
 $4 = $0;
 $5 = (($4) + 464|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = (FUNCTION_TABLE_ii[$8 & 255]($9)|0);
 $11 = ($10|0)!=(0);
 if (!($11)) {
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 20|0);
  HEAP32[$14>>2] = 25;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  FUNCTION_TABLE_vi[$17 & 511]($18);
 }
 $ci = 0;
 while(1) {
  $19 = $ci;
  $20 = $0;
  $21 = (($20) + 340|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($19|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = $ci;
  $25 = $0;
  $26 = (($25) + 344|0);
  $27 = (($26) + ($24<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $compptr = $28;
  $29 = $0;
  $30 = (($29) + 224|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)!=(0);
  if ($32) {
   $33 = $0;
   $34 = (($33) + 412|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $37 = $0;
    $38 = (($37) + 420|0);
    $39 = HEAP32[$38>>2]|0;
    $40 = ($39|0)==(0);
    if ($40) {
     label = 8;
    }
   }
  } else {
   label = 8;
  }
  if ((label|0) == 8) {
   label = 0;
   $41 = $compptr;
   $42 = (($41) + 20|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $entropy;
   $45 = (($44) + 60|0);
   $46 = (($45) + ($43<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   dest=$47+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $48 = $ci;
   $49 = $entropy;
   $50 = (($49) + 24|0);
   $51 = (($50) + ($48<<2)|0);
   HEAP32[$51>>2] = 0;
   $52 = $ci;
   $53 = $entropy;
   $54 = (($53) + 40|0);
   $55 = (($54) + ($52<<2)|0);
   HEAP32[$55>>2] = 0;
  }
  $56 = $0;
  $57 = (($56) + 224|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)!=(0);
  if ($59) {
   label = 11;
  } else {
   $60 = $0;
   $61 = (($60) + 436|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)!=(0);
   if ($63) {
    label = 13;
   } else {
    label = 11;
   }
  }
  if ((label|0) == 11) {
   label = 0;
   $64 = $0;
   $65 = (($64) + 224|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = ($66|0)!=(0);
   if ($67) {
    $68 = $0;
    $69 = (($68) + 412|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)!=(0);
    if ($71) {
     label = 13;
    }
   }
  }
  if ((label|0) == 13) {
   label = 0;
   $72 = $compptr;
   $73 = (($72) + 24|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $entropy;
   $76 = (($75) + 124|0);
   $77 = (($76) + ($74<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   _memset(($78|0),0,256)|0;
  }
  $79 = $ci;
  $80 = (($79) + 1)|0;
  $ci = $80;
 }
 $81 = $entropy;
 $82 = (($81) + 12|0);
 HEAP32[$82>>2] = 0;
 $83 = $entropy;
 $84 = (($83) + 16|0);
 HEAP32[$84>>2] = 0;
 $85 = $entropy;
 $86 = (($85) + 20|0);
 HEAP32[$86>>2] = -16;
 $87 = $0;
 $88 = (($87) + 280|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $entropy;
 $91 = (($90) + 56|0);
 HEAP32[$91>>2] = $89;
 STACKTOP = sp;return;
}
function _arith_decode($cinfo,$st) {
 $cinfo = $cinfo|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data = 0, $e = 0, $nl = 0, $nm = 0, $qe = 0, $sv = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $st;
 $2 = $0;
 $3 = (($2) + 468|0);
 $4 = HEAP32[$3>>2]|0;
 $e = $4;
 while(1) {
  $5 = $e;
  $6 = (($5) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)<(32768);
  if (!($8)) {
   break;
  }
  $9 = $e;
  $10 = (($9) + 20|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + -1)|0;
  HEAP32[$10>>2] = $12;
  $13 = ($12|0)<(0);
  if ($13) {
   $14 = $0;
   $15 = (($14) + 440|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($16|0)!=(0);
   if ($17) {
    $data = 0;
   } else {
    $18 = $0;
    $19 = (_get_byte($18)|0);
    $data = $19;
    $20 = $data;
    $21 = ($20|0)==(255);
    if ($21) {
     while(1) {
      $22 = $0;
      $23 = (_get_byte($22)|0);
      $data = $23;
      $24 = $data;
      $25 = ($24|0)==(255);
      if (!($25)) {
       break;
      }
     }
     $26 = $data;
     $27 = ($26|0)==(0);
     if ($27) {
      $data = 255;
     } else {
      $28 = $data;
      $29 = $0;
      $30 = (($29) + 440|0);
      HEAP32[$30>>2] = $28;
      $data = 0;
     }
    }
   }
   $31 = $e;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $33 << 8;
   $35 = $data;
   $36 = $34 | $35;
   $37 = $e;
   $38 = (($37) + 12|0);
   HEAP32[$38>>2] = $36;
   $39 = $e;
   $40 = (($39) + 20|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 8)|0;
   HEAP32[$40>>2] = $42;
   $43 = ($42|0)<(0);
   if ($43) {
    $44 = $e;
    $45 = (($44) + 20|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + 1)|0;
    HEAP32[$45>>2] = $47;
    $48 = ($47|0)==(0);
    if ($48) {
     $49 = $e;
     $50 = (($49) + 16|0);
     HEAP32[$50>>2] = 32768;
    }
   }
  }
  $51 = $e;
  $52 = (($51) + 16|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $53 << 1;
  HEAP32[$52>>2] = $54;
 }
 $55 = $1;
 $56 = HEAP8[$55>>0]|0;
 $57 = $56&255;
 $sv = $57;
 $58 = $sv;
 $59 = $58 & 127;
 $60 = (272 + ($59<<2)|0);
 $61 = HEAPU8[$60>>0]|(HEAPU8[$60+1>>0]<<8)|(HEAPU8[$60+2>>0]<<16)|(HEAPU8[$60+3>>0]<<24);
 $qe = $61;
 $62 = $qe;
 $63 = $62 & 255;
 $64 = $63&255;
 $nl = $64;
 $65 = $qe;
 $66 = $65 >> 8;
 $qe = $66;
 $67 = $qe;
 $68 = $67 & 255;
 $69 = $68&255;
 $nm = $69;
 $70 = $qe;
 $71 = $70 >> 8;
 $qe = $71;
 $72 = $e;
 $73 = (($72) + 16|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = $qe;
 $76 = (($74) - ($75))|0;
 $temp = $76;
 $77 = $temp;
 $78 = $e;
 $79 = (($78) + 16|0);
 HEAP32[$79>>2] = $77;
 $80 = $e;
 $81 = (($80) + 20|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $temp;
 $84 = $83 << $82;
 $temp = $84;
 $85 = $e;
 $86 = (($85) + 12|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $temp;
 $89 = ($87|0)>=($88|0);
 if ($89) {
  $90 = $temp;
  $91 = $e;
  $92 = (($91) + 12|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) - ($90))|0;
  HEAP32[$92>>2] = $94;
  $95 = $e;
  $96 = (($95) + 16|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $qe;
  $99 = ($97|0)<($98|0);
  if ($99) {
   $100 = $qe;
   $101 = $e;
   $102 = (($101) + 16|0);
   HEAP32[$102>>2] = $100;
   $103 = $sv;
   $104 = $103 & 128;
   $105 = $nm;
   $106 = $105&255;
   $107 = $104 ^ $106;
   $108 = $107&255;
   $109 = $1;
   HEAP8[$109>>0] = $108;
  } else {
   $110 = $qe;
   $111 = $e;
   $112 = (($111) + 16|0);
   HEAP32[$112>>2] = $110;
   $113 = $sv;
   $114 = $113 & 128;
   $115 = $nl;
   $116 = $115&255;
   $117 = $114 ^ $116;
   $118 = $117&255;
   $119 = $1;
   HEAP8[$119>>0] = $118;
   $120 = $sv;
   $121 = $120 ^ 128;
   $sv = $121;
  }
  $147 = $sv;
  $148 = $147 >> 7;
  STACKTOP = sp;return ($148|0);
 }
 $122 = $e;
 $123 = (($122) + 16|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)<(32768);
 if ($125) {
  $126 = $e;
  $127 = (($126) + 16|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $qe;
  $130 = ($128|0)<($129|0);
  if ($130) {
   $131 = $sv;
   $132 = $131 & 128;
   $133 = $nl;
   $134 = $133&255;
   $135 = $132 ^ $134;
   $136 = $135&255;
   $137 = $1;
   HEAP8[$137>>0] = $136;
   $138 = $sv;
   $139 = $138 ^ 128;
   $sv = $139;
  } else {
   $140 = $sv;
   $141 = $140 & 128;
   $142 = $nm;
   $143 = $142&255;
   $144 = $141 ^ $143;
   $145 = $144&255;
   $146 = $1;
   HEAP8[$146>>0] = $145;
  }
 }
 $147 = $sv;
 $148 = $147 >> 7;
 STACKTOP = sp;return ($148|0);
}
function _get_byte($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $src = $3;
 $4 = $src;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = $src;
  $9 = (($8) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  $12 = (FUNCTION_TABLE_ii[$10 & 255]($11)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   $14 = $0;
   $15 = HEAP32[$14>>2]|0;
   $16 = (($15) + 20|0);
   HEAP32[$16>>2] = 25;
   $17 = $0;
   $18 = HEAP32[$17>>2]|0;
   $19 = HEAP32[$18>>2]|0;
   $20 = $0;
   FUNCTION_TABLE_vi[$19 & 511]($20);
  }
 }
 $21 = $src;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + -1)|0;
 HEAP32[$22>>2] = $24;
 $25 = $src;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($26) + 1|0);
 HEAP32[$25>>2] = $27;
 $28 = HEAP8[$26>>0]|0;
 $29 = $28&255;
 STACKTOP = sp;return ($29|0);
}
function _jpeg_stdio_dest($cinfo,$outfile) {
 $cinfo = $cinfo|0;
 $outfile = $outfile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $outfile;
 $2 = $0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = $0;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = (FUNCTION_TABLE_iiii[$9 & 511]($10,0,28)|0);
  $12 = $0;
  $13 = (($12) + 24|0);
  HEAP32[$13>>2] = $11;
 }
 $14 = $0;
 $15 = (($14) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $dest = $16;
 $17 = $dest;
 $18 = (($17) + 8|0);
 HEAP32[$18>>2] = 141;
 $19 = $dest;
 $20 = (($19) + 12|0);
 HEAP32[$20>>2] = 142;
 $21 = $dest;
 $22 = (($21) + 16|0);
 HEAP32[$22>>2] = 143;
 $23 = $1;
 $24 = $dest;
 $25 = (($24) + 20|0);
 HEAP32[$25>>2] = $23;
 STACKTOP = sp;return;
}
function _init_destination($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $dest = $3;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (FUNCTION_TABLE_iiii[$7 & 511]($8,1,4096)|0);
 $10 = $dest;
 $11 = (($10) + 24|0);
 HEAP32[$11>>2] = $9;
 $12 = $dest;
 $13 = (($12) + 24|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $dest;
 HEAP32[$15>>2] = $14;
 $16 = $dest;
 $17 = (($16) + 4|0);
 HEAP32[$17>>2] = 4096;
 STACKTOP = sp;return;
}
function _empty_output_buffer($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $dest = $3;
 $4 = $dest;
 $5 = (($4) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $dest;
 $8 = (($7) + 20|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_fwrite(($6|0),1,4096,($9|0))|0);
 $11 = ($10|0)!=(4096);
 if ($11) {
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 20|0);
  HEAP32[$14>>2] = 38;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  FUNCTION_TABLE_vi[$17 & 511]($18);
 }
 $19 = $dest;
 $20 = (($19) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $dest;
 HEAP32[$22>>2] = $21;
 $23 = $dest;
 $24 = (($23) + 4|0);
 HEAP32[$24>>2] = 4096;
 STACKTOP = sp;return 1;
}
function _term_destination($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $datacount = 0, $dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $dest = $3;
 $4 = $dest;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (4096 - ($6))|0;
 $datacount = $7;
 $8 = $datacount;
 $9 = ($8>>>0)>(0);
 if ($9) {
  $10 = $dest;
  $11 = (($10) + 24|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $datacount;
  $14 = $dest;
  $15 = (($14) + 20|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_fwrite(($12|0),1,($13|0),($16|0))|0);
  $18 = $datacount;
  $19 = ($17|0)!=($18|0);
  if ($19) {
   $20 = $0;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 20|0);
   HEAP32[$22>>2] = 38;
   $23 = $0;
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[$24>>2]|0;
   $26 = $0;
   FUNCTION_TABLE_vi[$25 & 511]($26);
  }
 }
 $27 = $dest;
 $28 = (($27) + 20|0);
 $29 = HEAP32[$28>>2]|0;
 (_fflush(($29|0))|0);
 $30 = $dest;
 $31 = (($30) + 20|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (_ferror(($32|0))|0);
 $34 = ($33|0)!=(0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 $35 = $0;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + 20|0);
 HEAP32[$37>>2] = 38;
 $38 = $0;
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$39>>2]|0;
 $41 = $0;
 FUNCTION_TABLE_vi[$40 & 511]($41);
 STACKTOP = sp;return;
}
function _jpeg_stdio_src($cinfo,$infile) {
 $cinfo = $cinfo|0;
 $infile = $infile|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $infile;
 $2 = $0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = $0;
  $7 = (($6) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$8>>2]|0;
  $10 = $0;
  $11 = (FUNCTION_TABLE_iiii[$9 & 511]($10,0,40)|0);
  $12 = $0;
  $13 = (($12) + 24|0);
  HEAP32[$13>>2] = $11;
  $14 = $0;
  $15 = (($14) + 24|0);
  $16 = HEAP32[$15>>2]|0;
  $src = $16;
  $17 = $0;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  $22 = (FUNCTION_TABLE_iiii[$20 & 511]($21,0,4096)|0);
  $23 = $src;
  $24 = (($23) + 32|0);
  HEAP32[$24>>2] = $22;
 }
 $25 = $0;
 $26 = (($25) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $src = $27;
 $28 = $src;
 $29 = (($28) + 8|0);
 HEAP32[$29>>2] = 144;
 $30 = $src;
 $31 = (($30) + 12|0);
 HEAP32[$31>>2] = 145;
 $32 = $src;
 $33 = (($32) + 16|0);
 HEAP32[$33>>2] = 146;
 $34 = $src;
 $35 = (($34) + 20|0);
 HEAP32[$35>>2] = 12;
 $36 = $src;
 $37 = (($36) + 24|0);
 HEAP32[$37>>2] = 147;
 $38 = $1;
 $39 = $src;
 $40 = (($39) + 28|0);
 HEAP32[$40>>2] = $38;
 $41 = $src;
 $42 = (($41) + 4|0);
 HEAP32[$42>>2] = 0;
 $43 = $src;
 HEAP32[$43>>2] = 0;
 STACKTOP = sp;return;
}
function _init_source($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $src = $3;
 $4 = $src;
 $5 = (($4) + 36|0);
 HEAP32[$5>>2] = 1;
 STACKTOP = sp;return;
}
function _fill_input_buffer($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 24|0);
 $3 = HEAP32[$2>>2]|0;
 $src = $3;
 $4 = $src;
 $5 = (($4) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $src;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_fread(($6|0),1,4096,($9|0))|0);
 $nbytes = $10;
 $11 = $nbytes;
 $12 = ($11>>>0)<=(0);
 if ($12) {
  $13 = $src;
  $14 = (($13) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  if ($16) {
   $17 = $0;
   $18 = HEAP32[$17>>2]|0;
   $19 = (($18) + 20|0);
   HEAP32[$19>>2] = 43;
   $20 = $0;
   $21 = HEAP32[$20>>2]|0;
   $22 = HEAP32[$21>>2]|0;
   $23 = $0;
   FUNCTION_TABLE_vi[$22 & 511]($23);
  }
  $24 = $0;
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 20|0);
  HEAP32[$26>>2] = 123;
  $27 = $0;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $0;
  FUNCTION_TABLE_vii[$30 & 511]($31,-1);
  $32 = $src;
  $33 = (($32) + 32|0);
  $34 = HEAP32[$33>>2]|0;
  HEAP8[$34>>0] = -1;
  $35 = $src;
  $36 = (($35) + 32|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + 1|0);
  HEAP8[$38>>0] = -39;
  $nbytes = 2;
 }
 $39 = $src;
 $40 = (($39) + 32|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = $src;
 HEAP32[$42>>2] = $41;
 $43 = $nbytes;
 $44 = $src;
 $45 = (($44) + 4|0);
 HEAP32[$45>>2] = $43;
 $46 = $src;
 $47 = (($46) + 36|0);
 HEAP32[$47>>2] = 0;
 STACKTOP = sp;return 1;
}
function _skip_input_data($cinfo,$num_bytes) {
 $cinfo = $cinfo|0;
 $num_bytes = $num_bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $num_bytes;
 $2 = $0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $src = $4;
 $5 = $1;
 $6 = ($5|0)>(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 while(1) {
  $7 = $1;
  $8 = $src;
  $9 = (($8) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)>($10|0);
  if (!($11)) {
   break;
  }
  $12 = $src;
  $13 = (($12) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $1;
  $16 = (($15) - ($14))|0;
  $1 = $16;
  $17 = $src;
  $18 = (($17) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  (FUNCTION_TABLE_ii[$19 & 255]($20)|0);
 }
 $21 = $1;
 $22 = $src;
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + ($21)|0);
 HEAP32[$22>>2] = $24;
 $25 = $1;
 $26 = $src;
 $27 = (($26) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) - ($25))|0;
 HEAP32[$27>>2] = $29;
 STACKTOP = sp;return;
}
function _term_source($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return;
}
function _jinit_d_coef_controller($cinfo,$need_full_buffer) {
 $cinfo = $cinfo|0;
 $need_full_buffer = $need_full_buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $access_rows = 0, $buffer = 0, $ci = 0, $coef = 0, $compptr = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $need_full_buffer;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = (FUNCTION_TABLE_iiii[$5 & 511]($6,1,116)|0);
 $coef = $7;
 $8 = $coef;
 $9 = $0;
 $10 = (($9) + 452|0);
 HEAP32[$10>>2] = $8;
 $11 = $coef;
 HEAP32[$11>>2] = 148;
 $12 = $coef;
 $13 = (($12) + 8|0);
 HEAP32[$13>>2] = 149;
 $14 = $coef;
 $15 = (($14) + 112|0);
 HEAP32[$15>>2] = 0;
 $16 = $1;
 $17 = ($16|0)!=(0);
 if ($17) {
  $ci = 0;
  $18 = $0;
  $19 = (($18) + 216|0);
  $20 = HEAP32[$19>>2]|0;
  $compptr = $20;
  while(1) {
   $21 = $ci;
   $22 = $0;
   $23 = (($22) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($21|0)<($24|0);
   if (!($25)) {
    break;
   }
   $26 = $compptr;
   $27 = (($26) + 12|0);
   $28 = HEAP32[$27>>2]|0;
   $access_rows = $28;
   $29 = $0;
   $30 = (($29) + 224|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)!=(0);
   if ($32) {
    $33 = $access_rows;
    $34 = ($33*3)|0;
    $access_rows = $34;
   }
   $35 = $0;
   $36 = (($35) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 20|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $0;
   $41 = $compptr;
   $42 = (($41) + 28|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $compptr;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (_jround_up($43,$46)|0);
   $48 = $compptr;
   $49 = (($48) + 32|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $compptr;
   $52 = (($51) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (_jround_up($50,$53)|0);
   $55 = $access_rows;
   $56 = (FUNCTION_TABLE_iiiiiii[$39 & 511]($40,1,1,$47,$54,$55)|0);
   $57 = $ci;
   $58 = $coef;
   $59 = (($58) + 72|0);
   $60 = (($59) + ($57<<2)|0);
   HEAP32[$60>>2] = $56;
   $61 = $ci;
   $62 = (($61) + 1)|0;
   $ci = $62;
   $63 = $compptr;
   $64 = (($63) + 88|0);
   $compptr = $64;
  }
  $65 = $coef;
  $66 = (($65) + 4|0);
  HEAP32[$66>>2] = 150;
  $67 = $coef;
  $68 = (($67) + 12|0);
  HEAP32[$68>>2] = 151;
  $69 = $coef;
  $70 = (($69) + 72|0);
  $71 = $coef;
  $72 = (($71) + 16|0);
  HEAP32[$72>>2] = $70;
  STACKTOP = sp;return;
 } else {
  $73 = $0;
  $74 = (($73) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + 4|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $0;
  $79 = (FUNCTION_TABLE_iiii[$77 & 511]($78,1,1280)|0);
  $buffer = $79;
  $i = 0;
  while(1) {
   $80 = $i;
   $81 = ($80|0)<(10);
   if (!($81)) {
    break;
   }
   $82 = $buffer;
   $83 = $i;
   $84 = (($82) + ($83<<7)|0);
   $85 = $i;
   $86 = $coef;
   $87 = (($86) + 32|0);
   $88 = (($87) + ($85<<2)|0);
   HEAP32[$88>>2] = $84;
   $89 = $i;
   $90 = (($89) + 1)|0;
   $i = $90;
  }
  $91 = $0;
  $92 = (($91) + 436|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93|0)==(0);
  if ($94) {
   $95 = $buffer;
   _memset(($95|0),0,1280)|0;
  }
  $96 = $coef;
  $97 = (($96) + 4|0);
  HEAP32[$97>>2] = 152;
  $98 = $coef;
  $99 = (($98) + 12|0);
  HEAP32[$99>>2] = 153;
  $100 = $coef;
  $101 = (($100) + 16|0);
  HEAP32[$101>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _start_input_pass($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 148|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 _start_iMCU_row29($3);
 STACKTOP = sp;return;
}
function _start_output_pass($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $coef = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 452|0);
 $3 = HEAP32[$2>>2]|0;
 $coef = $3;
 $4 = $coef;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  $19 = $0;
  $20 = (($19) + 156|0);
  HEAP32[$20>>2] = 0;
  STACKTOP = sp;return;
 }
 $8 = $0;
 $9 = (($8) + 80|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $0;
  $13 = (_smoothing_ok($12)|0);
  $14 = ($13|0)!=(0);
  if ($14) {
   $15 = $coef;
   $16 = (($15) + 12|0);
   HEAP32[$16>>2] = 154;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $17 = $coef;
  $18 = (($17) + 12|0);
  HEAP32[$18>>2] = 151;
 }
 $19 = $0;
 $20 = (($19) + 156|0);
 HEAP32[$20>>2] = 0;
 STACKTOP = sp;return;
}
function _consume_data($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $MCU_col_num = 0, $blkn = 0, $buffer = 0, $buffer_ptr = 0, $ci = 0, $coef = 0, $compptr = 0, $start_col = 0, $xindex = 0, $yindex = 0, $yoffset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $buffer = sp + 8|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 452|0);
 $4 = HEAP32[$3>>2]|0;
 $coef = $4;
 $ci = 0;
 while(1) {
  $5 = $ci;
  $6 = $1;
  $7 = (($6) + 340|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($5|0)<($8|0);
  if (!($9)) {
   break;
  }
  $10 = $ci;
  $11 = $1;
  $12 = (($11) + 344|0);
  $13 = (($12) + ($10<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $compptr = $14;
  $15 = $1;
  $16 = (($15) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = $compptr;
  $22 = (($21) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $coef;
  $25 = (($24) + 72|0);
  $26 = (($25) + ($23<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $1;
  $29 = (($28) + 148|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $compptr;
  $32 = (($31) + 12|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = Math_imul($30, $33)|0;
  $35 = $compptr;
  $36 = (($35) + 12|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (FUNCTION_TABLE_iiiiii[$19 & 511]($20,$27,$34,$37,1)|0);
  $39 = $ci;
  $40 = (($buffer) + ($39<<2)|0);
  HEAP32[$40>>2] = $38;
  $41 = $ci;
  $42 = (($41) + 1)|0;
  $ci = $42;
 }
 $43 = $coef;
 $44 = (($43) + 24|0);
 $45 = HEAP32[$44>>2]|0;
 $yoffset = $45;
 L6: while(1) {
  $46 = $yoffset;
  $47 = $coef;
  $48 = (($47) + 28|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($46|0)<($49|0);
  if (!($50)) {
   break;
  }
  $51 = $coef;
  $52 = (($51) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  $MCU_col_num = $53;
  while(1) {
   $54 = $MCU_col_num;
   $55 = $1;
   $56 = (($55) + 360|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = ($54>>>0)<($57>>>0);
   if (!($58)) {
    break;
   }
   $blkn = 0;
   $ci = 0;
   while(1) {
    $59 = $ci;
    $60 = $1;
    $61 = (($60) + 340|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($59|0)<($62|0);
    if (!($63)) {
     break;
    }
    $64 = $ci;
    $65 = $1;
    $66 = (($65) + 344|0);
    $67 = (($66) + ($64<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    $compptr = $68;
    $69 = $MCU_col_num;
    $70 = $compptr;
    $71 = (($70) + 56|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = Math_imul($69, $72)|0;
    $start_col = $73;
    $yindex = 0;
    while(1) {
     $74 = $yindex;
     $75 = $compptr;
     $76 = (($75) + 60|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = ($74|0)<($77|0);
     if (!($78)) {
      break;
     }
     $79 = $yindex;
     $80 = $yoffset;
     $81 = (($79) + ($80))|0;
     $82 = $ci;
     $83 = (($buffer) + ($82<<2)|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (($84) + ($81<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $start_col;
     $88 = (($86) + ($87<<7)|0);
     $buffer_ptr = $88;
     $xindex = 0;
     while(1) {
      $89 = $xindex;
      $90 = $compptr;
      $91 = (($90) + 56|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($89|0)<($92|0);
      if (!($93)) {
       break;
      }
      $94 = $buffer_ptr;
      $95 = (($94) + 128|0);
      $buffer_ptr = $95;
      $96 = $blkn;
      $97 = (($96) + 1)|0;
      $blkn = $97;
      $98 = $coef;
      $99 = (($98) + 32|0);
      $100 = (($99) + ($96<<2)|0);
      HEAP32[$100>>2] = $94;
      $101 = $xindex;
      $102 = (($101) + 1)|0;
      $xindex = $102;
     }
     $103 = $yindex;
     $104 = (($103) + 1)|0;
     $yindex = $104;
    }
    $105 = $ci;
    $106 = (($105) + 1)|0;
    $ci = $106;
   }
   $107 = $1;
   $108 = (($107) + 468|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) + 4|0);
   $111 = HEAP32[$110>>2]|0;
   $112 = $1;
   $113 = $coef;
   $114 = (($113) + 32|0);
   $115 = (FUNCTION_TABLE_iii[$111 & 255]($112,$114)|0);
   $116 = ($115|0)!=(0);
   if (!($116)) {
    label = 22;
    break L6;
   }
   $123 = $MCU_col_num;
   $124 = (($123) + 1)|0;
   $MCU_col_num = $124;
  }
  $125 = $coef;
  $126 = (($125) + 20|0);
  HEAP32[$126>>2] = 0;
  $127 = $yoffset;
  $128 = (($127) + 1)|0;
  $yoffset = $128;
 }
 if ((label|0) == 22) {
  $117 = $yoffset;
  $118 = $coef;
  $119 = (($118) + 24|0);
  HEAP32[$119>>2] = $117;
  $120 = $MCU_col_num;
  $121 = $coef;
  $122 = (($121) + 20|0);
  HEAP32[$122>>2] = $120;
  $0 = 0;
  $144 = $0;
  STACKTOP = sp;return ($144|0);
 }
 $129 = $1;
 $130 = (($129) + 148|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($131) + 1)|0;
 HEAP32[$130>>2] = $132;
 $133 = $1;
 $134 = (($133) + 332|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($132>>>0)<($135>>>0);
 if ($136) {
  $137 = $1;
  _start_iMCU_row29($137);
  $0 = 3;
  $144 = $0;
  STACKTOP = sp;return ($144|0);
 } else {
  $138 = $1;
  $139 = (($138) + 460|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = (($140) + 12|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $1;
  FUNCTION_TABLE_vi[$142 & 511]($143);
  $0 = 4;
  $144 = $0;
  STACKTOP = sp;return ($144|0);
 }
 return 0|0;
}
function _decompress_data($cinfo,$output_buf) {
 $cinfo = $cinfo|0;
 $output_buf = $output_buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block_num = 0, $block_row = 0, $block_rows = 0, $buffer = 0, $buffer_ptr = 0, $ci = 0, $coef = 0, $compptr = 0;
 var $inverse_DCT = 0, $last_iMCU_row = 0, $output_col = 0, $output_ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $cinfo;
 $2 = $output_buf;
 $3 = $1;
 $4 = (($3) + 452|0);
 $5 = HEAP32[$4>>2]|0;
 $coef = $5;
 $6 = $1;
 $7 = (($6) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - 1)|0;
 $last_iMCU_row = $9;
 while(1) {
  $10 = $1;
  $11 = (($10) + 144|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = (($13) + 152|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if ($16) {
   $150 = 1;
  } else {
   $17 = $1;
   $18 = (($17) + 144|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $1;
   $21 = (($20) + 152|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($19|0)==($22|0);
   if ($23) {
    $24 = $1;
    $25 = (($24) + 148|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $1;
    $28 = (($27) + 156|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($26>>>0)<=($29>>>0);
    $151 = $30;
   } else {
    $151 = 0;
   }
   $150 = $151;
  }
  if (!($150)) {
   break;
  }
  $31 = $1;
  $32 = (($31) + 460|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = $1;
  $36 = (FUNCTION_TABLE_ii[$34 & 255]($35)|0);
  $37 = ($36|0)==(0);
  if ($37) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $0 = 0;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 $ci = 0;
 $38 = $1;
 $39 = (($38) + 216|0);
 $40 = HEAP32[$39>>2]|0;
 $compptr = $40;
 while(1) {
  $41 = $ci;
  $42 = $1;
  $43 = (($42) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($41|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $compptr;
  $47 = (($46) + 52|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = ($48|0)!=(0);
  if ($49) {
   $50 = $1;
   $51 = (($50) + 4|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + 32|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $1;
   $56 = $ci;
   $57 = $coef;
   $58 = (($57) + 72|0);
   $59 = (($58) + ($56<<2)|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $1;
   $62 = (($61) + 156|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $compptr;
   $65 = (($64) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = Math_imul($63, $66)|0;
   $68 = $compptr;
   $69 = (($68) + 12|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (FUNCTION_TABLE_iiiiii[$54 & 511]($55,$60,$67,$70,0)|0);
   $buffer = $71;
   $72 = $1;
   $73 = (($72) + 156|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $last_iMCU_row;
   $76 = ($74>>>0)<($75>>>0);
   if ($76) {
    $77 = $compptr;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $block_rows = $79;
   } else {
    $80 = $compptr;
    $81 = (($80) + 32|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = $compptr;
    $84 = (($83) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = (($82>>>0) % ($85>>>0))&-1;
    $block_rows = $86;
    $87 = $block_rows;
    $88 = ($87|0)==(0);
    if ($88) {
     $89 = $compptr;
     $90 = (($89) + 12|0);
     $91 = HEAP32[$90>>2]|0;
     $block_rows = $91;
    }
   }
   $92 = $ci;
   $93 = $1;
   $94 = (($93) + 472|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = (($95) + 4|0);
   $97 = (($96) + ($92<<2)|0);
   $98 = HEAP32[$97>>2]|0;
   $inverse_DCT = $98;
   $99 = $ci;
   $100 = $2;
   $101 = (($100) + ($99<<2)|0);
   $102 = HEAP32[$101>>2]|0;
   $output_ptr = $102;
   $block_row = 0;
   while(1) {
    $103 = $block_row;
    $104 = $block_rows;
    $105 = ($103|0)<($104|0);
    if (!($105)) {
     break;
    }
    $106 = $block_row;
    $107 = $buffer;
    $108 = (($107) + ($106<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $buffer_ptr = $109;
    $output_col = 0;
    $block_num = 0;
    while(1) {
     $110 = $block_num;
     $111 = $compptr;
     $112 = (($111) + 28|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ($110>>>0)<($113>>>0);
     if (!($114)) {
      break;
     }
     $115 = $inverse_DCT;
     $116 = $1;
     $117 = $compptr;
     $118 = $buffer_ptr;
     $119 = $output_ptr;
     $120 = $output_col;
     FUNCTION_TABLE_viiiii[$115 & 255]($116,$117,$118,$119,$120);
     $121 = $buffer_ptr;
     $122 = (($121) + 128|0);
     $buffer_ptr = $122;
     $123 = $compptr;
     $124 = (($123) + 36|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $output_col;
     $127 = (($126) + ($125))|0;
     $output_col = $127;
     $128 = $block_num;
     $129 = (($128) + 1)|0;
     $block_num = $129;
    }
    $130 = $compptr;
    $131 = (($130) + 40|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $output_ptr;
    $134 = (($133) + ($132<<2)|0);
    $output_ptr = $134;
    $135 = $block_row;
    $136 = (($135) + 1)|0;
    $block_row = $136;
   }
  } else {
  }
  $137 = $ci;
  $138 = (($137) + 1)|0;
  $ci = $138;
  $139 = $compptr;
  $140 = (($139) + 88|0);
  $compptr = $140;
 }
 $141 = $1;
 $142 = (($141) + 156|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = (($143) + 1)|0;
 HEAP32[$142>>2] = $144;
 $145 = $1;
 $146 = (($145) + 332|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($144>>>0)<($147>>>0);
 if ($148) {
  $0 = 3;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 } else {
  $0 = 4;
  $149 = $0;
  STACKTOP = sp;return ($149|0);
 }
 return 0|0;
}
function _dummy_consume_data($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return 0;
}
function _decompress_onepass($cinfo,$output_buf) {
 $cinfo = $cinfo|0;
 $output_buf = $output_buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $MCU_col_num = 0, $blkn = 0, $ci = 0, $coef = 0, $compptr = 0, $inverse_DCT = 0, $last_MCU_col = 0, $last_iMCU_row = 0, $output_col = 0, $output_ptr = 0;
 var $start_col = 0, $useful_width = 0, $xindex = 0, $yindex = 0, $yoffset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $1 = $cinfo;
 $2 = $output_buf;
 $3 = $1;
 $4 = (($3) + 452|0);
 $5 = HEAP32[$4>>2]|0;
 $coef = $5;
 $6 = $1;
 $7 = (($6) + 360|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - 1)|0;
 $last_MCU_col = $9;
 $10 = $1;
 $11 = (($10) + 332|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) - 1)|0;
 $last_iMCU_row = $13;
 $14 = $coef;
 $15 = (($14) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 $yoffset = $16;
 L1: while(1) {
  $17 = $yoffset;
  $18 = $coef;
  $19 = (($18) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($17|0)<($20|0);
  if (!($21)) {
   break;
  }
  $22 = $coef;
  $23 = (($22) + 20|0);
  $24 = HEAP32[$23>>2]|0;
  $MCU_col_num = $24;
  while(1) {
   $25 = $MCU_col_num;
   $26 = $last_MCU_col;
   $27 = ($25>>>0)<=($26>>>0);
   if (!($27)) {
    break;
   }
   $28 = $1;
   $29 = (($28) + 436|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)!=(0);
   if ($31) {
    $32 = $coef;
    $33 = (($32) + 32|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $1;
    $36 = (($35) + 368|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = $37<<7;
    _memset(($34|0),0,($38|0))|0;
   }
   $39 = $1;
   $40 = (($39) + 468|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 4|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $1;
   $45 = $coef;
   $46 = (($45) + 32|0);
   $47 = (FUNCTION_TABLE_iii[$43 & 255]($44,$46)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    label = 8;
    break L1;
   }
   $blkn = 0;
   $ci = 0;
   while(1) {
    $55 = $ci;
    $56 = $1;
    $57 = (($56) + 340|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = ($55|0)<($58|0);
    if (!($59)) {
     break;
    }
    $60 = $ci;
    $61 = $1;
    $62 = (($61) + 344|0);
    $63 = (($62) + ($60<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $compptr = $64;
    $65 = $compptr;
    $66 = (($65) + 52|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = ($67|0)!=(0);
    if ($68) {
     $74 = $compptr;
     $75 = (($74) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = $1;
     $78 = (($77) + 472|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (($79) + 4|0);
     $81 = (($80) + ($76<<2)|0);
     $82 = HEAP32[$81>>2]|0;
     $inverse_DCT = $82;
     $83 = $MCU_col_num;
     $84 = $last_MCU_col;
     $85 = ($83>>>0)<($84>>>0);
     if ($85) {
      $86 = $compptr;
      $87 = (($86) + 56|0);
      $88 = HEAP32[$87>>2]|0;
      $92 = $88;
     } else {
      $89 = $compptr;
      $90 = (($89) + 72|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = $91;
     }
     $useful_width = $92;
     $93 = $compptr;
     $94 = (($93) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = $2;
     $97 = (($96) + ($95<<2)|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $yoffset;
     $100 = $compptr;
     $101 = (($100) + 40|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = Math_imul($99, $102)|0;
     $104 = (($98) + ($103<<2)|0);
     $output_ptr = $104;
     $105 = $MCU_col_num;
     $106 = $compptr;
     $107 = (($106) + 68|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = Math_imul($105, $108)|0;
     $start_col = $109;
     $yindex = 0;
     while(1) {
      $110 = $yindex;
      $111 = $compptr;
      $112 = (($111) + 60|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($110|0)<($113|0);
      if (!($114)) {
       break;
      }
      $115 = $1;
      $116 = (($115) + 148|0);
      $117 = HEAP32[$116>>2]|0;
      $118 = $last_iMCU_row;
      $119 = ($117>>>0)<($118>>>0);
      if ($119) {
       label = 20;
      } else {
       $120 = $yoffset;
       $121 = $yindex;
       $122 = (($120) + ($121))|0;
       $123 = $compptr;
       $124 = (($123) + 76|0);
       $125 = HEAP32[$124>>2]|0;
       $126 = ($122|0)<($125|0);
       if ($126) {
        label = 20;
       }
      }
      if ((label|0) == 20) {
       label = 0;
       $127 = $start_col;
       $output_col = $127;
       $xindex = 0;
       while(1) {
        $128 = $xindex;
        $129 = $useful_width;
        $130 = ($128|0)<($129|0);
        if (!($130)) {
         break;
        }
        $131 = $inverse_DCT;
        $132 = $1;
        $133 = $compptr;
        $134 = $blkn;
        $135 = $xindex;
        $136 = (($134) + ($135))|0;
        $137 = $coef;
        $138 = (($137) + 32|0);
        $139 = (($138) + ($136<<2)|0);
        $140 = HEAP32[$139>>2]|0;
        $141 = $output_ptr;
        $142 = $output_col;
        FUNCTION_TABLE_viiiii[$131 & 255]($132,$133,$140,$141,$142);
        $143 = $compptr;
        $144 = (($143) + 36|0);
        $145 = HEAP32[$144>>2]|0;
        $146 = $output_col;
        $147 = (($146) + ($145))|0;
        $output_col = $147;
        $148 = $xindex;
        $149 = (($148) + 1)|0;
        $xindex = $149;
       }
      }
      $150 = $compptr;
      $151 = (($150) + 56|0);
      $152 = HEAP32[$151>>2]|0;
      $153 = $blkn;
      $154 = (($153) + ($152))|0;
      $blkn = $154;
      $155 = $compptr;
      $156 = (($155) + 40|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = $output_ptr;
      $159 = (($158) + ($157<<2)|0);
      $output_ptr = $159;
      $160 = $yindex;
      $161 = (($160) + 1)|0;
      $yindex = $161;
     }
    } else {
     $69 = $compptr;
     $70 = (($69) + 64|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = $blkn;
     $73 = (($72) + ($71))|0;
     $blkn = $73;
    }
    $162 = $ci;
    $163 = (($162) + 1)|0;
    $ci = $163;
   }
   $164 = $MCU_col_num;
   $165 = (($164) + 1)|0;
   $MCU_col_num = $165;
  }
  $166 = $coef;
  $167 = (($166) + 20|0);
  HEAP32[$167>>2] = 0;
  $168 = $yoffset;
  $169 = (($168) + 1)|0;
  $yoffset = $169;
 }
 if ((label|0) == 8) {
  $49 = $yoffset;
  $50 = $coef;
  $51 = (($50) + 24|0);
  HEAP32[$51>>2] = $49;
  $52 = $MCU_col_num;
  $53 = $coef;
  $54 = (($53) + 20|0);
  HEAP32[$54>>2] = $52;
  $0 = 0;
  $189 = $0;
  STACKTOP = sp;return ($189|0);
 }
 $170 = $1;
 $171 = (($170) + 156|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = (($172) + 1)|0;
 HEAP32[$171>>2] = $173;
 $174 = $1;
 $175 = (($174) + 148|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = (($176) + 1)|0;
 HEAP32[$175>>2] = $177;
 $178 = $1;
 $179 = (($178) + 332|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ($177>>>0)<($180>>>0);
 if ($181) {
  $182 = $1;
  _start_iMCU_row29($182);
  $0 = 3;
  $189 = $0;
  STACKTOP = sp;return ($189|0);
 } else {
  $183 = $1;
  $184 = (($183) + 460|0);
  $185 = HEAP32[$184>>2]|0;
  $186 = (($185) + 12|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $1;
  FUNCTION_TABLE_vi[$187 & 511]($188);
  $0 = 4;
  $189 = $0;
  STACKTOP = sp;return ($189|0);
 }
 return 0|0;
}
function _start_iMCU_row29($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coef = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 452|0);
 $3 = HEAP32[$2>>2]|0;
 $coef = $3;
 $4 = $0;
 $5 = (($4) + 340|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 if ($7) {
  $8 = $coef;
  $9 = (($8) + 28|0);
  HEAP32[$9>>2] = 1;
  $32 = $coef;
  $33 = (($32) + 20|0);
  HEAP32[$33>>2] = 0;
  $34 = $coef;
  $35 = (($34) + 24|0);
  HEAP32[$35>>2] = 0;
  STACKTOP = sp;return;
 }
 $10 = $0;
 $11 = (($10) + 148|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = (($13) + 332|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) - 1)|0;
 $17 = ($12>>>0)<($16>>>0);
 if ($17) {
  $18 = $0;
  $19 = (($18) + 344|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $coef;
  $24 = (($23) + 28|0);
  HEAP32[$24>>2] = $22;
 } else {
  $25 = $0;
  $26 = (($25) + 344|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 76|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $coef;
  $31 = (($30) + 28|0);
  HEAP32[$31>>2] = $29;
 }
 $32 = $coef;
 $33 = (($32) + 20|0);
 HEAP32[$33>>2] = 0;
 $34 = $coef;
 $35 = (($34) + 24|0);
 HEAP32[$35>>2] = 0;
 STACKTOP = sp;return;
}
function _smoothing_ok($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $coef = 0, $coef_bits = 0, $coef_bits_latch = 0, $coefi = 0, $compptr = 0, $qtable = 0, $smoothing_useful = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 452|0);
 $4 = HEAP32[$3>>2]|0;
 $coef = $4;
 $smoothing_useful = 0;
 $5 = $1;
 $6 = (($5) + 224|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = $1;
  $10 = (($9) + 160|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = $coef;
   $14 = (($13) + 112|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(0|0);
   if ($16) {
    $17 = $1;
    $18 = (($17) + 4|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = HEAP32[$19>>2]|0;
    $21 = $1;
    $22 = $1;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24*24)|0;
    $26 = (FUNCTION_TABLE_iiii[$20 & 511]($21,1,$25)|0);
    $27 = $coef;
    $28 = (($27) + 112|0);
    HEAP32[$28>>2] = $26;
   }
   $29 = $coef;
   $30 = (($29) + 112|0);
   $31 = HEAP32[$30>>2]|0;
   $coef_bits_latch = $31;
   $ci = 0;
   $32 = $1;
   $33 = (($32) + 216|0);
   $34 = HEAP32[$33>>2]|0;
   $compptr = $34;
   while(1) {
    $35 = $ci;
    $36 = $1;
    $37 = (($36) + 36|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ($35|0)<($38|0);
    if (!($39)) {
     label = 27;
     break;
    }
    $40 = $compptr;
    $41 = (($40) + 80|0);
    $42 = HEAP32[$41>>2]|0;
    $qtable = $42;
    $43 = ($42|0)==(0|0);
    if ($43) {
     label = 9;
     break;
    }
    $44 = $qtable;
    $45 = HEAP16[$44>>1]|0;
    $46 = $45&65535;
    $47 = ($46|0)==(0);
    if ($47) {
     label = 16;
     break;
    }
    $48 = $qtable;
    $49 = (($48) + 2|0);
    $50 = HEAP16[$49>>1]|0;
    $51 = $50&65535;
    $52 = ($51|0)==(0);
    if ($52) {
     label = 16;
     break;
    }
    $53 = $qtable;
    $54 = (($53) + 16|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55&65535;
    $57 = ($56|0)==(0);
    if ($57) {
     label = 16;
     break;
    }
    $58 = $qtable;
    $59 = (($58) + 32|0);
    $60 = HEAP16[$59>>1]|0;
    $61 = $60&65535;
    $62 = ($61|0)==(0);
    if ($62) {
     label = 16;
     break;
    }
    $63 = $qtable;
    $64 = (($63) + 18|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = ($66|0)==(0);
    if ($67) {
     label = 16;
     break;
    }
    $68 = $qtable;
    $69 = (($68) + 4|0);
    $70 = HEAP16[$69>>1]|0;
    $71 = $70&65535;
    $72 = ($71|0)==(0);
    if ($72) {
     label = 16;
     break;
    }
    $73 = $ci;
    $74 = $1;
    $75 = (($74) + 160|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + ($73<<8)|0);
    $coef_bits = $77;
    $78 = $coef_bits;
    $79 = HEAP32[$78>>2]|0;
    $80 = ($79|0)<(0);
    if ($80) {
     label = 18;
     break;
    }
    $coefi = 1;
    while(1) {
     $81 = $coefi;
     $82 = ($81|0)<=(5);
     if (!($82)) {
      break;
     }
     $83 = $coefi;
     $84 = $coef_bits;
     $85 = (($84) + ($83<<2)|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $coefi;
     $88 = $coef_bits_latch;
     $89 = (($88) + ($87<<2)|0);
     HEAP32[$89>>2] = $86;
     $90 = $coefi;
     $91 = $coef_bits;
     $92 = (($91) + ($90<<2)|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = ($93|0)!=(0);
     if ($94) {
      $smoothing_useful = 1;
     }
     $95 = $coefi;
     $96 = (($95) + 1)|0;
     $coefi = $96;
    }
    $97 = $coef_bits_latch;
    $98 = (($97) + 24|0);
    $coef_bits_latch = $98;
    $99 = $ci;
    $100 = (($99) + 1)|0;
    $ci = $100;
    $101 = $compptr;
    $102 = (($101) + 88|0);
    $compptr = $102;
   }
   if ((label|0) == 9) {
    $0 = 0;
    $104 = $0;
    STACKTOP = sp;return ($104|0);
   }
   else if ((label|0) == 16) {
    $0 = 0;
    $104 = $0;
    STACKTOP = sp;return ($104|0);
   }
   else if ((label|0) == 18) {
    $0 = 0;
    $104 = $0;
    STACKTOP = sp;return ($104|0);
   }
   else if ((label|0) == 27) {
    $103 = $smoothing_useful;
    $0 = $103;
    $104 = $0;
    STACKTOP = sp;return ($104|0);
   }
  }
 }
 $0 = 0;
 $104 = $0;
 STACKTOP = sp;return ($104|0);
}
function _decompress_smooth_data($cinfo,$output_buf) {
 $cinfo = $cinfo|0;
 $output_buf = $output_buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Al = 0;
 var $DC1 = 0, $DC2 = 0, $DC3 = 0, $DC4 = 0, $DC5 = 0, $DC6 = 0, $DC7 = 0, $DC8 = 0, $DC9 = 0, $Q00 = 0, $Q01 = 0, $Q02 = 0, $Q10 = 0, $Q11 = 0, $Q20 = 0, $access_rows = 0, $block_num = 0, $block_row = 0, $block_rows = 0, $buffer = 0;
 var $buffer_ptr = 0, $ci = 0, $coef = 0, $coef_bits = 0, $compptr = 0, $delta = 0, $first_row = 0, $inverse_DCT = 0, $last_block_column = 0, $last_iMCU_row = 0, $last_row = 0, $next_block_row = 0, $num = 0, $output_col = 0, $output_ptr = 0, $pred = 0, $prev_block_row = 0, $quanttbl = 0, $workspace = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $workspace = sp + 168|0;
 $1 = $cinfo;
 $2 = $output_buf;
 $3 = $1;
 $4 = (($3) + 452|0);
 $5 = HEAP32[$4>>2]|0;
 $coef = $5;
 $6 = $1;
 $7 = (($6) + 332|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - 1)|0;
 $last_iMCU_row = $9;
 while(1) {
  $10 = $1;
  $11 = (($10) + 144|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $1;
  $14 = (($13) + 152|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<=($15|0);
  if ($16) {
   $17 = $1;
   $18 = (($17) + 460|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 20|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)!=(0);
   $23 = $22 ^ 1;
   $558 = $23;
  } else {
   $558 = 0;
  }
  if (!($558)) {
   break;
  }
  $24 = $1;
  $25 = (($24) + 144|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $1;
  $28 = (($27) + 152|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)==($29|0);
  if ($30) {
   $31 = $1;
   $32 = (($31) + 412|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)==(0);
   $35 = $34 ? 1 : 0;
   $delta = $35;
   $36 = $1;
   $37 = (($36) + 148|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $1;
   $40 = (($39) + 156|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $delta;
   $43 = (($41) + ($42))|0;
   $44 = ($38>>>0)>($43>>>0);
   if ($44) {
    label = 7;
    break;
   }
  }
  $45 = $1;
  $46 = (($45) + 460|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$47>>2]|0;
  $49 = $1;
  $50 = (FUNCTION_TABLE_ii[$48 & 255]($49)|0);
  $51 = ($50|0)==(0);
  if ($51) {
   label = 10;
   break;
  }
 }
 if ((label|0) == 7) {
 }
 else if ((label|0) == 10) {
  $0 = 0;
  $557 = $0;
  STACKTOP = sp;return ($557|0);
 }
 $ci = 0;
 $52 = $1;
 $53 = (($52) + 216|0);
 $54 = HEAP32[$53>>2]|0;
 $compptr = $54;
 while(1) {
  $55 = $ci;
  $56 = $1;
  $57 = (($56) + 36|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($55|0)<($58|0);
  if (!($59)) {
   break;
  }
  $60 = $compptr;
  $61 = (($60) + 52|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)!=(0);
  if ($63) {
   $64 = $1;
   $65 = (($64) + 156|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $last_iMCU_row;
   $68 = ($66>>>0)<($67>>>0);
   if ($68) {
    $69 = $compptr;
    $70 = (($69) + 12|0);
    $71 = HEAP32[$70>>2]|0;
    $block_rows = $71;
    $72 = $block_rows;
    $73 = $72<<1;
    $access_rows = $73;
    $last_row = 0;
   } else {
    $74 = $compptr;
    $75 = (($74) + 32|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $compptr;
    $78 = (($77) + 12|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($76>>>0) % ($79>>>0))&-1;
    $block_rows = $80;
    $81 = $block_rows;
    $82 = ($81|0)==(0);
    if ($82) {
     $83 = $compptr;
     $84 = (($83) + 12|0);
     $85 = HEAP32[$84>>2]|0;
     $block_rows = $85;
    }
    $86 = $block_rows;
    $access_rows = $86;
    $last_row = 1;
   }
   $87 = $1;
   $88 = (($87) + 156|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = ($89>>>0)>(0);
   if ($90) {
    $91 = $compptr;
    $92 = (($91) + 12|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = $access_rows;
    $95 = (($94) + ($93))|0;
    $access_rows = $95;
    $96 = $1;
    $97 = (($96) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (($98) + 32|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $1;
    $102 = $ci;
    $103 = $coef;
    $104 = (($103) + 72|0);
    $105 = (($104) + ($102<<2)|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $1;
    $108 = (($107) + 156|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = (($109) - 1)|0;
    $111 = $compptr;
    $112 = (($111) + 12|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = Math_imul($110, $113)|0;
    $115 = $access_rows;
    $116 = (FUNCTION_TABLE_iiiiii[$100 & 511]($101,$106,$114,$115,0)|0);
    $buffer = $116;
    $117 = $compptr;
    $118 = (($117) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = $buffer;
    $121 = (($120) + ($119<<2)|0);
    $buffer = $121;
    $first_row = 0;
   } else {
    $122 = $1;
    $123 = (($122) + 4|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($124) + 32|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $1;
    $128 = $ci;
    $129 = $coef;
    $130 = (($129) + 72|0);
    $131 = (($130) + ($128<<2)|0);
    $132 = HEAP32[$131>>2]|0;
    $133 = $access_rows;
    $134 = (FUNCTION_TABLE_iiiiii[$126 & 511]($127,$132,0,$133,0)|0);
    $buffer = $134;
    $first_row = 1;
   }
   $135 = $coef;
   $136 = (($135) + 112|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $ci;
   $139 = ($138*6)|0;
   $140 = (($137) + ($139<<2)|0);
   $coef_bits = $140;
   $141 = $compptr;
   $142 = (($141) + 80|0);
   $143 = HEAP32[$142>>2]|0;
   $quanttbl = $143;
   $144 = $quanttbl;
   $145 = HEAP16[$144>>1]|0;
   $146 = $145&65535;
   $Q00 = $146;
   $147 = $quanttbl;
   $148 = (($147) + 2|0);
   $149 = HEAP16[$148>>1]|0;
   $150 = $149&65535;
   $Q01 = $150;
   $151 = $quanttbl;
   $152 = (($151) + 16|0);
   $153 = HEAP16[$152>>1]|0;
   $154 = $153&65535;
   $Q10 = $154;
   $155 = $quanttbl;
   $156 = (($155) + 32|0);
   $157 = HEAP16[$156>>1]|0;
   $158 = $157&65535;
   $Q20 = $158;
   $159 = $quanttbl;
   $160 = (($159) + 18|0);
   $161 = HEAP16[$160>>1]|0;
   $162 = $161&65535;
   $Q11 = $162;
   $163 = $quanttbl;
   $164 = (($163) + 4|0);
   $165 = HEAP16[$164>>1]|0;
   $166 = $165&65535;
   $Q02 = $166;
   $167 = $ci;
   $168 = $1;
   $169 = (($168) + 472|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + 4|0);
   $172 = (($171) + ($167<<2)|0);
   $173 = HEAP32[$172>>2]|0;
   $inverse_DCT = $173;
   $174 = $ci;
   $175 = $2;
   $176 = (($175) + ($174<<2)|0);
   $177 = HEAP32[$176>>2]|0;
   $output_ptr = $177;
   $block_row = 0;
   while(1) {
    $178 = $block_row;
    $179 = $block_rows;
    $180 = ($178|0)<($179|0);
    if (!($180)) {
     break;
    }
    $181 = $block_row;
    $182 = $buffer;
    $183 = (($182) + ($181<<2)|0);
    $184 = HEAP32[$183>>2]|0;
    $buffer_ptr = $184;
    $185 = $first_row;
    $186 = ($185|0)!=(0);
    if ($186) {
     $187 = $block_row;
     $188 = ($187|0)==(0);
     if ($188) {
      $189 = $buffer_ptr;
      $prev_block_row = $189;
     } else {
      label = 29;
     }
    } else {
     label = 29;
    }
    if ((label|0) == 29) {
     label = 0;
     $190 = $block_row;
     $191 = (($190) - 1)|0;
     $192 = $buffer;
     $193 = (($192) + ($191<<2)|0);
     $194 = HEAP32[$193>>2]|0;
     $prev_block_row = $194;
    }
    $195 = $last_row;
    $196 = ($195|0)!=(0);
    if ($196) {
     $197 = $block_row;
     $198 = $block_rows;
     $199 = (($198) - 1)|0;
     $200 = ($197|0)==($199|0);
     if ($200) {
      $201 = $buffer_ptr;
      $next_block_row = $201;
     } else {
      label = 33;
     }
    } else {
     label = 33;
    }
    if ((label|0) == 33) {
     label = 0;
     $202 = $block_row;
     $203 = (($202) + 1)|0;
     $204 = $buffer;
     $205 = (($204) + ($203<<2)|0);
     $206 = HEAP32[$205>>2]|0;
     $next_block_row = $206;
    }
    $207 = $prev_block_row;
    $208 = HEAP16[$207>>1]|0;
    $209 = $208 << 16 >> 16;
    $DC3 = $209;
    $DC2 = $209;
    $DC1 = $209;
    $210 = $buffer_ptr;
    $211 = HEAP16[$210>>1]|0;
    $212 = $211 << 16 >> 16;
    $DC6 = $212;
    $DC5 = $212;
    $DC4 = $212;
    $213 = $next_block_row;
    $214 = HEAP16[$213>>1]|0;
    $215 = $214 << 16 >> 16;
    $DC9 = $215;
    $DC8 = $215;
    $DC7 = $215;
    $output_col = 0;
    $216 = $compptr;
    $217 = (($216) + 28|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = (($218) - 1)|0;
    $last_block_column = $219;
    $block_num = 0;
    while(1) {
     $220 = $block_num;
     $221 = $last_block_column;
     $222 = ($220>>>0)<=($221>>>0);
     if (!($222)) {
      break;
     }
     $223 = $buffer_ptr;
     _jcopy_block_row($223,$workspace,1);
     $224 = $block_num;
     $225 = $last_block_column;
     $226 = ($224>>>0)<($225>>>0);
     if ($226) {
      $227 = $prev_block_row;
      $228 = (($227) + 128|0);
      $229 = HEAP16[$228>>1]|0;
      $230 = $229 << 16 >> 16;
      $DC3 = $230;
      $231 = $buffer_ptr;
      $232 = (($231) + 128|0);
      $233 = HEAP16[$232>>1]|0;
      $234 = $233 << 16 >> 16;
      $DC6 = $234;
      $235 = $next_block_row;
      $236 = (($235) + 128|0);
      $237 = HEAP16[$236>>1]|0;
      $238 = $237 << 16 >> 16;
      $DC9 = $238;
     }
     $239 = $coef_bits;
     $240 = (($239) + 4|0);
     $241 = HEAP32[$240>>2]|0;
     $Al = $241;
     $242 = ($241|0)!=(0);
     if ($242) {
      $243 = (($workspace) + 2|0);
      $244 = HEAP16[$243>>1]|0;
      $245 = $244 << 16 >> 16;
      $246 = ($245|0)==(0);
      if ($246) {
       $247 = $Q00;
       $248 = ($247*36)|0;
       $249 = $DC4;
       $250 = $DC6;
       $251 = (($249) - ($250))|0;
       $252 = Math_imul($248, $251)|0;
       $num = $252;
       $253 = $num;
       $254 = ($253|0)>=(0);
       if ($254) {
        $255 = $Q01;
        $256 = $255 << 7;
        $257 = $num;
        $258 = (($256) + ($257))|0;
        $259 = $Q01;
        $260 = $259 << 8;
        $261 = (($258|0) / ($260|0))&-1;
        $pred = $261;
        $262 = $Al;
        $263 = ($262|0)>(0);
        do {
         if ($263) {
          $264 = $pred;
          $265 = $Al;
          $266 = 1 << $265;
          $267 = ($264|0)>=($266|0);
          if (!($267)) {
           break;
          }
          $268 = $Al;
          $269 = 1 << $268;
          $270 = (($269) - 1)|0;
          $pred = $270;
         }
        } while(0);
       } else {
        $271 = $Q01;
        $272 = $271 << 7;
        $273 = $num;
        $274 = (($272) - ($273))|0;
        $275 = $Q01;
        $276 = $275 << 8;
        $277 = (($274|0) / ($276|0))&-1;
        $pred = $277;
        $278 = $Al;
        $279 = ($278|0)>(0);
        do {
         if ($279) {
          $280 = $pred;
          $281 = $Al;
          $282 = 1 << $281;
          $283 = ($280|0)>=($282|0);
          if (!($283)) {
           break;
          }
          $284 = $Al;
          $285 = 1 << $284;
          $286 = (($285) - 1)|0;
          $pred = $286;
         }
        } while(0);
        $287 = $pred;
        $288 = (0 - ($287))|0;
        $pred = $288;
       }
       $289 = $pred;
       $290 = $289&65535;
       $291 = (($workspace) + 2|0);
       HEAP16[$291>>1] = $290;
      }
     }
     $292 = $coef_bits;
     $293 = (($292) + 8|0);
     $294 = HEAP32[$293>>2]|0;
     $Al = $294;
     $295 = ($294|0)!=(0);
     if ($295) {
      $296 = (($workspace) + 16|0);
      $297 = HEAP16[$296>>1]|0;
      $298 = $297 << 16 >> 16;
      $299 = ($298|0)==(0);
      if ($299) {
       $300 = $Q00;
       $301 = ($300*36)|0;
       $302 = $DC2;
       $303 = $DC8;
       $304 = (($302) - ($303))|0;
       $305 = Math_imul($301, $304)|0;
       $num = $305;
       $306 = $num;
       $307 = ($306|0)>=(0);
       if ($307) {
        $308 = $Q10;
        $309 = $308 << 7;
        $310 = $num;
        $311 = (($309) + ($310))|0;
        $312 = $Q10;
        $313 = $312 << 8;
        $314 = (($311|0) / ($313|0))&-1;
        $pred = $314;
        $315 = $Al;
        $316 = ($315|0)>(0);
        do {
         if ($316) {
          $317 = $pred;
          $318 = $Al;
          $319 = 1 << $318;
          $320 = ($317|0)>=($319|0);
          if (!($320)) {
           break;
          }
          $321 = $Al;
          $322 = 1 << $321;
          $323 = (($322) - 1)|0;
          $pred = $323;
         }
        } while(0);
       } else {
        $324 = $Q10;
        $325 = $324 << 7;
        $326 = $num;
        $327 = (($325) - ($326))|0;
        $328 = $Q10;
        $329 = $328 << 8;
        $330 = (($327|0) / ($329|0))&-1;
        $pred = $330;
        $331 = $Al;
        $332 = ($331|0)>(0);
        do {
         if ($332) {
          $333 = $pred;
          $334 = $Al;
          $335 = 1 << $334;
          $336 = ($333|0)>=($335|0);
          if (!($336)) {
           break;
          }
          $337 = $Al;
          $338 = 1 << $337;
          $339 = (($338) - 1)|0;
          $pred = $339;
         }
        } while(0);
        $340 = $pred;
        $341 = (0 - ($340))|0;
        $pred = $341;
       }
       $342 = $pred;
       $343 = $342&65535;
       $344 = (($workspace) + 16|0);
       HEAP16[$344>>1] = $343;
      }
     }
     $345 = $coef_bits;
     $346 = (($345) + 12|0);
     $347 = HEAP32[$346>>2]|0;
     $Al = $347;
     $348 = ($347|0)!=(0);
     if ($348) {
      $349 = (($workspace) + 32|0);
      $350 = HEAP16[$349>>1]|0;
      $351 = $350 << 16 >> 16;
      $352 = ($351|0)==(0);
      if ($352) {
       $353 = $Q00;
       $354 = ($353*9)|0;
       $355 = $DC2;
       $356 = $DC8;
       $357 = (($355) + ($356))|0;
       $358 = $DC5;
       $359 = $358<<1;
       $360 = (($357) - ($359))|0;
       $361 = Math_imul($354, $360)|0;
       $num = $361;
       $362 = $num;
       $363 = ($362|0)>=(0);
       if ($363) {
        $364 = $Q20;
        $365 = $364 << 7;
        $366 = $num;
        $367 = (($365) + ($366))|0;
        $368 = $Q20;
        $369 = $368 << 8;
        $370 = (($367|0) / ($369|0))&-1;
        $pred = $370;
        $371 = $Al;
        $372 = ($371|0)>(0);
        do {
         if ($372) {
          $373 = $pred;
          $374 = $Al;
          $375 = 1 << $374;
          $376 = ($373|0)>=($375|0);
          if (!($376)) {
           break;
          }
          $377 = $Al;
          $378 = 1 << $377;
          $379 = (($378) - 1)|0;
          $pred = $379;
         }
        } while(0);
       } else {
        $380 = $Q20;
        $381 = $380 << 7;
        $382 = $num;
        $383 = (($381) - ($382))|0;
        $384 = $Q20;
        $385 = $384 << 8;
        $386 = (($383|0) / ($385|0))&-1;
        $pred = $386;
        $387 = $Al;
        $388 = ($387|0)>(0);
        do {
         if ($388) {
          $389 = $pred;
          $390 = $Al;
          $391 = 1 << $390;
          $392 = ($389|0)>=($391|0);
          if (!($392)) {
           break;
          }
          $393 = $Al;
          $394 = 1 << $393;
          $395 = (($394) - 1)|0;
          $pred = $395;
         }
        } while(0);
        $396 = $pred;
        $397 = (0 - ($396))|0;
        $pred = $397;
       }
       $398 = $pred;
       $399 = $398&65535;
       $400 = (($workspace) + 32|0);
       HEAP16[$400>>1] = $399;
      }
     }
     $401 = $coef_bits;
     $402 = (($401) + 16|0);
     $403 = HEAP32[$402>>2]|0;
     $Al = $403;
     $404 = ($403|0)!=(0);
     if ($404) {
      $405 = (($workspace) + 18|0);
      $406 = HEAP16[$405>>1]|0;
      $407 = $406 << 16 >> 16;
      $408 = ($407|0)==(0);
      if ($408) {
       $409 = $Q00;
       $410 = ($409*5)|0;
       $411 = $DC1;
       $412 = $DC3;
       $413 = (($411) - ($412))|0;
       $414 = $DC7;
       $415 = (($413) - ($414))|0;
       $416 = $DC9;
       $417 = (($415) + ($416))|0;
       $418 = Math_imul($410, $417)|0;
       $num = $418;
       $419 = $num;
       $420 = ($419|0)>=(0);
       if ($420) {
        $421 = $Q11;
        $422 = $421 << 7;
        $423 = $num;
        $424 = (($422) + ($423))|0;
        $425 = $Q11;
        $426 = $425 << 8;
        $427 = (($424|0) / ($426|0))&-1;
        $pred = $427;
        $428 = $Al;
        $429 = ($428|0)>(0);
        do {
         if ($429) {
          $430 = $pred;
          $431 = $Al;
          $432 = 1 << $431;
          $433 = ($430|0)>=($432|0);
          if (!($433)) {
           break;
          }
          $434 = $Al;
          $435 = 1 << $434;
          $436 = (($435) - 1)|0;
          $pred = $436;
         }
        } while(0);
       } else {
        $437 = $Q11;
        $438 = $437 << 7;
        $439 = $num;
        $440 = (($438) - ($439))|0;
        $441 = $Q11;
        $442 = $441 << 8;
        $443 = (($440|0) / ($442|0))&-1;
        $pred = $443;
        $444 = $Al;
        $445 = ($444|0)>(0);
        do {
         if ($445) {
          $446 = $pred;
          $447 = $Al;
          $448 = 1 << $447;
          $449 = ($446|0)>=($448|0);
          if (!($449)) {
           break;
          }
          $450 = $Al;
          $451 = 1 << $450;
          $452 = (($451) - 1)|0;
          $pred = $452;
         }
        } while(0);
        $453 = $pred;
        $454 = (0 - ($453))|0;
        $pred = $454;
       }
       $455 = $pred;
       $456 = $455&65535;
       $457 = (($workspace) + 18|0);
       HEAP16[$457>>1] = $456;
      }
     }
     $458 = $coef_bits;
     $459 = (($458) + 20|0);
     $460 = HEAP32[$459>>2]|0;
     $Al = $460;
     $461 = ($460|0)!=(0);
     if ($461) {
      $462 = (($workspace) + 4|0);
      $463 = HEAP16[$462>>1]|0;
      $464 = $463 << 16 >> 16;
      $465 = ($464|0)==(0);
      if ($465) {
       $466 = $Q00;
       $467 = ($466*9)|0;
       $468 = $DC4;
       $469 = $DC6;
       $470 = (($468) + ($469))|0;
       $471 = $DC5;
       $472 = $471<<1;
       $473 = (($470) - ($472))|0;
       $474 = Math_imul($467, $473)|0;
       $num = $474;
       $475 = $num;
       $476 = ($475|0)>=(0);
       if ($476) {
        $477 = $Q02;
        $478 = $477 << 7;
        $479 = $num;
        $480 = (($478) + ($479))|0;
        $481 = $Q02;
        $482 = $481 << 8;
        $483 = (($480|0) / ($482|0))&-1;
        $pred = $483;
        $484 = $Al;
        $485 = ($484|0)>(0);
        do {
         if ($485) {
          $486 = $pred;
          $487 = $Al;
          $488 = 1 << $487;
          $489 = ($486|0)>=($488|0);
          if (!($489)) {
           break;
          }
          $490 = $Al;
          $491 = 1 << $490;
          $492 = (($491) - 1)|0;
          $pred = $492;
         }
        } while(0);
       } else {
        $493 = $Q02;
        $494 = $493 << 7;
        $495 = $num;
        $496 = (($494) - ($495))|0;
        $497 = $Q02;
        $498 = $497 << 8;
        $499 = (($496|0) / ($498|0))&-1;
        $pred = $499;
        $500 = $Al;
        $501 = ($500|0)>(0);
        do {
         if ($501) {
          $502 = $pred;
          $503 = $Al;
          $504 = 1 << $503;
          $505 = ($502|0)>=($504|0);
          if (!($505)) {
           break;
          }
          $506 = $Al;
          $507 = 1 << $506;
          $508 = (($507) - 1)|0;
          $pred = $508;
         }
        } while(0);
        $509 = $pred;
        $510 = (0 - ($509))|0;
        $pred = $510;
       }
       $511 = $pred;
       $512 = $511&65535;
       $513 = (($workspace) + 4|0);
       HEAP16[$513>>1] = $512;
      }
     }
     $514 = $inverse_DCT;
     $515 = $1;
     $516 = $compptr;
     $517 = $output_ptr;
     $518 = $output_col;
     FUNCTION_TABLE_viiiii[$514 & 255]($515,$516,$workspace,$517,$518);
     $519 = $DC2;
     $DC1 = $519;
     $520 = $DC3;
     $DC2 = $520;
     $521 = $DC5;
     $DC4 = $521;
     $522 = $DC6;
     $DC5 = $522;
     $523 = $DC8;
     $DC7 = $523;
     $524 = $DC9;
     $DC8 = $524;
     $525 = $buffer_ptr;
     $526 = (($525) + 128|0);
     $buffer_ptr = $526;
     $527 = $prev_block_row;
     $528 = (($527) + 128|0);
     $prev_block_row = $528;
     $529 = $next_block_row;
     $530 = (($529) + 128|0);
     $next_block_row = $530;
     $531 = $compptr;
     $532 = (($531) + 36|0);
     $533 = HEAP32[$532>>2]|0;
     $534 = $output_col;
     $535 = (($534) + ($533))|0;
     $output_col = $535;
     $536 = $block_num;
     $537 = (($536) + 1)|0;
     $block_num = $537;
    }
    $538 = $compptr;
    $539 = (($538) + 40|0);
    $540 = HEAP32[$539>>2]|0;
    $541 = $output_ptr;
    $542 = (($541) + ($540<<2)|0);
    $output_ptr = $542;
    $543 = $block_row;
    $544 = (($543) + 1)|0;
    $block_row = $544;
   }
  } else {
  }
  $545 = $ci;
  $546 = (($545) + 1)|0;
  $ci = $546;
  $547 = $compptr;
  $548 = (($547) + 88|0);
  $compptr = $548;
 }
 $549 = $1;
 $550 = (($549) + 156|0);
 $551 = HEAP32[$550>>2]|0;
 $552 = (($551) + 1)|0;
 HEAP32[$550>>2] = $552;
 $553 = $1;
 $554 = (($553) + 332|0);
 $555 = HEAP32[$554>>2]|0;
 $556 = ($552>>>0)<($555>>>0);
 if ($556) {
  $0 = 3;
  $557 = $0;
  STACKTOP = sp;return ($557|0);
 } else {
  $0 = 4;
  $557 = $0;
  STACKTOP = sp;return ($557|0);
 }
 return 0|0;
}
function _jinit_color_deconverter($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cconvert = 0, $ci = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,32)|0);
 $cconvert = $6;
 $7 = $cconvert;
 $8 = $0;
 $9 = (($8) + 480|0);
 HEAP32[$9>>2] = $7;
 $10 = $cconvert;
 HEAP32[$10>>2] = 155;
 $11 = $0;
 $12 = (($11) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 switch ($13|0) {
 case 7: case 6: case 3: case 2:  {
  $25 = $0;
  $26 = (($25) + 36|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(3);
  if ($28) {
   $29 = $0;
   $30 = HEAP32[$29>>2]|0;
   $31 = (($30) + 20|0);
   HEAP32[$31>>2] = 11;
   $32 = $0;
   $33 = HEAP32[$32>>2]|0;
   $34 = HEAP32[$33>>2]|0;
   $35 = $0;
   FUNCTION_TABLE_vi[$34 & 511]($35);
  }
  break;
 }
 case 5: case 4:  {
  $36 = $0;
  $37 = (($36) + 36|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(4);
  if ($39) {
   $40 = $0;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 20|0);
   HEAP32[$42>>2] = 11;
   $43 = $0;
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$44>>2]|0;
   $46 = $0;
   FUNCTION_TABLE_vi[$45 & 511]($46);
  }
  break;
 }
 case 1:  {
  $14 = $0;
  $15 = (($14) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($16|0)!=(1);
  if ($17) {
   $18 = $0;
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 20|0);
   HEAP32[$20>>2] = 11;
   $21 = $0;
   $22 = HEAP32[$21>>2]|0;
   $23 = HEAP32[$22>>2]|0;
   $24 = $0;
   FUNCTION_TABLE_vi[$23 & 511]($24);
  }
  break;
 }
 default: {
  $47 = $0;
  $48 = (($47) + 36|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)<(1);
  if ($50) {
   $51 = $0;
   $52 = HEAP32[$51>>2]|0;
   $53 = (($52) + 20|0);
   HEAP32[$53>>2] = 11;
   $54 = $0;
   $55 = HEAP32[$54>>2]|0;
   $56 = HEAP32[$55>>2]|0;
   $57 = $0;
   FUNCTION_TABLE_vi[$56 & 511]($57);
  }
 }
 }
 $58 = $0;
 $59 = (($58) + 304|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = $0;
  $63 = (($62) + 40|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)!=(2);
  if ($65) {
   $66 = $0;
   $67 = (($66) + 40|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)!=(6);
   if ($69) {
    $70 = $0;
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + 20|0);
    HEAP32[$72>>2] = 28;
    $73 = $0;
    $74 = HEAP32[$73>>2]|0;
    $75 = HEAP32[$74>>2]|0;
    $76 = $0;
    FUNCTION_TABLE_vi[$75 & 511]($76);
   }
  }
 }
 $77 = $0;
 $78 = (($77) + 44|0);
 $79 = HEAP32[$78>>2]|0;
 if ((($79|0) == 2)) {
  $122 = $0;
  $123 = (($122) + 120|0);
  HEAP32[$123>>2] = 3;
  $124 = $0;
  $125 = (($124) + 40|0);
  $126 = HEAP32[$125>>2]|0;
  if ((($126|0) == 1)) {
   $127 = $cconvert;
   $128 = (($127) + 4|0);
   HEAP32[$128>>2] = 159;
  } else if ((($126|0) == 7)) {
   $132 = $cconvert;
   $133 = (($132) + 4|0);
   HEAP32[$133>>2] = 160;
   $134 = $0;
   _build_bg_ycc_rgb_table($134);
  } else if ((($126|0) == 2)) {
   $135 = $0;
   $136 = (($135) + 304|0);
   $137 = HEAP32[$136>>2]|0;
   if ((($137|0) == 0)) {
    $138 = $cconvert;
    $139 = (($138) + 4|0);
    HEAP32[$139>>2] = 161;
   } else if ((($137|0) == 1)) {
    $140 = $cconvert;
    $141 = (($140) + 4|0);
    HEAP32[$141>>2] = 162;
   } else {
    $142 = $0;
    $143 = HEAP32[$142>>2]|0;
    $144 = (($143) + 20|0);
    HEAP32[$144>>2] = 28;
    $145 = $0;
    $146 = HEAP32[$145>>2]|0;
    $147 = HEAP32[$146>>2]|0;
    $148 = $0;
    FUNCTION_TABLE_vi[$147 & 511]($148);
   }
  } else if ((($126|0) == 3)) {
   $129 = $cconvert;
   $130 = (($129) + 4|0);
   HEAP32[$130>>2] = 160;
   $131 = $0;
   _build_ycc_rgb_table($131);
  } else {
   $149 = $0;
   $150 = HEAP32[$149>>2]|0;
   $151 = (($150) + 20|0);
   HEAP32[$151>>2] = 28;
   $152 = $0;
   $153 = HEAP32[$152>>2]|0;
   $154 = HEAP32[$153>>2]|0;
   $155 = $0;
   FUNCTION_TABLE_vi[$154 & 511]($155);
  }
 } else if ((($79|0) == 6)) {
  $156 = $0;
  $157 = (($156) + 120|0);
  HEAP32[$157>>2] = 3;
  $158 = $0;
  $159 = (($158) + 40|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = ($160|0)==(6);
  if ($161) {
   $162 = $0;
   $163 = (($162) + 304|0);
   $164 = HEAP32[$163>>2]|0;
   if ((($164|0) == 0)) {
    $165 = $cconvert;
    $166 = (($165) + 4|0);
    HEAP32[$166>>2] = 161;
   } else if ((($164|0) == 1)) {
    $167 = $cconvert;
    $168 = (($167) + 4|0);
    HEAP32[$168>>2] = 162;
   } else {
    $169 = $0;
    $170 = HEAP32[$169>>2]|0;
    $171 = (($170) + 20|0);
    HEAP32[$171>>2] = 28;
    $172 = $0;
    $173 = HEAP32[$172>>2]|0;
    $174 = HEAP32[$173>>2]|0;
    $175 = $0;
    FUNCTION_TABLE_vi[$174 & 511]($175);
   }
  } else {
   $176 = $0;
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) + 20|0);
   HEAP32[$178>>2] = 28;
   $179 = $0;
   $180 = HEAP32[$179>>2]|0;
   $181 = HEAP32[$180>>2]|0;
   $182 = $0;
   FUNCTION_TABLE_vi[$181 & 511]($182);
  }
 } else if ((($79|0) == 1)) {
  $80 = $0;
  $81 = (($80) + 120|0);
  HEAP32[$81>>2] = 1;
  $82 = $0;
  $83 = (($82) + 40|0);
  $84 = HEAP32[$83>>2]|0;
  if ((($84|0) == 2)) {
   $100 = $0;
   $101 = (($100) + 304|0);
   $102 = HEAP32[$101>>2]|0;
   if ((($102|0) == 1)) {
    $105 = $cconvert;
    $106 = (($105) + 4|0);
    HEAP32[$106>>2] = 158;
   } else if ((($102|0) == 0)) {
    $103 = $cconvert;
    $104 = (($103) + 4|0);
    HEAP32[$104>>2] = 157;
   } else {
    $107 = $0;
    $108 = HEAP32[$107>>2]|0;
    $109 = (($108) + 20|0);
    HEAP32[$109>>2] = 28;
    $110 = $0;
    $111 = HEAP32[$110>>2]|0;
    $112 = HEAP32[$111>>2]|0;
    $113 = $0;
    FUNCTION_TABLE_vi[$112 & 511]($113);
   }
   $114 = $0;
   _build_rgb_y_table($114);
  } else if ((($84|0) == 7) | (($84|0) == 3) | (($84|0) == 1)) {
   $85 = $cconvert;
   $86 = (($85) + 4|0);
   HEAP32[$86>>2] = 156;
   $ci = 1;
   while(1) {
    $87 = $ci;
    $88 = $0;
    $89 = (($88) + 36|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($87|0)<($90|0);
    if (!($91)) {
     break;
    }
    $92 = $ci;
    $93 = $0;
    $94 = (($93) + 216|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = (($95) + (($92*88)|0)|0);
    $97 = (($96) + 52|0);
    HEAP32[$97>>2] = 0;
    $98 = $ci;
    $99 = (($98) + 1)|0;
    $ci = $99;
   }
  } else {
   $115 = $0;
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + 20|0);
   HEAP32[$117>>2] = 28;
   $118 = $0;
   $119 = HEAP32[$118>>2]|0;
   $120 = HEAP32[$119>>2]|0;
   $121 = $0;
   FUNCTION_TABLE_vi[$120 & 511]($121);
  }
 } else if ((($79|0) == 4)) {
  $183 = $0;
  $184 = (($183) + 120|0);
  HEAP32[$184>>2] = 4;
  $185 = $0;
  $186 = (($185) + 40|0);
  $187 = HEAP32[$186>>2]|0;
  if ((($187|0) == 5)) {
   $188 = $cconvert;
   $189 = (($188) + 4|0);
   HEAP32[$189>>2] = 163;
   $190 = $0;
   _build_ycc_rgb_table($190);
  } else if ((($187|0) == 4)) {
   $191 = $cconvert;
   $192 = (($191) + 4|0);
   HEAP32[$192>>2] = 164;
  } else {
   $193 = $0;
   $194 = HEAP32[$193>>2]|0;
   $195 = (($194) + 20|0);
   HEAP32[$195>>2] = 28;
   $196 = $0;
   $197 = HEAP32[$196>>2]|0;
   $198 = HEAP32[$197>>2]|0;
   $199 = $0;
   FUNCTION_TABLE_vi[$198 & 511]($199);
  }
 } else {
  $200 = $0;
  $201 = (($200) + 44|0);
  $202 = HEAP32[$201>>2]|0;
  $203 = $0;
  $204 = (($203) + 40|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = ($202|0)==($205|0);
  if ($206) {
   $207 = $0;
   $208 = (($207) + 36|0);
   $209 = HEAP32[$208>>2]|0;
   $210 = $0;
   $211 = (($210) + 120|0);
   HEAP32[$211>>2] = $209;
   $212 = $cconvert;
   $213 = (($212) + 4|0);
   HEAP32[$213>>2] = 164;
  } else {
   $214 = $0;
   $215 = HEAP32[$214>>2]|0;
   $216 = (($215) + 20|0);
   HEAP32[$216>>2] = 28;
   $217 = $0;
   $218 = HEAP32[$217>>2]|0;
   $219 = HEAP32[$218>>2]|0;
   $220 = $0;
   FUNCTION_TABLE_vi[$219 & 511]($220);
  }
 }
 $221 = $0;
 $222 = (($221) + 84|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = ($223|0)!=(0);
 if ($224) {
  $225 = $0;
  $226 = (($225) + 124|0);
  HEAP32[$226>>2] = 1;
  STACKTOP = sp;return;
 } else {
  $227 = $0;
  $228 = (($227) + 120|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = $0;
  $231 = (($230) + 124|0);
  HEAP32[$231>>2] = $229;
  STACKTOP = sp;return;
 }
}
function _start_pass_dcolor($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return;
}
function _grayscale_convert30($cinfo,$input_buf,$input_row,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $input_row = $input_row|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $input_row;
 $3 = $output_buf;
 $4 = $num_rows;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $0;
 $11 = (($10) + 112|0);
 $12 = HEAP32[$11>>2]|0;
 _jcopy_sample_rows($6,$7,$8,0,$9,$12);
 STACKTOP = sp;return;
}
function _rgb_gray_convert31($cinfo,$input_buf,$input_row,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $input_row = $input_row|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $b = 0, $cconvert = 0, $col = 0, $ctab = 0, $g = 0, $inptr0 = 0, $inptr1 = 0, $inptr2 = 0, $num_cols = 0, $outptr = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $input_row;
 $3 = $output_buf;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 480|0);
 $7 = HEAP32[$6>>2]|0;
 $cconvert = $7;
 $8 = $cconvert;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $ctab = $10;
 $11 = $0;
 $12 = (($11) + 112|0);
 $13 = HEAP32[$12>>2]|0;
 $num_cols = $13;
 while(1) {
  $14 = $4;
  $15 = (($14) + -1)|0;
  $4 = $15;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $2;
  $18 = $1;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($17<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $inptr0 = $21;
  $22 = $2;
  $23 = $1;
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $inptr1 = $27;
  $28 = $2;
  $29 = $1;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($28<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $inptr2 = $33;
  $34 = $2;
  $35 = (($34) + 1)|0;
  $2 = $35;
  $36 = $3;
  $37 = (($36) + 4|0);
  $3 = $37;
  $38 = HEAP32[$36>>2]|0;
  $outptr = $38;
  $col = 0;
  while(1) {
   $39 = $col;
   $40 = $num_cols;
   $41 = ($39>>>0)<($40>>>0);
   if (!($41)) {
    break;
   }
   $42 = $col;
   $43 = $inptr0;
   $44 = (($43) + ($42)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $r = $46;
   $47 = $col;
   $48 = $inptr1;
   $49 = (($48) + ($47)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $g = $51;
   $52 = $col;
   $53 = $inptr2;
   $54 = (($53) + ($52)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $b = $56;
   $57 = $r;
   $58 = (($57) + 0)|0;
   $59 = $ctab;
   $60 = (($59) + ($58<<2)|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $g;
   $63 = (($62) + 256)|0;
   $64 = $ctab;
   $65 = (($64) + ($63<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($61) + ($66))|0;
   $68 = $b;
   $69 = (($68) + 512)|0;
   $70 = $ctab;
   $71 = (($70) + ($69<<2)|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($67) + ($72))|0;
   $74 = $73 >> 16;
   $75 = $74&255;
   $76 = $col;
   $77 = $outptr;
   $78 = (($77) + ($76)|0);
   HEAP8[$78>>0] = $75;
   $79 = $col;
   $80 = (($79) + 1)|0;
   $col = $80;
  }
 }
 STACKTOP = sp;return;
}
function _rgb1_gray_convert($cinfo,$input_buf,$input_row,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $input_row = $input_row|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $b = 0, $cconvert = 0, $col = 0, $ctab = 0, $g = 0, $inptr0 = 0, $inptr1 = 0, $inptr2 = 0, $num_cols = 0;
 var $outptr = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $input_row;
 $3 = $output_buf;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 480|0);
 $7 = HEAP32[$6>>2]|0;
 $cconvert = $7;
 $8 = $cconvert;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $ctab = $10;
 $11 = $0;
 $12 = (($11) + 112|0);
 $13 = HEAP32[$12>>2]|0;
 $num_cols = $13;
 while(1) {
  $14 = $4;
  $15 = (($14) + -1)|0;
  $4 = $15;
  $16 = ($15|0)>=(0);
  if (!($16)) {
   break;
  }
  $17 = $2;
  $18 = $1;
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($17<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $inptr0 = $21;
  $22 = $2;
  $23 = $1;
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $inptr1 = $27;
  $28 = $2;
  $29 = $1;
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($28<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $inptr2 = $33;
  $34 = $2;
  $35 = (($34) + 1)|0;
  $2 = $35;
  $36 = $3;
  $37 = (($36) + 4|0);
  $3 = $37;
  $38 = HEAP32[$36>>2]|0;
  $outptr = $38;
  $col = 0;
  while(1) {
   $39 = $col;
   $40 = $num_cols;
   $41 = ($39>>>0)<($40>>>0);
   if (!($41)) {
    break;
   }
   $42 = $col;
   $43 = $inptr0;
   $44 = (($43) + ($42)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $r = $46;
   $47 = $col;
   $48 = $inptr1;
   $49 = (($48) + ($47)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $g = $51;
   $52 = $col;
   $53 = $inptr2;
   $54 = (($53) + ($52)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $b = $56;
   $57 = $r;
   $58 = $g;
   $59 = (($57) + ($58))|0;
   $60 = (($59) - 128)|0;
   $61 = $60 & 255;
   $r = $61;
   $62 = $b;
   $63 = $g;
   $64 = (($62) + ($63))|0;
   $65 = (($64) - 128)|0;
   $66 = $65 & 255;
   $b = $66;
   $67 = $r;
   $68 = (($67) + 0)|0;
   $69 = $ctab;
   $70 = (($69) + ($68<<2)|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $g;
   $73 = (($72) + 256)|0;
   $74 = $ctab;
   $75 = (($74) + ($73<<2)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (($71) + ($76))|0;
   $78 = $b;
   $79 = (($78) + 512)|0;
   $80 = $ctab;
   $81 = (($80) + ($79<<2)|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($77) + ($82))|0;
   $84 = $83 >> 16;
   $85 = $84&255;
   $86 = $col;
   $87 = $outptr;
   $88 = (($87) + ($86)|0);
   HEAP8[$88>>0] = $85;
   $89 = $col;
   $90 = (($89) + 1)|0;
   $col = $90;
  }
 }
 STACKTOP = sp;return;
}
function _build_rgb_y_table($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cconvert = 0, $i = 0, $rgb_y_tab = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 480|0);
 $3 = HEAP32[$2>>2]|0;
 $cconvert = $3;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (FUNCTION_TABLE_iiii[$7 & 511]($8,1,3072)|0);
 $rgb_y_tab = $9;
 $10 = $cconvert;
 $11 = (($10) + 28|0);
 HEAP32[$11>>2] = $9;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = ($12|0)<=(255);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = ($14*19595)|0;
  $16 = $i;
  $17 = (($16) + 0)|0;
  $18 = $rgb_y_tab;
  $19 = (($18) + ($17<<2)|0);
  HEAP32[$19>>2] = $15;
  $20 = $i;
  $21 = ($20*38470)|0;
  $22 = $i;
  $23 = (($22) + 256)|0;
  $24 = $rgb_y_tab;
  $25 = (($24) + ($23<<2)|0);
  HEAP32[$25>>2] = $21;
  $26 = $i;
  $27 = ($26*7471)|0;
  $28 = (($27) + 32768)|0;
  $29 = $i;
  $30 = (($29) + 512)|0;
  $31 = $rgb_y_tab;
  $32 = (($31) + ($30<<2)|0);
  HEAP32[$32>>2] = $28;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 STACKTOP = sp;return;
}
function _gray_rgb_convert($cinfo,$input_buf,$input_row,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $input_row = $input_row|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $inptr = 0, $num_cols = 0, $outptr = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $input_row;
 $3 = $output_buf;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $num_cols = $7;
 while(1) {
  $8 = $4;
  $9 = (($8) + -1)|0;
  $4 = $9;
  $10 = ($9|0)>=(0);
  if (!($10)) {
   break;
  }
  $11 = $2;
  $12 = (($11) + 1)|0;
  $2 = $12;
  $13 = $1;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + ($11<<2)|0);
  $16 = HEAP32[$15>>2]|0;
  $inptr = $16;
  $17 = $3;
  $18 = (($17) + 4|0);
  $3 = $18;
  $19 = HEAP32[$17>>2]|0;
  $outptr = $19;
  $col = 0;
  while(1) {
   $20 = $col;
   $21 = $num_cols;
   $22 = ($20>>>0)<($21>>>0);
   if (!($22)) {
    break;
   }
   $23 = $col;
   $24 = $inptr;
   $25 = (($24) + ($23)|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = $outptr;
   $28 = (($27) + 2|0);
   HEAP8[$28>>0] = $26;
   $29 = $outptr;
   $30 = (($29) + 1|0);
   HEAP8[$30>>0] = $26;
   $31 = $outptr;
   HEAP8[$31>>0] = $26;
   $32 = $outptr;
   $33 = (($32) + 3|0);
   $outptr = $33;
   $34 = $col;
   $35 = (($34) + 1)|0;
   $col = $35;
  }
 }
 STACKTOP = sp;return;
}
function _ycc_rgb_convert($cinfo,$input_buf,$input_row,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $input_row = $input_row|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Cbbtab = 0, $Cbgtab = 0, $Crgtab = 0, $Crrtab = 0, $cb = 0, $cconvert = 0, $col = 0, $cr = 0, $inptr0 = 0;
 var $inptr1 = 0, $inptr2 = 0, $num_cols = 0, $outptr = 0, $range_limit = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $input_row;
 $3 = $output_buf;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 480|0);
 $7 = HEAP32[$6>>2]|0;
 $cconvert = $7;
 $8 = $0;
 $9 = (($8) + 112|0);
 $10 = HEAP32[$9>>2]|0;
 $num_cols = $10;
 $11 = $cconvert;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $range_limit = $13;
 $14 = $cconvert;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $Crrtab = $16;
 $17 = $cconvert;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $Cbbtab = $19;
 $20 = $cconvert;
 $21 = (($20) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $Crgtab = $22;
 $23 = $cconvert;
 $24 = (($23) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $Cbgtab = $25;
 while(1) {
  $26 = $4;
  $27 = (($26) + -1)|0;
  $4 = $27;
  $28 = ($27|0)>=(0);
  if (!($28)) {
   break;
  }
  $29 = $2;
  $30 = $1;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($29<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $inptr0 = $33;
  $34 = $2;
  $35 = $1;
  $36 = (($35) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($34<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $inptr1 = $39;
  $40 = $2;
  $41 = $1;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($40<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $inptr2 = $45;
  $46 = $2;
  $47 = (($46) + 1)|0;
  $2 = $47;
  $48 = $3;
  $49 = (($48) + 4|0);
  $3 = $49;
  $50 = HEAP32[$48>>2]|0;
  $outptr = $50;
  $col = 0;
  while(1) {
   $51 = $col;
   $52 = $num_cols;
   $53 = ($51>>>0)<($52>>>0);
   if (!($53)) {
    break;
   }
   $54 = $col;
   $55 = $inptr0;
   $56 = (($55) + ($54)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $y = $58;
   $59 = $col;
   $60 = $inptr1;
   $61 = (($60) + ($59)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $cb = $63;
   $64 = $col;
   $65 = $inptr2;
   $66 = (($65) + ($64)|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = $67&255;
   $cr = $68;
   $69 = $y;
   $70 = $cr;
   $71 = $Crrtab;
   $72 = (($71) + ($70<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = (($69) + ($73))|0;
   $75 = $range_limit;
   $76 = (($75) + ($74)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $outptr;
   HEAP8[$78>>0] = $77;
   $79 = $y;
   $80 = $cb;
   $81 = $Cbgtab;
   $82 = (($81) + ($80<<2)|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $cr;
   $85 = $Crgtab;
   $86 = (($85) + ($84<<2)|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($83) + ($87))|0;
   $89 = $88 >> 16;
   $90 = (($79) + ($89))|0;
   $91 = $range_limit;
   $92 = (($91) + ($90)|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $outptr;
   $95 = (($94) + 1|0);
   HEAP8[$95>>0] = $93;
   $96 = $y;
   $97 = $cb;
   $98 = $Cbbtab;
   $99 = (($98) + ($97<<2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = (($96) + ($100))|0;
   $102 = $range_limit;
   $103 = (($102) + ($101)|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $outptr;
   $106 = (($105) + 2|0);
   HEAP8[$106>>0] = $104;
   $107 = $outptr;
   $108 = (($107) + 3|0);
   $outptr = $108;
   $109 = $col;
   $110 = (($109) + 1)|0;
   $col = $110;
  }
 }
 STACKTOP = sp;return;
}
function _build_ycc_rgb_table($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $cconvert = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 480|0);
 $3 = HEAP32[$2>>2]|0;
 $cconvert = $3;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (FUNCTION_TABLE_iiii[$7 & 511]($8,1,1024)|0);
 $10 = $cconvert;
 $11 = (($10) + 8|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = (FUNCTION_TABLE_iiii[$15 & 511]($16,1,1024)|0);
 $18 = $cconvert;
 $19 = (($18) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = $0;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = $0;
 $25 = (FUNCTION_TABLE_iiii[$23 & 511]($24,1,1024)|0);
 $26 = $cconvert;
 $27 = (($26) + 16|0);
 HEAP32[$27>>2] = $25;
 $28 = $0;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 $33 = (FUNCTION_TABLE_iiii[$31 & 511]($32,1,1024)|0);
 $34 = $cconvert;
 $35 = (($34) + 20|0);
 HEAP32[$35>>2] = $33;
 $36 = $0;
 $37 = (($36) + 336|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $cconvert;
 $40 = (($39) + 24|0);
 HEAP32[$40>>2] = $38;
 $i = 0;
 $x = -128;
 while(1) {
  $41 = $i;
  $42 = ($41|0)<=(255);
  if (!($42)) {
   break;
  }
  $43 = $x;
  $44 = ($43*91881)|0;
  $45 = (($44) + 32768)|0;
  $46 = $45 >> 16;
  $47 = $i;
  $48 = $cconvert;
  $49 = (($48) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + ($47<<2)|0);
  HEAP32[$51>>2] = $46;
  $52 = $x;
  $53 = ($52*116130)|0;
  $54 = (($53) + 32768)|0;
  $55 = $54 >> 16;
  $56 = $i;
  $57 = $cconvert;
  $58 = (($57) + 12|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + ($56<<2)|0);
  HEAP32[$60>>2] = $55;
  $61 = $x;
  $62 = Math_imul(-46802, $61)|0;
  $63 = $i;
  $64 = $cconvert;
  $65 = (($64) + 16|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + ($63<<2)|0);
  HEAP32[$67>>2] = $62;
  $68 = $x;
  $69 = Math_imul(-22553, $68)|0;
  $70 = (($69) + 32768)|0;
  $71 = $i;
  $72 = $cconvert;
  $73 = (($72) + 20|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + ($71<<2)|0);
  HEAP32[$75>>2] = $70;
  $76 = $i;
  $77 = (($76) + 1)|0;
  $i = $77;
  $78 = $x;
  $79 = (($78) + 1)|0;
  $x = $79;
 }
 STACKTOP = sp;return;
}
function _build_bg_ycc_rgb_table($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cconvert = 0, $i = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 480|0);
 $3 = HEAP32[$2>>2]|0;
 $cconvert = $3;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (FUNCTION_TABLE_iiii[$7 & 511]($8,1,1024)|0);
 $10 = $cconvert;
 $11 = (($10) + 8|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = (FUNCTION_TABLE_iiii[$15 & 511]($16,1,1024)|0);
 $18 = $cconvert;
 $19 = (($18) + 12|0);
 HEAP32[$19>>2] = $17;
 $20 = $0;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = $0;
 $25 = (FUNCTION_TABLE_iiii[$23 & 511]($24,1,1024)|0);
 $26 = $cconvert;
 $27 = (($26) + 16|0);
 HEAP32[$27>>2] = $25;
 $28 = $0;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 $33 = (FUNCTION_TABLE_iiii[$31 & 511]($32,1,1024)|0);
 $34 = $cconvert;
 $35 = (($34) + 20|0);
 HEAP32[$35>>2] = $33;
 $36 = $0;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$38>>2]|0;
 $40 = $0;
 $41 = (FUNCTION_TABLE_iiii[$39 & 511]($40,1,1280)|0);
 $42 = $cconvert;
 $43 = (($42) + 24|0);
 HEAP32[$43>>2] = $41;
 $i = 0;
 $x = -128;
 while(1) {
  $44 = $i;
  $45 = ($44|0)<=(255);
  if (!($45)) {
   break;
  }
  $46 = $x;
  $47 = ($46*183763)|0;
  $48 = (($47) + 32768)|0;
  $49 = $48 >> 16;
  $50 = $i;
  $51 = $cconvert;
  $52 = (($51) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($50<<2)|0);
  HEAP32[$54>>2] = $49;
  $55 = $x;
  $56 = ($55*232260)|0;
  $57 = (($56) + 32768)|0;
  $58 = $57 >> 16;
  $59 = $i;
  $60 = $cconvert;
  $61 = (($60) + 12|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + ($59<<2)|0);
  HEAP32[$63>>2] = $58;
  $64 = $x;
  $65 = Math_imul(-93603, $64)|0;
  $66 = $i;
  $67 = $cconvert;
  $68 = (($67) + 16|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + ($66<<2)|0);
  HEAP32[$70>>2] = $65;
  $71 = $x;
  $72 = Math_imul(-45107, $71)|0;
  $73 = (($72) + 32768)|0;
  $74 = $i;
  $75 = $cconvert;
  $76 = (($75) + 20|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($77) + ($74<<2)|0);
  HEAP32[$78>>2] = $73;
  $79 = $i;
  $80 = (($79) + 1)|0;
  $i = $80;
  $81 = $x;
  $82 = (($81) + 1)|0;
  $x = $82;
 }
 $83 = $cconvert;
 $84 = (($83) + 24|0);
 $85 = HEAP32[$84>>2]|0;
 _memset(($85|0),0,512)|0;
 $86 = $cconvert;
 $87 = (($86) + 24|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = (($88) + 512|0);
 HEAP32[$87>>2] = $89;
 $i = 0;
 while(1) {
  $90 = $i;
  $91 = ($90|0)<=(255);
  if (!($91)) {
   break;
  }
  $92 = $i;
  $93 = $92&255;
  $94 = $i;
  $95 = $cconvert;
  $96 = (($95) + 24|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + ($94)|0);
  HEAP8[$98>>0] = $93;
  $99 = $i;
  $100 = (($99) + 1)|0;
  $i = $100;
 }
 while(1) {
  $101 = $i;
  $102 = ($101|0)<(768);
  if (!($102)) {
   break;
  }
  $103 = $i;
  $104 = $cconvert;
  $105 = (($104) + 24|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($106) + ($103)|0);
  HEAP8[$107>>0] = -1;
  $108 = $i;
  $109 = (($108) + 1)|0;
  $i = $109;
 }
 STACKTOP = sp;return;
}
function _rgb_convert32($cinfo,$input_buf,$input_row,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $input_row = $input_row|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $inptr0 = 0, $inptr1 = 0;
 var $inptr2 = 0, $num_cols = 0, $outptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $input_row;
 $3 = $output_buf;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $num_cols = $7;
 while(1) {
  $8 = $4;
  $9 = (($8) + -1)|0;
  $4 = $9;
  $10 = ($9|0)>=(0);
  if (!($10)) {
   break;
  }
  $11 = $2;
  $12 = $1;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $inptr0 = $15;
  $16 = $2;
  $17 = $1;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $inptr1 = $21;
  $22 = $2;
  $23 = $1;
  $24 = (($23) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $inptr2 = $27;
  $28 = $2;
  $29 = (($28) + 1)|0;
  $2 = $29;
  $30 = $3;
  $31 = (($30) + 4|0);
  $3 = $31;
  $32 = HEAP32[$30>>2]|0;
  $outptr = $32;
  $col = 0;
  while(1) {
   $33 = $col;
   $34 = $num_cols;
   $35 = ($33>>>0)<($34>>>0);
   if (!($35)) {
    break;
   }
   $36 = $col;
   $37 = $inptr0;
   $38 = (($37) + ($36)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $outptr;
   HEAP8[$40>>0] = $39;
   $41 = $col;
   $42 = $inptr1;
   $43 = (($42) + ($41)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $outptr;
   $46 = (($45) + 1|0);
   HEAP8[$46>>0] = $44;
   $47 = $col;
   $48 = $inptr2;
   $49 = (($48) + ($47)|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $outptr;
   $52 = (($51) + 2|0);
   HEAP8[$52>>0] = $50;
   $53 = $outptr;
   $54 = (($53) + 3|0);
   $outptr = $54;
   $55 = $col;
   $56 = (($55) + 1)|0;
   $col = $56;
  }
 }
 STACKTOP = sp;return;
}
function _rgb1_rgb_convert($cinfo,$input_buf,$input_row,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $input_row = $input_row|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $b = 0, $col = 0, $g = 0, $inptr0 = 0, $inptr1 = 0, $inptr2 = 0;
 var $num_cols = 0, $outptr = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $input_row;
 $3 = $output_buf;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 112|0);
 $7 = HEAP32[$6>>2]|0;
 $num_cols = $7;
 while(1) {
  $8 = $4;
  $9 = (($8) + -1)|0;
  $4 = $9;
  $10 = ($9|0)>=(0);
  if (!($10)) {
   break;
  }
  $11 = $2;
  $12 = $1;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + ($11<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $inptr0 = $15;
  $16 = $2;
  $17 = $1;
  $18 = (($17) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($19) + ($16<<2)|0);
  $21 = HEAP32[$20>>2]|0;
  $inptr1 = $21;
  $22 = $2;
  $23 = $1;
  $24 = (($23) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + ($22<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $inptr2 = $27;
  $28 = $2;
  $29 = (($28) + 1)|0;
  $2 = $29;
  $30 = $3;
  $31 = (($30) + 4|0);
  $3 = $31;
  $32 = HEAP32[$30>>2]|0;
  $outptr = $32;
  $col = 0;
  while(1) {
   $33 = $col;
   $34 = $num_cols;
   $35 = ($33>>>0)<($34>>>0);
   if (!($35)) {
    break;
   }
   $36 = $col;
   $37 = $inptr0;
   $38 = (($37) + ($36)|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $r = $40;
   $41 = $col;
   $42 = $inptr1;
   $43 = (($42) + ($41)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $g = $45;
   $46 = $col;
   $47 = $inptr2;
   $48 = (($47) + ($46)|0);
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $b = $50;
   $51 = $r;
   $52 = $g;
   $53 = (($51) + ($52))|0;
   $54 = (($53) - 128)|0;
   $55 = $54 & 255;
   $56 = $55&255;
   $57 = $outptr;
   HEAP8[$57>>0] = $56;
   $58 = $g;
   $59 = $58&255;
   $60 = $outptr;
   $61 = (($60) + 1|0);
   HEAP8[$61>>0] = $59;
   $62 = $b;
   $63 = $g;
   $64 = (($62) + ($63))|0;
   $65 = (($64) - 128)|0;
   $66 = $65 & 255;
   $67 = $66&255;
   $68 = $outptr;
   $69 = (($68) + 2|0);
   HEAP8[$69>>0] = $67;
   $70 = $outptr;
   $71 = (($70) + 3|0);
   $outptr = $71;
   $72 = $col;
   $73 = (($72) + 1)|0;
   $col = $73;
  }
 }
 STACKTOP = sp;return;
}
function _ycck_cmyk_convert($cinfo,$input_buf,$input_row,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $input_row = $input_row|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Cbbtab = 0, $Cbgtab = 0, $Crgtab = 0, $Crrtab = 0, $cb = 0, $cconvert = 0, $col = 0, $cr = 0, $inptr0 = 0, $inptr1 = 0, $inptr2 = 0, $inptr3 = 0, $num_cols = 0, $outptr = 0;
 var $range_limit = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $input_row;
 $3 = $output_buf;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 480|0);
 $7 = HEAP32[$6>>2]|0;
 $cconvert = $7;
 $8 = $0;
 $9 = (($8) + 112|0);
 $10 = HEAP32[$9>>2]|0;
 $num_cols = $10;
 $11 = $0;
 $12 = (($11) + 336|0);
 $13 = HEAP32[$12>>2]|0;
 $range_limit = $13;
 $14 = $cconvert;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $Crrtab = $16;
 $17 = $cconvert;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $Cbbtab = $19;
 $20 = $cconvert;
 $21 = (($20) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $Crgtab = $22;
 $23 = $cconvert;
 $24 = (($23) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $Cbgtab = $25;
 while(1) {
  $26 = $4;
  $27 = (($26) + -1)|0;
  $4 = $27;
  $28 = ($27|0)>=(0);
  if (!($28)) {
   break;
  }
  $29 = $2;
  $30 = $1;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + ($29<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $inptr0 = $33;
  $34 = $2;
  $35 = $1;
  $36 = (($35) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (($37) + ($34<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $inptr1 = $39;
  $40 = $2;
  $41 = $1;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($40<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $inptr2 = $45;
  $46 = $2;
  $47 = $1;
  $48 = (($47) + 12|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($49) + ($46<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $inptr3 = $51;
  $52 = $2;
  $53 = (($52) + 1)|0;
  $2 = $53;
  $54 = $3;
  $55 = (($54) + 4|0);
  $3 = $55;
  $56 = HEAP32[$54>>2]|0;
  $outptr = $56;
  $col = 0;
  while(1) {
   $57 = $col;
   $58 = $num_cols;
   $59 = ($57>>>0)<($58>>>0);
   if (!($59)) {
    break;
   }
   $60 = $col;
   $61 = $inptr0;
   $62 = (($61) + ($60)|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $y = $64;
   $65 = $col;
   $66 = $inptr1;
   $67 = (($66) + ($65)|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $cb = $69;
   $70 = $col;
   $71 = $inptr2;
   $72 = (($71) + ($70)|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $73&255;
   $cr = $74;
   $75 = $y;
   $76 = $cr;
   $77 = $Crrtab;
   $78 = (($77) + ($76<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = (($75) + ($79))|0;
   $81 = (255 - ($80))|0;
   $82 = $range_limit;
   $83 = (($82) + ($81)|0);
   $84 = HEAP8[$83>>0]|0;
   $85 = $outptr;
   HEAP8[$85>>0] = $84;
   $86 = $y;
   $87 = $cb;
   $88 = $Cbgtab;
   $89 = (($88) + ($87<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $cr;
   $92 = $Crgtab;
   $93 = (($92) + ($91<<2)|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = (($90) + ($94))|0;
   $96 = $95 >> 16;
   $97 = (($86) + ($96))|0;
   $98 = (255 - ($97))|0;
   $99 = $range_limit;
   $100 = (($99) + ($98)|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $outptr;
   $103 = (($102) + 1|0);
   HEAP8[$103>>0] = $101;
   $104 = $y;
   $105 = $cb;
   $106 = $Cbbtab;
   $107 = (($106) + ($105<<2)|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($104) + ($108))|0;
   $110 = (255 - ($109))|0;
   $111 = $range_limit;
   $112 = (($111) + ($110)|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $outptr;
   $115 = (($114) + 2|0);
   HEAP8[$115>>0] = $113;
   $116 = $col;
   $117 = $inptr3;
   $118 = (($117) + ($116)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $outptr;
   $121 = (($120) + 3|0);
   HEAP8[$121>>0] = $119;
   $122 = $outptr;
   $123 = (($122) + 4|0);
   $outptr = $123;
   $124 = $col;
   $125 = (($124) + 1)|0;
   $col = $125;
  }
 }
 STACKTOP = sp;return;
}
function _null_convert33($cinfo,$input_buf,$input_row,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $input_row = $input_row|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $col = 0, $inptr = 0, $nc = 0, $num_cols = 0, $outptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $input_row;
 $3 = $output_buf;
 $4 = $num_rows;
 $5 = $0;
 $6 = (($5) + 36|0);
 $7 = HEAP32[$6>>2]|0;
 $nc = $7;
 $8 = $0;
 $9 = (($8) + 112|0);
 $10 = HEAP32[$9>>2]|0;
 $num_cols = $10;
 while(1) {
  $11 = $4;
  $12 = (($11) + -1)|0;
  $4 = $12;
  $13 = ($12|0)>=(0);
  if (!($13)) {
   break;
  }
  $ci = 0;
  while(1) {
   $14 = $ci;
   $15 = $nc;
   $16 = ($14|0)<($15|0);
   if (!($16)) {
    break;
   }
   $17 = $2;
   $18 = $ci;
   $19 = $1;
   $20 = (($19) + ($18<<2)|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + ($17<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $inptr = $23;
   $24 = $3;
   $25 = HEAP32[$24>>2]|0;
   $26 = $ci;
   $27 = (($25) + ($26)|0);
   $outptr = $27;
   $col = 0;
   while(1) {
    $28 = $col;
    $29 = $num_cols;
    $30 = ($28>>>0)<($29>>>0);
    if (!($30)) {
     break;
    }
    $31 = $inptr;
    $32 = (($31) + 1|0);
    $inptr = $32;
    $33 = HEAP8[$31>>0]|0;
    $34 = $outptr;
    HEAP8[$34>>0] = $33;
    $35 = $nc;
    $36 = $outptr;
    $37 = (($36) + ($35)|0);
    $outptr = $37;
    $38 = $col;
    $39 = (($38) + 1)|0;
    $col = $39;
   }
   $40 = $ci;
   $41 = (($40) + 1)|0;
   $ci = $41;
  }
  $42 = $2;
  $43 = (($42) + 1)|0;
  $2 = $43;
  $44 = $3;
  $45 = (($44) + 4|0);
  $3 = $45;
 }
 STACKTOP = sp;return;
}
function _jinit_inverse_dct($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $compptr = 0;
 var $idct = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,84)|0);
 $idct = $6;
 $7 = $idct;
 $8 = $0;
 $9 = (($8) + 472|0);
 HEAP32[$9>>2] = $7;
 $10 = $idct;
 HEAP32[$10>>2] = 165;
 $ci = 0;
 $11 = $0;
 $12 = (($11) + 216|0);
 $13 = HEAP32[$12>>2]|0;
 $compptr = $13;
 while(1) {
  $14 = $ci;
  $15 = $0;
  $16 = (($15) + 36|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $0;
  $20 = (($19) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = HEAP32[$21>>2]|0;
  $23 = $0;
  $24 = (FUNCTION_TABLE_iiii[$22 & 511]($23,1,256)|0);
  $25 = $compptr;
  $26 = (($25) + 84|0);
  HEAP32[$26>>2] = $24;
  $27 = $compptr;
  $28 = (($27) + 84|0);
  $29 = HEAP32[$28>>2]|0;
  _memset(($29|0),0,256)|0;
  $30 = $ci;
  $31 = $idct;
  $32 = (($31) + 44|0);
  $33 = (($32) + ($30<<2)|0);
  HEAP32[$33>>2] = -1;
  $34 = $ci;
  $35 = (($34) + 1)|0;
  $ci = $35;
  $36 = $compptr;
  $37 = (($36) + 88|0);
  $compptr = $37;
 }
 STACKTOP = sp;return;
}
function _start_pass34($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $col = 0, $compptr = 0, $fmtbl = 0;
 var $i = 0, $idct = 0, $ifmtbl = 0, $ismtbl = 0, $method = 0, $method_ptr = 0, $qtbl = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 472|0);
 $3 = HEAP32[$2>>2]|0;
 $idct = $3;
 $method = 0;
 $method_ptr = 0;
 $ci = 0;
 $4 = $0;
 $5 = (($4) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $compptr = $6;
 while(1) {
  $7 = $ci;
  $8 = $0;
  $9 = (($8) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $compptr;
  $13 = (($12) + 36|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 << 8;
  $16 = $compptr;
  $17 = (($16) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($15) + ($18))|0;
  do {
   switch ($19|0) {
   case 1799:  {
    $method_ptr = 172;
    $method = 0;
    break;
   }
   case 4104:  {
    $method_ptr = 181;
    $method = 0;
    break;
   }
   case 1539:  {
    $method_ptr = 186;
    $method = 0;
    break;
   }
   case 2827:  {
    $method_ptr = 175;
    $method = 0;
    break;
   }
   case 3084:  {
    $method_ptr = 176;
    $method = 0;
    break;
   }
   case 2056:  {
    $20 = $0;
    $21 = (($20) + 72|0);
    $22 = HEAP32[$21>>2]|0;
    if ((($22|0) == 0)) {
     $method_ptr = 197;
     $method = 0;
    } else if ((($22|0) == 1)) {
     $method_ptr = 198;
     $method = 1;
    } else if ((($22|0) == 2)) {
     $method_ptr = 199;
     $method = 2;
    } else {
     $23 = $0;
     $24 = HEAP32[$23>>2]|0;
     $25 = (($24) + 20|0);
     HEAP32[$25>>2] = 49;
     $26 = $0;
     $27 = HEAP32[$26>>2]|0;
     $28 = HEAP32[$27>>2]|0;
     $29 = $0;
     FUNCTION_TABLE_vi[$28 & 511]($29);
    }
    break;
   }
   case 257:  {
    $method_ptr = 166;
    $method = 0;
    break;
   }
   case 3591:  {
    $method_ptr = 182;
    $method = 0;
    break;
   }
   case 1032:  {
    $method_ptr = 193;
    $method = 0;
    break;
   }
   case 1542:  {
    $method_ptr = 171;
    $method = 0;
    break;
   }
   case 4112:  {
    $method_ptr = 180;
    $method = 0;
    break;
   }
   case 513:  {
    $method_ptr = 188;
    $method = 0;
    break;
   }
   case 774:  {
    $method_ptr = 194;
    $method = 0;
    break;
   }
   case 1285:  {
    $method_ptr = 170;
    $method = 0;
    break;
   }
   case 2064:  {
    $method_ptr = 189;
    $method = 0;
    break;
   }
   case 1806:  {
    $method_ptr = 190;
    $method = 0;
    break;
   }
   case 1548:  {
    $method_ptr = 191;
    $method = 0;
    break;
   }
   case 2313:  {
    $method_ptr = 173;
    $method = 0;
    break;
   }
   case 2570:  {
    $method_ptr = 174;
    $method = 0;
    break;
   }
   case 3855:  {
    $method_ptr = 179;
    $method = 0;
    break;
   }
   case 1290:  {
    $method_ptr = 192;
    $method = 0;
    break;
   }
   case 514:  {
    $method_ptr = 167;
    $method = 0;
    break;
   }
   case 3078:  {
    $method_ptr = 183;
    $method = 0;
    break;
   }
   case 258:  {
    $method_ptr = 196;
    $method = 0;
    break;
   }
   case 3598:  {
    $method_ptr = 178;
    $method = 0;
    break;
   }
   case 516:  {
    $method_ptr = 195;
    $method = 0;
    break;
   }
   case 771:  {
    $method_ptr = 168;
    $method = 0;
    break;
   }
   case 3341:  {
    $method_ptr = 177;
    $method = 0;
    break;
   }
   case 2052:  {
    $method_ptr = 185;
    $method = 0;
    break;
   }
   case 1026:  {
    $method_ptr = 187;
    $method = 0;
    break;
   }
   case 2565:  {
    $method_ptr = 184;
    $method = 0;
    break;
   }
   case 1028:  {
    $method_ptr = 169;
    $method = 0;
    break;
   }
   default: {
    $30 = $0;
    $31 = HEAP32[$30>>2]|0;
    $32 = (($31) + 20|0);
    HEAP32[$32>>2] = 7;
    $33 = $compptr;
    $34 = (($33) + 36|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $0;
    $37 = HEAP32[$36>>2]|0;
    $38 = (($37) + 24|0);
    HEAP32[$38>>2] = $35;
    $39 = $compptr;
    $40 = (($39) + 40|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = $0;
    $43 = HEAP32[$42>>2]|0;
    $44 = (($43) + 24|0);
    $45 = (($44) + 4|0);
    HEAP32[$45>>2] = $41;
    $46 = $0;
    $47 = HEAP32[$46>>2]|0;
    $48 = HEAP32[$47>>2]|0;
    $49 = $0;
    FUNCTION_TABLE_vi[$48 & 511]($49);
   }
   }
  } while(0);
  $50 = $method_ptr;
  $51 = $ci;
  $52 = $idct;
  $53 = (($52) + 4|0);
  $54 = (($53) + ($51<<2)|0);
  HEAP32[$54>>2] = $50;
  $55 = $compptr;
  $56 = (($55) + 52|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)!=(0);
  do {
   if ($58) {
    $59 = $ci;
    $60 = $idct;
    $61 = (($60) + 44|0);
    $62 = (($61) + ($59<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $method;
    $65 = ($63|0)==($64|0);
    if ($65) {
     label = 44;
    } else {
     $66 = $compptr;
     $67 = (($66) + 80|0);
     $68 = HEAP32[$67>>2]|0;
     $qtbl = $68;
     $69 = $qtbl;
     $70 = ($69|0)==(0|0);
     if ($70) {
      break;
     }
     $71 = $method;
     $72 = $ci;
     $73 = $idct;
     $74 = (($73) + 44|0);
     $75 = (($74) + ($72<<2)|0);
     HEAP32[$75>>2] = $71;
     $76 = $method;
     if ((($76|0) == 0)) {
      $77 = $compptr;
      $78 = (($77) + 84|0);
      $79 = HEAP32[$78>>2]|0;
      $ismtbl = $79;
      $i = 0;
      while(1) {
       $80 = $i;
       $81 = ($80|0)<(64);
       if (!($81)) {
        break;
       }
       $82 = $i;
       $83 = $qtbl;
       $84 = (($83) + ($82<<1)|0);
       $85 = HEAP16[$84>>1]|0;
       $86 = $85&65535;
       $87 = $i;
       $88 = $ismtbl;
       $89 = (($88) + ($87<<2)|0);
       HEAP32[$89>>2] = $86;
       $90 = $i;
       $91 = (($90) + 1)|0;
       $i = $91;
      }
     } else if ((($76|0) == 2)) {
      $114 = $compptr;
      $115 = (($114) + 84|0);
      $116 = HEAP32[$115>>2]|0;
      $fmtbl = $116;
      $i = 0;
      $row = 0;
      while(1) {
       $117 = $row;
       $118 = ($117|0)<(8);
       if (!($118)) {
        break;
       }
       $col = 0;
       while(1) {
        $119 = $col;
        $120 = ($119|0)<(8);
        if (!($120)) {
         break;
        }
        $121 = $i;
        $122 = $qtbl;
        $123 = (($122) + ($121<<1)|0);
        $124 = HEAP16[$123>>1]|0;
        $125 = (+($124&65535));
        $126 = $row;
        $127 = (2024 + ($126<<3)|0);
        $128 = +HEAPF64[$127>>3];
        $129 = $125 * $128;
        $130 = $col;
        $131 = (2024 + ($130<<3)|0);
        $132 = +HEAPF64[$131>>3];
        $133 = $129 * $132;
        $134 = $133 * 0.125;
        $135 = $134;
        $136 = $i;
        $137 = $fmtbl;
        $138 = (($137) + ($136<<2)|0);
        HEAPF32[$138>>2] = $135;
        $139 = $i;
        $140 = (($139) + 1)|0;
        $i = $140;
        $141 = $col;
        $142 = (($141) + 1)|0;
        $col = $142;
       }
       $143 = $row;
       $144 = (($143) + 1)|0;
       $row = $144;
      }
     } else if ((($76|0) == 1)) {
      $92 = $compptr;
      $93 = (($92) + 84|0);
      $94 = HEAP32[$93>>2]|0;
      $ifmtbl = $94;
      $i = 0;
      while(1) {
       $95 = $i;
       $96 = ($95|0)<(64);
       if (!($96)) {
        break;
       }
       $97 = $i;
       $98 = $qtbl;
       $99 = (($98) + ($97<<1)|0);
       $100 = HEAP16[$99>>1]|0;
       $101 = $100&65535;
       $102 = $i;
       $103 = (1896 + ($102<<1)|0);
       $104 = HEAP16[$103>>1]|0;
       $105 = $104 << 16 >> 16;
       $106 = Math_imul($101, $105)|0;
       $107 = (($106) + 2048)|0;
       $108 = $107 >> 12;
       $109 = $i;
       $110 = $ifmtbl;
       $111 = (($110) + ($109<<2)|0);
       HEAP32[$111>>2] = $108;
       $112 = $i;
       $113 = (($112) + 1)|0;
       $i = $113;
      }
     } else {
      $145 = $0;
      $146 = HEAP32[$145>>2]|0;
      $147 = (($146) + 20|0);
      HEAP32[$147>>2] = 49;
      $148 = $0;
      $149 = HEAP32[$148>>2]|0;
      $150 = HEAP32[$149>>2]|0;
      $151 = $0;
      FUNCTION_TABLE_vi[$150 & 511]($151);
     }
    }
   } else {
    label = 44;
   }
  } while(0);
  if ((label|0) == 44) {
   label = 0;
  }
  $152 = $ci;
  $153 = (($152) + 1)|0;
  $ci = $153;
  $154 = $compptr;
  $155 = (($154) + 88|0);
  $compptr = $155;
 }
 STACKTOP = sp;return;
}
function _jinit_huff_decoder($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $coef_bit_ptr = 0, $entropy = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,220)|0);
 $entropy = $6;
 $7 = $entropy;
 $8 = $0;
 $9 = (($8) + 468|0);
 HEAP32[$9>>2] = $7;
 $10 = $entropy;
 HEAP32[$10>>2] = 200;
 $11 = $entropy;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 201;
 $13 = $0;
 $14 = (($13) + 224|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if (!($16)) {
  $i = 0;
  while(1) {
   $54 = $i;
   $55 = ($54|0)<(4);
   if (!($55)) {
    break;
   }
   $56 = $i;
   $57 = $entropy;
   $58 = (($57) + 84|0);
   $59 = (($58) + ($56<<2)|0);
   HEAP32[$59>>2] = 0;
   $60 = $i;
   $61 = $entropy;
   $62 = (($61) + 68|0);
   $63 = (($62) + ($60<<2)|0);
   HEAP32[$63>>2] = 0;
   $64 = $i;
   $65 = (($64) + 1)|0;
   $i = $65;
  }
  STACKTOP = sp;return;
 }
 $17 = $0;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = HEAP32[$19>>2]|0;
 $21 = $0;
 $22 = $0;
 $23 = (($22) + 36|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24<<6;
 $26 = $25<<2;
 $27 = (FUNCTION_TABLE_iiii[$20 & 511]($21,1,$26)|0);
 $28 = $0;
 $29 = (($28) + 160|0);
 HEAP32[$29>>2] = $27;
 $30 = $0;
 $31 = (($30) + 160|0);
 $32 = HEAP32[$31>>2]|0;
 $coef_bit_ptr = $32;
 $ci = 0;
 while(1) {
  $33 = $ci;
  $34 = $0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)<($36|0);
  if (!($37)) {
   break;
  }
  $i = 0;
  while(1) {
   $38 = $i;
   $39 = ($38|0)<(64);
   if (!($39)) {
    break;
   }
   $40 = $coef_bit_ptr;
   $41 = (($40) + 4|0);
   $coef_bit_ptr = $41;
   HEAP32[$40>>2] = -1;
   $42 = $i;
   $43 = (($42) + 1)|0;
   $i = $43;
  }
  $44 = $ci;
  $45 = (($44) + 1)|0;
  $ci = $45;
 }
 $i = 0;
 while(1) {
  $46 = $i;
  $47 = ($46|0)<(4);
  if (!($47)) {
   break;
  }
  $48 = $i;
  $49 = $entropy;
  $50 = (($49) + 48|0);
  $51 = (($50) + ($48<<2)|0);
  HEAP32[$51>>2] = 0;
  $52 = $i;
  $53 = (($52) + 1)|0;
  $i = $53;
 }
 STACKTOP = sp;return;
}
function _start_pass_huff_decoder($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $blkn = 0, $ci = 0, $cindex = 0, $coef_bit_ptr = 0, $coefi = 0, $compptr = 0, $entropy = 0, $expected = 0, $i = 0, $tbl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 468|0);
 $3 = HEAP32[$2>>2]|0;
 $entropy = $3;
 $4 = $0;
 $5 = (($4) + 224|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $0;
  $9 = (($8) + 412|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0);
  do {
   if ($11) {
    $12 = $0;
    $13 = (($12) + 416|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)!=(0);
    if ($15) {
     label = 18;
     break;
    } else {
     label = 12;
     break;
    }
   } else {
    $16 = $0;
    $17 = (($16) + 416|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $0;
    $20 = (($19) + 412|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = ($18|0)<($21|0);
    if (!($22)) {
     $23 = $0;
     $24 = (($23) + 416|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $0;
     $27 = (($26) + 436|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($25|0)>($28|0);
     if (!($29)) {
      $30 = $0;
      $31 = (($30) + 340|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($32|0)!=(1);
      if ($33) {
       label = 18;
       break;
      } else {
       label = 12;
       break;
      }
     }
    }
    label = 18;
   }
  } while(0);
  L16: do {
   if ((label|0) == 12) {
    $34 = $0;
    $35 = (($34) + 420|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)!=(0);
    do {
     if ($37) {
      $38 = $0;
      $39 = (($38) + 420|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = (($40) - 1)|0;
      $42 = $0;
      $43 = (($42) + 424|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($41|0)!=($44|0);
      if ($45) {
       label = 18;
       break L16;
      } else {
       break;
      }
     }
    } while(0);
    $46 = $0;
    $47 = (($46) + 424|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($48|0)>(13);
    if ($49) {
     label = 18;
    }
   }
  } while(0);
  if ((label|0) == 18) {
   $50 = $0;
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 20|0);
   HEAP32[$52>>2] = 17;
   $53 = $0;
   $54 = (($53) + 412|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $0;
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 24|0);
   HEAP32[$58>>2] = $55;
   $59 = $0;
   $60 = (($59) + 416|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $0;
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + 24|0);
   $65 = (($64) + 4|0);
   HEAP32[$65>>2] = $61;
   $66 = $0;
   $67 = (($66) + 420|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $0;
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 24|0);
   $72 = (($71) + 8|0);
   HEAP32[$72>>2] = $68;
   $73 = $0;
   $74 = (($73) + 424|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $0;
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + 24|0);
   $79 = (($78) + 12|0);
   HEAP32[$79>>2] = $75;
   $80 = $0;
   $81 = HEAP32[$80>>2]|0;
   $82 = HEAP32[$81>>2]|0;
   $83 = $0;
   FUNCTION_TABLE_vi[$82 & 511]($83);
  }
  $ci = 0;
  while(1) {
   $84 = $ci;
   $85 = $0;
   $86 = (($85) + 340|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($84|0)<($87|0);
   if (!($88)) {
    break;
   }
   $89 = $ci;
   $90 = $0;
   $91 = (($90) + 344|0);
   $92 = (($91) + ($89<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + 4|0);
   $95 = HEAP32[$94>>2]|0;
   $cindex = $95;
   $96 = $cindex;
   $97 = $0;
   $98 = (($97) + 160|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = (($99) + ($96<<8)|0);
   $coef_bit_ptr = $100;
   $101 = $0;
   $102 = (($101) + 412|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)!=(0);
   if ($104) {
    $105 = $coef_bit_ptr;
    $106 = HEAP32[$105>>2]|0;
    $107 = ($106|0)<(0);
    if ($107) {
     $108 = $0;
     $109 = HEAP32[$108>>2]|0;
     $110 = (($109) + 20|0);
     HEAP32[$110>>2] = 118;
     $111 = $cindex;
     $112 = $0;
     $113 = HEAP32[$112>>2]|0;
     $114 = (($113) + 24|0);
     HEAP32[$114>>2] = $111;
     $115 = $0;
     $116 = HEAP32[$115>>2]|0;
     $117 = (($116) + 24|0);
     $118 = (($117) + 4|0);
     HEAP32[$118>>2] = 0;
     $119 = $0;
     $120 = HEAP32[$119>>2]|0;
     $121 = (($120) + 4|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = $0;
     FUNCTION_TABLE_vii[$122 & 511]($123,-1);
    }
   }
   $124 = $0;
   $125 = (($124) + 412|0);
   $126 = HEAP32[$125>>2]|0;
   $coefi = $126;
   while(1) {
    $127 = $coefi;
    $128 = $0;
    $129 = (($128) + 416|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($127|0)<=($130|0);
    if (!($131)) {
     break;
    }
    $132 = $coefi;
    $133 = $coef_bit_ptr;
    $134 = (($133) + ($132<<2)|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135|0)<(0);
    if ($136) {
     $141 = 0;
    } else {
     $137 = $coefi;
     $138 = $coef_bit_ptr;
     $139 = (($138) + ($137<<2)|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = $140;
    }
    $expected = $141;
    $142 = $0;
    $143 = (($142) + 420|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = $expected;
    $146 = ($144|0)!=($145|0);
    if ($146) {
     $147 = $0;
     $148 = HEAP32[$147>>2]|0;
     $149 = (($148) + 20|0);
     HEAP32[$149>>2] = 118;
     $150 = $cindex;
     $151 = $0;
     $152 = HEAP32[$151>>2]|0;
     $153 = (($152) + 24|0);
     HEAP32[$153>>2] = $150;
     $154 = $coefi;
     $155 = $0;
     $156 = HEAP32[$155>>2]|0;
     $157 = (($156) + 24|0);
     $158 = (($157) + 4|0);
     HEAP32[$158>>2] = $154;
     $159 = $0;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($160) + 4|0);
     $162 = HEAP32[$161>>2]|0;
     $163 = $0;
     FUNCTION_TABLE_vii[$162 & 511]($163,-1);
    }
    $164 = $0;
    $165 = (($164) + 424|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = $coefi;
    $168 = $coef_bit_ptr;
    $169 = (($168) + ($167<<2)|0);
    HEAP32[$169>>2] = $166;
    $170 = $coefi;
    $171 = (($170) + 1)|0;
    $coefi = $171;
   }
   $172 = $ci;
   $173 = (($172) + 1)|0;
   $ci = $173;
  }
  $174 = $0;
  $175 = (($174) + 420|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = ($176|0)==(0);
  if ($177) {
   $178 = $0;
   $179 = (($178) + 412|0);
   $180 = HEAP32[$179>>2]|0;
   $181 = ($180|0)==(0);
   if ($181) {
    $182 = $entropy;
    $183 = (($182) + 4|0);
    HEAP32[$183>>2] = 202;
   } else {
    $184 = $entropy;
    $185 = (($184) + 4|0);
    HEAP32[$185>>2] = 203;
   }
  } else {
   $186 = $0;
   $187 = (($186) + 412|0);
   $188 = HEAP32[$187>>2]|0;
   $189 = ($188|0)==(0);
   if ($189) {
    $190 = $entropy;
    $191 = (($190) + 4|0);
    HEAP32[$191>>2] = 204;
   } else {
    $192 = $entropy;
    $193 = (($192) + 4|0);
    HEAP32[$193>>2] = 205;
   }
  }
  $ci = 0;
  while(1) {
   $194 = $ci;
   $195 = $0;
   $196 = (($195) + 340|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = ($194|0)<($197|0);
   if (!($198)) {
    break;
   }
   $199 = $ci;
   $200 = $0;
   $201 = (($200) + 344|0);
   $202 = (($201) + ($199<<2)|0);
   $203 = HEAP32[$202>>2]|0;
   $compptr = $203;
   $204 = $0;
   $205 = (($204) + 412|0);
   $206 = HEAP32[$205>>2]|0;
   $207 = ($206|0)==(0);
   if ($207) {
    $208 = $0;
    $209 = (($208) + 420|0);
    $210 = HEAP32[$209>>2]|0;
    $211 = ($210|0)==(0);
    if ($211) {
     $212 = $compptr;
     $213 = (($212) + 20|0);
     $214 = HEAP32[$213>>2]|0;
     $tbl = $214;
     $215 = $0;
     $216 = $tbl;
     $217 = $tbl;
     $218 = $entropy;
     $219 = (($218) + 48|0);
     $220 = (($219) + ($217<<2)|0);
     _jpeg_make_d_derived_tbl($215,1,$216,$220);
    }
   } else {
    $221 = $compptr;
    $222 = (($221) + 24|0);
    $223 = HEAP32[$222>>2]|0;
    $tbl = $223;
    $224 = $0;
    $225 = $tbl;
    $226 = $tbl;
    $227 = $entropy;
    $228 = (($227) + 48|0);
    $229 = (($228) + ($226<<2)|0);
    _jpeg_make_d_derived_tbl($224,0,$225,$229);
    $230 = $tbl;
    $231 = $entropy;
    $232 = (($231) + 48|0);
    $233 = (($232) + ($230<<2)|0);
    $234 = HEAP32[$233>>2]|0;
    $235 = $entropy;
    $236 = (($235) + 64|0);
    HEAP32[$236>>2] = $234;
   }
   $237 = $ci;
   $238 = $entropy;
   $239 = (($238) + 20|0);
   $240 = (($239) + 4|0);
   $241 = (($240) + ($237<<2)|0);
   HEAP32[$241>>2] = 0;
   $242 = $ci;
   $243 = (($242) + 1)|0;
   $ci = $243;
  }
  $244 = $entropy;
  $245 = (($244) + 20|0);
  HEAP32[$245>>2] = 0;
  $528 = $entropy;
  $529 = (($528) + 12|0);
  $530 = (($529) + 4|0);
  HEAP32[$530>>2] = 0;
  $531 = $entropy;
  $532 = (($531) + 12|0);
  HEAP32[$532>>2] = 0;
  $533 = $entropy;
  $534 = (($533) + 40|0);
  HEAP32[$534>>2] = 0;
  $535 = $0;
  $536 = (($535) + 280|0);
  $537 = HEAP32[$536>>2]|0;
  $538 = $entropy;
  $539 = (($538) + 44|0);
  HEAP32[$539>>2] = $537;
  STACKTOP = sp;return;
 }
 $246 = $0;
 $247 = (($246) + 412|0);
 $248 = HEAP32[$247>>2]|0;
 $249 = ($248|0)!=(0);
 do {
  if ($249) {
   label = 60;
  } else {
   $250 = $0;
   $251 = (($250) + 420|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ($252|0)!=(0);
   if ($253) {
    label = 60;
   } else {
    $254 = $0;
    $255 = (($254) + 424|0);
    $256 = HEAP32[$255>>2]|0;
    $257 = ($256|0)!=(0);
    if ($257) {
     label = 60;
    } else {
     $258 = $0;
     $259 = (($258) + 220|0);
     $260 = HEAP32[$259>>2]|0;
     $261 = ($260|0)!=(0);
     if (!($261)) {
      $262 = $0;
      $263 = (($262) + 416|0);
      $264 = HEAP32[$263>>2]|0;
      $265 = ($264|0)<(64);
      if (!($265)) {
       break;
      }
     }
     $266 = $0;
     $267 = (($266) + 416|0);
     $268 = HEAP32[$267>>2]|0;
     $269 = $0;
     $270 = (($269) + 436|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = ($268|0)!=($271|0);
     if ($272) {
      label = 60;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 60) {
  $273 = $0;
  $274 = HEAP32[$273>>2]|0;
  $275 = (($274) + 20|0);
  HEAP32[$275>>2] = 125;
  $276 = $0;
  $277 = HEAP32[$276>>2]|0;
  $278 = (($277) + 4|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = $0;
  FUNCTION_TABLE_vii[$279 & 511]($280,-1);
 }
 $281 = $0;
 $282 = (($281) + 436|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = ($283|0)!=(63);
 if ($284) {
  $285 = $entropy;
  $286 = (($285) + 4|0);
  HEAP32[$286>>2] = 206;
 } else {
  $287 = $entropy;
  $288 = (($287) + 4|0);
  HEAP32[$288>>2] = 207;
 }
 $ci = 0;
 while(1) {
  $289 = $ci;
  $290 = $0;
  $291 = (($290) + 340|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = ($289|0)<($292|0);
  if (!($293)) {
   break;
  }
  $294 = $ci;
  $295 = $0;
  $296 = (($295) + 344|0);
  $297 = (($296) + ($294<<2)|0);
  $298 = HEAP32[$297>>2]|0;
  $compptr = $298;
  $299 = $compptr;
  $300 = (($299) + 20|0);
  $301 = HEAP32[$300>>2]|0;
  $tbl = $301;
  $302 = $0;
  $303 = $tbl;
  $304 = $tbl;
  $305 = $entropy;
  $306 = (($305) + 68|0);
  $307 = (($306) + ($304<<2)|0);
  _jpeg_make_d_derived_tbl($302,1,$303,$307);
  $308 = $0;
  $309 = (($308) + 436|0);
  $310 = HEAP32[$309>>2]|0;
  $311 = ($310|0)!=(0);
  if ($311) {
   $312 = $compptr;
   $313 = (($312) + 24|0);
   $314 = HEAP32[$313>>2]|0;
   $tbl = $314;
   $315 = $0;
   $316 = $tbl;
   $317 = $tbl;
   $318 = $entropy;
   $319 = (($318) + 84|0);
   $320 = (($319) + ($317<<2)|0);
   _jpeg_make_d_derived_tbl($315,0,$316,$320);
  }
  $321 = $ci;
  $322 = $entropy;
  $323 = (($322) + 20|0);
  $324 = (($323) + 4|0);
  $325 = (($324) + ($321<<2)|0);
  HEAP32[$325>>2] = 0;
  $326 = $ci;
  $327 = (($326) + 1)|0;
  $ci = $327;
 }
 $blkn = 0;
 while(1) {
  $328 = $blkn;
  $329 = $0;
  $330 = (($329) + 368|0);
  $331 = HEAP32[$330>>2]|0;
  $332 = ($328|0)<($331|0);
  if (!($332)) {
   break;
  }
  $333 = $blkn;
  $334 = $0;
  $335 = (($334) + 372|0);
  $336 = (($335) + ($333<<2)|0);
  $337 = HEAP32[$336>>2]|0;
  $ci = $337;
  $338 = $ci;
  $339 = $0;
  $340 = (($339) + 344|0);
  $341 = (($340) + ($338<<2)|0);
  $342 = HEAP32[$341>>2]|0;
  $compptr = $342;
  $343 = $compptr;
  $344 = (($343) + 20|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = $entropy;
  $347 = (($346) + 68|0);
  $348 = (($347) + ($345<<2)|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = $blkn;
  $351 = $entropy;
  $352 = (($351) + 100|0);
  $353 = (($352) + ($350<<2)|0);
  HEAP32[$353>>2] = $349;
  $354 = $compptr;
  $355 = (($354) + 24|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = $entropy;
  $358 = (($357) + 84|0);
  $359 = (($358) + ($356<<2)|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = $blkn;
  $362 = $entropy;
  $363 = (($362) + 140|0);
  $364 = (($363) + ($361<<2)|0);
  HEAP32[$364>>2] = $360;
  $365 = $compptr;
  $366 = (($365) + 52|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = ($367|0)!=(0);
  if ($368) {
   $369 = $compptr;
   $370 = (($369) + 40|0);
   $371 = HEAP32[$370>>2]|0;
   $ci = $371;
   $372 = $compptr;
   $373 = (($372) + 36|0);
   $374 = HEAP32[$373>>2]|0;
   $i = $374;
   $375 = $0;
   $376 = (($375) + 436|0);
   $377 = HEAP32[$376>>2]|0;
   switch ($377|0) {
   case 8:  {
    $402 = $ci;
    $403 = ($402|0)<=(0);
    if ($403) {
     label = 84;
    } else {
     $404 = $ci;
     $405 = ($404|0)>(3);
     if ($405) {
      label = 84;
     }
    }
    if ((label|0) == 84) {
     label = 0;
     $ci = 3;
    }
    $406 = $i;
    $407 = ($406|0)<=(0);
    if ($407) {
     label = 87;
    } else {
     $408 = $i;
     $409 = ($408|0)>(3);
     if ($409) {
      label = 87;
     }
    }
    if ((label|0) == 87) {
     label = 0;
     $i = 3;
    }
    $410 = $i;
    $411 = (($410) - 1)|0;
    $412 = $ci;
    $413 = (($412) - 1)|0;
    $414 = (2104 + (($413*12)|0)|0);
    $415 = (($414) + ($411<<2)|0);
    $416 = HEAP32[$415>>2]|0;
    $417 = (1 + ($416))|0;
    $418 = $blkn;
    $419 = $entropy;
    $420 = (($419) + 180|0);
    $421 = (($420) + ($418<<2)|0);
    HEAP32[$421>>2] = $417;
    break;
   }
   case 0:  {
    $378 = $blkn;
    $379 = $entropy;
    $380 = (($379) + 180|0);
    $381 = (($380) + ($378<<2)|0);
    HEAP32[$381>>2] = 1;
    break;
   }
   case 3:  {
    $382 = $ci;
    $383 = ($382|0)<=(0);
    if ($383) {
     label = 77;
    } else {
     $384 = $ci;
     $385 = ($384|0)>(2);
     if ($385) {
      label = 77;
     }
    }
    if ((label|0) == 77) {
     label = 0;
     $ci = 2;
    }
    $386 = $i;
    $387 = ($386|0)<=(0);
    if ($387) {
     label = 80;
    } else {
     $388 = $i;
     $389 = ($388|0)>(2);
     if ($389) {
      label = 80;
     }
    }
    if ((label|0) == 80) {
     label = 0;
     $i = 2;
    }
    $390 = $i;
    $391 = (($390) - 1)|0;
    $392 = $ci;
    $393 = (($392) - 1)|0;
    $394 = (2088 + ($393<<3)|0);
    $395 = (($394) + ($391<<2)|0);
    $396 = HEAP32[$395>>2]|0;
    $397 = (1 + ($396))|0;
    $398 = $blkn;
    $399 = $entropy;
    $400 = (($399) + 180|0);
    $401 = (($400) + ($398<<2)|0);
    HEAP32[$401>>2] = $397;
    break;
   }
   case 24:  {
    $442 = $ci;
    $443 = ($442|0)<=(0);
    if ($443) {
     label = 98;
    } else {
     $444 = $ci;
     $445 = ($444|0)>(5);
     if ($445) {
      label = 98;
     }
    }
    if ((label|0) == 98) {
     label = 0;
     $ci = 5;
    }
    $446 = $i;
    $447 = ($446|0)<=(0);
    if ($447) {
     label = 101;
    } else {
     $448 = $i;
     $449 = ($448|0)>(5);
     if ($449) {
      label = 101;
     }
    }
    if ((label|0) == 101) {
     label = 0;
     $i = 5;
    }
    $450 = $i;
    $451 = (($450) - 1)|0;
    $452 = $ci;
    $453 = (($452) - 1)|0;
    $454 = (2208 + (($453*20)|0)|0);
    $455 = (($454) + ($451<<2)|0);
    $456 = HEAP32[$455>>2]|0;
    $457 = (1 + ($456))|0;
    $458 = $blkn;
    $459 = $entropy;
    $460 = (($459) + 180|0);
    $461 = (($460) + ($458<<2)|0);
    HEAP32[$461>>2] = $457;
    break;
   }
   case 15:  {
    $422 = $ci;
    $423 = ($422|0)<=(0);
    if ($423) {
     label = 91;
    } else {
     $424 = $ci;
     $425 = ($424|0)>(4);
     if ($425) {
      label = 91;
     }
    }
    if ((label|0) == 91) {
     label = 0;
     $ci = 4;
    }
    $426 = $i;
    $427 = ($426|0)<=(0);
    if ($427) {
     label = 94;
    } else {
     $428 = $i;
     $429 = ($428|0)>(4);
     if ($429) {
      label = 94;
     }
    }
    if ((label|0) == 94) {
     label = 0;
     $i = 4;
    }
    $430 = $i;
    $431 = (($430) - 1)|0;
    $432 = $ci;
    $433 = (($432) - 1)|0;
    $434 = (2144 + ($433<<4)|0);
    $435 = (($434) + ($431<<2)|0);
    $436 = HEAP32[$435>>2]|0;
    $437 = (1 + ($436))|0;
    $438 = $blkn;
    $439 = $entropy;
    $440 = (($439) + 180|0);
    $441 = (($440) + ($438<<2)|0);
    HEAP32[$441>>2] = $437;
    break;
   }
   case 35:  {
    $462 = $ci;
    $463 = ($462|0)<=(0);
    if ($463) {
     label = 105;
    } else {
     $464 = $ci;
     $465 = ($464|0)>(6);
     if ($465) {
      label = 105;
     }
    }
    if ((label|0) == 105) {
     label = 0;
     $ci = 6;
    }
    $466 = $i;
    $467 = ($466|0)<=(0);
    if ($467) {
     label = 108;
    } else {
     $468 = $i;
     $469 = ($468|0)>(6);
     if ($469) {
      label = 108;
     }
    }
    if ((label|0) == 108) {
     label = 0;
     $i = 6;
    }
    $470 = $i;
    $471 = (($470) - 1)|0;
    $472 = $ci;
    $473 = (($472) - 1)|0;
    $474 = (2312 + (($473*24)|0)|0);
    $475 = (($474) + ($471<<2)|0);
    $476 = HEAP32[$475>>2]|0;
    $477 = (1 + ($476))|0;
    $478 = $blkn;
    $479 = $entropy;
    $480 = (($479) + 180|0);
    $481 = (($480) + ($478<<2)|0);
    HEAP32[$481>>2] = $477;
    break;
   }
   case 48:  {
    $482 = $ci;
    $483 = ($482|0)<=(0);
    if ($483) {
     label = 112;
    } else {
     $484 = $ci;
     $485 = ($484|0)>(7);
     if ($485) {
      label = 112;
     }
    }
    if ((label|0) == 112) {
     label = 0;
     $ci = 7;
    }
    $486 = $i;
    $487 = ($486|0)<=(0);
    if ($487) {
     label = 115;
    } else {
     $488 = $i;
     $489 = ($488|0)>(7);
     if ($489) {
      label = 115;
     }
    }
    if ((label|0) == 115) {
     label = 0;
     $i = 7;
    }
    $490 = $i;
    $491 = (($490) - 1)|0;
    $492 = $ci;
    $493 = (($492) - 1)|0;
    $494 = (2456 + (($493*28)|0)|0);
    $495 = (($494) + ($491<<2)|0);
    $496 = HEAP32[$495>>2]|0;
    $497 = (1 + ($496))|0;
    $498 = $blkn;
    $499 = $entropy;
    $500 = (($499) + 180|0);
    $501 = (($500) + ($498<<2)|0);
    HEAP32[$501>>2] = $497;
    break;
   }
   default: {
    $502 = $ci;
    $503 = ($502|0)<=(0);
    if ($503) {
     label = 119;
    } else {
     $504 = $ci;
     $505 = ($504|0)>(8);
     if ($505) {
      label = 119;
     }
    }
    if ((label|0) == 119) {
     label = 0;
     $ci = 8;
    }
    $506 = $i;
    $507 = ($506|0)<=(0);
    if ($507) {
     label = 122;
    } else {
     $508 = $i;
     $509 = ($508|0)>(8);
     if ($509) {
      label = 122;
     }
    }
    if ((label|0) == 122) {
     label = 0;
     $i = 8;
    }
    $510 = $i;
    $511 = (($510) - 1)|0;
    $512 = $ci;
    $513 = (($512) - 1)|0;
    $514 = (2656 + ($513<<5)|0);
    $515 = (($514) + ($511<<2)|0);
    $516 = HEAP32[$515>>2]|0;
    $517 = (1 + ($516))|0;
    $518 = $blkn;
    $519 = $entropy;
    $520 = (($519) + 180|0);
    $521 = (($520) + ($518<<2)|0);
    HEAP32[$521>>2] = $517;
   }
   }
  } else {
   $522 = $blkn;
   $523 = $entropy;
   $524 = (($523) + 180|0);
   $525 = (($524) + ($522<<2)|0);
   HEAP32[$525>>2] = 0;
  }
  $526 = $blkn;
  $527 = (($526) + 1)|0;
  $blkn = $527;
 }
 $528 = $entropy;
 $529 = (($528) + 12|0);
 $530 = (($529) + 4|0);
 HEAP32[$530>>2] = 0;
 $531 = $entropy;
 $532 = (($531) + 12|0);
 HEAP32[$532>>2] = 0;
 $533 = $entropy;
 $534 = (($533) + 40|0);
 HEAP32[$534>>2] = 0;
 $535 = $0;
 $536 = (($535) + 280|0);
 $537 = HEAP32[$536>>2]|0;
 $538 = $entropy;
 $539 = (($538) + 44|0);
 HEAP32[$539>>2] = $537;
 STACKTOP = sp;return;
}
function _finish_pass_huff35($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $entropy = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 468|0);
 $3 = HEAP32[$2>>2]|0;
 $entropy = $3;
 $4 = $entropy;
 $5 = (($4) + 12|0);
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7|0) / 8)&-1;
 $9 = $0;
 $10 = (($9) + 464|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($8))|0;
 HEAP32[$12>>2] = $14;
 $15 = $entropy;
 $16 = (($15) + 12|0);
 $17 = (($16) + 4|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function _decode_mcu_DC_first36($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Al = 0, $bits_left = 0, $blkn = 0, $block = 0, $br_state = 0, $ci = 0, $compptr = 0, $entropy = 0, $get_buffer = 0;
 var $look = 0, $nb = 0, $r = 0, $s = 0, $state = 0, $tbl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $br_state = sp + 36|0;
 $state = sp + 16|0;
 $1 = $cinfo;
 $2 = $MCU_data;
 $3 = $1;
 $4 = (($3) + 468|0);
 $5 = HEAP32[$4>>2]|0;
 $entropy = $5;
 $6 = $1;
 $7 = (($6) + 424|0);
 $8 = HEAP32[$7>>2]|0;
 $Al = $8;
 $9 = $1;
 $10 = (($9) + 280|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $entropy;
  $14 = (($13) + 44|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0);
  do {
   if ($16) {
    $17 = $1;
    $18 = (_process_restart41($17)|0);
    $19 = ($18|0)!=(0);
    if ($19) {
     break;
    }
    $0 = 0;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   }
  } while(0);
 }
 $20 = $entropy;
 $21 = (($20) + 40|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 do {
  if (!($23)) {
   $24 = $1;
   $25 = (($br_state) + 16|0);
   HEAP32[$25>>2] = $24;
   $26 = $1;
   $27 = (($26) + 24|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = HEAP32[$28>>2]|0;
   HEAP32[$br_state>>2] = $29;
   $30 = $1;
   $31 = (($30) + 24|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 4|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($br_state) + 4|0);
   HEAP32[$35>>2] = $34;
   $36 = $entropy;
   $37 = (($36) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $get_buffer = $38;
   $39 = $entropy;
   $40 = (($39) + 12|0);
   $41 = (($40) + 4|0);
   $42 = HEAP32[$41>>2]|0;
   $bits_left = $42;
   $43 = $entropy;
   $44 = (($43) + 20|0);
   ;HEAP32[$state+0>>2]=HEAP32[$44+0>>2]|0;HEAP32[$state+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$state+8>>2]=HEAP32[$44+8>>2]|0;HEAP32[$state+12>>2]=HEAP32[$44+12>>2]|0;HEAP32[$state+16>>2]=HEAP32[$44+16>>2]|0;
   $blkn = 0;
   L13: while(1) {
    $45 = $blkn;
    $46 = $1;
    $47 = (($46) + 368|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = ($45|0)<($48|0);
    if (!($49)) {
     label = 33;
     break;
    }
    $50 = $blkn;
    $51 = $2;
    $52 = (($51) + ($50<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $block = $53;
    $54 = $blkn;
    $55 = $1;
    $56 = (($55) + 372|0);
    $57 = (($56) + ($54<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $ci = $58;
    $59 = $ci;
    $60 = $1;
    $61 = (($60) + 344|0);
    $62 = (($61) + ($59<<2)|0);
    $63 = HEAP32[$62>>2]|0;
    $compptr = $63;
    $64 = $compptr;
    $65 = (($64) + 20|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $entropy;
    $68 = (($67) + 48|0);
    $69 = (($68) + ($66<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $tbl = $70;
    $71 = $bits_left;
    $72 = ($71|0)<(8);
    do {
     if ($72) {
      $73 = $get_buffer;
      $74 = $bits_left;
      $75 = (_jpeg_fill_bit_buffer($br_state,$73,$74,0)|0);
      $76 = ($75|0)!=(0);
      if (!($76)) {
       label = 12;
       break L13;
      }
      $77 = (($br_state) + 8|0);
      $78 = HEAP32[$77>>2]|0;
      $get_buffer = $78;
      $79 = (($br_state) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $bits_left = $80;
      $81 = $bits_left;
      $82 = ($81|0)<(8);
      if ($82) {
       $nb = 1;
       label = 19;
       break;
      } else {
       label = 16;
       break;
      }
     } else {
      label = 16;
     }
    } while(0);
    do {
     if ((label|0) == 16) {
      label = 0;
      $83 = $get_buffer;
      $84 = $bits_left;
      $85 = (($84) - 8)|0;
      $86 = $83 >> $85;
      $87 = HEAP32[((2912 + 32|0))>>2]|0;
      $88 = $86 & $87;
      $look = $88;
      $89 = $look;
      $90 = $tbl;
      $91 = (($90) + 144|0);
      $92 = (($91) + ($89<<2)|0);
      $93 = HEAP32[$92>>2]|0;
      $nb = $93;
      $94 = ($93|0)!=(0);
      if ($94) {
       $95 = $nb;
       $96 = $bits_left;
       $97 = (($96) - ($95))|0;
       $bits_left = $97;
       $98 = $look;
       $99 = $tbl;
       $100 = (($99) + 1168|0);
       $101 = (($100) + ($98)|0);
       $102 = HEAP8[$101>>0]|0;
       $103 = $102&255;
       $s = $103;
       break;
      } else {
       $nb = 9;
       label = 19;
       break;
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     $104 = $get_buffer;
     $105 = $bits_left;
     $106 = $tbl;
     $107 = $nb;
     $108 = (_jpeg_huff_decode($br_state,$104,$105,$106,$107)|0);
     $s = $108;
     $109 = ($108|0)<(0);
     if ($109) {
      label = 20;
      break;
     }
     $110 = (($br_state) + 8|0);
     $111 = HEAP32[$110>>2]|0;
     $get_buffer = $111;
     $112 = (($br_state) + 12|0);
     $113 = HEAP32[$112>>2]|0;
     $bits_left = $113;
    }
    $114 = $s;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $bits_left;
     $117 = $s;
     $118 = ($116|0)<($117|0);
     if ($118) {
      $119 = $get_buffer;
      $120 = $bits_left;
      $121 = $s;
      $122 = (_jpeg_fill_bit_buffer($br_state,$119,$120,$121)|0);
      $123 = ($122|0)!=(0);
      if (!($123)) {
       label = 25;
       break;
      }
      $124 = (($br_state) + 8|0);
      $125 = HEAP32[$124>>2]|0;
      $get_buffer = $125;
      $126 = (($br_state) + 12|0);
      $127 = HEAP32[$126>>2]|0;
      $bits_left = $127;
     }
     $128 = $get_buffer;
     $129 = $s;
     $130 = $bits_left;
     $131 = (($130) - ($129))|0;
     $bits_left = $131;
     $132 = $128 >> $131;
     $133 = $s;
     $134 = (2912 + ($133<<2)|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $132 & $135;
     $r = $136;
     $137 = $r;
     $138 = $s;
     $139 = (($138) - 1)|0;
     $140 = (2912 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($137|0)<=($141|0);
     if ($142) {
      $143 = $r;
      $144 = $s;
      $145 = (2912 + ($144<<2)|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($143) - ($146))|0;
      $149 = $147;
     } else {
      $148 = $r;
      $149 = $148;
     }
     $s = $149;
    }
    $150 = $ci;
    $151 = (($state) + 4|0);
    $152 = (($151) + ($150<<2)|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = $s;
    $155 = (($154) + ($153))|0;
    $s = $155;
    $156 = $s;
    $157 = $ci;
    $158 = (($state) + 4|0);
    $159 = (($158) + ($157<<2)|0);
    HEAP32[$159>>2] = $156;
    $160 = $s;
    $161 = $Al;
    $162 = $160 << $161;
    $163 = $162&65535;
    $164 = $block;
    HEAP16[$164>>1] = $163;
    $165 = $blkn;
    $166 = (($165) + 1)|0;
    $blkn = $166;
   }
   if ((label|0) == 12) {
    $0 = 0;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   }
   else if ((label|0) == 20) {
    $0 = 0;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   }
   else if ((label|0) == 25) {
    $0 = 0;
    $190 = $0;
    STACKTOP = sp;return ($190|0);
   }
   else if ((label|0) == 33) {
    $167 = HEAP32[$br_state>>2]|0;
    $168 = $1;
    $169 = (($168) + 24|0);
    $170 = HEAP32[$169>>2]|0;
    HEAP32[$170>>2] = $167;
    $171 = (($br_state) + 4|0);
    $172 = HEAP32[$171>>2]|0;
    $173 = $1;
    $174 = (($173) + 24|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = (($175) + 4|0);
    HEAP32[$176>>2] = $172;
    $177 = $get_buffer;
    $178 = $entropy;
    $179 = (($178) + 12|0);
    HEAP32[$179>>2] = $177;
    $180 = $bits_left;
    $181 = $entropy;
    $182 = (($181) + 12|0);
    $183 = (($182) + 4|0);
    HEAP32[$183>>2] = $180;
    $184 = $entropy;
    $185 = (($184) + 20|0);
    ;HEAP32[$185+0>>2]=HEAP32[$state+0>>2]|0;HEAP32[$185+4>>2]=HEAP32[$state+4>>2]|0;HEAP32[$185+8>>2]=HEAP32[$state+8>>2]|0;HEAP32[$185+12>>2]=HEAP32[$state+12>>2]|0;HEAP32[$185+16>>2]=HEAP32[$state+16>>2]|0;
    break;
   }
  }
 } while(0);
 $186 = $entropy;
 $187 = (($186) + 44|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = (($188) + -1)|0;
 HEAP32[$187>>2] = $189;
 $0 = 1;
 $190 = $0;
 STACKTOP = sp;return ($190|0);
}
function _decode_mcu_AC_first37($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Al = 0, $EOBRUN = 0, $Se = 0, $bits_left = 0, $block = 0, $br_state = 0, $entropy = 0, $get_buffer = 0, $k = 0, $look = 0, $natural_order = 0, $nb = 0, $r = 0, $s = 0, $tbl = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $br_state = sp + 12|0;
 $1 = $cinfo;
 $2 = $MCU_data;
 $3 = $1;
 $4 = (($3) + 468|0);
 $5 = HEAP32[$4>>2]|0;
 $entropy = $5;
 $6 = $1;
 $7 = (($6) + 280|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $entropy;
  $11 = (($10) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  do {
   if ($13) {
    $14 = $1;
    $15 = (_process_restart41($14)|0);
    $16 = ($15|0)!=(0);
    if ($16) {
     break;
    }
    $0 = 0;
    $223 = $0;
    STACKTOP = sp;return ($223|0);
   }
  } while(0);
 }
 $17 = $entropy;
 $18 = (($17) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $21 = $1;
  $22 = (($21) + 416|0);
  $23 = HEAP32[$22>>2]|0;
  $Se = $23;
  $24 = $1;
  $25 = (($24) + 424|0);
  $26 = HEAP32[$25>>2]|0;
  $Al = $26;
  $27 = $1;
  $28 = (($27) + 432|0);
  $29 = HEAP32[$28>>2]|0;
  $natural_order = $29;
  $30 = $entropy;
  $31 = (($30) + 20|0);
  $32 = HEAP32[$31>>2]|0;
  $EOBRUN = $32;
  $33 = $EOBRUN;
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $EOBRUN;
   $36 = (($35) + -1)|0;
   $EOBRUN = $36;
  } else {
   $37 = $1;
   $38 = (($br_state) + 16|0);
   HEAP32[$38>>2] = $37;
   $39 = $1;
   $40 = (($39) + 24|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[$41>>2]|0;
   HEAP32[$br_state>>2] = $42;
   $43 = $1;
   $44 = (($43) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 4|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($br_state) + 4|0);
   HEAP32[$48>>2] = $47;
   $49 = $entropy;
   $50 = (($49) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $get_buffer = $51;
   $52 = $entropy;
   $53 = (($52) + 12|0);
   $54 = (($53) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $bits_left = $55;
   $56 = $2;
   $57 = HEAP32[$56>>2]|0;
   $block = $57;
   $58 = $entropy;
   $59 = (($58) + 64|0);
   $60 = HEAP32[$59>>2]|0;
   $tbl = $60;
   $61 = $1;
   $62 = (($61) + 412|0);
   $63 = HEAP32[$62>>2]|0;
   $k = $63;
   L15: while(1) {
    $64 = $k;
    $65 = $Se;
    $66 = ($64|0)<=($65|0);
    if (!($66)) {
     break;
    }
    $67 = $bits_left;
    $68 = ($67|0)<(8);
    do {
     if ($68) {
      $69 = $get_buffer;
      $70 = $bits_left;
      $71 = (_jpeg_fill_bit_buffer($br_state,$69,$70,0)|0);
      $72 = ($71|0)!=(0);
      if (!($72)) {
       label = 14;
       break L15;
      }
      $73 = (($br_state) + 8|0);
      $74 = HEAP32[$73>>2]|0;
      $get_buffer = $74;
      $75 = (($br_state) + 12|0);
      $76 = HEAP32[$75>>2]|0;
      $bits_left = $76;
      $77 = $bits_left;
      $78 = ($77|0)<(8);
      if ($78) {
       $nb = 1;
       label = 21;
       break;
      } else {
       label = 18;
       break;
      }
     } else {
      label = 18;
     }
    } while(0);
    do {
     if ((label|0) == 18) {
      label = 0;
      $79 = $get_buffer;
      $80 = $bits_left;
      $81 = (($80) - 8)|0;
      $82 = $79 >> $81;
      $83 = HEAP32[((2912 + 32|0))>>2]|0;
      $84 = $82 & $83;
      $look = $84;
      $85 = $look;
      $86 = $tbl;
      $87 = (($86) + 144|0);
      $88 = (($87) + ($85<<2)|0);
      $89 = HEAP32[$88>>2]|0;
      $nb = $89;
      $90 = ($89|0)!=(0);
      if ($90) {
       $91 = $nb;
       $92 = $bits_left;
       $93 = (($92) - ($91))|0;
       $bits_left = $93;
       $94 = $look;
       $95 = $tbl;
       $96 = (($95) + 1168|0);
       $97 = (($96) + ($94)|0);
       $98 = HEAP8[$97>>0]|0;
       $99 = $98&255;
       $s = $99;
       break;
      } else {
       $nb = 9;
       label = 21;
       break;
      }
     }
    } while(0);
    if ((label|0) == 21) {
     label = 0;
     $100 = $get_buffer;
     $101 = $bits_left;
     $102 = $tbl;
     $103 = $nb;
     $104 = (_jpeg_huff_decode($br_state,$100,$101,$102,$103)|0);
     $s = $104;
     $105 = ($104|0)<(0);
     if ($105) {
      label = 22;
      break;
     }
     $106 = (($br_state) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $get_buffer = $107;
     $108 = (($br_state) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $bits_left = $109;
    }
    $110 = $s;
    $111 = $110 >> 4;
    $r = $111;
    $112 = $s;
    $113 = $112 & 15;
    $s = $113;
    $114 = $s;
    $115 = ($114|0)!=(0);
    if ($115) {
     $116 = $r;
     $117 = $k;
     $118 = (($117) + ($116))|0;
     $k = $118;
     $119 = $bits_left;
     $120 = $s;
     $121 = ($119|0)<($120|0);
     if ($121) {
      $122 = $get_buffer;
      $123 = $bits_left;
      $124 = $s;
      $125 = (_jpeg_fill_bit_buffer($br_state,$122,$123,$124)|0);
      $126 = ($125|0)!=(0);
      if (!($126)) {
       label = 27;
       break;
      }
      $127 = (($br_state) + 8|0);
      $128 = HEAP32[$127>>2]|0;
      $get_buffer = $128;
      $129 = (($br_state) + 12|0);
      $130 = HEAP32[$129>>2]|0;
      $bits_left = $130;
     }
     $131 = $get_buffer;
     $132 = $s;
     $133 = $bits_left;
     $134 = (($133) - ($132))|0;
     $bits_left = $134;
     $135 = $131 >> $134;
     $136 = $s;
     $137 = (2912 + ($136<<2)|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $135 & $138;
     $r = $139;
     $140 = $r;
     $141 = $s;
     $142 = (($141) - 1)|0;
     $143 = (2912 + ($142<<2)|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($140|0)<=($144|0);
     if ($145) {
      $146 = $r;
      $147 = $s;
      $148 = (2912 + ($147<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (($146) - ($149))|0;
      $152 = $150;
     } else {
      $151 = $r;
      $152 = $151;
     }
     $s = $152;
     $153 = $s;
     $154 = $Al;
     $155 = $153 << $154;
     $156 = $155&65535;
     $157 = $k;
     $158 = $natural_order;
     $159 = (($158) + ($157<<2)|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = $block;
     $162 = (($161) + ($160<<1)|0);
     HEAP16[$162>>1] = $156;
    } else {
     $163 = $r;
     $164 = ($163|0)!=(15);
     if ($164) {
      label = 34;
      break;
     }
     $195 = $k;
     $196 = (($195) + 15)|0;
     $k = $196;
    }
    $197 = $k;
    $198 = (($197) + 1)|0;
    $k = $198;
   }
   if ((label|0) == 14) {
    $0 = 0;
    $223 = $0;
    STACKTOP = sp;return ($223|0);
   }
   else if ((label|0) == 22) {
    $0 = 0;
    $223 = $0;
    STACKTOP = sp;return ($223|0);
   }
   else if ((label|0) == 27) {
    $0 = 0;
    $223 = $0;
    STACKTOP = sp;return ($223|0);
   }
   else if ((label|0) == 34) {
    $165 = $r;
    $166 = ($165|0)!=(0);
    if ($166) {
     $167 = $r;
     $168 = 1 << $167;
     $EOBRUN = $168;
     $169 = $bits_left;
     $170 = $r;
     $171 = ($169|0)<($170|0);
     do {
      if ($171) {
       $172 = $get_buffer;
       $173 = $bits_left;
       $174 = $r;
       $175 = (_jpeg_fill_bit_buffer($br_state,$172,$173,$174)|0);
       $176 = ($175|0)!=(0);
       if ($176) {
        $177 = (($br_state) + 8|0);
        $178 = HEAP32[$177>>2]|0;
        $get_buffer = $178;
        $179 = (($br_state) + 12|0);
        $180 = HEAP32[$179>>2]|0;
        $bits_left = $180;
        break;
       }
       $0 = 0;
       $223 = $0;
       STACKTOP = sp;return ($223|0);
      }
     } while(0);
     $181 = $get_buffer;
     $182 = $r;
     $183 = $bits_left;
     $184 = (($183) - ($182))|0;
     $bits_left = $184;
     $185 = $181 >> $184;
     $186 = $r;
     $187 = (2912 + ($186<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = $185 & $188;
     $r = $189;
     $190 = $r;
     $191 = $EOBRUN;
     $192 = (($191) + ($190))|0;
     $EOBRUN = $192;
     $193 = $EOBRUN;
     $194 = (($193) + -1)|0;
     $EOBRUN = $194;
    }
   }
   $199 = HEAP32[$br_state>>2]|0;
   $200 = $1;
   $201 = (($200) + 24|0);
   $202 = HEAP32[$201>>2]|0;
   HEAP32[$202>>2] = $199;
   $203 = (($br_state) + 4|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $1;
   $206 = (($205) + 24|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = (($207) + 4|0);
   HEAP32[$208>>2] = $204;
   $209 = $get_buffer;
   $210 = $entropy;
   $211 = (($210) + 12|0);
   HEAP32[$211>>2] = $209;
   $212 = $bits_left;
   $213 = $entropy;
   $214 = (($213) + 12|0);
   $215 = (($214) + 4|0);
   HEAP32[$215>>2] = $212;
  }
  $216 = $EOBRUN;
  $217 = $entropy;
  $218 = (($217) + 20|0);
  HEAP32[$218>>2] = $216;
 }
 $219 = $entropy;
 $220 = (($219) + 44|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (($221) + -1)|0;
 HEAP32[$220>>2] = $222;
 $0 = 1;
 $223 = $0;
 STACKTOP = sp;return ($223|0);
}
function _decode_mcu_DC_refine38($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $bits_left = 0, $blkn = 0, $br_state = 0, $entropy = 0, $get_buffer = 0;
 var $p1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $br_state = sp;
 $1 = $cinfo;
 $2 = $MCU_data;
 $3 = $1;
 $4 = (($3) + 468|0);
 $5 = HEAP32[$4>>2]|0;
 $entropy = $5;
 $6 = $1;
 $7 = (($6) + 280|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $entropy;
  $11 = (($10) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  do {
   if ($13) {
    $14 = $1;
    $15 = (_process_restart41($14)|0);
    $16 = ($15|0)!=(0);
    if ($16) {
     break;
    }
    $0 = 0;
    $94 = $0;
    STACKTOP = sp;return ($94|0);
   }
  } while(0);
 }
 $17 = $1;
 $18 = (($br_state) + 16|0);
 HEAP32[$18>>2] = $17;
 $19 = $1;
 $20 = (($19) + 24|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 HEAP32[$br_state>>2] = $22;
 $23 = $1;
 $24 = (($23) + 24|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (($br_state) + 4|0);
 HEAP32[$28>>2] = $27;
 $29 = $entropy;
 $30 = (($29) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $get_buffer = $31;
 $32 = $entropy;
 $33 = (($32) + 12|0);
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $bits_left = $35;
 $36 = $1;
 $37 = (($36) + 424|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = 1 << $38;
 $p1 = $39;
 $blkn = 0;
 while(1) {
  $40 = $blkn;
  $41 = $1;
  $42 = (($41) + 368|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($40|0)<($43|0);
  if (!($44)) {
   label = 17;
   break;
  }
  $45 = $bits_left;
  $46 = ($45|0)<(1);
  if ($46) {
   $47 = $get_buffer;
   $48 = $bits_left;
   $49 = (_jpeg_fill_bit_buffer($br_state,$47,$48,1)|0);
   $50 = ($49|0)!=(0);
   if (!($50)) {
    label = 11;
    break;
   }
   $51 = (($br_state) + 8|0);
   $52 = HEAP32[$51>>2]|0;
   $get_buffer = $52;
   $53 = (($br_state) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $bits_left = $54;
  }
  $55 = $get_buffer;
  $56 = $bits_left;
  $57 = (($56) - 1)|0;
  $bits_left = $57;
  $58 = $55 >> $57;
  $59 = HEAP32[((2912 + 4|0))>>2]|0;
  $60 = $58 & $59;
  $61 = ($60|0)!=(0);
  if ($61) {
   $62 = $p1;
   $63 = $blkn;
   $64 = $2;
   $65 = (($64) + ($63<<2)|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = HEAP16[$66>>1]|0;
   $68 = $67 << 16 >> 16;
   $69 = $68 | $62;
   $70 = $69&65535;
   HEAP16[$66>>1] = $70;
  }
  $71 = $blkn;
  $72 = (($71) + 1)|0;
  $blkn = $72;
 }
 if ((label|0) == 11) {
  $0 = 0;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 else if ((label|0) == 17) {
  $73 = HEAP32[$br_state>>2]|0;
  $74 = $1;
  $75 = (($74) + 24|0);
  $76 = HEAP32[$75>>2]|0;
  HEAP32[$76>>2] = $73;
  $77 = (($br_state) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = $1;
  $80 = (($79) + 24|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + 4|0);
  HEAP32[$82>>2] = $78;
  $83 = $get_buffer;
  $84 = $entropy;
  $85 = (($84) + 12|0);
  HEAP32[$85>>2] = $83;
  $86 = $bits_left;
  $87 = $entropy;
  $88 = (($87) + 12|0);
  $89 = (($88) + 4|0);
  HEAP32[$89>>2] = $86;
  $90 = $entropy;
  $91 = (($90) + 44|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + -1)|0;
  HEAP32[$91>>2] = $93;
  $0 = 1;
  $94 = $0;
  STACKTOP = sp;return ($94|0);
 }
 return 0|0;
}
function _decode_mcu_AC_refine39($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $EOBRUN = 0, $Se = 0, $bits_left = 0, $block = 0, $br_state = 0, $entropy = 0, $get_buffer = 0, $k = 0, $look = 0, $m1 = 0, $natural_order = 0, $nb = 0, $newnz_pos = 0, $num_newnz = 0, $p1 = 0, $pos = 0, $r = 0, $s = 0, $tbl = 0;
 var $thiscoef = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0;
 $br_state = sp + 280|0;
 $newnz_pos = sp + 16|0;
 $1 = $cinfo;
 $2 = $MCU_data;
 $3 = $1;
 $4 = (($3) + 468|0);
 $5 = HEAP32[$4>>2]|0;
 $entropy = $5;
 $6 = $1;
 $7 = (($6) + 280|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $entropy;
  $11 = (($10) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  do {
   if ($13) {
    $14 = $1;
    $15 = (_process_restart41($14)|0);
    $16 = ($15|0)!=(0);
    if ($16) {
     break;
    }
    $0 = 0;
    $340 = $0;
    STACKTOP = sp;return ($340|0);
   }
  } while(0);
 }
 $17 = $entropy;
 $18 = (($17) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 L11: do {
  if (!($20)) {
   $21 = $1;
   $22 = (($21) + 416|0);
   $23 = HEAP32[$22>>2]|0;
   $Se = $23;
   $24 = $1;
   $25 = (($24) + 424|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = 1 << $26;
   $p1 = $27;
   $28 = $1;
   $29 = (($28) + 424|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = -1 << $30;
   $m1 = $31;
   $32 = $1;
   $33 = (($32) + 432|0);
   $34 = HEAP32[$33>>2]|0;
   $natural_order = $34;
   $35 = $1;
   $36 = (($br_state) + 16|0);
   HEAP32[$36>>2] = $35;
   $37 = $1;
   $38 = (($37) + 24|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = HEAP32[$39>>2]|0;
   HEAP32[$br_state>>2] = $40;
   $41 = $1;
   $42 = (($41) + 24|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($br_state) + 4|0);
   HEAP32[$46>>2] = $45;
   $47 = $entropy;
   $48 = (($47) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $get_buffer = $49;
   $50 = $entropy;
   $51 = (($50) + 12|0);
   $52 = (($51) + 4|0);
   $53 = HEAP32[$52>>2]|0;
   $bits_left = $53;
   $54 = $entropy;
   $55 = (($54) + 20|0);
   $56 = HEAP32[$55>>2]|0;
   $EOBRUN = $56;
   $57 = $2;
   $58 = HEAP32[$57>>2]|0;
   $block = $58;
   $59 = $entropy;
   $60 = (($59) + 64|0);
   $61 = HEAP32[$60>>2]|0;
   $tbl = $61;
   $num_newnz = 0;
   $62 = $1;
   $63 = (($62) + 412|0);
   $64 = HEAP32[$63>>2]|0;
   $k = $64;
   $65 = $EOBRUN;
   $66 = ($65|0)==(0);
   L13: do {
    if ($66) {
     L15: while(1) {
      $67 = $bits_left;
      $68 = ($67|0)<(8);
      do {
       if ($68) {
        $69 = $get_buffer;
        $70 = $bits_left;
        $71 = (_jpeg_fill_bit_buffer($br_state,$69,$70,0)|0);
        $72 = ($71|0)!=(0);
        if (!($72)) {
         label = 12;
         break L15;
        }
        $73 = (($br_state) + 8|0);
        $74 = HEAP32[$73>>2]|0;
        $get_buffer = $74;
        $75 = (($br_state) + 12|0);
        $76 = HEAP32[$75>>2]|0;
        $bits_left = $76;
        $77 = $bits_left;
        $78 = ($77|0)<(8);
        if ($78) {
         $nb = 1;
         label = 19;
         break;
        } else {
         label = 16;
         break;
        }
       } else {
        label = 16;
       }
      } while(0);
      do {
       if ((label|0) == 16) {
        label = 0;
        $79 = $get_buffer;
        $80 = $bits_left;
        $81 = (($80) - 8)|0;
        $82 = $79 >> $81;
        $83 = HEAP32[((2912 + 32|0))>>2]|0;
        $84 = $82 & $83;
        $look = $84;
        $85 = $look;
        $86 = $tbl;
        $87 = (($86) + 144|0);
        $88 = (($87) + ($85<<2)|0);
        $89 = HEAP32[$88>>2]|0;
        $nb = $89;
        $90 = ($89|0)!=(0);
        if ($90) {
         $91 = $nb;
         $92 = $bits_left;
         $93 = (($92) - ($91))|0;
         $bits_left = $93;
         $94 = $look;
         $95 = $tbl;
         $96 = (($95) + 1168|0);
         $97 = (($96) + ($94)|0);
         $98 = HEAP8[$97>>0]|0;
         $99 = $98&255;
         $s = $99;
         break;
        } else {
         $nb = 9;
         label = 19;
         break;
        }
       }
      } while(0);
      if ((label|0) == 19) {
       label = 0;
       $100 = $get_buffer;
       $101 = $bits_left;
       $102 = $tbl;
       $103 = $nb;
       $104 = (_jpeg_huff_decode($br_state,$100,$101,$102,$103)|0);
       $s = $104;
       $105 = ($104|0)<(0);
       if ($105) {
        label = 20;
        break;
       }
       $106 = (($br_state) + 8|0);
       $107 = HEAP32[$106>>2]|0;
       $get_buffer = $107;
       $108 = (($br_state) + 12|0);
       $109 = HEAP32[$108>>2]|0;
       $bits_left = $109;
      }
      $110 = $s;
      $111 = $110 >> 4;
      $r = $111;
      $112 = $s;
      $113 = $112 & 15;
      $s = $113;
      $114 = $s;
      $115 = ($114|0)!=(0);
      if ($115) {
       $116 = $s;
       $117 = ($116|0)!=(1);
       if ($117) {
        $118 = $1;
        $119 = HEAP32[$118>>2]|0;
        $120 = (($119) + 20|0);
        HEAP32[$120>>2] = 121;
        $121 = $1;
        $122 = HEAP32[$121>>2]|0;
        $123 = (($122) + 4|0);
        $124 = HEAP32[$123>>2]|0;
        $125 = $1;
        FUNCTION_TABLE_vii[$124 & 511]($125,-1);
       }
       $126 = $bits_left;
       $127 = ($126|0)<(1);
       if ($127) {
        $128 = $get_buffer;
        $129 = $bits_left;
        $130 = (_jpeg_fill_bit_buffer($br_state,$128,$129,1)|0);
        $131 = ($130|0)!=(0);
        if (!($131)) {
         label = 27;
         break;
        }
        $132 = (($br_state) + 8|0);
        $133 = HEAP32[$132>>2]|0;
        $get_buffer = $133;
        $134 = (($br_state) + 12|0);
        $135 = HEAP32[$134>>2]|0;
        $bits_left = $135;
       }
       $136 = $get_buffer;
       $137 = $bits_left;
       $138 = (($137) - 1)|0;
       $bits_left = $138;
       $139 = $136 >> $138;
       $140 = HEAP32[((2912 + 4|0))>>2]|0;
       $141 = $139 & $140;
       $142 = ($141|0)!=(0);
       if ($142) {
        $143 = $p1;
        $s = $143;
       } else {
        $144 = $m1;
        $s = $144;
       }
      } else {
       $145 = $r;
       $146 = ($145|0)!=(15);
       if ($146) {
        label = 34;
        break;
       }
      }
      while(1) {
       $175 = $block;
       $176 = $k;
       $177 = $natural_order;
       $178 = (($177) + ($176<<2)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = (($175) + ($179<<1)|0);
       $thiscoef = $180;
       $181 = $thiscoef;
       $182 = HEAP16[$181>>1]|0;
       $183 = ($182<<16>>16)!=(0);
       if ($183) {
        $184 = $bits_left;
        $185 = ($184|0)<(1);
        if ($185) {
         $186 = $get_buffer;
         $187 = $bits_left;
         $188 = (_jpeg_fill_bit_buffer($br_state,$186,$187,1)|0);
         $189 = ($188|0)!=(0);
         if (!($189)) {
          label = 46;
          break L15;
         }
         $190 = (($br_state) + 8|0);
         $191 = HEAP32[$190>>2]|0;
         $get_buffer = $191;
         $192 = (($br_state) + 12|0);
         $193 = HEAP32[$192>>2]|0;
         $bits_left = $193;
        }
        $194 = $get_buffer;
        $195 = $bits_left;
        $196 = (($195) - 1)|0;
        $bits_left = $196;
        $197 = $194 >> $196;
        $198 = HEAP32[((2912 + 4|0))>>2]|0;
        $199 = $197 & $198;
        $200 = ($199|0)!=(0);
        if ($200) {
         $201 = $thiscoef;
         $202 = HEAP16[$201>>1]|0;
         $203 = $202 << 16 >> 16;
         $204 = $p1;
         $205 = $203 & $204;
         $206 = ($205|0)==(0);
         if ($206) {
          $207 = $thiscoef;
          $208 = HEAP16[$207>>1]|0;
          $209 = $208 << 16 >> 16;
          $210 = ($209|0)>=(0);
          if ($210) {
           $211 = $p1;
           $212 = $thiscoef;
           $213 = HEAP16[$212>>1]|0;
           $214 = $213 << 16 >> 16;
           $215 = (($214) + ($211))|0;
           $216 = $215&65535;
           HEAP16[$212>>1] = $216;
          } else {
           $217 = $m1;
           $218 = $thiscoef;
           $219 = HEAP16[$218>>1]|0;
           $220 = $219 << 16 >> 16;
           $221 = (($220) + ($217))|0;
           $222 = $221&65535;
           HEAP16[$218>>1] = $222;
          }
         }
        }
       } else {
        $223 = $r;
        $224 = (($223) + -1)|0;
        $r = $224;
        $225 = ($224|0)<(0);
        if ($225) {
         label = 57;
         break;
        }
       }
       $226 = $k;
       $227 = (($226) + 1)|0;
       $k = $227;
       $228 = $k;
       $229 = $Se;
       $230 = ($228|0)<=($229|0);
       if (!($230)) {
        break;
       }
      }
      if ((label|0) == 57) {
       label = 0;
      }
      $231 = $s;
      $232 = ($231|0)!=(0);
      if ($232) {
       $233 = $k;
       $234 = $natural_order;
       $235 = (($234) + ($233<<2)|0);
       $236 = HEAP32[$235>>2]|0;
       $pos = $236;
       $237 = $s;
       $238 = $237&65535;
       $239 = $pos;
       $240 = $block;
       $241 = (($240) + ($239<<1)|0);
       HEAP16[$241>>1] = $238;
       $242 = $pos;
       $243 = $num_newnz;
       $244 = (($243) + 1)|0;
       $num_newnz = $244;
       $245 = (($newnz_pos) + ($243<<2)|0);
       HEAP32[$245>>2] = $242;
      }
      $246 = $k;
      $247 = (($246) + 1)|0;
      $k = $247;
      $248 = $k;
      $249 = $Se;
      $250 = ($248|0)<=($249|0);
      if (!($250)) {
       break;
      }
     }
     if ((label|0) == 12) {
      break;
     }
     else if ((label|0) == 20) {
      break;
     }
     else if ((label|0) == 27) {
      break;
     }
     else if ((label|0) == 34) {
      $147 = $r;
      $148 = 1 << $147;
      $EOBRUN = $148;
      $149 = $r;
      $150 = ($149|0)!=(0);
      if ($150) {
       $151 = $bits_left;
       $152 = $r;
       $153 = ($151|0)<($152|0);
       do {
        if ($153) {
         $154 = $get_buffer;
         $155 = $bits_left;
         $156 = $r;
         $157 = (_jpeg_fill_bit_buffer($br_state,$154,$155,$156)|0);
         $158 = ($157|0)!=(0);
         if ($158) {
          $159 = (($br_state) + 8|0);
          $160 = HEAP32[$159>>2]|0;
          $get_buffer = $160;
          $161 = (($br_state) + 12|0);
          $162 = HEAP32[$161>>2]|0;
          $bits_left = $162;
          break;
         } else {
          break L13;
         }
        }
       } while(0);
       $163 = $get_buffer;
       $164 = $r;
       $165 = $bits_left;
       $166 = (($165) - ($164))|0;
       $bits_left = $166;
       $167 = $163 >> $166;
       $168 = $r;
       $169 = (2912 + ($168<<2)|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = $167 & $170;
       $r = $171;
       $172 = $r;
       $173 = $EOBRUN;
       $174 = (($173) + ($172))|0;
       $EOBRUN = $174;
      }
     }
     else if ((label|0) == 46) {
      break;
     }
     label = 66;
    } else {
     label = 66;
    }
   } while(0);
   L93: do {
    if ((label|0) == 66) {
     $251 = $EOBRUN;
     $252 = ($251|0)!=(0);
     do {
      if ($252) {
       while(1) {
        $253 = $block;
        $254 = $k;
        $255 = $natural_order;
        $256 = (($255) + ($254<<2)|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = (($253) + ($257<<1)|0);
        $thiscoef = $258;
        $259 = $thiscoef;
        $260 = HEAP16[$259>>1]|0;
        $261 = ($260<<16>>16)!=(0);
        if ($261) {
         $262 = $bits_left;
         $263 = ($262|0)<(1);
         if ($263) {
          $264 = $get_buffer;
          $265 = $bits_left;
          $266 = (_jpeg_fill_bit_buffer($br_state,$264,$265,1)|0);
          $267 = ($266|0)!=(0);
          if (!($267)) {
           label = 71;
           break;
          }
          $268 = (($br_state) + 8|0);
          $269 = HEAP32[$268>>2]|0;
          $get_buffer = $269;
          $270 = (($br_state) + 12|0);
          $271 = HEAP32[$270>>2]|0;
          $bits_left = $271;
         }
         $272 = $get_buffer;
         $273 = $bits_left;
         $274 = (($273) - 1)|0;
         $bits_left = $274;
         $275 = $272 >> $274;
         $276 = HEAP32[((2912 + 4|0))>>2]|0;
         $277 = $275 & $276;
         $278 = ($277|0)!=(0);
         if ($278) {
          $279 = $thiscoef;
          $280 = HEAP16[$279>>1]|0;
          $281 = $280 << 16 >> 16;
          $282 = $p1;
          $283 = $281 & $282;
          $284 = ($283|0)==(0);
          if ($284) {
           $285 = $thiscoef;
           $286 = HEAP16[$285>>1]|0;
           $287 = $286 << 16 >> 16;
           $288 = ($287|0)>=(0);
           if ($288) {
            $289 = $p1;
            $290 = $thiscoef;
            $291 = HEAP16[$290>>1]|0;
            $292 = $291 << 16 >> 16;
            $293 = (($292) + ($289))|0;
            $294 = $293&65535;
            HEAP16[$290>>1] = $294;
           } else {
            $295 = $m1;
            $296 = $thiscoef;
            $297 = HEAP16[$296>>1]|0;
            $298 = $297 << 16 >> 16;
            $299 = (($298) + ($295))|0;
            $300 = $299&65535;
            HEAP16[$296>>1] = $300;
           }
          }
         }
        }
        $301 = $k;
        $302 = (($301) + 1)|0;
        $k = $302;
        $303 = $k;
        $304 = $Se;
        $305 = ($303|0)<=($304|0);
        if (!($305)) {
         label = 83;
         break;
        }
       }
       if ((label|0) == 71) {
        break L93;
       }
       else if ((label|0) == 83) {
        $306 = $EOBRUN;
        $307 = (($306) + -1)|0;
        $EOBRUN = $307;
        break;
       }
      }
     } while(0);
     $308 = HEAP32[$br_state>>2]|0;
     $309 = $1;
     $310 = (($309) + 24|0);
     $311 = HEAP32[$310>>2]|0;
     HEAP32[$311>>2] = $308;
     $312 = (($br_state) + 4|0);
     $313 = HEAP32[$312>>2]|0;
     $314 = $1;
     $315 = (($314) + 24|0);
     $316 = HEAP32[$315>>2]|0;
     $317 = (($316) + 4|0);
     HEAP32[$317>>2] = $313;
     $318 = $get_buffer;
     $319 = $entropy;
     $320 = (($319) + 12|0);
     HEAP32[$320>>2] = $318;
     $321 = $bits_left;
     $322 = $entropy;
     $323 = (($322) + 12|0);
     $324 = (($323) + 4|0);
     HEAP32[$324>>2] = $321;
     $325 = $EOBRUN;
     $326 = $entropy;
     $327 = (($326) + 20|0);
     HEAP32[$327>>2] = $325;
     break L11;
    }
   } while(0);
   while(1) {
    $332 = $num_newnz;
    $333 = ($332|0)!=(0);
    if (!($333)) {
     break;
    }
    $334 = $num_newnz;
    $335 = (($334) + -1)|0;
    $num_newnz = $335;
    $336 = (($newnz_pos) + ($335<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = $block;
    $339 = (($338) + ($337<<1)|0);
    HEAP16[$339>>1] = 0;
   }
   $0 = 0;
   $340 = $0;
   STACKTOP = sp;return ($340|0);
  }
 } while(0);
 $328 = $entropy;
 $329 = (($328) + 44|0);
 $330 = HEAP32[$329>>2]|0;
 $331 = (($330) + -1)|0;
 HEAP32[$329>>2] = $331;
 $0 = 1;
 $340 = $0;
 STACKTOP = sp;return ($340|0);
}
function _jpeg_make_d_derived_tbl($cinfo,$isDC,$tblno,$pdtbl) {
 $cinfo = $cinfo|0;
 $isDC = $isDC|0;
 $tblno = $tblno|0;
 $pdtbl = $pdtbl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $code = 0, $ctr = 0, $dtbl = 0, $htbl = 0, $huffcode = 0, $huffsize = 0, $i = 0;
 var $l = 0, $lookbits = 0, $numsymbols = 0, $p = 0, $si = 0, $sym = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1360|0;
 $huffsize = sp + 1088|0;
 $huffcode = sp + 8|0;
 $0 = $cinfo;
 $1 = $isDC;
 $2 = $tblno;
 $3 = $pdtbl;
 $4 = $2;
 $5 = ($4|0)<(0);
 if ($5) {
  label = 3;
 } else {
  $6 = $2;
  $7 = ($6|0)>=(4);
  if ($7) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 20|0);
  HEAP32[$10>>2] = 52;
  $11 = $2;
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 24|0);
  HEAP32[$14>>2] = $11;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  FUNCTION_TABLE_vi[$17 & 511]($18);
 }
 $19 = $1;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $2;
  $22 = $0;
  $23 = (($22) + 180|0);
  $24 = (($23) + ($21<<2)|0);
  $25 = HEAP32[$24>>2]|0;
  $31 = $25;
 } else {
  $26 = $2;
  $27 = $0;
  $28 = (($27) + 196|0);
  $29 = (($28) + ($26<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30;
 }
 $htbl = $31;
 $32 = $htbl;
 $33 = ($32|0)==(0|0);
 if ($33) {
  $34 = $0;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 20|0);
  HEAP32[$36>>2] = 52;
  $37 = $2;
  $38 = $0;
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 24|0);
  HEAP32[$40>>2] = $37;
  $41 = $0;
  $42 = HEAP32[$41>>2]|0;
  $43 = HEAP32[$42>>2]|0;
  $44 = $0;
  FUNCTION_TABLE_vi[$43 & 511]($44);
 }
 $45 = $3;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(0|0);
 if ($47) {
  $48 = $0;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $52 = $0;
  $53 = (FUNCTION_TABLE_iiii[$51 & 511]($52,1,1424)|0);
  $54 = $3;
  HEAP32[$54>>2] = $53;
 }
 $55 = $3;
 $56 = HEAP32[$55>>2]|0;
 $dtbl = $56;
 $57 = $htbl;
 $58 = $dtbl;
 $59 = (($58) + 140|0);
 HEAP32[$59>>2] = $57;
 $p = 0;
 $l = 1;
 while(1) {
  $60 = $l;
  $61 = ($60|0)<=(16);
  if (!($61)) {
   break;
  }
  $62 = $l;
  $63 = $htbl;
  $64 = (($63) + ($62)|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $i = $66;
  $67 = $i;
  $68 = ($67|0)<(0);
  if ($68) {
   label = 15;
  } else {
   $69 = $p;
   $70 = $i;
   $71 = (($69) + ($70))|0;
   $72 = ($71|0)>(256);
   if ($72) {
    label = 15;
   }
  }
  if ((label|0) == 15) {
   label = 0;
   $73 = $0;
   $74 = HEAP32[$73>>2]|0;
   $75 = (($74) + 20|0);
   HEAP32[$75>>2] = 9;
   $76 = $0;
   $77 = HEAP32[$76>>2]|0;
   $78 = HEAP32[$77>>2]|0;
   $79 = $0;
   FUNCTION_TABLE_vi[$78 & 511]($79);
  }
  while(1) {
   $80 = $i;
   $81 = (($80) + -1)|0;
   $i = $81;
   $82 = ($80|0)!=(0);
   if (!($82)) {
    break;
   }
   $83 = $l;
   $84 = $83&255;
   $85 = $p;
   $86 = (($85) + 1)|0;
   $p = $86;
   $87 = (($huffsize) + ($85)|0);
   HEAP8[$87>>0] = $84;
  }
  $88 = $l;
  $89 = (($88) + 1)|0;
  $l = $89;
 }
 $90 = $p;
 $91 = (($huffsize) + ($90)|0);
 HEAP8[$91>>0] = 0;
 $92 = $p;
 $numsymbols = $92;
 $code = 0;
 $93 = HEAP8[$huffsize>>0]|0;
 $94 = $93 << 24 >> 24;
 $si = $94;
 $p = 0;
 while(1) {
  $95 = $p;
  $96 = (($huffsize) + ($95)|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = ($97<<24>>24)!=(0);
  if (!($98)) {
   break;
  }
  while(1) {
   $99 = $p;
   $100 = (($huffsize) + ($99)|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101 << 24 >> 24;
   $103 = $si;
   $104 = ($102|0)==($103|0);
   if (!($104)) {
    break;
   }
   $105 = $code;
   $106 = $p;
   $107 = (($106) + 1)|0;
   $p = $107;
   $108 = (($huffcode) + ($106<<2)|0);
   HEAP32[$108>>2] = $105;
   $109 = $code;
   $110 = (($109) + 1)|0;
   $code = $110;
  }
  $111 = $code;
  $112 = $si;
  $113 = 1 << $112;
  $114 = ($111|0)>=($113|0);
  if ($114) {
   $115 = $0;
   $116 = HEAP32[$115>>2]|0;
   $117 = (($116) + 20|0);
   HEAP32[$117>>2] = 9;
   $118 = $0;
   $119 = HEAP32[$118>>2]|0;
   $120 = HEAP32[$119>>2]|0;
   $121 = $0;
   FUNCTION_TABLE_vi[$120 & 511]($121);
  }
  $122 = $code;
  $123 = $122 << 1;
  $code = $123;
  $124 = $si;
  $125 = (($124) + 1)|0;
  $si = $125;
 }
 $p = 0;
 $l = 1;
 while(1) {
  $126 = $l;
  $127 = ($126|0)<=(16);
  if (!($127)) {
   break;
  }
  $128 = $l;
  $129 = $htbl;
  $130 = (($129) + ($128)|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = ($131<<24>>24)!=(0);
  if ($132) {
   $133 = $p;
   $134 = $p;
   $135 = (($huffcode) + ($134<<2)|0);
   $136 = HEAP32[$135>>2]|0;
   $137 = (($133) - ($136))|0;
   $138 = $l;
   $139 = $dtbl;
   $140 = (($139) + 72|0);
   $141 = (($140) + ($138<<2)|0);
   HEAP32[$141>>2] = $137;
   $142 = $l;
   $143 = $htbl;
   $144 = (($143) + ($142)|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = $145&255;
   $147 = $p;
   $148 = (($147) + ($146))|0;
   $p = $148;
   $149 = $p;
   $150 = (($149) - 1)|0;
   $151 = (($huffcode) + ($150<<2)|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $l;
   $154 = $dtbl;
   $155 = (($154) + ($153<<2)|0);
   HEAP32[$155>>2] = $152;
  } else {
   $156 = $l;
   $157 = $dtbl;
   $158 = (($157) + ($156<<2)|0);
   HEAP32[$158>>2] = -1;
  }
  $159 = $l;
  $160 = (($159) + 1)|0;
  $l = $160;
 }
 $161 = $dtbl;
 $162 = (($161) + 68|0);
 HEAP32[$162>>2] = 1048575;
 $163 = $dtbl;
 $164 = (($163) + 144|0);
 _memset(($164|0),0,1024)|0;
 $p = 0;
 $l = 1;
 while(1) {
  $165 = $l;
  $166 = ($165|0)<=(8);
  if (!($166)) {
   break;
  }
  $i = 1;
  while(1) {
   $167 = $i;
   $168 = $l;
   $169 = $htbl;
   $170 = (($169) + ($168)|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = $171&255;
   $173 = ($167|0)<=($172|0);
   if (!($173)) {
    break;
   }
   $174 = $p;
   $175 = (($huffcode) + ($174<<2)|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = $l;
   $178 = (8 - ($177))|0;
   $179 = $176 << $178;
   $lookbits = $179;
   $180 = $l;
   $181 = (8 - ($180))|0;
   $182 = 1 << $181;
   $ctr = $182;
   while(1) {
    $183 = $ctr;
    $184 = ($183|0)>(0);
    if (!($184)) {
     break;
    }
    $185 = $l;
    $186 = $lookbits;
    $187 = $dtbl;
    $188 = (($187) + 144|0);
    $189 = (($188) + ($186<<2)|0);
    HEAP32[$189>>2] = $185;
    $190 = $p;
    $191 = $htbl;
    $192 = (($191) + 17|0);
    $193 = (($192) + ($190)|0);
    $194 = HEAP8[$193>>0]|0;
    $195 = $lookbits;
    $196 = $dtbl;
    $197 = (($196) + 1168|0);
    $198 = (($197) + ($195)|0);
    HEAP8[$198>>0] = $194;
    $199 = $lookbits;
    $200 = (($199) + 1)|0;
    $lookbits = $200;
    $201 = $ctr;
    $202 = (($201) + -1)|0;
    $ctr = $202;
   }
   $203 = $i;
   $204 = (($203) + 1)|0;
   $i = $204;
   $205 = $p;
   $206 = (($205) + 1)|0;
   $p = $206;
  }
  $207 = $l;
  $208 = (($207) + 1)|0;
  $l = $208;
 }
 $209 = $1;
 $210 = ($209|0)!=(0);
 if (!($210)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $211 = $i;
  $212 = $numsymbols;
  $213 = ($211|0)<($212|0);
  if (!($213)) {
   break;
  }
  $214 = $i;
  $215 = $htbl;
  $216 = (($215) + 17|0);
  $217 = (($216) + ($214)|0);
  $218 = HEAP8[$217>>0]|0;
  $219 = $218&255;
  $sym = $219;
  $220 = $sym;
  $221 = ($220|0)<(0);
  if ($221) {
   label = 53;
  } else {
   $222 = $sym;
   $223 = ($222|0)>(15);
   if ($223) {
    label = 53;
   }
  }
  if ((label|0) == 53) {
   label = 0;
   $224 = $0;
   $225 = HEAP32[$224>>2]|0;
   $226 = (($225) + 20|0);
   HEAP32[$226>>2] = 9;
   $227 = $0;
   $228 = HEAP32[$227>>2]|0;
   $229 = HEAP32[$228>>2]|0;
   $230 = $0;
   FUNCTION_TABLE_vi[$229 & 511]($230);
  }
  $231 = $i;
  $232 = (($231) + 1)|0;
  $i = $232;
 }
 STACKTOP = sp;return;
}
function _decode_mcu_sub($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Se = 0, $bits_left = 0, $blkn = 0, $block = 0, $br_state = 0, $ci = 0, $coef_limit = 0;
 var $entropy = 0, $get_buffer = 0, $htbl = 0, $k = 0, $look = 0, $look2 = 0, $look4 = 0, $natural_order = 0, $nb = 0, $nb1 = 0, $nb3 = 0, $r = 0, $s = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $br_state = sp + 72|0;
 $state = sp + 52|0;
 $1 = $cinfo;
 $2 = $MCU_data;
 $3 = $1;
 $4 = (($3) + 468|0);
 $5 = HEAP32[$4>>2]|0;
 $entropy = $5;
 $6 = $1;
 $7 = (($6) + 280|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $entropy;
  $11 = (($10) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  do {
   if ($13) {
    $14 = $1;
    $15 = (_process_restart41($14)|0);
    $16 = ($15|0)!=(0);
    if ($16) {
     break;
    }
    $0 = 0;
    $392 = $0;
    STACKTOP = sp;return ($392|0);
   }
  } while(0);
 }
 $17 = $entropy;
 $18 = (($17) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 L11: do {
  if (!($20)) {
   $21 = $1;
   $22 = (($21) + 432|0);
   $23 = HEAP32[$22>>2]|0;
   $natural_order = $23;
   $24 = $1;
   $25 = (($24) + 436|0);
   $26 = HEAP32[$25>>2]|0;
   $Se = $26;
   $27 = $1;
   $28 = (($br_state) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = $1;
   $30 = (($29) + 24|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = HEAP32[$31>>2]|0;
   HEAP32[$br_state>>2] = $32;
   $33 = $1;
   $34 = (($33) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + 4|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($br_state) + 4|0);
   HEAP32[$38>>2] = $37;
   $39 = $entropy;
   $40 = (($39) + 12|0);
   $41 = HEAP32[$40>>2]|0;
   $get_buffer = $41;
   $42 = $entropy;
   $43 = (($42) + 12|0);
   $44 = (($43) + 4|0);
   $45 = HEAP32[$44>>2]|0;
   $bits_left = $45;
   $46 = $entropy;
   $47 = (($46) + 20|0);
   ;HEAP32[$state+0>>2]=HEAP32[$47+0>>2]|0;HEAP32[$state+4>>2]=HEAP32[$47+4>>2]|0;HEAP32[$state+8>>2]=HEAP32[$47+8>>2]|0;HEAP32[$state+12>>2]=HEAP32[$47+12>>2]|0;HEAP32[$state+16>>2]=HEAP32[$47+16>>2]|0;
   $blkn = 0;
   L13: while(1) {
    $48 = $blkn;
    $49 = $1;
    $50 = (($49) + 368|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = ($48|0)<($51|0);
    if (!($52)) {
     label = 96;
     break;
    }
    $53 = $blkn;
    $54 = $2;
    $55 = (($54) + ($53<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $block = $56;
    $57 = $blkn;
    $58 = $entropy;
    $59 = (($58) + 100|0);
    $60 = (($59) + ($57<<2)|0);
    $61 = HEAP32[$60>>2]|0;
    $htbl = $61;
    $62 = $bits_left;
    $63 = ($62|0)<(8);
    do {
     if ($63) {
      $64 = $get_buffer;
      $65 = $bits_left;
      $66 = (_jpeg_fill_bit_buffer($br_state,$64,$65,0)|0);
      $67 = ($66|0)!=(0);
      if (!($67)) {
       label = 12;
       break L13;
      }
      $68 = (($br_state) + 8|0);
      $69 = HEAP32[$68>>2]|0;
      $get_buffer = $69;
      $70 = (($br_state) + 12|0);
      $71 = HEAP32[$70>>2]|0;
      $bits_left = $71;
      $72 = $bits_left;
      $73 = ($72|0)<(8);
      if ($73) {
       $nb = 1;
       label = 19;
       break;
      } else {
       label = 16;
       break;
      }
     } else {
      label = 16;
     }
    } while(0);
    do {
     if ((label|0) == 16) {
      label = 0;
      $74 = $get_buffer;
      $75 = $bits_left;
      $76 = (($75) - 8)|0;
      $77 = $74 >> $76;
      $78 = HEAP32[((2912 + 32|0))>>2]|0;
      $79 = $77 & $78;
      $look = $79;
      $80 = $look;
      $81 = $htbl;
      $82 = (($81) + 144|0);
      $83 = (($82) + ($80<<2)|0);
      $84 = HEAP32[$83>>2]|0;
      $nb = $84;
      $85 = ($84|0)!=(0);
      if ($85) {
       $86 = $nb;
       $87 = $bits_left;
       $88 = (($87) - ($86))|0;
       $bits_left = $88;
       $89 = $look;
       $90 = $htbl;
       $91 = (($90) + 1168|0);
       $92 = (($91) + ($89)|0);
       $93 = HEAP8[$92>>0]|0;
       $94 = $93&255;
       $s = $94;
       break;
      } else {
       $nb = 9;
       label = 19;
       break;
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     $95 = $get_buffer;
     $96 = $bits_left;
     $97 = $htbl;
     $98 = $nb;
     $99 = (_jpeg_huff_decode($br_state,$95,$96,$97,$98)|0);
     $s = $99;
     $100 = ($99|0)<(0);
     if ($100) {
      label = 20;
      break;
     }
     $101 = (($br_state) + 8|0);
     $102 = HEAP32[$101>>2]|0;
     $get_buffer = $102;
     $103 = (($br_state) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $bits_left = $104;
    }
    $105 = $blkn;
    $106 = $entropy;
    $107 = (($106) + 140|0);
    $108 = (($107) + ($105<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $htbl = $109;
    $k = 1;
    $110 = $blkn;
    $111 = $entropy;
    $112 = (($111) + 180|0);
    $113 = (($112) + ($110<<2)|0);
    $114 = HEAP32[$113>>2]|0;
    $coef_limit = $114;
    $115 = $coef_limit;
    $116 = ($115|0)!=(0);
    do {
     if ($116) {
      $117 = $s;
      $118 = ($117|0)!=(0);
      if ($118) {
       $119 = $bits_left;
       $120 = $s;
       $121 = ($119|0)<($120|0);
       if ($121) {
        $122 = $get_buffer;
        $123 = $bits_left;
        $124 = $s;
        $125 = (_jpeg_fill_bit_buffer($br_state,$122,$123,$124)|0);
        $126 = ($125|0)!=(0);
        if (!($126)) {
         label = 26;
         break L13;
        }
        $127 = (($br_state) + 8|0);
        $128 = HEAP32[$127>>2]|0;
        $get_buffer = $128;
        $129 = (($br_state) + 12|0);
        $130 = HEAP32[$129>>2]|0;
        $bits_left = $130;
       }
       $131 = $get_buffer;
       $132 = $s;
       $133 = $bits_left;
       $134 = (($133) - ($132))|0;
       $bits_left = $134;
       $135 = $131 >> $134;
       $136 = $s;
       $137 = (2912 + ($136<<2)|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = $135 & $138;
       $r = $139;
       $140 = $r;
       $141 = $s;
       $142 = (($141) - 1)|0;
       $143 = (2912 + ($142<<2)|0);
       $144 = HEAP32[$143>>2]|0;
       $145 = ($140|0)<=($144|0);
       if ($145) {
        $146 = $r;
        $147 = $s;
        $148 = (2912 + ($147<<2)|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = (($146) - ($149))|0;
        $152 = $150;
       } else {
        $151 = $r;
        $152 = $151;
       }
       $s = $152;
      }
      $153 = $blkn;
      $154 = $1;
      $155 = (($154) + 372|0);
      $156 = (($155) + ($153<<2)|0);
      $157 = HEAP32[$156>>2]|0;
      $ci = $157;
      $158 = $ci;
      $159 = (($state) + 4|0);
      $160 = (($159) + ($158<<2)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = $s;
      $163 = (($162) + ($161))|0;
      $s = $163;
      $164 = $s;
      $165 = $ci;
      $166 = (($state) + 4|0);
      $167 = (($166) + ($165<<2)|0);
      HEAP32[$167>>2] = $164;
      $168 = $s;
      $169 = $168&65535;
      $170 = $block;
      HEAP16[$170>>1] = $169;
      while(1) {
       $171 = $k;
       $172 = $coef_limit;
       $173 = ($171|0)<($172|0);
       if (!($173)) {
        label = 60;
        break;
       }
       $174 = $bits_left;
       $175 = ($174|0)<(8);
       do {
        if ($175) {
         $176 = $get_buffer;
         $177 = $bits_left;
         $178 = (_jpeg_fill_bit_buffer($br_state,$176,$177,0)|0);
         $179 = ($178|0)!=(0);
         if (!($179)) {
          label = 36;
          break L13;
         }
         $180 = (($br_state) + 8|0);
         $181 = HEAP32[$180>>2]|0;
         $get_buffer = $181;
         $182 = (($br_state) + 12|0);
         $183 = HEAP32[$182>>2]|0;
         $bits_left = $183;
         $184 = $bits_left;
         $185 = ($184|0)<(8);
         if ($185) {
          $nb1 = 1;
          label = 43;
          break;
         } else {
          label = 40;
          break;
         }
        } else {
         label = 40;
        }
       } while(0);
       do {
        if ((label|0) == 40) {
         label = 0;
         $186 = $get_buffer;
         $187 = $bits_left;
         $188 = (($187) - 8)|0;
         $189 = $186 >> $188;
         $190 = HEAP32[((2912 + 32|0))>>2]|0;
         $191 = $189 & $190;
         $look2 = $191;
         $192 = $look2;
         $193 = $htbl;
         $194 = (($193) + 144|0);
         $195 = (($194) + ($192<<2)|0);
         $196 = HEAP32[$195>>2]|0;
         $nb1 = $196;
         $197 = ($196|0)!=(0);
         if ($197) {
          $198 = $nb1;
          $199 = $bits_left;
          $200 = (($199) - ($198))|0;
          $bits_left = $200;
          $201 = $look2;
          $202 = $htbl;
          $203 = (($202) + 1168|0);
          $204 = (($203) + ($201)|0);
          $205 = HEAP8[$204>>0]|0;
          $206 = $205&255;
          $s = $206;
          break;
         } else {
          $nb1 = 9;
          label = 43;
          break;
         }
        }
       } while(0);
       if ((label|0) == 43) {
        label = 0;
        $207 = $get_buffer;
        $208 = $bits_left;
        $209 = $htbl;
        $210 = $nb1;
        $211 = (_jpeg_huff_decode($br_state,$207,$208,$209,$210)|0);
        $s = $211;
        $212 = ($211|0)<(0);
        if ($212) {
         label = 44;
         break L13;
        }
        $213 = (($br_state) + 8|0);
        $214 = HEAP32[$213>>2]|0;
        $get_buffer = $214;
        $215 = (($br_state) + 12|0);
        $216 = HEAP32[$215>>2]|0;
        $bits_left = $216;
       }
       $217 = $s;
       $218 = $217 >> 4;
       $r = $218;
       $219 = $s;
       $220 = $219 & 15;
       $s = $220;
       $221 = $s;
       $222 = ($221|0)!=(0);
       if ($222) {
        $223 = $r;
        $224 = $k;
        $225 = (($224) + ($223))|0;
        $k = $225;
        $226 = $bits_left;
        $227 = $s;
        $228 = ($226|0)<($227|0);
        if ($228) {
         $229 = $get_buffer;
         $230 = $bits_left;
         $231 = $s;
         $232 = (_jpeg_fill_bit_buffer($br_state,$229,$230,$231)|0);
         $233 = ($232|0)!=(0);
         if (!($233)) {
          label = 49;
          break L13;
         }
         $234 = (($br_state) + 8|0);
         $235 = HEAP32[$234>>2]|0;
         $get_buffer = $235;
         $236 = (($br_state) + 12|0);
         $237 = HEAP32[$236>>2]|0;
         $bits_left = $237;
        }
        $238 = $get_buffer;
        $239 = $s;
        $240 = $bits_left;
        $241 = (($240) - ($239))|0;
        $bits_left = $241;
        $242 = $238 >> $241;
        $243 = $s;
        $244 = (2912 + ($243<<2)|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = $242 & $245;
        $r = $246;
        $247 = $r;
        $248 = $s;
        $249 = (($248) - 1)|0;
        $250 = (2912 + ($249<<2)|0);
        $251 = HEAP32[$250>>2]|0;
        $252 = ($247|0)<=($251|0);
        if ($252) {
         $253 = $r;
         $254 = $s;
         $255 = (2912 + ($254<<2)|0);
         $256 = HEAP32[$255>>2]|0;
         $257 = (($253) - ($256))|0;
         $259 = $257;
        } else {
         $258 = $r;
         $259 = $258;
        }
        $s = $259;
        $260 = $s;
        $261 = $260&65535;
        $262 = $k;
        $263 = $natural_order;
        $264 = (($263) + ($262<<2)|0);
        $265 = HEAP32[$264>>2]|0;
        $266 = $block;
        $267 = (($266) + ($265<<1)|0);
        HEAP16[$267>>1] = $261;
       } else {
        $268 = $r;
        $269 = ($268|0)!=(15);
        if ($269) {
         label = 56;
         break;
        }
        $270 = $k;
        $271 = (($270) + 15)|0;
        $k = $271;
       }
       $272 = $k;
       $273 = (($272) + 1)|0;
       $k = $273;
      }
      if ((label|0) == 56) {
       label = 0;
       break;
      }
      else if ((label|0) == 60) {
       label = 0;
       label = 68;
       break;
      }
     } else {
      $274 = $s;
      $275 = ($274|0)!=(0);
      if ($275) {
       $276 = $bits_left;
       $277 = $s;
       $278 = ($276|0)<($277|0);
       if ($278) {
        $279 = $get_buffer;
        $280 = $bits_left;
        $281 = $s;
        $282 = (_jpeg_fill_bit_buffer($br_state,$279,$280,$281)|0);
        $283 = ($282|0)!=(0);
        if (!($283)) {
         label = 64;
         break L13;
        }
        $284 = (($br_state) + 8|0);
        $285 = HEAP32[$284>>2]|0;
        $get_buffer = $285;
        $286 = (($br_state) + 12|0);
        $287 = HEAP32[$286>>2]|0;
        $bits_left = $287;
       }
       $288 = $s;
       $289 = $bits_left;
       $290 = (($289) - ($288))|0;
       $bits_left = $290;
      }
      label = 68;
     }
    } while(0);
    if ((label|0) == 68) {
     label = 0;
     while(1) {
      $291 = $k;
      $292 = $Se;
      $293 = ($291|0)<=($292|0);
      if (!($293)) {
       break;
      }
      $294 = $bits_left;
      $295 = ($294|0)<(8);
      do {
       if ($295) {
        $296 = $get_buffer;
        $297 = $bits_left;
        $298 = (_jpeg_fill_bit_buffer($br_state,$296,$297,0)|0);
        $299 = ($298|0)!=(0);
        if (!($299)) {
         label = 72;
         break L13;
        }
        $300 = (($br_state) + 8|0);
        $301 = HEAP32[$300>>2]|0;
        $get_buffer = $301;
        $302 = (($br_state) + 12|0);
        $303 = HEAP32[$302>>2]|0;
        $bits_left = $303;
        $304 = $bits_left;
        $305 = ($304|0)<(8);
        if ($305) {
         $nb3 = 1;
         label = 79;
         break;
        } else {
         label = 76;
         break;
        }
       } else {
        label = 76;
       }
      } while(0);
      do {
       if ((label|0) == 76) {
        label = 0;
        $306 = $get_buffer;
        $307 = $bits_left;
        $308 = (($307) - 8)|0;
        $309 = $306 >> $308;
        $310 = HEAP32[((2912 + 32|0))>>2]|0;
        $311 = $309 & $310;
        $look4 = $311;
        $312 = $look4;
        $313 = $htbl;
        $314 = (($313) + 144|0);
        $315 = (($314) + ($312<<2)|0);
        $316 = HEAP32[$315>>2]|0;
        $nb3 = $316;
        $317 = ($316|0)!=(0);
        if ($317) {
         $318 = $nb3;
         $319 = $bits_left;
         $320 = (($319) - ($318))|0;
         $bits_left = $320;
         $321 = $look4;
         $322 = $htbl;
         $323 = (($322) + 1168|0);
         $324 = (($323) + ($321)|0);
         $325 = HEAP8[$324>>0]|0;
         $326 = $325&255;
         $s = $326;
         break;
        } else {
         $nb3 = 9;
         label = 79;
         break;
        }
       }
      } while(0);
      if ((label|0) == 79) {
       label = 0;
       $327 = $get_buffer;
       $328 = $bits_left;
       $329 = $htbl;
       $330 = $nb3;
       $331 = (_jpeg_huff_decode($br_state,$327,$328,$329,$330)|0);
       $s = $331;
       $332 = ($331|0)<(0);
       if ($332) {
        label = 80;
        break L13;
       }
       $333 = (($br_state) + 8|0);
       $334 = HEAP32[$333>>2]|0;
       $get_buffer = $334;
       $335 = (($br_state) + 12|0);
       $336 = HEAP32[$335>>2]|0;
       $bits_left = $336;
      }
      $337 = $s;
      $338 = $337 >> 4;
      $r = $338;
      $339 = $s;
      $340 = $339 & 15;
      $s = $340;
      $341 = $s;
      $342 = ($341|0)!=(0);
      if ($342) {
       $343 = $r;
       $344 = $k;
       $345 = (($344) + ($343))|0;
       $k = $345;
       $346 = $bits_left;
       $347 = $s;
       $348 = ($346|0)<($347|0);
       if ($348) {
        $349 = $get_buffer;
        $350 = $bits_left;
        $351 = $s;
        $352 = (_jpeg_fill_bit_buffer($br_state,$349,$350,$351)|0);
        $353 = ($352|0)!=(0);
        if (!($353)) {
         label = 85;
         break L13;
        }
        $354 = (($br_state) + 8|0);
        $355 = HEAP32[$354>>2]|0;
        $get_buffer = $355;
        $356 = (($br_state) + 12|0);
        $357 = HEAP32[$356>>2]|0;
        $bits_left = $357;
       }
       $358 = $s;
       $359 = $bits_left;
       $360 = (($359) - ($358))|0;
       $bits_left = $360;
      } else {
       $361 = $r;
       $362 = ($361|0)!=(15);
       if ($362) {
        label = 89;
        break;
       }
       $363 = $k;
       $364 = (($363) + 15)|0;
       $k = $364;
      }
      $365 = $k;
      $366 = (($365) + 1)|0;
      $k = $366;
     }
     if ((label|0) == 89) {
      label = 0;
     }
    }
    $367 = $blkn;
    $368 = (($367) + 1)|0;
    $blkn = $368;
   }
   switch (label|0) {
    case 12: {
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
     break;
    }
    case 20: {
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
     break;
    }
    case 26: {
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
     break;
    }
    case 36: {
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
     break;
    }
    case 44: {
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
     break;
    }
    case 49: {
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
     break;
    }
    case 64: {
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
     break;
    }
    case 72: {
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
     break;
    }
    case 80: {
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
     break;
    }
    case 85: {
     $0 = 0;
     $392 = $0;
     STACKTOP = sp;return ($392|0);
     break;
    }
    case 96: {
     $369 = HEAP32[$br_state>>2]|0;
     $370 = $1;
     $371 = (($370) + 24|0);
     $372 = HEAP32[$371>>2]|0;
     HEAP32[$372>>2] = $369;
     $373 = (($br_state) + 4|0);
     $374 = HEAP32[$373>>2]|0;
     $375 = $1;
     $376 = (($375) + 24|0);
     $377 = HEAP32[$376>>2]|0;
     $378 = (($377) + 4|0);
     HEAP32[$378>>2] = $374;
     $379 = $get_buffer;
     $380 = $entropy;
     $381 = (($380) + 12|0);
     HEAP32[$381>>2] = $379;
     $382 = $bits_left;
     $383 = $entropy;
     $384 = (($383) + 12|0);
     $385 = (($384) + 4|0);
     HEAP32[$385>>2] = $382;
     $386 = $entropy;
     $387 = (($386) + 20|0);
     ;HEAP32[$387+0>>2]=HEAP32[$state+0>>2]|0;HEAP32[$387+4>>2]=HEAP32[$state+4>>2]|0;HEAP32[$387+8>>2]=HEAP32[$state+8>>2]|0;HEAP32[$387+12>>2]=HEAP32[$state+12>>2]|0;HEAP32[$387+16>>2]=HEAP32[$state+16>>2]|0;
     break L11;
     break;
    }
   }
  }
 } while(0);
 $388 = $entropy;
 $389 = (($388) + 44|0);
 $390 = HEAP32[$389>>2]|0;
 $391 = (($390) + -1)|0;
 HEAP32[$389>>2] = $391;
 $0 = 1;
 $392 = $0;
 STACKTOP = sp;return ($392|0);
}
function _decode_mcu40($cinfo,$MCU_data) {
 $cinfo = $cinfo|0;
 $MCU_data = $MCU_data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits_left = 0, $blkn = 0, $block = 0, $br_state = 0, $ci = 0, $coef_limit = 0, $entropy = 0, $get_buffer = 0, $htbl = 0, $k = 0, $look = 0, $look2 = 0, $look4 = 0, $nb = 0, $nb1 = 0;
 var $nb3 = 0, $r = 0, $s = 0, $state = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $br_state = sp + 72|0;
 $state = sp + 52|0;
 $1 = $cinfo;
 $2 = $MCU_data;
 $3 = $1;
 $4 = (($3) + 468|0);
 $5 = HEAP32[$4>>2]|0;
 $entropy = $5;
 $6 = $1;
 $7 = (($6) + 280|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = $entropy;
  $11 = (($10) + 44|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  do {
   if ($13) {
    $14 = $1;
    $15 = (_process_restart41($14)|0);
    $16 = ($15|0)!=(0);
    if ($16) {
     break;
    }
    $0 = 0;
    $384 = $0;
    STACKTOP = sp;return ($384|0);
   }
  } while(0);
 }
 $17 = $entropy;
 $18 = (($17) + 40|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0);
 L11: do {
  if (!($20)) {
   $21 = $1;
   $22 = (($br_state) + 16|0);
   HEAP32[$22>>2] = $21;
   $23 = $1;
   $24 = (($23) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = HEAP32[$25>>2]|0;
   HEAP32[$br_state>>2] = $26;
   $27 = $1;
   $28 = (($27) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($29) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($br_state) + 4|0);
   HEAP32[$32>>2] = $31;
   $33 = $entropy;
   $34 = (($33) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $get_buffer = $35;
   $36 = $entropy;
   $37 = (($36) + 12|0);
   $38 = (($37) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $bits_left = $39;
   $40 = $entropy;
   $41 = (($40) + 20|0);
   ;HEAP32[$state+0>>2]=HEAP32[$41+0>>2]|0;HEAP32[$state+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$state+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$state+12>>2]=HEAP32[$41+12>>2]|0;HEAP32[$state+16>>2]=HEAP32[$41+16>>2]|0;
   $blkn = 0;
   L13: while(1) {
    $42 = $blkn;
    $43 = $1;
    $44 = (($43) + 368|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($42|0)<($45|0);
    if (!($46)) {
     label = 96;
     break;
    }
    $47 = $blkn;
    $48 = $2;
    $49 = (($48) + ($47<<2)|0);
    $50 = HEAP32[$49>>2]|0;
    $block = $50;
    $51 = $blkn;
    $52 = $entropy;
    $53 = (($52) + 100|0);
    $54 = (($53) + ($51<<2)|0);
    $55 = HEAP32[$54>>2]|0;
    $htbl = $55;
    $56 = $bits_left;
    $57 = ($56|0)<(8);
    do {
     if ($57) {
      $58 = $get_buffer;
      $59 = $bits_left;
      $60 = (_jpeg_fill_bit_buffer($br_state,$58,$59,0)|0);
      $61 = ($60|0)!=(0);
      if (!($61)) {
       label = 12;
       break L13;
      }
      $62 = (($br_state) + 8|0);
      $63 = HEAP32[$62>>2]|0;
      $get_buffer = $63;
      $64 = (($br_state) + 12|0);
      $65 = HEAP32[$64>>2]|0;
      $bits_left = $65;
      $66 = $bits_left;
      $67 = ($66|0)<(8);
      if ($67) {
       $nb = 1;
       label = 19;
       break;
      } else {
       label = 16;
       break;
      }
     } else {
      label = 16;
     }
    } while(0);
    do {
     if ((label|0) == 16) {
      label = 0;
      $68 = $get_buffer;
      $69 = $bits_left;
      $70 = (($69) - 8)|0;
      $71 = $68 >> $70;
      $72 = HEAP32[((2912 + 32|0))>>2]|0;
      $73 = $71 & $72;
      $look = $73;
      $74 = $look;
      $75 = $htbl;
      $76 = (($75) + 144|0);
      $77 = (($76) + ($74<<2)|0);
      $78 = HEAP32[$77>>2]|0;
      $nb = $78;
      $79 = ($78|0)!=(0);
      if ($79) {
       $80 = $nb;
       $81 = $bits_left;
       $82 = (($81) - ($80))|0;
       $bits_left = $82;
       $83 = $look;
       $84 = $htbl;
       $85 = (($84) + 1168|0);
       $86 = (($85) + ($83)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = $87&255;
       $s = $88;
       break;
      } else {
       $nb = 9;
       label = 19;
       break;
      }
     }
    } while(0);
    if ((label|0) == 19) {
     label = 0;
     $89 = $get_buffer;
     $90 = $bits_left;
     $91 = $htbl;
     $92 = $nb;
     $93 = (_jpeg_huff_decode($br_state,$89,$90,$91,$92)|0);
     $s = $93;
     $94 = ($93|0)<(0);
     if ($94) {
      label = 20;
      break;
     }
     $95 = (($br_state) + 8|0);
     $96 = HEAP32[$95>>2]|0;
     $get_buffer = $96;
     $97 = (($br_state) + 12|0);
     $98 = HEAP32[$97>>2]|0;
     $bits_left = $98;
    }
    $99 = $blkn;
    $100 = $entropy;
    $101 = (($100) + 140|0);
    $102 = (($101) + ($99<<2)|0);
    $103 = HEAP32[$102>>2]|0;
    $htbl = $103;
    $k = 1;
    $104 = $blkn;
    $105 = $entropy;
    $106 = (($105) + 180|0);
    $107 = (($106) + ($104<<2)|0);
    $108 = HEAP32[$107>>2]|0;
    $coef_limit = $108;
    $109 = $coef_limit;
    $110 = ($109|0)!=(0);
    do {
     if ($110) {
      $111 = $s;
      $112 = ($111|0)!=(0);
      if ($112) {
       $113 = $bits_left;
       $114 = $s;
       $115 = ($113|0)<($114|0);
       if ($115) {
        $116 = $get_buffer;
        $117 = $bits_left;
        $118 = $s;
        $119 = (_jpeg_fill_bit_buffer($br_state,$116,$117,$118)|0);
        $120 = ($119|0)!=(0);
        if (!($120)) {
         label = 26;
         break L13;
        }
        $121 = (($br_state) + 8|0);
        $122 = HEAP32[$121>>2]|0;
        $get_buffer = $122;
        $123 = (($br_state) + 12|0);
        $124 = HEAP32[$123>>2]|0;
        $bits_left = $124;
       }
       $125 = $get_buffer;
       $126 = $s;
       $127 = $bits_left;
       $128 = (($127) - ($126))|0;
       $bits_left = $128;
       $129 = $125 >> $128;
       $130 = $s;
       $131 = (2912 + ($130<<2)|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = $129 & $132;
       $r = $133;
       $134 = $r;
       $135 = $s;
       $136 = (($135) - 1)|0;
       $137 = (2912 + ($136<<2)|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = ($134|0)<=($138|0);
       if ($139) {
        $140 = $r;
        $141 = $s;
        $142 = (2912 + ($141<<2)|0);
        $143 = HEAP32[$142>>2]|0;
        $144 = (($140) - ($143))|0;
        $146 = $144;
       } else {
        $145 = $r;
        $146 = $145;
       }
       $s = $146;
      }
      $147 = $blkn;
      $148 = $1;
      $149 = (($148) + 372|0);
      $150 = (($149) + ($147<<2)|0);
      $151 = HEAP32[$150>>2]|0;
      $ci = $151;
      $152 = $ci;
      $153 = (($state) + 4|0);
      $154 = (($153) + ($152<<2)|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = $s;
      $157 = (($156) + ($155))|0;
      $s = $157;
      $158 = $s;
      $159 = $ci;
      $160 = (($state) + 4|0);
      $161 = (($160) + ($159<<2)|0);
      HEAP32[$161>>2] = $158;
      $162 = $s;
      $163 = $162&65535;
      $164 = $block;
      HEAP16[$164>>1] = $163;
      while(1) {
       $165 = $k;
       $166 = $coef_limit;
       $167 = ($165|0)<($166|0);
       if (!($167)) {
        label = 60;
        break;
       }
       $168 = $bits_left;
       $169 = ($168|0)<(8);
       do {
        if ($169) {
         $170 = $get_buffer;
         $171 = $bits_left;
         $172 = (_jpeg_fill_bit_buffer($br_state,$170,$171,0)|0);
         $173 = ($172|0)!=(0);
         if (!($173)) {
          label = 36;
          break L13;
         }
         $174 = (($br_state) + 8|0);
         $175 = HEAP32[$174>>2]|0;
         $get_buffer = $175;
         $176 = (($br_state) + 12|0);
         $177 = HEAP32[$176>>2]|0;
         $bits_left = $177;
         $178 = $bits_left;
         $179 = ($178|0)<(8);
         if ($179) {
          $nb1 = 1;
          label = 43;
          break;
         } else {
          label = 40;
          break;
         }
        } else {
         label = 40;
        }
       } while(0);
       do {
        if ((label|0) == 40) {
         label = 0;
         $180 = $get_buffer;
         $181 = $bits_left;
         $182 = (($181) - 8)|0;
         $183 = $180 >> $182;
         $184 = HEAP32[((2912 + 32|0))>>2]|0;
         $185 = $183 & $184;
         $look2 = $185;
         $186 = $look2;
         $187 = $htbl;
         $188 = (($187) + 144|0);
         $189 = (($188) + ($186<<2)|0);
         $190 = HEAP32[$189>>2]|0;
         $nb1 = $190;
         $191 = ($190|0)!=(0);
         if ($191) {
          $192 = $nb1;
          $193 = $bits_left;
          $194 = (($193) - ($192))|0;
          $bits_left = $194;
          $195 = $look2;
          $196 = $htbl;
          $197 = (($196) + 1168|0);
          $198 = (($197) + ($195)|0);
          $199 = HEAP8[$198>>0]|0;
          $200 = $199&255;
          $s = $200;
          break;
         } else {
          $nb1 = 9;
          label = 43;
          break;
         }
        }
       } while(0);
       if ((label|0) == 43) {
        label = 0;
        $201 = $get_buffer;
        $202 = $bits_left;
        $203 = $htbl;
        $204 = $nb1;
        $205 = (_jpeg_huff_decode($br_state,$201,$202,$203,$204)|0);
        $s = $205;
        $206 = ($205|0)<(0);
        if ($206) {
         label = 44;
         break L13;
        }
        $207 = (($br_state) + 8|0);
        $208 = HEAP32[$207>>2]|0;
        $get_buffer = $208;
        $209 = (($br_state) + 12|0);
        $210 = HEAP32[$209>>2]|0;
        $bits_left = $210;
       }
       $211 = $s;
       $212 = $211 >> 4;
       $r = $212;
       $213 = $s;
       $214 = $213 & 15;
       $s = $214;
       $215 = $s;
       $216 = ($215|0)!=(0);
       if ($216) {
        $217 = $r;
        $218 = $k;
        $219 = (($218) + ($217))|0;
        $k = $219;
        $220 = $bits_left;
        $221 = $s;
        $222 = ($220|0)<($221|0);
        if ($222) {
         $223 = $get_buffer;
         $224 = $bits_left;
         $225 = $s;
         $226 = (_jpeg_fill_bit_buffer($br_state,$223,$224,$225)|0);
         $227 = ($226|0)!=(0);
         if (!($227)) {
          label = 49;
          break L13;
         }
         $228 = (($br_state) + 8|0);
         $229 = HEAP32[$228>>2]|0;
         $get_buffer = $229;
         $230 = (($br_state) + 12|0);
         $231 = HEAP32[$230>>2]|0;
         $bits_left = $231;
        }
        $232 = $get_buffer;
        $233 = $s;
        $234 = $bits_left;
        $235 = (($234) - ($233))|0;
        $bits_left = $235;
        $236 = $232 >> $235;
        $237 = $s;
        $238 = (2912 + ($237<<2)|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = $236 & $239;
        $r = $240;
        $241 = $r;
        $242 = $s;
        $243 = (($242) - 1)|0;
        $244 = (2912 + ($243<<2)|0);
        $245 = HEAP32[$244>>2]|0;
        $246 = ($241|0)<=($245|0);
        if ($246) {
         $247 = $r;
         $248 = $s;
         $249 = (2912 + ($248<<2)|0);
         $250 = HEAP32[$249>>2]|0;
         $251 = (($247) - ($250))|0;
         $253 = $251;
        } else {
         $252 = $r;
         $253 = $252;
        }
        $s = $253;
        $254 = $s;
        $255 = $254&65535;
        $256 = $k;
        $257 = (8888 + ($256<<2)|0);
        $258 = HEAPU8[$257>>0]|(HEAPU8[$257+1>>0]<<8)|(HEAPU8[$257+2>>0]<<16)|(HEAPU8[$257+3>>0]<<24);
        $259 = $block;
        $260 = (($259) + ($258<<1)|0);
        HEAP16[$260>>1] = $255;
       } else {
        $261 = $r;
        $262 = ($261|0)!=(15);
        if ($262) {
         label = 56;
         break;
        }
        $263 = $k;
        $264 = (($263) + 15)|0;
        $k = $264;
       }
       $265 = $k;
       $266 = (($265) + 1)|0;
       $k = $266;
      }
      if ((label|0) == 56) {
       label = 0;
       break;
      }
      else if ((label|0) == 60) {
       label = 0;
       label = 68;
       break;
      }
     } else {
      $267 = $s;
      $268 = ($267|0)!=(0);
      if ($268) {
       $269 = $bits_left;
       $270 = $s;
       $271 = ($269|0)<($270|0);
       if ($271) {
        $272 = $get_buffer;
        $273 = $bits_left;
        $274 = $s;
        $275 = (_jpeg_fill_bit_buffer($br_state,$272,$273,$274)|0);
        $276 = ($275|0)!=(0);
        if (!($276)) {
         label = 64;
         break L13;
        }
        $277 = (($br_state) + 8|0);
        $278 = HEAP32[$277>>2]|0;
        $get_buffer = $278;
        $279 = (($br_state) + 12|0);
        $280 = HEAP32[$279>>2]|0;
        $bits_left = $280;
       }
       $281 = $s;
       $282 = $bits_left;
       $283 = (($282) - ($281))|0;
       $bits_left = $283;
      }
      label = 68;
     }
    } while(0);
    if ((label|0) == 68) {
     label = 0;
     while(1) {
      $284 = $k;
      $285 = ($284|0)<(64);
      if (!($285)) {
       break;
      }
      $286 = $bits_left;
      $287 = ($286|0)<(8);
      do {
       if ($287) {
        $288 = $get_buffer;
        $289 = $bits_left;
        $290 = (_jpeg_fill_bit_buffer($br_state,$288,$289,0)|0);
        $291 = ($290|0)!=(0);
        if (!($291)) {
         label = 72;
         break L13;
        }
        $292 = (($br_state) + 8|0);
        $293 = HEAP32[$292>>2]|0;
        $get_buffer = $293;
        $294 = (($br_state) + 12|0);
        $295 = HEAP32[$294>>2]|0;
        $bits_left = $295;
        $296 = $bits_left;
        $297 = ($296|0)<(8);
        if ($297) {
         $nb3 = 1;
         label = 79;
         break;
        } else {
         label = 76;
         break;
        }
       } else {
        label = 76;
       }
      } while(0);
      do {
       if ((label|0) == 76) {
        label = 0;
        $298 = $get_buffer;
        $299 = $bits_left;
        $300 = (($299) - 8)|0;
        $301 = $298 >> $300;
        $302 = HEAP32[((2912 + 32|0))>>2]|0;
        $303 = $301 & $302;
        $look4 = $303;
        $304 = $look4;
        $305 = $htbl;
        $306 = (($305) + 144|0);
        $307 = (($306) + ($304<<2)|0);
        $308 = HEAP32[$307>>2]|0;
        $nb3 = $308;
        $309 = ($308|0)!=(0);
        if ($309) {
         $310 = $nb3;
         $311 = $bits_left;
         $312 = (($311) - ($310))|0;
         $bits_left = $312;
         $313 = $look4;
         $314 = $htbl;
         $315 = (($314) + 1168|0);
         $316 = (($315) + ($313)|0);
         $317 = HEAP8[$316>>0]|0;
         $318 = $317&255;
         $s = $318;
         break;
        } else {
         $nb3 = 9;
         label = 79;
         break;
        }
       }
      } while(0);
      if ((label|0) == 79) {
       label = 0;
       $319 = $get_buffer;
       $320 = $bits_left;
       $321 = $htbl;
       $322 = $nb3;
       $323 = (_jpeg_huff_decode($br_state,$319,$320,$321,$322)|0);
       $s = $323;
       $324 = ($323|0)<(0);
       if ($324) {
        label = 80;
        break L13;
       }
       $325 = (($br_state) + 8|0);
       $326 = HEAP32[$325>>2]|0;
       $get_buffer = $326;
       $327 = (($br_state) + 12|0);
       $328 = HEAP32[$327>>2]|0;
       $bits_left = $328;
      }
      $329 = $s;
      $330 = $329 >> 4;
      $r = $330;
      $331 = $s;
      $332 = $331 & 15;
      $s = $332;
      $333 = $s;
      $334 = ($333|0)!=(0);
      if ($334) {
       $335 = $r;
       $336 = $k;
       $337 = (($336) + ($335))|0;
       $k = $337;
       $338 = $bits_left;
       $339 = $s;
       $340 = ($338|0)<($339|0);
       if ($340) {
        $341 = $get_buffer;
        $342 = $bits_left;
        $343 = $s;
        $344 = (_jpeg_fill_bit_buffer($br_state,$341,$342,$343)|0);
        $345 = ($344|0)!=(0);
        if (!($345)) {
         label = 85;
         break L13;
        }
        $346 = (($br_state) + 8|0);
        $347 = HEAP32[$346>>2]|0;
        $get_buffer = $347;
        $348 = (($br_state) + 12|0);
        $349 = HEAP32[$348>>2]|0;
        $bits_left = $349;
       }
       $350 = $s;
       $351 = $bits_left;
       $352 = (($351) - ($350))|0;
       $bits_left = $352;
      } else {
       $353 = $r;
       $354 = ($353|0)!=(15);
       if ($354) {
        label = 89;
        break;
       }
       $355 = $k;
       $356 = (($355) + 15)|0;
       $k = $356;
      }
      $357 = $k;
      $358 = (($357) + 1)|0;
      $k = $358;
     }
     if ((label|0) == 89) {
      label = 0;
     }
    }
    $359 = $blkn;
    $360 = (($359) + 1)|0;
    $blkn = $360;
   }
   switch (label|0) {
    case 12: {
     $0 = 0;
     $384 = $0;
     STACKTOP = sp;return ($384|0);
     break;
    }
    case 20: {
     $0 = 0;
     $384 = $0;
     STACKTOP = sp;return ($384|0);
     break;
    }
    case 26: {
     $0 = 0;
     $384 = $0;
     STACKTOP = sp;return ($384|0);
     break;
    }
    case 36: {
     $0 = 0;
     $384 = $0;
     STACKTOP = sp;return ($384|0);
     break;
    }
    case 44: {
     $0 = 0;
     $384 = $0;
     STACKTOP = sp;return ($384|0);
     break;
    }
    case 49: {
     $0 = 0;
     $384 = $0;
     STACKTOP = sp;return ($384|0);
     break;
    }
    case 64: {
     $0 = 0;
     $384 = $0;
     STACKTOP = sp;return ($384|0);
     break;
    }
    case 72: {
     $0 = 0;
     $384 = $0;
     STACKTOP = sp;return ($384|0);
     break;
    }
    case 80: {
     $0 = 0;
     $384 = $0;
     STACKTOP = sp;return ($384|0);
     break;
    }
    case 85: {
     $0 = 0;
     $384 = $0;
     STACKTOP = sp;return ($384|0);
     break;
    }
    case 96: {
     $361 = HEAP32[$br_state>>2]|0;
     $362 = $1;
     $363 = (($362) + 24|0);
     $364 = HEAP32[$363>>2]|0;
     HEAP32[$364>>2] = $361;
     $365 = (($br_state) + 4|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = $1;
     $368 = (($367) + 24|0);
     $369 = HEAP32[$368>>2]|0;
     $370 = (($369) + 4|0);
     HEAP32[$370>>2] = $366;
     $371 = $get_buffer;
     $372 = $entropy;
     $373 = (($372) + 12|0);
     HEAP32[$373>>2] = $371;
     $374 = $bits_left;
     $375 = $entropy;
     $376 = (($375) + 12|0);
     $377 = (($376) + 4|0);
     HEAP32[$377>>2] = $374;
     $378 = $entropy;
     $379 = (($378) + 20|0);
     ;HEAP32[$379+0>>2]=HEAP32[$state+0>>2]|0;HEAP32[$379+4>>2]=HEAP32[$state+4>>2]|0;HEAP32[$379+8>>2]=HEAP32[$state+8>>2]|0;HEAP32[$379+12>>2]=HEAP32[$state+12>>2]|0;HEAP32[$379+16>>2]=HEAP32[$state+16>>2]|0;
     break L11;
     break;
    }
   }
  }
 } while(0);
 $380 = $entropy;
 $381 = (($380) + 44|0);
 $382 = HEAP32[$381>>2]|0;
 $383 = (($382) + -1)|0;
 HEAP32[$381>>2] = $383;
 $0 = 1;
 $384 = $0;
 STACKTOP = sp;return ($384|0);
}
function _process_restart41($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ci = 0, $entropy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 468|0);
 $4 = HEAP32[$3>>2]|0;
 $entropy = $4;
 $5 = $1;
 _finish_pass_huff35($5);
 $6 = $1;
 $7 = (($6) + 464|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 8|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = (FUNCTION_TABLE_ii[$10 & 255]($11)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $0 = 0;
  $39 = $0;
  STACKTOP = sp;return ($39|0);
 }
 $ci = 0;
 while(1) {
  $14 = $ci;
  $15 = $1;
  $16 = (($15) + 340|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($14|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $ci;
  $20 = $entropy;
  $21 = (($20) + 20|0);
  $22 = (($21) + 4|0);
  $23 = (($22) + ($19<<2)|0);
  HEAP32[$23>>2] = 0;
  $24 = $ci;
  $25 = (($24) + 1)|0;
  $ci = $25;
 }
 $26 = $entropy;
 $27 = (($26) + 20|0);
 HEAP32[$27>>2] = 0;
 $28 = $1;
 $29 = (($28) + 280|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $entropy;
 $32 = (($31) + 44|0);
 HEAP32[$32>>2] = $30;
 $33 = $1;
 $34 = (($33) + 440|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)==(0);
 if ($36) {
  $37 = $entropy;
  $38 = (($37) + 40|0);
  HEAP32[$38>>2] = 0;
 }
 $0 = 1;
 $39 = $0;
 STACKTOP = sp;return ($39|0);
}
function _jpeg_fill_bit_buffer($state,$get_buffer,$bits_left,$nbits) {
 $state = $state|0;
 $get_buffer = $get_buffer|0;
 $bits_left = $bits_left|0;
 $nbits = $nbits|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $bytes_in_buffer = 0, $c = 0, $cinfo = 0, $next_input_byte = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $1 = $state;
 $2 = $get_buffer;
 $3 = $bits_left;
 $4 = $nbits;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $next_input_byte = $6;
 $7 = $1;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $bytes_in_buffer = $9;
 $10 = $1;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $cinfo = $12;
 $13 = $cinfo;
 $14 = (($13) + 440|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 do {
  if ($16) {
   L3: while(1) {
    $17 = $3;
    $18 = ($17|0)<(25);
    if (!($18)) {
     label = 21;
     break;
    }
    $19 = $bytes_in_buffer;
    $20 = ($19|0)==(0);
    if ($20) {
     $21 = $cinfo;
     $22 = (($21) + 24|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = (($23) + 12|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = $cinfo;
     $27 = (FUNCTION_TABLE_ii[$25 & 255]($26)|0);
     $28 = ($27|0)!=(0);
     if (!($28)) {
      label = 6;
      break;
     }
     $29 = $cinfo;
     $30 = (($29) + 24|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = HEAP32[$31>>2]|0;
     $next_input_byte = $32;
     $33 = $cinfo;
     $34 = (($33) + 24|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (($35) + 4|0);
     $37 = HEAP32[$36>>2]|0;
     $bytes_in_buffer = $37;
    }
    $38 = $bytes_in_buffer;
    $39 = (($38) + -1)|0;
    $bytes_in_buffer = $39;
    $40 = $next_input_byte;
    $41 = (($40) + 1|0);
    $next_input_byte = $41;
    $42 = HEAP8[$40>>0]|0;
    $43 = $42&255;
    $c = $43;
    $44 = $c;
    $45 = ($44|0)==(255);
    if ($45) {
     while(1) {
      $46 = $bytes_in_buffer;
      $47 = ($46|0)==(0);
      if ($47) {
       $48 = $cinfo;
       $49 = (($48) + 24|0);
       $50 = HEAP32[$49>>2]|0;
       $51 = (($50) + 12|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = $cinfo;
       $54 = (FUNCTION_TABLE_ii[$52 & 255]($53)|0);
       $55 = ($54|0)!=(0);
       if (!($55)) {
        label = 12;
        break L3;
       }
       $56 = $cinfo;
       $57 = (($56) + 24|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = HEAP32[$58>>2]|0;
       $next_input_byte = $59;
       $60 = $cinfo;
       $61 = (($60) + 24|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = (($62) + 4|0);
       $64 = HEAP32[$63>>2]|0;
       $bytes_in_buffer = $64;
      }
      $65 = $bytes_in_buffer;
      $66 = (($65) + -1)|0;
      $bytes_in_buffer = $66;
      $67 = $next_input_byte;
      $68 = (($67) + 1|0);
      $next_input_byte = $68;
      $69 = HEAP8[$67>>0]|0;
      $70 = $69&255;
      $c = $70;
      $71 = $c;
      $72 = ($71|0)==(255);
      if (!($72)) {
       break;
      }
     }
     $73 = $c;
     $74 = ($73|0)==(0);
     if (!($74)) {
      label = 18;
      break;
     }
     $c = 255;
    }
    $78 = $2;
    $79 = $78 << 8;
    $80 = $c;
    $81 = $79 | $80;
    $2 = $81;
    $82 = $3;
    $83 = (($82) + 8)|0;
    $3 = $83;
   }
   if ((label|0) == 6) {
    $0 = 0;
    $120 = $0;
    STACKTOP = sp;return ($120|0);
   }
   else if ((label|0) == 12) {
    $0 = 0;
    $120 = $0;
    STACKTOP = sp;return ($120|0);
   }
   else if ((label|0) == 18) {
    $75 = $c;
    $76 = $cinfo;
    $77 = (($76) + 440|0);
    HEAP32[$77>>2] = $75;
    label = 23;
    break;
   }
   else if ((label|0) == 21) {
    break;
   }
  } else {
   label = 23;
  }
 } while(0);
 if ((label|0) == 23) {
  $84 = $4;
  $85 = $3;
  $86 = ($84|0)>($85|0);
  if ($86) {
   $87 = $cinfo;
   $88 = (($87) + 468|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = (($89) + 40|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = ($91|0)!=(0);
   if (!($92)) {
    $93 = $cinfo;
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + 20|0);
    HEAP32[$95>>2] = 120;
    $96 = $cinfo;
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $cinfo;
    FUNCTION_TABLE_vii[$99 & 511]($100,-1);
    $101 = $cinfo;
    $102 = (($101) + 468|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = (($103) + 40|0);
    HEAP32[$104>>2] = 1;
   }
   $105 = $3;
   $106 = (25 - ($105))|0;
   $107 = $2;
   $108 = $107 << $106;
   $2 = $108;
   $3 = 25;
  }
 }
 $109 = $next_input_byte;
 $110 = $1;
 HEAP32[$110>>2] = $109;
 $111 = $bytes_in_buffer;
 $112 = $1;
 $113 = (($112) + 4|0);
 HEAP32[$113>>2] = $111;
 $114 = $2;
 $115 = $1;
 $116 = (($115) + 8|0);
 HEAP32[$116>>2] = $114;
 $117 = $3;
 $118 = $1;
 $119 = (($118) + 12|0);
 HEAP32[$119>>2] = $117;
 $0 = 1;
 $120 = $0;
 STACKTOP = sp;return ($120|0);
}
function _jpeg_huff_decode($state,$get_buffer,$bits_left,$htbl,$min_bits) {
 $state = $state|0;
 $get_buffer = $get_buffer|0;
 $bits_left = $bits_left|0;
 $htbl = $htbl|0;
 $min_bits = $min_bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $code = 0;
 var $l = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $state;
 $2 = $get_buffer;
 $3 = $bits_left;
 $4 = $htbl;
 $5 = $min_bits;
 $6 = $5;
 $l = $6;
 $7 = $3;
 $8 = $l;
 $9 = ($7|0)<($8|0);
 do {
  if ($9) {
   $10 = $1;
   $11 = $2;
   $12 = $3;
   $13 = $l;
   $14 = (_jpeg_fill_bit_buffer($10,$11,$12,$13)|0);
   $15 = ($14|0)!=(0);
   if ($15) {
    $16 = $1;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $2 = $18;
    $19 = $1;
    $20 = (($19) + 12|0);
    $21 = HEAP32[$20>>2]|0;
    $3 = $21;
    break;
   }
   $0 = -1;
   $98 = $0;
   STACKTOP = sp;return ($98|0);
  }
 } while(0);
 $22 = $2;
 $23 = $l;
 $24 = $3;
 $25 = (($24) - ($23))|0;
 $3 = $25;
 $26 = $22 >> $25;
 $27 = $l;
 $28 = (2912 + ($27<<2)|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $26 & $29;
 $code = $30;
 while(1) {
  $31 = $code;
  $32 = $l;
  $33 = $4;
  $34 = (($33) + ($32<<2)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($31|0)>($35|0);
  if (!($36)) {
   break;
  }
  $37 = $code;
  $38 = $37 << 1;
  $code = $38;
  $39 = $3;
  $40 = ($39|0)<(1);
  if ($40) {
   $41 = $1;
   $42 = $2;
   $43 = $3;
   $44 = (_jpeg_fill_bit_buffer($41,$42,$43,1)|0);
   $45 = ($44|0)!=(0);
   if (!($45)) {
    label = 9;
    break;
   }
   $46 = $1;
   $47 = (($46) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $2 = $48;
   $49 = $1;
   $50 = (($49) + 12|0);
   $51 = HEAP32[$50>>2]|0;
   $3 = $51;
  }
  $52 = $2;
  $53 = $3;
  $54 = (($53) - 1)|0;
  $3 = $54;
  $55 = $52 >> $54;
  $56 = HEAP32[((2912 + 4|0))>>2]|0;
  $57 = $55 & $56;
  $58 = $code;
  $59 = $58 | $57;
  $code = $59;
  $60 = $l;
  $61 = (($60) + 1)|0;
  $l = $61;
 }
 if ((label|0) == 9) {
  $0 = -1;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 $62 = $2;
 $63 = $1;
 $64 = (($63) + 8|0);
 HEAP32[$64>>2] = $62;
 $65 = $3;
 $66 = $1;
 $67 = (($66) + 12|0);
 HEAP32[$67>>2] = $65;
 $68 = $l;
 $69 = ($68|0)>(16);
 if ($69) {
  $70 = $1;
  $71 = (($70) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + 20|0);
  HEAP32[$74>>2] = 121;
  $75 = $1;
  $76 = (($75) + 16|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($78) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $1;
  $82 = (($81) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  FUNCTION_TABLE_vii[$80 & 511]($83,-1);
  $0 = 0;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 } else {
  $84 = $code;
  $85 = $l;
  $86 = $4;
  $87 = (($86) + 72|0);
  $88 = (($87) + ($85<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($84) + ($89))|0;
  $91 = $4;
  $92 = (($91) + 140|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + 17|0);
  $95 = (($94) + ($90)|0);
  $96 = HEAP8[$95>>0]|0;
  $97 = $96&255;
  $0 = $97;
  $98 = $0;
  STACKTOP = sp;return ($98|0);
 }
 return 0|0;
}
function _jpeg_core_output_dimensions($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = (($4) + 428|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = Math_imul($3, $6)|0;
 $8 = $0;
 $9 = (($8) + 52|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($7>>>0)<=($10>>>0);
 if ($11) {
  $12 = $0;
  $13 = (($12) + 28|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  $16 = (($15) + 428|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (_jdiv_round_up($14,$17)|0);
  $19 = $0;
  $20 = (($19) + 112|0);
  HEAP32[$20>>2] = $18;
  $21 = $0;
  $22 = (($21) + 32|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $0;
  $25 = (($24) + 428|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (_jdiv_round_up($23,$26)|0);
  $28 = $0;
  $29 = (($28) + 116|0);
  HEAP32[$29>>2] = $27;
  $30 = $0;
  $31 = (($30) + 324|0);
  HEAP32[$31>>2] = 1;
  $32 = $0;
  $33 = (($32) + 328|0);
  HEAP32[$33>>2] = 1;
 } else {
  $34 = $0;
  $35 = (($34) + 48|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $0;
  $38 = (($37) + 428|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $41 = $0;
  $42 = (($41) + 52|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $43<<1;
  $45 = ($40>>>0)<=($44>>>0);
  if ($45) {
   $46 = $0;
   $47 = (($46) + 28|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $48<<1;
   $50 = $0;
   $51 = (($50) + 428|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (_jdiv_round_up($49,$52)|0);
   $54 = $0;
   $55 = (($54) + 112|0);
   HEAP32[$55>>2] = $53;
   $56 = $0;
   $57 = (($56) + 32|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $58<<1;
   $60 = $0;
   $61 = (($60) + 428|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (_jdiv_round_up($59,$62)|0);
   $64 = $0;
   $65 = (($64) + 116|0);
   HEAP32[$65>>2] = $63;
   $66 = $0;
   $67 = (($66) + 324|0);
   HEAP32[$67>>2] = 2;
   $68 = $0;
   $69 = (($68) + 328|0);
   HEAP32[$69>>2] = 2;
  } else {
   $70 = $0;
   $71 = (($70) + 48|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $0;
   $74 = (($73) + 428|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = Math_imul($72, $75)|0;
   $77 = $0;
   $78 = (($77) + 52|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79*3)|0;
   $81 = ($76>>>0)<=($80>>>0);
   if ($81) {
    $82 = $0;
    $83 = (($82) + 28|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84*3)|0;
    $86 = $0;
    $87 = (($86) + 428|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (_jdiv_round_up($85,$88)|0);
    $90 = $0;
    $91 = (($90) + 112|0);
    HEAP32[$91>>2] = $89;
    $92 = $0;
    $93 = (($92) + 32|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94*3)|0;
    $96 = $0;
    $97 = (($96) + 428|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = (_jdiv_round_up($95,$98)|0);
    $100 = $0;
    $101 = (($100) + 116|0);
    HEAP32[$101>>2] = $99;
    $102 = $0;
    $103 = (($102) + 324|0);
    HEAP32[$103>>2] = 3;
    $104 = $0;
    $105 = (($104) + 328|0);
    HEAP32[$105>>2] = 3;
   } else {
    $106 = $0;
    $107 = (($106) + 48|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $0;
    $110 = (($109) + 428|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = Math_imul($108, $111)|0;
    $113 = $0;
    $114 = (($113) + 52|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $115<<2;
    $117 = ($112>>>0)<=($116>>>0);
    if ($117) {
     $118 = $0;
     $119 = (($118) + 28|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = $120<<2;
     $122 = $0;
     $123 = (($122) + 428|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = (_jdiv_round_up($121,$124)|0);
     $126 = $0;
     $127 = (($126) + 112|0);
     HEAP32[$127>>2] = $125;
     $128 = $0;
     $129 = (($128) + 32|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = $130<<2;
     $132 = $0;
     $133 = (($132) + 428|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (_jdiv_round_up($131,$134)|0);
     $136 = $0;
     $137 = (($136) + 116|0);
     HEAP32[$137>>2] = $135;
     $138 = $0;
     $139 = (($138) + 324|0);
     HEAP32[$139>>2] = 4;
     $140 = $0;
     $141 = (($140) + 328|0);
     HEAP32[$141>>2] = 4;
    } else {
     $142 = $0;
     $143 = (($142) + 48|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = $0;
     $146 = (($145) + 428|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = Math_imul($144, $147)|0;
     $149 = $0;
     $150 = (($149) + 52|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151*5)|0;
     $153 = ($148>>>0)<=($152>>>0);
     if ($153) {
      $154 = $0;
      $155 = (($154) + 28|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = ($156*5)|0;
      $158 = $0;
      $159 = (($158) + 428|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = (_jdiv_round_up($157,$160)|0);
      $162 = $0;
      $163 = (($162) + 112|0);
      HEAP32[$163>>2] = $161;
      $164 = $0;
      $165 = (($164) + 32|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166*5)|0;
      $168 = $0;
      $169 = (($168) + 428|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = (_jdiv_round_up($167,$170)|0);
      $172 = $0;
      $173 = (($172) + 116|0);
      HEAP32[$173>>2] = $171;
      $174 = $0;
      $175 = (($174) + 324|0);
      HEAP32[$175>>2] = 5;
      $176 = $0;
      $177 = (($176) + 328|0);
      HEAP32[$177>>2] = 5;
     } else {
      $178 = $0;
      $179 = (($178) + 48|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = $0;
      $182 = (($181) + 428|0);
      $183 = HEAP32[$182>>2]|0;
      $184 = Math_imul($180, $183)|0;
      $185 = $0;
      $186 = (($185) + 52|0);
      $187 = HEAP32[$186>>2]|0;
      $188 = ($187*6)|0;
      $189 = ($184>>>0)<=($188>>>0);
      if ($189) {
       $190 = $0;
       $191 = (($190) + 28|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = ($192*6)|0;
       $194 = $0;
       $195 = (($194) + 428|0);
       $196 = HEAP32[$195>>2]|0;
       $197 = (_jdiv_round_up($193,$196)|0);
       $198 = $0;
       $199 = (($198) + 112|0);
       HEAP32[$199>>2] = $197;
       $200 = $0;
       $201 = (($200) + 32|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202*6)|0;
       $204 = $0;
       $205 = (($204) + 428|0);
       $206 = HEAP32[$205>>2]|0;
       $207 = (_jdiv_round_up($203,$206)|0);
       $208 = $0;
       $209 = (($208) + 116|0);
       HEAP32[$209>>2] = $207;
       $210 = $0;
       $211 = (($210) + 324|0);
       HEAP32[$211>>2] = 6;
       $212 = $0;
       $213 = (($212) + 328|0);
       HEAP32[$213>>2] = 6;
      } else {
       $214 = $0;
       $215 = (($214) + 48|0);
       $216 = HEAP32[$215>>2]|0;
       $217 = $0;
       $218 = (($217) + 428|0);
       $219 = HEAP32[$218>>2]|0;
       $220 = Math_imul($216, $219)|0;
       $221 = $0;
       $222 = (($221) + 52|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = ($223*7)|0;
       $225 = ($220>>>0)<=($224>>>0);
       if ($225) {
        $226 = $0;
        $227 = (($226) + 28|0);
        $228 = HEAP32[$227>>2]|0;
        $229 = ($228*7)|0;
        $230 = $0;
        $231 = (($230) + 428|0);
        $232 = HEAP32[$231>>2]|0;
        $233 = (_jdiv_round_up($229,$232)|0);
        $234 = $0;
        $235 = (($234) + 112|0);
        HEAP32[$235>>2] = $233;
        $236 = $0;
        $237 = (($236) + 32|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = ($238*7)|0;
        $240 = $0;
        $241 = (($240) + 428|0);
        $242 = HEAP32[$241>>2]|0;
        $243 = (_jdiv_round_up($239,$242)|0);
        $244 = $0;
        $245 = (($244) + 116|0);
        HEAP32[$245>>2] = $243;
        $246 = $0;
        $247 = (($246) + 324|0);
        HEAP32[$247>>2] = 7;
        $248 = $0;
        $249 = (($248) + 328|0);
        HEAP32[$249>>2] = 7;
       } else {
        $250 = $0;
        $251 = (($250) + 48|0);
        $252 = HEAP32[$251>>2]|0;
        $253 = $0;
        $254 = (($253) + 428|0);
        $255 = HEAP32[$254>>2]|0;
        $256 = Math_imul($252, $255)|0;
        $257 = $0;
        $258 = (($257) + 52|0);
        $259 = HEAP32[$258>>2]|0;
        $260 = $259<<3;
        $261 = ($256>>>0)<=($260>>>0);
        if ($261) {
         $262 = $0;
         $263 = (($262) + 28|0);
         $264 = HEAP32[$263>>2]|0;
         $265 = $264<<3;
         $266 = $0;
         $267 = (($266) + 428|0);
         $268 = HEAP32[$267>>2]|0;
         $269 = (_jdiv_round_up($265,$268)|0);
         $270 = $0;
         $271 = (($270) + 112|0);
         HEAP32[$271>>2] = $269;
         $272 = $0;
         $273 = (($272) + 32|0);
         $274 = HEAP32[$273>>2]|0;
         $275 = $274<<3;
         $276 = $0;
         $277 = (($276) + 428|0);
         $278 = HEAP32[$277>>2]|0;
         $279 = (_jdiv_round_up($275,$278)|0);
         $280 = $0;
         $281 = (($280) + 116|0);
         HEAP32[$281>>2] = $279;
         $282 = $0;
         $283 = (($282) + 324|0);
         HEAP32[$283>>2] = 8;
         $284 = $0;
         $285 = (($284) + 328|0);
         HEAP32[$285>>2] = 8;
        } else {
         $286 = $0;
         $287 = (($286) + 48|0);
         $288 = HEAP32[$287>>2]|0;
         $289 = $0;
         $290 = (($289) + 428|0);
         $291 = HEAP32[$290>>2]|0;
         $292 = Math_imul($288, $291)|0;
         $293 = $0;
         $294 = (($293) + 52|0);
         $295 = HEAP32[$294>>2]|0;
         $296 = ($295*9)|0;
         $297 = ($292>>>0)<=($296>>>0);
         if ($297) {
          $298 = $0;
          $299 = (($298) + 28|0);
          $300 = HEAP32[$299>>2]|0;
          $301 = ($300*9)|0;
          $302 = $0;
          $303 = (($302) + 428|0);
          $304 = HEAP32[$303>>2]|0;
          $305 = (_jdiv_round_up($301,$304)|0);
          $306 = $0;
          $307 = (($306) + 112|0);
          HEAP32[$307>>2] = $305;
          $308 = $0;
          $309 = (($308) + 32|0);
          $310 = HEAP32[$309>>2]|0;
          $311 = ($310*9)|0;
          $312 = $0;
          $313 = (($312) + 428|0);
          $314 = HEAP32[$313>>2]|0;
          $315 = (_jdiv_round_up($311,$314)|0);
          $316 = $0;
          $317 = (($316) + 116|0);
          HEAP32[$317>>2] = $315;
          $318 = $0;
          $319 = (($318) + 324|0);
          HEAP32[$319>>2] = 9;
          $320 = $0;
          $321 = (($320) + 328|0);
          HEAP32[$321>>2] = 9;
         } else {
          $322 = $0;
          $323 = (($322) + 48|0);
          $324 = HEAP32[$323>>2]|0;
          $325 = $0;
          $326 = (($325) + 428|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = Math_imul($324, $327)|0;
          $329 = $0;
          $330 = (($329) + 52|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331*10)|0;
          $333 = ($328>>>0)<=($332>>>0);
          if ($333) {
           $334 = $0;
           $335 = (($334) + 28|0);
           $336 = HEAP32[$335>>2]|0;
           $337 = ($336*10)|0;
           $338 = $0;
           $339 = (($338) + 428|0);
           $340 = HEAP32[$339>>2]|0;
           $341 = (_jdiv_round_up($337,$340)|0);
           $342 = $0;
           $343 = (($342) + 112|0);
           HEAP32[$343>>2] = $341;
           $344 = $0;
           $345 = (($344) + 32|0);
           $346 = HEAP32[$345>>2]|0;
           $347 = ($346*10)|0;
           $348 = $0;
           $349 = (($348) + 428|0);
           $350 = HEAP32[$349>>2]|0;
           $351 = (_jdiv_round_up($347,$350)|0);
           $352 = $0;
           $353 = (($352) + 116|0);
           HEAP32[$353>>2] = $351;
           $354 = $0;
           $355 = (($354) + 324|0);
           HEAP32[$355>>2] = 10;
           $356 = $0;
           $357 = (($356) + 328|0);
           HEAP32[$357>>2] = 10;
          } else {
           $358 = $0;
           $359 = (($358) + 48|0);
           $360 = HEAP32[$359>>2]|0;
           $361 = $0;
           $362 = (($361) + 428|0);
           $363 = HEAP32[$362>>2]|0;
           $364 = Math_imul($360, $363)|0;
           $365 = $0;
           $366 = (($365) + 52|0);
           $367 = HEAP32[$366>>2]|0;
           $368 = ($367*11)|0;
           $369 = ($364>>>0)<=($368>>>0);
           if ($369) {
            $370 = $0;
            $371 = (($370) + 28|0);
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*11)|0;
            $374 = $0;
            $375 = (($374) + 428|0);
            $376 = HEAP32[$375>>2]|0;
            $377 = (_jdiv_round_up($373,$376)|0);
            $378 = $0;
            $379 = (($378) + 112|0);
            HEAP32[$379>>2] = $377;
            $380 = $0;
            $381 = (($380) + 32|0);
            $382 = HEAP32[$381>>2]|0;
            $383 = ($382*11)|0;
            $384 = $0;
            $385 = (($384) + 428|0);
            $386 = HEAP32[$385>>2]|0;
            $387 = (_jdiv_round_up($383,$386)|0);
            $388 = $0;
            $389 = (($388) + 116|0);
            HEAP32[$389>>2] = $387;
            $390 = $0;
            $391 = (($390) + 324|0);
            HEAP32[$391>>2] = 11;
            $392 = $0;
            $393 = (($392) + 328|0);
            HEAP32[$393>>2] = 11;
           } else {
            $394 = $0;
            $395 = (($394) + 48|0);
            $396 = HEAP32[$395>>2]|0;
            $397 = $0;
            $398 = (($397) + 428|0);
            $399 = HEAP32[$398>>2]|0;
            $400 = Math_imul($396, $399)|0;
            $401 = $0;
            $402 = (($401) + 52|0);
            $403 = HEAP32[$402>>2]|0;
            $404 = ($403*12)|0;
            $405 = ($400>>>0)<=($404>>>0);
            if ($405) {
             $406 = $0;
             $407 = (($406) + 28|0);
             $408 = HEAP32[$407>>2]|0;
             $409 = ($408*12)|0;
             $410 = $0;
             $411 = (($410) + 428|0);
             $412 = HEAP32[$411>>2]|0;
             $413 = (_jdiv_round_up($409,$412)|0);
             $414 = $0;
             $415 = (($414) + 112|0);
             HEAP32[$415>>2] = $413;
             $416 = $0;
             $417 = (($416) + 32|0);
             $418 = HEAP32[$417>>2]|0;
             $419 = ($418*12)|0;
             $420 = $0;
             $421 = (($420) + 428|0);
             $422 = HEAP32[$421>>2]|0;
             $423 = (_jdiv_round_up($419,$422)|0);
             $424 = $0;
             $425 = (($424) + 116|0);
             HEAP32[$425>>2] = $423;
             $426 = $0;
             $427 = (($426) + 324|0);
             HEAP32[$427>>2] = 12;
             $428 = $0;
             $429 = (($428) + 328|0);
             HEAP32[$429>>2] = 12;
            } else {
             $430 = $0;
             $431 = (($430) + 48|0);
             $432 = HEAP32[$431>>2]|0;
             $433 = $0;
             $434 = (($433) + 428|0);
             $435 = HEAP32[$434>>2]|0;
             $436 = Math_imul($432, $435)|0;
             $437 = $0;
             $438 = (($437) + 52|0);
             $439 = HEAP32[$438>>2]|0;
             $440 = ($439*13)|0;
             $441 = ($436>>>0)<=($440>>>0);
             if ($441) {
              $442 = $0;
              $443 = (($442) + 28|0);
              $444 = HEAP32[$443>>2]|0;
              $445 = ($444*13)|0;
              $446 = $0;
              $447 = (($446) + 428|0);
              $448 = HEAP32[$447>>2]|0;
              $449 = (_jdiv_round_up($445,$448)|0);
              $450 = $0;
              $451 = (($450) + 112|0);
              HEAP32[$451>>2] = $449;
              $452 = $0;
              $453 = (($452) + 32|0);
              $454 = HEAP32[$453>>2]|0;
              $455 = ($454*13)|0;
              $456 = $0;
              $457 = (($456) + 428|0);
              $458 = HEAP32[$457>>2]|0;
              $459 = (_jdiv_round_up($455,$458)|0);
              $460 = $0;
              $461 = (($460) + 116|0);
              HEAP32[$461>>2] = $459;
              $462 = $0;
              $463 = (($462) + 324|0);
              HEAP32[$463>>2] = 13;
              $464 = $0;
              $465 = (($464) + 328|0);
              HEAP32[$465>>2] = 13;
             } else {
              $466 = $0;
              $467 = (($466) + 48|0);
              $468 = HEAP32[$467>>2]|0;
              $469 = $0;
              $470 = (($469) + 428|0);
              $471 = HEAP32[$470>>2]|0;
              $472 = Math_imul($468, $471)|0;
              $473 = $0;
              $474 = (($473) + 52|0);
              $475 = HEAP32[$474>>2]|0;
              $476 = ($475*14)|0;
              $477 = ($472>>>0)<=($476>>>0);
              if ($477) {
               $478 = $0;
               $479 = (($478) + 28|0);
               $480 = HEAP32[$479>>2]|0;
               $481 = ($480*14)|0;
               $482 = $0;
               $483 = (($482) + 428|0);
               $484 = HEAP32[$483>>2]|0;
               $485 = (_jdiv_round_up($481,$484)|0);
               $486 = $0;
               $487 = (($486) + 112|0);
               HEAP32[$487>>2] = $485;
               $488 = $0;
               $489 = (($488) + 32|0);
               $490 = HEAP32[$489>>2]|0;
               $491 = ($490*14)|0;
               $492 = $0;
               $493 = (($492) + 428|0);
               $494 = HEAP32[$493>>2]|0;
               $495 = (_jdiv_round_up($491,$494)|0);
               $496 = $0;
               $497 = (($496) + 116|0);
               HEAP32[$497>>2] = $495;
               $498 = $0;
               $499 = (($498) + 324|0);
               HEAP32[$499>>2] = 14;
               $500 = $0;
               $501 = (($500) + 328|0);
               HEAP32[$501>>2] = 14;
              } else {
               $502 = $0;
               $503 = (($502) + 48|0);
               $504 = HEAP32[$503>>2]|0;
               $505 = $0;
               $506 = (($505) + 428|0);
               $507 = HEAP32[$506>>2]|0;
               $508 = Math_imul($504, $507)|0;
               $509 = $0;
               $510 = (($509) + 52|0);
               $511 = HEAP32[$510>>2]|0;
               $512 = ($511*15)|0;
               $513 = ($508>>>0)<=($512>>>0);
               if ($513) {
                $514 = $0;
                $515 = (($514) + 28|0);
                $516 = HEAP32[$515>>2]|0;
                $517 = ($516*15)|0;
                $518 = $0;
                $519 = (($518) + 428|0);
                $520 = HEAP32[$519>>2]|0;
                $521 = (_jdiv_round_up($517,$520)|0);
                $522 = $0;
                $523 = (($522) + 112|0);
                HEAP32[$523>>2] = $521;
                $524 = $0;
                $525 = (($524) + 32|0);
                $526 = HEAP32[$525>>2]|0;
                $527 = ($526*15)|0;
                $528 = $0;
                $529 = (($528) + 428|0);
                $530 = HEAP32[$529>>2]|0;
                $531 = (_jdiv_round_up($527,$530)|0);
                $532 = $0;
                $533 = (($532) + 116|0);
                HEAP32[$533>>2] = $531;
                $534 = $0;
                $535 = (($534) + 324|0);
                HEAP32[$535>>2] = 15;
                $536 = $0;
                $537 = (($536) + 328|0);
                HEAP32[$537>>2] = 15;
               } else {
                $538 = $0;
                $539 = (($538) + 28|0);
                $540 = HEAP32[$539>>2]|0;
                $541 = $540<<4;
                $542 = $0;
                $543 = (($542) + 428|0);
                $544 = HEAP32[$543>>2]|0;
                $545 = (_jdiv_round_up($541,$544)|0);
                $546 = $0;
                $547 = (($546) + 112|0);
                HEAP32[$547>>2] = $545;
                $548 = $0;
                $549 = (($548) + 32|0);
                $550 = HEAP32[$549>>2]|0;
                $551 = $550<<4;
                $552 = $0;
                $553 = (($552) + 428|0);
                $554 = HEAP32[$553>>2]|0;
                $555 = (_jdiv_round_up($551,$554)|0);
                $556 = $0;
                $557 = (($556) + 116|0);
                HEAP32[$557>>2] = $555;
                $558 = $0;
                $559 = (($558) + 324|0);
                HEAP32[$559>>2] = 16;
                $560 = $0;
                $561 = (($560) + 328|0);
                HEAP32[$561>>2] = 16;
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $ci = 0;
 $562 = $0;
 $563 = (($562) + 216|0);
 $564 = HEAP32[$563>>2]|0;
 $compptr = $564;
 while(1) {
  $565 = $ci;
  $566 = $0;
  $567 = (($566) + 36|0);
  $568 = HEAP32[$567>>2]|0;
  $569 = ($565|0)<($568|0);
  if (!($569)) {
   break;
  }
  $570 = $0;
  $571 = (($570) + 324|0);
  $572 = HEAP32[$571>>2]|0;
  $573 = $compptr;
  $574 = (($573) + 36|0);
  HEAP32[$574>>2] = $572;
  $575 = $0;
  $576 = (($575) + 328|0);
  $577 = HEAP32[$576>>2]|0;
  $578 = $compptr;
  $579 = (($578) + 40|0);
  HEAP32[$579>>2] = $577;
  $580 = $ci;
  $581 = (($580) + 1)|0;
  $ci = $581;
  $582 = $compptr;
  $583 = (($582) + 88|0);
  $compptr = $583;
 }
 STACKTOP = sp;return;
}
function _jinit_input_controller($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $inputctl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,0,28)|0);
 $inputctl = $6;
 $7 = $inputctl;
 $8 = $0;
 $9 = (($8) + 460|0);
 HEAP32[$9>>2] = $7;
 $10 = $inputctl;
 HEAP32[$10>>2] = 208;
 $11 = $inputctl;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 209;
 $13 = $inputctl;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 210;
 $15 = $inputctl;
 $16 = (($15) + 12|0);
 HEAP32[$16>>2] = 211;
 $17 = $inputctl;
 $18 = (($17) + 16|0);
 HEAP32[$18>>2] = 0;
 $19 = $inputctl;
 $20 = (($19) + 20|0);
 HEAP32[$20>>2] = 0;
 $21 = $inputctl;
 $22 = (($21) + 24|0);
 HEAP32[$22>>2] = 1;
 STACKTOP = sp;return;
}
function _consume_markers($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $inputctl = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 460|0);
 $4 = HEAP32[$3>>2]|0;
 $inputctl = $4;
 $5 = $inputctl;
 $6 = (($5) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $0 = 2;
  $85 = $0;
  STACKTOP = sp;return ($85|0);
 }
 while(1) {
  $9 = $1;
  $10 = (($9) + 464|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $1;
  $15 = (FUNCTION_TABLE_ii[$13 & 255]($14)|0);
  $val = $15;
  $16 = $val;
  if ((($16|0) == 0)) {
   label = 25;
   break;
  } else if ((($16|0) == 2)) {
   label = 17;
   break;
  } else if (!((($16|0) == 1))) {
   label = 26;
   break;
  }
  $17 = $inputctl;
  $18 = (($17) + 24|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $inputctl;
   $22 = (($21) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(1);
   if ($24) {
    $25 = $1;
    _initial_setup46($25);
   }
   $26 = $1;
   $27 = (($26) + 340|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(0);
   if (!($29)) {
    label = 10;
    break;
   }
   $30 = $inputctl;
   $31 = (($30) + 24|0);
   HEAP32[$31>>2] = 2;
  } else {
   $34 = $inputctl;
   $35 = (($34) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)!=(0);
   if (!($37)) {
    $38 = $1;
    $39 = HEAP32[$38>>2]|0;
    $40 = (($39) + 20|0);
    HEAP32[$40>>2] = 36;
    $41 = $1;
    $42 = HEAP32[$41>>2]|0;
    $43 = HEAP32[$42>>2]|0;
    $44 = $1;
    FUNCTION_TABLE_vi[$43 & 511]($44);
   }
   $45 = $1;
   $46 = (($45) + 340|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0);
   if (!($48)) {
    label = 15;
    break;
   }
  }
 }
 if ((label|0) == 10) {
  $32 = $inputctl;
  $33 = (($32) + 24|0);
  HEAP32[$33>>2] = 0;
 }
 else if ((label|0) == 15) {
  $49 = $1;
  _start_input_pass44($49);
 }
 else if ((label|0) == 17) {
  $51 = $inputctl;
  $52 = (($51) + 20|0);
  HEAP32[$52>>2] = 1;
  $53 = $inputctl;
  $54 = (($53) + 24|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = $1;
   $58 = (($57) + 464|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($59) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)!=(0);
   if ($62) {
    $63 = $1;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + 20|0);
    HEAP32[$65>>2] = 62;
    $66 = $1;
    $67 = HEAP32[$66>>2]|0;
    $68 = HEAP32[$67>>2]|0;
    $69 = $1;
    FUNCTION_TABLE_vi[$68 & 511]($69);
   }
  } else {
   $70 = $1;
   $71 = (($70) + 152|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $1;
   $74 = (($73) + 144|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = ($72|0)>($75|0);
   if ($76) {
    $77 = $1;
    $78 = (($77) + 144|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $1;
    $81 = (($80) + 152|0);
    HEAP32[$81>>2] = $79;
   }
  }
  $82 = $val;
  $0 = $82;
  $85 = $0;
  STACKTOP = sp;return ($85|0);
 }
 else if ((label|0) == 25) {
  $83 = $val;
  $0 = $83;
  $85 = $0;
  STACKTOP = sp;return ($85|0);
 }
 else if ((label|0) == 26) {
  $84 = $val;
  $0 = $84;
  $85 = $0;
  STACKTOP = sp;return ($85|0);
 }
 $50 = $val;
 $0 = $50;
 $85 = $0;
 STACKTOP = sp;return ($85|0);
}
function _reset_input_controller($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $inputctl = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 460|0);
 $3 = HEAP32[$2>>2]|0;
 $inputctl = $3;
 $4 = $inputctl;
 HEAP32[$4>>2] = 208;
 $5 = $inputctl;
 $6 = (($5) + 16|0);
 HEAP32[$6>>2] = 0;
 $7 = $inputctl;
 $8 = (($7) + 20|0);
 HEAP32[$8>>2] = 0;
 $9 = $inputctl;
 $10 = (($9) + 24|0);
 HEAP32[$10>>2] = 1;
 $11 = $0;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $0;
 FUNCTION_TABLE_vi[$14 & 511]($15);
 $16 = $0;
 $17 = (($16) + 464|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 FUNCTION_TABLE_vi[$19 & 511]($20);
 $21 = $0;
 $22 = (($21) + 160|0);
 HEAP32[$22>>2] = 0;
 STACKTOP = sp;return;
}
function _start_input_pass44($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 _per_scan_setup45($1);
 $2 = $0;
 _latch_quant_tables($2);
 $3 = $0;
 $4 = (($3) + 468|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 FUNCTION_TABLE_vi[$6 & 511]($7);
 $8 = $0;
 $9 = (($8) + 452|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 FUNCTION_TABLE_vi[$11 & 511]($12);
 $13 = $0;
 $14 = (($13) + 452|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $0;
 $19 = (($18) + 460|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$20>>2] = $17;
 STACKTOP = sp;return;
}
function _finish_input_pass($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 468|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 FUNCTION_TABLE_vi[$5 & 511]($6);
 $7 = $0;
 $8 = (($7) + 460|0);
 $9 = HEAP32[$8>>2]|0;
 HEAP32[$9>>2] = 208;
 STACKTOP = sp;return;
}
function _per_scan_setup45($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ci = 0, $compptr = 0, $mcublks = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 340|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(1);
 if ($4) {
  $5 = $0;
  $6 = (($5) + 344|0);
  $7 = HEAP32[$6>>2]|0;
  $compptr = $7;
  $8 = $compptr;
  $9 = (($8) + 28|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  $12 = (($11) + 360|0);
  HEAP32[$12>>2] = $10;
  $13 = $compptr;
  $14 = (($13) + 32|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $0;
  $17 = (($16) + 364|0);
  HEAP32[$17>>2] = $15;
  $18 = $compptr;
  $19 = (($18) + 56|0);
  HEAP32[$19>>2] = 1;
  $20 = $compptr;
  $21 = (($20) + 60|0);
  HEAP32[$21>>2] = 1;
  $22 = $compptr;
  $23 = (($22) + 64|0);
  HEAP32[$23>>2] = 1;
  $24 = $compptr;
  $25 = (($24) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $compptr;
  $28 = (($27) + 68|0);
  HEAP32[$28>>2] = $26;
  $29 = $compptr;
  $30 = (($29) + 72|0);
  HEAP32[$30>>2] = 1;
  $31 = $compptr;
  $32 = (($31) + 32|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $compptr;
  $35 = (($34) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($33>>>0) % ($36>>>0))&-1;
  $tmp = $37;
  $38 = $tmp;
  $39 = ($38|0)==(0);
  if ($39) {
   $40 = $compptr;
   $41 = (($40) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $tmp = $42;
  }
  $43 = $tmp;
  $44 = $compptr;
  $45 = (($44) + 76|0);
  HEAP32[$45>>2] = $43;
  $46 = $0;
  $47 = (($46) + 368|0);
  HEAP32[$47>>2] = 1;
  $48 = $0;
  $49 = (($48) + 372|0);
  HEAP32[$49>>2] = 0;
  STACKTOP = sp;return;
 }
 $50 = $0;
 $51 = (($50) + 340|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)<=(0);
 if ($53) {
  label = 7;
 } else {
  $54 = $0;
  $55 = (($54) + 340|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)>(4);
  if ($57) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $58 = $0;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 20|0);
  HEAP32[$60>>2] = 27;
  $61 = $0;
  $62 = (($61) + 340|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $0;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + 24|0);
  HEAP32[$66>>2] = $63;
  $67 = $0;
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + 24|0);
  $70 = (($69) + 4|0);
  HEAP32[$70>>2] = 4;
  $71 = $0;
  $72 = HEAP32[$71>>2]|0;
  $73 = HEAP32[$72>>2]|0;
  $74 = $0;
  FUNCTION_TABLE_vi[$73 & 511]($74);
 }
 $75 = $0;
 $76 = (($75) + 28|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $0;
 $79 = (($78) + 316|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $0;
 $82 = (($81) + 428|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = Math_imul($80, $83)|0;
 $85 = (_jdiv_round_up($77,$84)|0);
 $86 = $0;
 $87 = (($86) + 360|0);
 HEAP32[$87>>2] = $85;
 $88 = $0;
 $89 = (($88) + 32|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $0;
 $92 = (($91) + 320|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $0;
 $95 = (($94) + 428|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = Math_imul($93, $96)|0;
 $98 = (_jdiv_round_up($90,$97)|0);
 $99 = $0;
 $100 = (($99) + 364|0);
 HEAP32[$100>>2] = $98;
 $101 = $0;
 $102 = (($101) + 368|0);
 HEAP32[$102>>2] = 0;
 $ci = 0;
 while(1) {
  $103 = $ci;
  $104 = $0;
  $105 = (($104) + 340|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = ($103|0)<($106|0);
  if (!($107)) {
   break;
  }
  $108 = $ci;
  $109 = $0;
  $110 = (($109) + 344|0);
  $111 = (($110) + ($108<<2)|0);
  $112 = HEAP32[$111>>2]|0;
  $compptr = $112;
  $113 = $compptr;
  $114 = (($113) + 8|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $compptr;
  $117 = (($116) + 56|0);
  HEAP32[$117>>2] = $115;
  $118 = $compptr;
  $119 = (($118) + 12|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $compptr;
  $122 = (($121) + 60|0);
  HEAP32[$122>>2] = $120;
  $123 = $compptr;
  $124 = (($123) + 56|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = $compptr;
  $127 = (($126) + 60|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = Math_imul($125, $128)|0;
  $130 = $compptr;
  $131 = (($130) + 64|0);
  HEAP32[$131>>2] = $129;
  $132 = $compptr;
  $133 = (($132) + 56|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $compptr;
  $136 = (($135) + 36|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = Math_imul($134, $137)|0;
  $139 = $compptr;
  $140 = (($139) + 68|0);
  HEAP32[$140>>2] = $138;
  $141 = $compptr;
  $142 = (($141) + 28|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = $compptr;
  $145 = (($144) + 56|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = (($143>>>0) % ($146>>>0))&-1;
  $tmp = $147;
  $148 = $tmp;
  $149 = ($148|0)==(0);
  if ($149) {
   $150 = $compptr;
   $151 = (($150) + 56|0);
   $152 = HEAP32[$151>>2]|0;
   $tmp = $152;
  }
  $153 = $tmp;
  $154 = $compptr;
  $155 = (($154) + 72|0);
  HEAP32[$155>>2] = $153;
  $156 = $compptr;
  $157 = (($156) + 32|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = $compptr;
  $160 = (($159) + 60|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = (($158>>>0) % ($161>>>0))&-1;
  $tmp = $162;
  $163 = $tmp;
  $164 = ($163|0)==(0);
  if ($164) {
   $165 = $compptr;
   $166 = (($165) + 60|0);
   $167 = HEAP32[$166>>2]|0;
   $tmp = $167;
  }
  $168 = $tmp;
  $169 = $compptr;
  $170 = (($169) + 76|0);
  HEAP32[$170>>2] = $168;
  $171 = $compptr;
  $172 = (($171) + 64|0);
  $173 = HEAP32[$172>>2]|0;
  $mcublks = $173;
  $174 = $0;
  $175 = (($174) + 368|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $mcublks;
  $178 = (($176) + ($177))|0;
  $179 = ($178|0)>(10);
  if ($179) {
   $180 = $0;
   $181 = HEAP32[$180>>2]|0;
   $182 = (($181) + 20|0);
   HEAP32[$182>>2] = 14;
   $183 = $0;
   $184 = HEAP32[$183>>2]|0;
   $185 = HEAP32[$184>>2]|0;
   $186 = $0;
   FUNCTION_TABLE_vi[$185 & 511]($186);
  }
  while(1) {
   $187 = $mcublks;
   $188 = (($187) + -1)|0;
   $mcublks = $188;
   $189 = ($187|0)>(0);
   if (!($189)) {
    break;
   }
   $190 = $ci;
   $191 = $0;
   $192 = (($191) + 368|0);
   $193 = HEAP32[$192>>2]|0;
   $194 = (($193) + 1)|0;
   HEAP32[$192>>2] = $194;
   $195 = $0;
   $196 = (($195) + 372|0);
   $197 = (($196) + ($193<<2)|0);
   HEAP32[$197>>2] = $190;
  }
  $198 = $ci;
  $199 = (($198) + 1)|0;
  $ci = $199;
 }
 STACKTOP = sp;return;
}
function _latch_quant_tables($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $compptr = 0, $qtbl = 0, $qtblno = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $ci = 0;
 while(1) {
  $1 = $ci;
  $2 = $0;
  $3 = (($2) + 340|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($1|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $ci;
  $7 = $0;
  $8 = (($7) + 344|0);
  $9 = (($8) + ($6<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $compptr = $10;
  $11 = $compptr;
  $12 = (($11) + 80|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
  } else {
   $15 = $compptr;
   $16 = (($15) + 16|0);
   $17 = HEAP32[$16>>2]|0;
   $qtblno = $17;
   $18 = $qtblno;
   $19 = ($18|0)<(0);
   if ($19) {
    label = 8;
   } else {
    $20 = $qtblno;
    $21 = ($20|0)>=(4);
    if ($21) {
     label = 8;
    } else {
     $22 = $qtblno;
     $23 = $0;
     $24 = (($23) + 164|0);
     $25 = (($24) + ($22<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==(0|0);
     if ($27) {
      label = 8;
     }
    }
   }
   if ((label|0) == 8) {
    label = 0;
    $28 = $0;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($29) + 20|0);
    HEAP32[$30>>2] = 54;
    $31 = $qtblno;
    $32 = $0;
    $33 = HEAP32[$32>>2]|0;
    $34 = (($33) + 24|0);
    HEAP32[$34>>2] = $31;
    $35 = $0;
    $36 = HEAP32[$35>>2]|0;
    $37 = HEAP32[$36>>2]|0;
    $38 = $0;
    FUNCTION_TABLE_vi[$37 & 511]($38);
   }
   $39 = $0;
   $40 = (($39) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = HEAP32[$41>>2]|0;
   $43 = $0;
   $44 = (FUNCTION_TABLE_iiii[$42 & 511]($43,1,132)|0);
   $qtbl = $44;
   $45 = $qtbl;
   $46 = $qtblno;
   $47 = $0;
   $48 = (($47) + 164|0);
   $49 = (($48) + ($46<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   _memcpy(($45|0),($50|0),132)|0;
   $51 = $qtbl;
   $52 = $compptr;
   $53 = (($52) + 80|0);
   HEAP32[$53>>2] = $51;
  }
  $54 = $ci;
  $55 = (($54) + 1)|0;
  $ci = $55;
 }
 STACKTOP = sp;return;
}
function _initial_setup46($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(65500);
 if ($4) {
  label = 3;
 } else {
  $5 = $0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)>(65500);
  if ($8) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 20|0);
  HEAP32[$11>>2] = 42;
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 24|0);
  HEAP32[$14>>2] = 65500;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  FUNCTION_TABLE_vi[$17 & 511]($18);
 }
 $19 = $0;
 $20 = (($19) + 212|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)<(8);
 if ($22) {
  label = 6;
 } else {
  $23 = $0;
  $24 = (($23) + 212|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($25|0)>(12);
  if ($26) {
   label = 6;
  }
 }
 if ((label|0) == 6) {
  $27 = $0;
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) + 20|0);
  HEAP32[$29>>2] = 16;
  $30 = $0;
  $31 = (($30) + 212|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $0;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 24|0);
  HEAP32[$35>>2] = $32;
  $36 = $0;
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = $0;
  FUNCTION_TABLE_vi[$38 & 511]($39);
 }
 $40 = $0;
 $41 = (($40) + 36|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)>(10);
 if ($43) {
  $44 = $0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 20|0);
  HEAP32[$46>>2] = 27;
  $47 = $0;
  $48 = (($47) + 36|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $0;
  $51 = HEAP32[$50>>2]|0;
  $52 = (($51) + 24|0);
  HEAP32[$52>>2] = $49;
  $53 = $0;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 24|0);
  $56 = (($55) + 4|0);
  HEAP32[$56>>2] = 10;
  $57 = $0;
  $58 = HEAP32[$57>>2]|0;
  $59 = HEAP32[$58>>2]|0;
  $60 = $0;
  FUNCTION_TABLE_vi[$59 & 511]($60);
 }
 $61 = $0;
 $62 = (($61) + 316|0);
 HEAP32[$62>>2] = 1;
 $63 = $0;
 $64 = (($63) + 320|0);
 HEAP32[$64>>2] = 1;
 $ci = 0;
 $65 = $0;
 $66 = (($65) + 216|0);
 $67 = HEAP32[$66>>2]|0;
 $compptr = $67;
 while(1) {
  $68 = $ci;
  $69 = $0;
  $70 = (($69) + 36|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ($68|0)<($71|0);
  if (!($72)) {
   break;
  }
  $73 = $compptr;
  $74 = (($73) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($75|0)<=(0);
  if ($76) {
   label = 15;
  } else {
   $77 = $compptr;
   $78 = (($77) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ($79|0)>(4);
   if ($80) {
    label = 15;
   } else {
    $81 = $compptr;
    $82 = (($81) + 12|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($83|0)<=(0);
    if ($84) {
     label = 15;
    } else {
     $85 = $compptr;
     $86 = (($85) + 12|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)>(4);
     if ($88) {
      label = 15;
     }
    }
   }
  }
  if ((label|0) == 15) {
   label = 0;
   $89 = $0;
   $90 = HEAP32[$89>>2]|0;
   $91 = (($90) + 20|0);
   HEAP32[$91>>2] = 19;
   $92 = $0;
   $93 = HEAP32[$92>>2]|0;
   $94 = HEAP32[$93>>2]|0;
   $95 = $0;
   FUNCTION_TABLE_vi[$94 & 511]($95);
  }
  $96 = $0;
  $97 = (($96) + 316|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = $compptr;
  $100 = (($99) + 8|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($98|0)>($101|0);
  if ($102) {
   $103 = $0;
   $104 = (($103) + 316|0);
   $105 = HEAP32[$104>>2]|0;
   $111 = $105;
  } else {
   $106 = $compptr;
   $107 = (($106) + 8|0);
   $108 = HEAP32[$107>>2]|0;
   $111 = $108;
  }
  $109 = $0;
  $110 = (($109) + 316|0);
  HEAP32[$110>>2] = $111;
  $112 = $0;
  $113 = (($112) + 320|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $compptr;
  $116 = (($115) + 12|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ($114|0)>($117|0);
  if ($118) {
   $119 = $0;
   $120 = (($119) + 320|0);
   $121 = HEAP32[$120>>2]|0;
   $127 = $121;
  } else {
   $122 = $compptr;
   $123 = (($122) + 12|0);
   $124 = HEAP32[$123>>2]|0;
   $127 = $124;
  }
  $125 = $0;
  $126 = (($125) + 320|0);
  HEAP32[$126>>2] = $127;
  $128 = $ci;
  $129 = (($128) + 1)|0;
  $ci = $129;
  $130 = $compptr;
  $131 = (($130) + 88|0);
  $compptr = $131;
 }
 $132 = $0;
 $133 = (($132) + 220|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ($134|0)!=(0);
 do {
  if ($135) {
   label = 27;
  } else {
   $136 = $0;
   $137 = (($136) + 224|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ($138|0)!=(0);
   if ($139) {
    $140 = $0;
    $141 = (($140) + 340|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)!=(0);
    if ($143) {
     label = 27;
     break;
    }
   }
   $150 = $0;
   $151 = (($150) + 416|0);
   $152 = HEAP32[$151>>2]|0;
   do {
    switch ($152|0) {
    case 99:  {
     $228 = $0;
     $229 = (($228) + 428|0);
     HEAP32[$229>>2] = 10;
     $230 = $0;
     $231 = (($230) + 432|0);
     HEAP32[$231>>2] = 8888;
     $232 = $0;
     $233 = (($232) + 436|0);
     HEAP32[$233>>2] = 63;
     break;
    }
    case 255:  {
     $264 = $0;
     $265 = (($264) + 428|0);
     HEAP32[$265>>2] = 16;
     $266 = $0;
     $267 = (($266) + 432|0);
     HEAP32[$267>>2] = 8888;
     $268 = $0;
     $269 = (($268) + 436|0);
     HEAP32[$269>>2] = 63;
     break;
    }
    case 195:  {
     $252 = $0;
     $253 = (($252) + 428|0);
     HEAP32[$253>>2] = 14;
     $254 = $0;
     $255 = (($254) + 432|0);
     HEAP32[$255>>2] = 8888;
     $256 = $0;
     $257 = (($256) + 436|0);
     HEAP32[$257>>2] = 63;
     break;
    }
    case 24:  {
     $189 = $0;
     $190 = (($189) + 428|0);
     HEAP32[$190>>2] = 5;
     $191 = $0;
     $192 = (($191) + 432|0);
     HEAP32[$192>>2] = 9680;
     $193 = $0;
     $194 = (($193) + 416|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = $0;
     $197 = (($196) + 436|0);
     HEAP32[$197>>2] = $195;
     break;
    }
    case 8:  {
     $171 = $0;
     $172 = (($171) + 428|0);
     HEAP32[$172>>2] = 3;
     $173 = $0;
     $174 = (($173) + 432|0);
     HEAP32[$174>>2] = 9976;
     $175 = $0;
     $176 = (($175) + 416|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $0;
     $179 = (($178) + 436|0);
     HEAP32[$179>>2] = $177;
     break;
    }
    case 3:  {
     $162 = $0;
     $163 = (($162) + 428|0);
     HEAP32[$163>>2] = 2;
     $164 = $0;
     $165 = (($164) + 432|0);
     HEAP32[$165>>2] = 10080;
     $166 = $0;
     $167 = (($166) + 416|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = $0;
     $170 = (($169) + 436|0);
     HEAP32[$170>>2] = $168;
     break;
    }
    case 0:  {
     $153 = $0;
     $154 = (($153) + 428|0);
     HEAP32[$154>>2] = 1;
     $155 = $0;
     $156 = (($155) + 432|0);
     HEAP32[$156>>2] = 8888;
     $157 = $0;
     $158 = (($157) + 416|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = $0;
     $161 = (($160) + 436|0);
     HEAP32[$161>>2] = $159;
     break;
    }
    case 48:  {
     $207 = $0;
     $208 = (($207) + 428|0);
     HEAP32[$208>>2] = 7;
     $209 = $0;
     $210 = (($209) + 432|0);
     HEAP32[$210>>2] = 9208;
     $211 = $0;
     $212 = (($211) + 416|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $0;
     $215 = (($214) + 436|0);
     HEAP32[$215>>2] = $213;
     break;
    }
    case 63:  {
     $216 = $0;
     $217 = (($216) + 428|0);
     HEAP32[$217>>2] = 8;
     $218 = $0;
     $219 = (($218) + 432|0);
     HEAP32[$219>>2] = 8888;
     $220 = $0;
     $221 = (($220) + 436|0);
     HEAP32[$221>>2] = 63;
     break;
    }
    case 120:  {
     $234 = $0;
     $235 = (($234) + 428|0);
     HEAP32[$235>>2] = 11;
     $236 = $0;
     $237 = (($236) + 432|0);
     HEAP32[$237>>2] = 8888;
     $238 = $0;
     $239 = (($238) + 436|0);
     HEAP32[$239>>2] = 63;
     break;
    }
    case 224:  {
     $258 = $0;
     $259 = (($258) + 428|0);
     HEAP32[$259>>2] = 15;
     $260 = $0;
     $261 = (($260) + 432|0);
     HEAP32[$261>>2] = 8888;
     $262 = $0;
     $263 = (($262) + 436|0);
     HEAP32[$263>>2] = 63;
     break;
    }
    case 80:  {
     $222 = $0;
     $223 = (($222) + 428|0);
     HEAP32[$223>>2] = 9;
     $224 = $0;
     $225 = (($224) + 432|0);
     HEAP32[$225>>2] = 8888;
     $226 = $0;
     $227 = (($226) + 436|0);
     HEAP32[$227>>2] = 63;
     break;
    }
    case 143:  {
     $240 = $0;
     $241 = (($240) + 428|0);
     HEAP32[$241>>2] = 12;
     $242 = $0;
     $243 = (($242) + 432|0);
     HEAP32[$243>>2] = 8888;
     $244 = $0;
     $245 = (($244) + 436|0);
     HEAP32[$245>>2] = 63;
     break;
    }
    case 35:  {
     $198 = $0;
     $199 = (($198) + 428|0);
     HEAP32[$199>>2] = 6;
     $200 = $0;
     $201 = (($200) + 432|0);
     HEAP32[$201>>2] = 9472;
     $202 = $0;
     $203 = (($202) + 416|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = $0;
     $206 = (($205) + 436|0);
     HEAP32[$206>>2] = $204;
     break;
    }
    case 168:  {
     $246 = $0;
     $247 = (($246) + 428|0);
     HEAP32[$247>>2] = 13;
     $248 = $0;
     $249 = (($248) + 432|0);
     HEAP32[$249>>2] = 8888;
     $250 = $0;
     $251 = (($250) + 436|0);
     HEAP32[$251>>2] = 63;
     break;
    }
    case 15:  {
     $180 = $0;
     $181 = (($180) + 428|0);
     HEAP32[$181>>2] = 4;
     $182 = $0;
     $183 = (($182) + 432|0);
     HEAP32[$183>>2] = 9848;
     $184 = $0;
     $185 = (($184) + 416|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = $0;
     $188 = (($187) + 436|0);
     HEAP32[$188>>2] = $186;
     break;
    }
    default: {
     $270 = $0;
     $271 = HEAP32[$270>>2]|0;
     $272 = (($271) + 20|0);
     HEAP32[$272>>2] = 17;
     $273 = $0;
     $274 = (($273) + 412|0);
     $275 = HEAP32[$274>>2]|0;
     $276 = $0;
     $277 = HEAP32[$276>>2]|0;
     $278 = (($277) + 24|0);
     HEAP32[$278>>2] = $275;
     $279 = $0;
     $280 = (($279) + 416|0);
     $281 = HEAP32[$280>>2]|0;
     $282 = $0;
     $283 = HEAP32[$282>>2]|0;
     $284 = (($283) + 24|0);
     $285 = (($284) + 4|0);
     HEAP32[$285>>2] = $281;
     $286 = $0;
     $287 = (($286) + 420|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = $0;
     $290 = HEAP32[$289>>2]|0;
     $291 = (($290) + 24|0);
     $292 = (($291) + 8|0);
     HEAP32[$292>>2] = $288;
     $293 = $0;
     $294 = (($293) + 424|0);
     $295 = HEAP32[$294>>2]|0;
     $296 = $0;
     $297 = HEAP32[$296>>2]|0;
     $298 = (($297) + 24|0);
     $299 = (($298) + 12|0);
     HEAP32[$299>>2] = $295;
     $300 = $0;
     $301 = HEAP32[$300>>2]|0;
     $302 = HEAP32[$301>>2]|0;
     $303 = $0;
     FUNCTION_TABLE_vi[$302 & 511]($303);
    }
    }
   } while(0);
  }
 } while(0);
 if ((label|0) == 27) {
  $144 = $0;
  $145 = (($144) + 428|0);
  HEAP32[$145>>2] = 8;
  $146 = $0;
  $147 = (($146) + 432|0);
  HEAP32[$147>>2] = 8888;
  $148 = $0;
  $149 = (($148) + 436|0);
  HEAP32[$149>>2] = 63;
 }
 $304 = $0;
 $305 = (($304) + 428|0);
 $306 = HEAP32[$305>>2]|0;
 $307 = $0;
 $308 = (($307) + 324|0);
 HEAP32[$308>>2] = $306;
 $309 = $0;
 $310 = (($309) + 428|0);
 $311 = HEAP32[$310>>2]|0;
 $312 = $0;
 $313 = (($312) + 328|0);
 HEAP32[$313>>2] = $311;
 $ci = 0;
 $314 = $0;
 $315 = (($314) + 216|0);
 $316 = HEAP32[$315>>2]|0;
 $compptr = $316;
 while(1) {
  $317 = $ci;
  $318 = $0;
  $319 = (($318) + 36|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = ($317|0)<($320|0);
  if (!($321)) {
   break;
  }
  $322 = $0;
  $323 = (($322) + 428|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = $compptr;
  $326 = (($325) + 36|0);
  HEAP32[$326>>2] = $324;
  $327 = $0;
  $328 = (($327) + 428|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = $compptr;
  $331 = (($330) + 40|0);
  HEAP32[$331>>2] = $329;
  $332 = $0;
  $333 = (($332) + 28|0);
  $334 = HEAP32[$333>>2]|0;
  $335 = $compptr;
  $336 = (($335) + 8|0);
  $337 = HEAP32[$336>>2]|0;
  $338 = Math_imul($334, $337)|0;
  $339 = $0;
  $340 = (($339) + 316|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = $0;
  $343 = (($342) + 428|0);
  $344 = HEAP32[$343>>2]|0;
  $345 = Math_imul($341, $344)|0;
  $346 = (_jdiv_round_up($338,$345)|0);
  $347 = $compptr;
  $348 = (($347) + 28|0);
  HEAP32[$348>>2] = $346;
  $349 = $0;
  $350 = (($349) + 32|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = $compptr;
  $353 = (($352) + 12|0);
  $354 = HEAP32[$353>>2]|0;
  $355 = Math_imul($351, $354)|0;
  $356 = $0;
  $357 = (($356) + 320|0);
  $358 = HEAP32[$357>>2]|0;
  $359 = $0;
  $360 = (($359) + 428|0);
  $361 = HEAP32[$360>>2]|0;
  $362 = Math_imul($358, $361)|0;
  $363 = (_jdiv_round_up($355,$362)|0);
  $364 = $compptr;
  $365 = (($364) + 32|0);
  HEAP32[$365>>2] = $363;
  $366 = $0;
  $367 = (($366) + 28|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = $compptr;
  $370 = (($369) + 8|0);
  $371 = HEAP32[$370>>2]|0;
  $372 = Math_imul($368, $371)|0;
  $373 = $0;
  $374 = (($373) + 316|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = (_jdiv_round_up($372,$375)|0);
  $377 = $compptr;
  $378 = (($377) + 44|0);
  HEAP32[$378>>2] = $376;
  $379 = $0;
  $380 = (($379) + 32|0);
  $381 = HEAP32[$380>>2]|0;
  $382 = $compptr;
  $383 = (($382) + 12|0);
  $384 = HEAP32[$383>>2]|0;
  $385 = Math_imul($381, $384)|0;
  $386 = $0;
  $387 = (($386) + 320|0);
  $388 = HEAP32[$387>>2]|0;
  $389 = (_jdiv_round_up($385,$388)|0);
  $390 = $compptr;
  $391 = (($390) + 48|0);
  HEAP32[$391>>2] = $389;
  $392 = $compptr;
  $393 = (($392) + 52|0);
  HEAP32[$393>>2] = 1;
  $394 = $compptr;
  $395 = (($394) + 80|0);
  HEAP32[$395>>2] = 0;
  $396 = $ci;
  $397 = (($396) + 1)|0;
  $ci = $397;
  $398 = $compptr;
  $399 = (($398) + 88|0);
  $compptr = $399;
 }
 $400 = $0;
 $401 = (($400) + 32|0);
 $402 = HEAP32[$401>>2]|0;
 $403 = $0;
 $404 = (($403) + 320|0);
 $405 = HEAP32[$404>>2]|0;
 $406 = $0;
 $407 = (($406) + 428|0);
 $408 = HEAP32[$407>>2]|0;
 $409 = Math_imul($405, $408)|0;
 $410 = (_jdiv_round_up($402,$409)|0);
 $411 = $0;
 $412 = (($411) + 332|0);
 HEAP32[$412>>2] = $410;
 $413 = $0;
 $414 = (($413) + 340|0);
 $415 = HEAP32[$414>>2]|0;
 $416 = $0;
 $417 = (($416) + 36|0);
 $418 = HEAP32[$417>>2]|0;
 $419 = ($415|0)<($418|0);
 if (!($419)) {
  $420 = $0;
  $421 = (($420) + 224|0);
  $422 = HEAP32[$421>>2]|0;
  $423 = ($422|0)!=(0);
  if (!($423)) {
   $428 = $0;
   $429 = (($428) + 460|0);
   $430 = HEAP32[$429>>2]|0;
   $431 = (($430) + 16|0);
   HEAP32[$431>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $424 = $0;
 $425 = (($424) + 460|0);
 $426 = HEAP32[$425>>2]|0;
 $427 = (($426) + 16|0);
 HEAP32[$427>>2] = 1;
 STACKTOP = sp;return;
}
function _jinit_d_main_controller($cinfo,$need_full_buffer) {
 $cinfo = $cinfo|0;
 $need_full_buffer = $need_full_buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $ci = 0, $compptr = 0, $mainp = 0, $ngroups = 0, $rgroup = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $need_full_buffer;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = (FUNCTION_TABLE_iiii[$5 & 511]($6,1,80)|0);
 $mainp = $7;
 $8 = $mainp;
 $9 = $0;
 $10 = (($9) + 448|0);
 HEAP32[$10>>2] = $8;
 $11 = $mainp;
 HEAP32[$11>>2] = 212;
 $12 = $1;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 20|0);
  HEAP32[$16>>2] = 3;
  $17 = $0;
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  FUNCTION_TABLE_vi[$19 & 511]($20);
 }
 $21 = $0;
 $22 = (($21) + 476|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) + 8|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $0;
  $28 = (($27) + 328|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)<(2);
  if ($30) {
   $31 = $0;
   $32 = HEAP32[$31>>2]|0;
   $33 = (($32) + 20|0);
   HEAP32[$33>>2] = 48;
   $34 = $0;
   $35 = HEAP32[$34>>2]|0;
   $36 = HEAP32[$35>>2]|0;
   $37 = $0;
   FUNCTION_TABLE_vi[$36 & 511]($37);
  }
  $38 = $0;
  _alloc_funny_pointers($38);
  $39 = $0;
  $40 = (($39) + 328|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 2)|0;
  $ngroups = $42;
 } else {
  $43 = $0;
  $44 = (($43) + 328|0);
  $45 = HEAP32[$44>>2]|0;
  $ngroups = $45;
 }
 $ci = 0;
 $46 = $0;
 $47 = (($46) + 216|0);
 $48 = HEAP32[$47>>2]|0;
 $compptr = $48;
 while(1) {
  $49 = $ci;
  $50 = $0;
  $51 = (($50) + 36|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($49|0)<($52|0);
  if (!($53)) {
   break;
  }
  $54 = $compptr;
  $55 = (($54) + 12|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = $compptr;
  $58 = (($57) + 40|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = Math_imul($56, $59)|0;
  $61 = $0;
  $62 = (($61) + 328|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($60|0) / ($63|0))&-1;
  $rgroup = $64;
  $65 = $0;
  $66 = (($65) + 4|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $0;
  $71 = $compptr;
  $72 = (($71) + 28|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $compptr;
  $75 = (($74) + 36|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = Math_imul($73, $76)|0;
  $78 = $rgroup;
  $79 = $ngroups;
  $80 = Math_imul($78, $79)|0;
  $81 = (FUNCTION_TABLE_iiiii[$69 & 511]($70,1,$77,$80)|0);
  $82 = $ci;
  $83 = $mainp;
  $84 = (($83) + 8|0);
  $85 = (($84) + ($82<<2)|0);
  HEAP32[$85>>2] = $81;
  $86 = $ci;
  $87 = (($86) + 1)|0;
  $ci = $87;
  $88 = $compptr;
  $89 = (($88) + 88|0);
  $compptr = $89;
 }
 STACKTOP = sp;return;
}
function _start_pass_main47($cinfo,$pass_mode) {
 $cinfo = $cinfo|0;
 $pass_mode = $pass_mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mainp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $pass_mode;
 $2 = $0;
 $3 = (($2) + 448|0);
 $4 = HEAP32[$3>>2]|0;
 $mainp = $4;
 $5 = $1;
 if ((($5|0) == 2)) {
  $27 = $mainp;
  $28 = (($27) + 4|0);
  HEAP32[$28>>2] = 215;
  STACKTOP = sp;return;
 } else if ((($5|0) == 0)) {
  $6 = $0;
  $7 = (($6) + 476|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)!=(0);
  if ($11) {
   $12 = $mainp;
   $13 = (($12) + 4|0);
   HEAP32[$13>>2] = 213;
   $14 = $0;
   _make_funny_pointers($14);
   $15 = $mainp;
   $16 = (($15) + 64|0);
   HEAP32[$16>>2] = 0;
   $17 = $mainp;
   $18 = (($17) + 68|0);
   HEAP32[$18>>2] = 0;
   $19 = $mainp;
   $20 = (($19) + 76|0);
   HEAP32[$20>>2] = 0;
  } else {
   $21 = $mainp;
   $22 = (($21) + 4|0);
   HEAP32[$22>>2] = 214;
  }
  $23 = $mainp;
  $24 = (($23) + 48|0);
  HEAP32[$24>>2] = 0;
  $25 = $mainp;
  $26 = (($25) + 52|0);
  HEAP32[$26>>2] = 0;
  STACKTOP = sp;return;
 } else {
  $29 = $0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 20|0);
  HEAP32[$31>>2] = 3;
  $32 = $0;
  $33 = HEAP32[$32>>2]|0;
  $34 = HEAP32[$33>>2]|0;
  $35 = $0;
  FUNCTION_TABLE_vi[$34 & 511]($35);
  STACKTOP = sp;return;
 }
}
function _alloc_funny_pointers($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $M = 0, $ci = 0, $compptr = 0, $mainp = 0, $rgroup = 0, $xbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 448|0);
 $3 = HEAP32[$2>>2]|0;
 $mainp = $3;
 $4 = $0;
 $5 = (($4) + 328|0);
 $6 = HEAP32[$5>>2]|0;
 $M = $6;
 $7 = $0;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $11 = $0;
 $12 = $0;
 $13 = (($12) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14<<1;
 $16 = $15<<2;
 $17 = (FUNCTION_TABLE_iiii[$10 & 511]($11,1,$16)|0);
 $18 = $mainp;
 $19 = (($18) + 56|0);
 HEAP32[$19>>2] = $17;
 $20 = $mainp;
 $21 = (($20) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $0;
 $24 = (($23) + 36|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($22) + ($25<<2)|0);
 $27 = $mainp;
 $28 = (($27) + 56|0);
 $29 = (($28) + 4|0);
 HEAP32[$29>>2] = $26;
 $ci = 0;
 $30 = $0;
 $31 = (($30) + 216|0);
 $32 = HEAP32[$31>>2]|0;
 $compptr = $32;
 while(1) {
  $33 = $ci;
  $34 = $0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($33|0)<($36|0);
  if (!($37)) {
   break;
  }
  $38 = $compptr;
  $39 = (($38) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $compptr;
  $42 = (($41) + 40|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = Math_imul($40, $43)|0;
  $45 = $0;
  $46 = (($45) + 328|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($44|0) / ($47|0))&-1;
  $rgroup = $48;
  $49 = $0;
  $50 = (($49) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  $53 = $0;
  $54 = $rgroup;
  $55 = $M;
  $56 = (($55) + 4)|0;
  $57 = Math_imul($54, $56)|0;
  $58 = $57<<1;
  $59 = $58<<2;
  $60 = (FUNCTION_TABLE_iiii[$52 & 511]($53,1,$59)|0);
  $xbuf = $60;
  $61 = $rgroup;
  $62 = $xbuf;
  $63 = (($62) + ($61<<2)|0);
  $xbuf = $63;
  $64 = $xbuf;
  $65 = $ci;
  $66 = $mainp;
  $67 = (($66) + 56|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (($68) + ($65<<2)|0);
  HEAP32[$69>>2] = $64;
  $70 = $rgroup;
  $71 = $M;
  $72 = (($71) + 4)|0;
  $73 = Math_imul($70, $72)|0;
  $74 = $xbuf;
  $75 = (($74) + ($73<<2)|0);
  $xbuf = $75;
  $76 = $xbuf;
  $77 = $ci;
  $78 = $mainp;
  $79 = (($78) + 56|0);
  $80 = (($79) + 4|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + ($77<<2)|0);
  HEAP32[$82>>2] = $76;
  $83 = $ci;
  $84 = (($83) + 1)|0;
  $ci = $84;
  $85 = $compptr;
  $86 = (($85) + 88|0);
  $compptr = $86;
 }
 STACKTOP = sp;return;
}
function _process_data_context_main($cinfo,$output_buf,$out_row_ctr,$out_rows_avail) {
 $cinfo = $cinfo|0;
 $output_buf = $output_buf|0;
 $out_row_ctr = $out_row_ctr|0;
 $out_rows_avail = $out_rows_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $mainp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $output_buf;
 $2 = $out_row_ctr;
 $3 = $out_rows_avail;
 $4 = $0;
 $5 = (($4) + 448|0);
 $6 = HEAP32[$5>>2]|0;
 $mainp = $6;
 $7 = $mainp;
 $8 = (($7) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 do {
  if (!($10)) {
   $11 = $0;
   $12 = (($11) + 452|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $0;
   $17 = $mainp;
   $18 = (($17) + 64|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = $mainp;
   $21 = (($20) + 56|0);
   $22 = (($21) + ($19<<2)|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (FUNCTION_TABLE_iii[$15 & 255]($16,$23)|0);
   $25 = ($24|0)!=(0);
   if ($25) {
    $26 = $mainp;
    $27 = (($26) + 48|0);
    HEAP32[$27>>2] = 1;
    $28 = $mainp;
    $29 = (($28) + 76|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($30) + 1)|0;
    HEAP32[$29>>2] = $31;
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $32 = $mainp;
 $33 = (($32) + 68|0);
 $34 = HEAP32[$33>>2]|0;
 if ((($34|0) == 2)) {
  label = 6;
 } else if ((($34|0) == 0)) {
  label = 11;
 } else if (!((($34|0) == 1))) {
  STACKTOP = sp;return;
 }
 do {
  if ((label|0) == 6) {
   $35 = $0;
   $36 = (($35) + 456|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = (($37) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = $0;
   $41 = $mainp;
   $42 = (($41) + 64|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $mainp;
   $45 = (($44) + 56|0);
   $46 = (($45) + ($43<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = $mainp;
   $49 = (($48) + 52|0);
   $50 = $mainp;
   $51 = (($50) + 72|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $1;
   $54 = $2;
   $55 = $3;
   FUNCTION_TABLE_viiiiiii[$39 & 255]($40,$47,$49,$52,$53,$54,$55);
   $56 = $mainp;
   $57 = (($56) + 52|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $mainp;
   $60 = (($59) + 72|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($58>>>0)<($61>>>0);
   if ($62) {
    STACKTOP = sp;return;
   }
   $63 = $mainp;
   $64 = (($63) + 68|0);
   HEAP32[$64>>2] = 0;
   $65 = $2;
   $66 = HEAP32[$65>>2]|0;
   $67 = $3;
   $68 = ($66>>>0)>=($67>>>0);
   if (!($68)) {
    label = 11;
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 11) {
  $69 = $mainp;
  $70 = (($69) + 52|0);
  HEAP32[$70>>2] = 0;
  $71 = $0;
  $72 = (($71) + 328|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) - 1)|0;
  $75 = $mainp;
  $76 = (($75) + 72|0);
  HEAP32[$76>>2] = $74;
  $77 = $mainp;
  $78 = (($77) + 76|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = $0;
  $81 = (($80) + 332|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($79|0)==($82|0);
  if ($83) {
   $84 = $0;
   _set_bottom_pointers($84);
  }
  $85 = $mainp;
  $86 = (($85) + 68|0);
  HEAP32[$86>>2] = 1;
 }
 $87 = $0;
 $88 = (($87) + 456|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = (($89) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $0;
 $93 = $mainp;
 $94 = (($93) + 64|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $mainp;
 $97 = (($96) + 56|0);
 $98 = (($97) + ($95<<2)|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $mainp;
 $101 = (($100) + 52|0);
 $102 = $mainp;
 $103 = (($102) + 72|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $1;
 $106 = $2;
 $107 = $3;
 FUNCTION_TABLE_viiiiiii[$91 & 255]($92,$99,$101,$104,$105,$106,$107);
 $108 = $mainp;
 $109 = (($108) + 52|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $mainp;
 $112 = (($111) + 72|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($110>>>0)<($113>>>0);
 if ($114) {
  STACKTOP = sp;return;
 }
 $115 = $mainp;
 $116 = (($115) + 76|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)==(1);
 if ($118) {
  $119 = $0;
  _set_wraparound_pointers($119);
 }
 $120 = $mainp;
 $121 = (($120) + 64|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = $122 ^ 1;
 HEAP32[$121>>2] = $123;
 $124 = $mainp;
 $125 = (($124) + 48|0);
 HEAP32[$125>>2] = 0;
 $126 = $0;
 $127 = (($126) + 328|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = (($128) + 1)|0;
 $130 = $mainp;
 $131 = (($130) + 52|0);
 HEAP32[$131>>2] = $129;
 $132 = $0;
 $133 = (($132) + 328|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = (($134) + 2)|0;
 $136 = $mainp;
 $137 = (($136) + 72|0);
 HEAP32[$137>>2] = $135;
 $138 = $mainp;
 $139 = (($138) + 68|0);
 HEAP32[$139>>2] = 2;
 STACKTOP = sp;return;
}
function _make_funny_pointers($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $M = 0, $buf = 0, $ci = 0, $compptr = 0;
 var $i = 0, $mainp = 0, $rgroup = 0, $xbuf0 = 0, $xbuf1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 448|0);
 $3 = HEAP32[$2>>2]|0;
 $mainp = $3;
 $4 = $0;
 $5 = (($4) + 328|0);
 $6 = HEAP32[$5>>2]|0;
 $M = $6;
 $ci = 0;
 $7 = $0;
 $8 = (($7) + 216|0);
 $9 = HEAP32[$8>>2]|0;
 $compptr = $9;
 while(1) {
  $10 = $ci;
  $11 = $0;
  $12 = (($11) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $compptr;
  $16 = (($15) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $compptr;
  $19 = (($18) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($17, $20)|0;
  $22 = $0;
  $23 = (($22) + 328|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($21|0) / ($24|0))&-1;
  $rgroup = $25;
  $26 = $ci;
  $27 = $mainp;
  $28 = (($27) + 56|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $xbuf0 = $31;
  $32 = $ci;
  $33 = $mainp;
  $34 = (($33) + 56|0);
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($32<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $xbuf1 = $38;
  $39 = $ci;
  $40 = $mainp;
  $41 = (($40) + 8|0);
  $42 = (($41) + ($39<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $buf = $43;
  $i = 0;
  while(1) {
   $44 = $i;
   $45 = $rgroup;
   $46 = $M;
   $47 = (($46) + 2)|0;
   $48 = Math_imul($45, $47)|0;
   $49 = ($44|0)<($48|0);
   if (!($49)) {
    break;
   }
   $50 = $i;
   $51 = $buf;
   $52 = (($51) + ($50<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $i;
   $55 = $xbuf1;
   $56 = (($55) + ($54<<2)|0);
   HEAP32[$56>>2] = $53;
   $57 = $i;
   $58 = $xbuf0;
   $59 = (($58) + ($57<<2)|0);
   HEAP32[$59>>2] = $53;
   $60 = $i;
   $61 = (($60) + 1)|0;
   $i = $61;
  }
  $i = 0;
  while(1) {
   $62 = $i;
   $63 = $rgroup;
   $64 = $63<<1;
   $65 = ($62|0)<($64|0);
   if (!($65)) {
    break;
   }
   $66 = $rgroup;
   $67 = $M;
   $68 = Math_imul($66, $67)|0;
   $69 = $i;
   $70 = (($68) + ($69))|0;
   $71 = $buf;
   $72 = (($71) + ($70<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $rgroup;
   $75 = $M;
   $76 = (($75) - 2)|0;
   $77 = Math_imul($74, $76)|0;
   $78 = $i;
   $79 = (($77) + ($78))|0;
   $80 = $xbuf1;
   $81 = (($80) + ($79<<2)|0);
   HEAP32[$81>>2] = $73;
   $82 = $rgroup;
   $83 = $M;
   $84 = (($83) - 2)|0;
   $85 = Math_imul($82, $84)|0;
   $86 = $i;
   $87 = (($85) + ($86))|0;
   $88 = $buf;
   $89 = (($88) + ($87<<2)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $rgroup;
   $92 = $M;
   $93 = Math_imul($91, $92)|0;
   $94 = $i;
   $95 = (($93) + ($94))|0;
   $96 = $xbuf1;
   $97 = (($96) + ($95<<2)|0);
   HEAP32[$97>>2] = $90;
   $98 = $i;
   $99 = (($98) + 1)|0;
   $i = $99;
  }
  $i = 0;
  while(1) {
   $100 = $i;
   $101 = $rgroup;
   $102 = ($100|0)<($101|0);
   if (!($102)) {
    break;
   }
   $103 = $xbuf0;
   $104 = HEAP32[$103>>2]|0;
   $105 = $i;
   $106 = $rgroup;
   $107 = (($105) - ($106))|0;
   $108 = $xbuf0;
   $109 = (($108) + ($107<<2)|0);
   HEAP32[$109>>2] = $104;
   $110 = $i;
   $111 = (($110) + 1)|0;
   $i = $111;
  }
  $112 = $ci;
  $113 = (($112) + 1)|0;
  $ci = $113;
  $114 = $compptr;
  $115 = (($114) + 88|0);
  $compptr = $115;
 }
 STACKTOP = sp;return;
}
function _process_data_simple_main48($cinfo,$output_buf,$out_row_ctr,$out_rows_avail) {
 $cinfo = $cinfo|0;
 $output_buf = $output_buf|0;
 $out_row_ctr = $out_row_ctr|0;
 $out_rows_avail = $out_rows_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mainp = 0, $rowgroups_avail = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $output_buf;
 $2 = $out_row_ctr;
 $3 = $out_rows_avail;
 $4 = $0;
 $5 = (($4) + 448|0);
 $6 = HEAP32[$5>>2]|0;
 $mainp = $6;
 $7 = $mainp;
 $8 = (($7) + 48|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 do {
  if (!($10)) {
   $11 = $0;
   $12 = (($11) + 452|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 12|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $0;
   $17 = $mainp;
   $18 = (($17) + 8|0);
   $19 = (FUNCTION_TABLE_iii[$15 & 255]($16,$18)|0);
   $20 = ($19|0)!=(0);
   if ($20) {
    $21 = $mainp;
    $22 = (($21) + 48|0);
    HEAP32[$22>>2] = 1;
    break;
   }
   STACKTOP = sp;return;
  }
 } while(0);
 $23 = $0;
 $24 = (($23) + 328|0);
 $25 = HEAP32[$24>>2]|0;
 $rowgroups_avail = $25;
 $26 = $0;
 $27 = (($26) + 456|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $0;
 $32 = $mainp;
 $33 = (($32) + 8|0);
 $34 = $mainp;
 $35 = (($34) + 52|0);
 $36 = $rowgroups_avail;
 $37 = $1;
 $38 = $2;
 $39 = $3;
 FUNCTION_TABLE_viiiiiii[$30 & 255]($31,$33,$35,$36,$37,$38,$39);
 $40 = $mainp;
 $41 = (($40) + 52|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $rowgroups_avail;
 $44 = ($42>>>0)>=($43>>>0);
 if (!($44)) {
  STACKTOP = sp;return;
 }
 $45 = $mainp;
 $46 = (($45) + 48|0);
 HEAP32[$46>>2] = 0;
 $47 = $mainp;
 $48 = (($47) + 52|0);
 HEAP32[$48>>2] = 0;
 STACKTOP = sp;return;
}
function _process_data_crank_post($cinfo,$output_buf,$out_row_ctr,$out_rows_avail) {
 $cinfo = $cinfo|0;
 $output_buf = $output_buf|0;
 $out_row_ctr = $out_row_ctr|0;
 $out_rows_avail = $out_rows_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $output_buf;
 $2 = $out_row_ctr;
 $3 = $out_rows_avail;
 $4 = $0;
 $5 = (($4) + 456|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 FUNCTION_TABLE_viiiiiii[$8 & 255]($9,0,0,0,$10,$11,$12);
 STACKTOP = sp;return;
}
function _set_bottom_pointers($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $ci = 0, $compptr = 0, $i = 0, $iMCUheight = 0, $mainp = 0, $rgroup = 0, $rows_left = 0, $xbuf = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 448|0);
 $3 = HEAP32[$2>>2]|0;
 $mainp = $3;
 $ci = 0;
 $4 = $0;
 $5 = (($4) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $compptr = $6;
 while(1) {
  $7 = $ci;
  $8 = $0;
  $9 = (($8) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($7|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $compptr;
  $13 = (($12) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $compptr;
  $16 = (($15) + 40|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = Math_imul($14, $17)|0;
  $iMCUheight = $18;
  $19 = $iMCUheight;
  $20 = $0;
  $21 = (($20) + 328|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($19|0) / ($22|0))&-1;
  $rgroup = $23;
  $24 = $compptr;
  $25 = (($24) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $iMCUheight;
  $28 = (($26>>>0) % ($27>>>0))&-1;
  $rows_left = $28;
  $29 = $rows_left;
  $30 = ($29|0)==(0);
  if ($30) {
   $31 = $iMCUheight;
   $rows_left = $31;
  }
  $32 = $ci;
  $33 = ($32|0)==(0);
  if ($33) {
   $34 = $rows_left;
   $35 = (($34) - 1)|0;
   $36 = $rgroup;
   $37 = (($35|0) / ($36|0))&-1;
   $38 = (($37) + 1)|0;
   $39 = $mainp;
   $40 = (($39) + 72|0);
   HEAP32[$40>>2] = $38;
  }
  $41 = $ci;
  $42 = $mainp;
  $43 = (($42) + 64|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = $mainp;
  $46 = (($45) + 56|0);
  $47 = (($46) + ($44<<2)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($41<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $xbuf = $50;
  $i = 0;
  while(1) {
   $51 = $i;
   $52 = $rgroup;
   $53 = $52<<1;
   $54 = ($51|0)<($53|0);
   if (!($54)) {
    break;
   }
   $55 = $rows_left;
   $56 = (($55) - 1)|0;
   $57 = $xbuf;
   $58 = (($57) + ($56<<2)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $rows_left;
   $61 = $i;
   $62 = (($60) + ($61))|0;
   $63 = $xbuf;
   $64 = (($63) + ($62<<2)|0);
   HEAP32[$64>>2] = $59;
   $65 = $i;
   $66 = (($65) + 1)|0;
   $i = $66;
  }
  $67 = $ci;
  $68 = (($67) + 1)|0;
  $ci = $68;
  $69 = $compptr;
  $70 = (($69) + 88|0);
  $compptr = $70;
 }
 STACKTOP = sp;return;
}
function _set_wraparound_pointers($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $M = 0, $ci = 0, $compptr = 0, $i = 0, $mainp = 0, $rgroup = 0, $xbuf0 = 0, $xbuf1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 448|0);
 $3 = HEAP32[$2>>2]|0;
 $mainp = $3;
 $4 = $0;
 $5 = (($4) + 328|0);
 $6 = HEAP32[$5>>2]|0;
 $M = $6;
 $ci = 0;
 $7 = $0;
 $8 = (($7) + 216|0);
 $9 = HEAP32[$8>>2]|0;
 $compptr = $9;
 while(1) {
  $10 = $ci;
  $11 = $0;
  $12 = (($11) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($10|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $compptr;
  $16 = (($15) + 12|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $compptr;
  $19 = (($18) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = Math_imul($17, $20)|0;
  $22 = $0;
  $23 = (($22) + 328|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($21|0) / ($24|0))&-1;
  $rgroup = $25;
  $26 = $ci;
  $27 = $mainp;
  $28 = (($27) + 56|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + ($26<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $xbuf0 = $31;
  $32 = $ci;
  $33 = $mainp;
  $34 = (($33) + 56|0);
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + ($32<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $xbuf1 = $38;
  $i = 0;
  while(1) {
   $39 = $i;
   $40 = $rgroup;
   $41 = ($39|0)<($40|0);
   if (!($41)) {
    break;
   }
   $42 = $rgroup;
   $43 = $M;
   $44 = (($43) + 1)|0;
   $45 = Math_imul($42, $44)|0;
   $46 = $i;
   $47 = (($45) + ($46))|0;
   $48 = $xbuf0;
   $49 = (($48) + ($47<<2)|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $i;
   $52 = $rgroup;
   $53 = (($51) - ($52))|0;
   $54 = $xbuf0;
   $55 = (($54) + ($53<<2)|0);
   HEAP32[$55>>2] = $50;
   $56 = $rgroup;
   $57 = $M;
   $58 = (($57) + 1)|0;
   $59 = Math_imul($56, $58)|0;
   $60 = $i;
   $61 = (($59) + ($60))|0;
   $62 = $xbuf1;
   $63 = (($62) + ($61<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $i;
   $66 = $rgroup;
   $67 = (($65) - ($66))|0;
   $68 = $xbuf1;
   $69 = (($68) + ($67<<2)|0);
   HEAP32[$69>>2] = $64;
   $70 = $i;
   $71 = $xbuf0;
   $72 = (($71) + ($70<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $rgroup;
   $75 = $M;
   $76 = (($75) + 2)|0;
   $77 = Math_imul($74, $76)|0;
   $78 = $i;
   $79 = (($77) + ($78))|0;
   $80 = $xbuf0;
   $81 = (($80) + ($79<<2)|0);
   HEAP32[$81>>2] = $73;
   $82 = $i;
   $83 = $xbuf1;
   $84 = (($83) + ($82<<2)|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $rgroup;
   $87 = $M;
   $88 = (($87) + 2)|0;
   $89 = Math_imul($86, $88)|0;
   $90 = $i;
   $91 = (($89) + ($90))|0;
   $92 = $xbuf1;
   $93 = (($92) + ($91<<2)|0);
   HEAP32[$93>>2] = $85;
   $94 = $i;
   $95 = (($94) + 1)|0;
   $i = $95;
  }
  $96 = $ci;
  $97 = (($96) + 1)|0;
  $ci = $97;
  $98 = $compptr;
  $99 = (($98) + 88|0);
  $compptr = $99;
 }
 STACKTOP = sp;return;
}
function _jpeg_resync_to_restart($cinfo,$desired) {
 $cinfo = $cinfo|0;
 $desired = $desired|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $action = 0, $marker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $cinfo;
 $2 = $desired;
 $3 = $1;
 $4 = (($3) + 440|0);
 $5 = HEAP32[$4>>2]|0;
 $marker = $5;
 $action = 1;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 20|0);
 HEAP32[$8>>2] = 124;
 $9 = $marker;
 $10 = $1;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 24|0);
 HEAP32[$12>>2] = $9;
 $13 = $2;
 $14 = $1;
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + 24|0);
 $17 = (($16) + 4|0);
 HEAP32[$17>>2] = $13;
 $18 = $1;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($19) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 FUNCTION_TABLE_vii[$21 & 511]($22,-1);
 while(1) {
  $23 = $marker;
  $24 = ($23|0)<(192);
  if ($24) {
   $action = 2;
  } else {
   $25 = $marker;
   $26 = ($25|0)<(208);
   if ($26) {
    label = 6;
   } else {
    $27 = $marker;
    $28 = ($27|0)>(215);
    if ($28) {
     label = 6;
    } else {
     $29 = $marker;
     $30 = $2;
     $31 = (($30) + 1)|0;
     $32 = $31 & 7;
     $33 = (208 + ($32))|0;
     $34 = ($29|0)==($33|0);
     if ($34) {
      label = 9;
     } else {
      $35 = $marker;
      $36 = $2;
      $37 = (($36) + 2)|0;
      $38 = $37 & 7;
      $39 = (208 + ($38))|0;
      $40 = ($35|0)==($39|0);
      if ($40) {
       label = 9;
      } else {
       $41 = $marker;
       $42 = $2;
       $43 = (($42) - 1)|0;
       $44 = $43 & 7;
       $45 = (208 + ($44))|0;
       $46 = ($41|0)==($45|0);
       if ($46) {
        label = 12;
       } else {
        $47 = $marker;
        $48 = $2;
        $49 = (($48) - 2)|0;
        $50 = $49 & 7;
        $51 = (208 + ($50))|0;
        $52 = ($47|0)==($51|0);
        if ($52) {
         label = 12;
        } else {
         $action = 1;
        }
       }
       if ((label|0) == 12) {
        label = 0;
        $action = 2;
       }
      }
     }
     if ((label|0) == 9) {
      label = 0;
      $action = 3;
     }
    }
   }
   if ((label|0) == 6) {
    label = 0;
    $action = 3;
   }
  }
  $53 = $1;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 20|0);
  HEAP32[$55>>2] = 99;
  $56 = $marker;
  $57 = $1;
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + 24|0);
  HEAP32[$59>>2] = $56;
  $60 = $action;
  $61 = $1;
  $62 = HEAP32[$61>>2]|0;
  $63 = (($62) + 24|0);
  $64 = (($63) + 4|0);
  HEAP32[$64>>2] = $60;
  $65 = $1;
  $66 = HEAP32[$65>>2]|0;
  $67 = (($66) + 4|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $1;
  FUNCTION_TABLE_vii[$68 & 511]($69,4);
  $70 = $action;
  if ((($70|0) == 1)) {
   label = 18;
   break;
  } else if ((($70|0) == 3)) {
   label = 22;
   break;
  } else if ((($70|0) == 2)) {
   $73 = $1;
   $74 = (_next_marker($73)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    label = 20;
    break;
   }
   $76 = $1;
   $77 = (($76) + 440|0);
   $78 = HEAP32[$77>>2]|0;
   $marker = $78;
  }
 }
 if ((label|0) == 18) {
  $71 = $1;
  $72 = (($71) + 440|0);
  HEAP32[$72>>2] = 0;
  $0 = 1;
  $79 = $0;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 20) {
  $0 = 0;
  $79 = $0;
  STACKTOP = sp;return ($79|0);
 }
 else if ((label|0) == 22) {
  $0 = 1;
  $79 = $0;
  STACKTOP = sp;return ($79|0);
 }
 return 0|0;
}
function _next_marker($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytes_in_buffer = 0, $c = 0, $datasrc = 0, $next_input_byte = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $datasrc = $4;
 $5 = $datasrc;
 $6 = HEAP32[$5>>2]|0;
 $next_input_byte = $6;
 $7 = $datasrc;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $bytes_in_buffer = $9;
 L1: while(1) {
  $10 = $bytes_in_buffer;
  $11 = ($10|0)==(0);
  if ($11) {
   $12 = $datasrc;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (FUNCTION_TABLE_ii[$14 & 255]($15)|0);
   $17 = ($16|0)!=(0);
   if (!($17)) {
    label = 5;
    break;
   }
   $18 = $datasrc;
   $19 = HEAP32[$18>>2]|0;
   $next_input_byte = $19;
   $20 = $datasrc;
   $21 = (($20) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $bytes_in_buffer = $22;
  }
  $23 = $bytes_in_buffer;
  $24 = (($23) + -1)|0;
  $bytes_in_buffer = $24;
  $25 = $next_input_byte;
  $26 = (($25) + 1|0);
  $next_input_byte = $26;
  $27 = HEAP8[$25>>0]|0;
  $28 = $27&255;
  $c = $28;
  while(1) {
   $29 = $c;
   $30 = ($29|0)!=(255);
   if (!($30)) {
    break;
   }
   $31 = $1;
   $32 = (($31) + 464|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 24|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (($35) + 1)|0;
   HEAP32[$34>>2] = $36;
   $37 = $next_input_byte;
   $38 = $datasrc;
   HEAP32[$38>>2] = $37;
   $39 = $bytes_in_buffer;
   $40 = $datasrc;
   $41 = (($40) + 4|0);
   HEAP32[$41>>2] = $39;
   $42 = $bytes_in_buffer;
   $43 = ($42|0)==(0);
   if ($43) {
    $44 = $datasrc;
    $45 = (($44) + 12|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = $1;
    $48 = (FUNCTION_TABLE_ii[$46 & 255]($47)|0);
    $49 = ($48|0)!=(0);
    if (!($49)) {
     label = 13;
     break L1;
    }
    $50 = $datasrc;
    $51 = HEAP32[$50>>2]|0;
    $next_input_byte = $51;
    $52 = $datasrc;
    $53 = (($52) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $bytes_in_buffer = $54;
   }
   $55 = $bytes_in_buffer;
   $56 = (($55) + -1)|0;
   $bytes_in_buffer = $56;
   $57 = $next_input_byte;
   $58 = (($57) + 1|0);
   $next_input_byte = $58;
   $59 = HEAP8[$57>>0]|0;
   $60 = $59&255;
   $c = $60;
  }
  while(1) {
   $61 = $bytes_in_buffer;
   $62 = ($61|0)==(0);
   if ($62) {
    $63 = $datasrc;
    $64 = (($63) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = $1;
    $67 = (FUNCTION_TABLE_ii[$65 & 255]($66)|0);
    $68 = ($67|0)!=(0);
    if (!($68)) {
     label = 21;
     break L1;
    }
    $69 = $datasrc;
    $70 = HEAP32[$69>>2]|0;
    $next_input_byte = $70;
    $71 = $datasrc;
    $72 = (($71) + 4|0);
    $73 = HEAP32[$72>>2]|0;
    $bytes_in_buffer = $73;
   }
   $74 = $bytes_in_buffer;
   $75 = (($74) + -1)|0;
   $bytes_in_buffer = $75;
   $76 = $next_input_byte;
   $77 = (($76) + 1|0);
   $next_input_byte = $77;
   $78 = HEAP8[$76>>0]|0;
   $79 = $78&255;
   $c = $79;
   $80 = $c;
   $81 = ($80|0)==(255);
   if (!($81)) {
    break;
   }
  }
  $82 = $c;
  $83 = ($82|0)!=(0);
  if ($83) {
   label = 27;
   break;
  }
  $84 = $1;
  $85 = (($84) + 464|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($86) + 24|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = (($88) + 2)|0;
  HEAP32[$87>>2] = $89;
  $90 = $next_input_byte;
  $91 = $datasrc;
  HEAP32[$91>>2] = $90;
  $92 = $bytes_in_buffer;
  $93 = $datasrc;
  $94 = (($93) + 4|0);
  HEAP32[$94>>2] = $92;
 }
 if ((label|0) == 5) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 13) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 21) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 27) {
  $95 = $1;
  $96 = (($95) + 464|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + 24|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($99|0)!=(0);
  if ($100) {
   $101 = $1;
   $102 = HEAP32[$101>>2]|0;
   $103 = (($102) + 20|0);
   HEAP32[$103>>2] = 119;
   $104 = $1;
   $105 = (($104) + 464|0);
   $106 = HEAP32[$105>>2]|0;
   $107 = (($106) + 24|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $1;
   $110 = HEAP32[$109>>2]|0;
   $111 = (($110) + 24|0);
   HEAP32[$111>>2] = $108;
   $112 = $c;
   $113 = $1;
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = (($115) + 4|0);
   HEAP32[$116>>2] = $112;
   $117 = $1;
   $118 = HEAP32[$117>>2]|0;
   $119 = (($118) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $121 = $1;
   FUNCTION_TABLE_vii[$120 & 511]($121,-1);
   $122 = $1;
   $123 = (($122) + 464|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (($124) + 24|0);
   HEAP32[$125>>2] = 0;
  }
  $126 = $c;
  $127 = $1;
  $128 = (($127) + 440|0);
  HEAP32[$128>>2] = $126;
  $129 = $next_input_byte;
  $130 = $datasrc;
  HEAP32[$130>>2] = $129;
  $131 = $bytes_in_buffer;
  $132 = $datasrc;
  $133 = (($132) + 4|0);
  HEAP32[$133>>2] = $131;
  $0 = 1;
  $134 = $0;
  STACKTOP = sp;return ($134|0);
 }
 return 0|0;
}
function _jinit_marker_reader($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $marker = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,0,172)|0);
 $marker = $6;
 $7 = $marker;
 $8 = $0;
 $9 = (($8) + 464|0);
 HEAP32[$9>>2] = $7;
 $10 = $marker;
 HEAP32[$10>>2] = 216;
 $11 = $marker;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 217;
 $13 = $marker;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 218;
 $15 = $marker;
 $16 = (($15) + 28|0);
 HEAP32[$16>>2] = 219;
 $17 = $marker;
 $18 = (($17) + 96|0);
 HEAP32[$18>>2] = 0;
 $i = 0;
 while(1) {
  $19 = $i;
  $20 = ($19|0)<(16);
  if (!($20)) {
   break;
  }
  $21 = $i;
  $22 = $marker;
  $23 = (($22) + 32|0);
  $24 = (($23) + ($21<<2)|0);
  HEAP32[$24>>2] = 219;
  $25 = $i;
  $26 = $marker;
  $27 = (($26) + 100|0);
  $28 = (($27) + ($25<<2)|0);
  HEAP32[$28>>2] = 0;
  $29 = $i;
  $30 = (($29) + 1)|0;
  $i = $30;
 }
 $31 = $marker;
 $32 = (($31) + 32|0);
 HEAP32[$32>>2] = 220;
 $33 = $marker;
 $34 = (($33) + 32|0);
 $35 = (($34) + 56|0);
 HEAP32[$35>>2] = 220;
 $36 = $0;
 _reset_marker_reader($36);
 STACKTOP = sp;return;
}
function _reset_marker_reader($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $marker = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 464|0);
 $3 = HEAP32[$2>>2]|0;
 $marker = $3;
 $4 = $0;
 $5 = (($4) + 216|0);
 HEAP32[$5>>2] = 0;
 $6 = $0;
 $7 = (($6) + 144|0);
 HEAP32[$7>>2] = 0;
 $8 = $0;
 $9 = (($8) + 440|0);
 HEAP32[$9>>2] = 0;
 $10 = $marker;
 $11 = (($10) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = $marker;
 $13 = (($12) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = $marker;
 $15 = (($14) + 24|0);
 HEAP32[$15>>2] = 0;
 $16 = $marker;
 $17 = (($16) + 164|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return;
}
function _read_markers($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $cinfo;
 L1: while(1) {
  $2 = $1;
  $3 = (($2) + 440|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0);
  if ($5) {
   $6 = $1;
   $7 = (($6) + 464|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($8) + 12|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)!=(0);
   if ($11) {
    $15 = $1;
    $16 = (_next_marker($15)|0);
    $17 = ($16|0)!=(0);
    if (!($17)) {
     label = 8;
     break;
    }
   } else {
    $12 = $1;
    $13 = (_first_marker($12)|0);
    $14 = ($13|0)!=(0);
    if (!($14)) {
     label = 5;
     break;
    }
   }
  }
  $18 = $1;
  $19 = (($18) + 440|0);
  $20 = HEAP32[$19>>2]|0;
  do {
   switch ($20|0) {
   case 218:  {
    label = 31;
    break L1;
    break;
   }
   case 192:  {
    $24 = $1;
    $25 = (_get_sof($24,1,0,0)|0);
    $26 = ($25|0)!=(0);
    if (!($26)) {
     label = 16;
     break L1;
    }
    break;
   }
   case 204:  {
    $67 = $1;
    $68 = (_get_dac($67)|0);
    $69 = ($68|0)!=(0);
    if (!($69)) {
     label = 36;
     break L1;
    }
    break;
   }
   case 202:  {
    $36 = $1;
    $37 = (_get_sof($36,0,1,1)|0);
    $38 = ($37|0)!=(0);
    if (!($38)) {
     label = 28;
     break L1;
    }
    break;
   }
   case 194:  {
    $30 = $1;
    $31 = (_get_sof($30,0,1,0)|0);
    $32 = ($31|0)!=(0);
    if (!($32)) {
     label = 22;
     break L1;
    }
    break;
   }
   case 196:  {
    $70 = $1;
    $71 = (_get_dht($70)|0);
    $72 = ($71|0)!=(0);
    if (!($72)) {
     label = 39;
     break L1;
    }
    break;
   }
   case 239: case 238: case 237: case 236: case 235: case 234: case 233: case 232: case 231: case 230: case 229: case 228: case 227: case 226: case 225: case 224:  {
    $82 = $1;
    $83 = (($82) + 440|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) - 224)|0;
    $86 = $1;
    $87 = (($86) + 464|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = (($88) + 32|0);
    $90 = (($89) + ($85<<2)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = $1;
    $93 = (FUNCTION_TABLE_ii[$91 & 255]($92)|0);
    $94 = ($93|0)!=(0);
    if (!($94)) {
     label = 51;
     break L1;
    }
    break;
   }
   case 216:  {
    $21 = $1;
    $22 = (_get_soi($21)|0);
    $23 = ($22|0)!=(0);
    if (!($23)) {
     label = 13;
     break L1;
    }
    break;
   }
   case 217:  {
    label = 34;
    break L1;
    break;
   }
   case 248:  {
    $79 = $1;
    $80 = (_get_lse($79)|0);
    $81 = ($80|0)!=(0);
    if (!($81)) {
     label = 48;
     break L1;
    }
    break;
   }
   case 193:  {
    $27 = $1;
    $28 = (_get_sof($27,0,0,0)|0);
    $29 = ($28|0)!=(0);
    if (!($29)) {
     label = 19;
     break L1;
    }
    break;
   }
   case 254:  {
    $95 = $1;
    $96 = (($95) + 464|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + 28|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = $1;
    $101 = (FUNCTION_TABLE_ii[$99 & 255]($100)|0);
    $102 = ($101|0)!=(0);
    if (!($102)) {
     label = 54;
     break L1;
    }
    break;
   }
   case 1: case 215: case 214: case 213: case 212: case 211: case 210: case 209: case 208:  {
    $103 = $1;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + 20|0);
    HEAP32[$105>>2] = 94;
    $106 = $1;
    $107 = (($106) + 440|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = $1;
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + 24|0);
    HEAP32[$111>>2] = $108;
    $112 = $1;
    $113 = HEAP32[$112>>2]|0;
    $114 = (($113) + 4|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = $1;
    FUNCTION_TABLE_vii[$115 & 511]($116,1);
    break;
   }
   case 207: case 206: case 205: case 203: case 200: case 199: case 198: case 197: case 195:  {
    $39 = $1;
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 20|0);
    HEAP32[$41>>2] = 63;
    $42 = $1;
    $43 = (($42) + 440|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = $1;
    $46 = HEAP32[$45>>2]|0;
    $47 = (($46) + 24|0);
    HEAP32[$47>>2] = $44;
    $48 = $1;
    $49 = HEAP32[$48>>2]|0;
    $50 = HEAP32[$49>>2]|0;
    $51 = $1;
    FUNCTION_TABLE_vi[$50 & 511]($51);
    break;
   }
   case 201:  {
    $33 = $1;
    $34 = (_get_sof($33,0,0,1)|0);
    $35 = ($34|0)!=(0);
    if (!($35)) {
     label = 25;
     break L1;
    }
    break;
   }
   case 221:  {
    $76 = $1;
    $77 = (_get_dri($76)|0);
    $78 = ($77|0)!=(0);
    if (!($78)) {
     label = 45;
     break L1;
    }
    break;
   }
   case 220:  {
    $117 = $1;
    $118 = (_skip_variable($117)|0);
    $119 = ($118|0)!=(0);
    if (!($119)) {
     label = 58;
     break L1;
    }
    break;
   }
   case 219:  {
    $73 = $1;
    $74 = (_get_dqt($73)|0);
    $75 = ($74|0)!=(0);
    if (!($75)) {
     label = 42;
     break L1;
    }
    break;
   }
   default: {
    $120 = $1;
    $121 = HEAP32[$120>>2]|0;
    $122 = (($121) + 20|0);
    HEAP32[$122>>2] = 70;
    $123 = $1;
    $124 = (($123) + 440|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = $1;
    $127 = HEAP32[$126>>2]|0;
    $128 = (($127) + 24|0);
    HEAP32[$128>>2] = $125;
    $129 = $1;
    $130 = HEAP32[$129>>2]|0;
    $131 = HEAP32[$130>>2]|0;
    $132 = $1;
    FUNCTION_TABLE_vi[$131 & 511]($132);
   }
   }
  } while(0);
  $133 = $1;
  $134 = (($133) + 440|0);
  HEAP32[$134>>2] = 0;
 }
 switch (label|0) {
  case 5: {
   $0 = 0;
   break;
  }
  case 8: {
   $0 = 0;
   break;
  }
  case 13: {
   $0 = 0;
   break;
  }
  case 16: {
   $0 = 0;
   break;
  }
  case 19: {
   $0 = 0;
   break;
  }
  case 22: {
   $0 = 0;
   break;
  }
  case 25: {
   $0 = 0;
   break;
  }
  case 28: {
   $0 = 0;
   break;
  }
  case 31: {
   $52 = $1;
   $53 = (_get_sos($52)|0);
   $54 = ($53|0)!=(0);
   if ($54) {
    $55 = $1;
    $56 = (($55) + 440|0);
    HEAP32[$56>>2] = 0;
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
   break;
  }
  case 34: {
   $57 = $1;
   $58 = HEAP32[$57>>2]|0;
   $59 = (($58) + 20|0);
   HEAP32[$59>>2] = 87;
   $60 = $1;
   $61 = HEAP32[$60>>2]|0;
   $62 = (($61) + 4|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $1;
   FUNCTION_TABLE_vii[$63 & 511]($64,1);
   $65 = $1;
   $66 = (($65) + 440|0);
   HEAP32[$66>>2] = 0;
   $0 = 2;
   break;
  }
  case 36: {
   $0 = 0;
   break;
  }
  case 39: {
   $0 = 0;
   break;
  }
  case 42: {
   $0 = 0;
   break;
  }
  case 45: {
   $0 = 0;
   break;
  }
  case 48: {
   $0 = 0;
   break;
  }
  case 51: {
   $0 = 0;
   break;
  }
  case 54: {
   $0 = 0;
   break;
  }
  case 58: {
   $0 = 0;
   break;
  }
 }
 $135 = $0;
 STACKTOP = sp;return ($135|0);
}
function _read_restart_marker($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 440|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $6 = $1;
   $7 = (_next_marker($6)|0);
   $8 = ($7|0)!=(0);
   if ($8) {
    break;
   }
   $0 = 0;
   $61 = $0;
   STACKTOP = sp;return ($61|0);
  }
 } while(0);
 $9 = $1;
 $10 = (($9) + 440|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $1;
 $13 = (($12) + 464|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (208 + ($16))|0;
 $18 = ($11|0)==($17|0);
 do {
  if ($18) {
   $19 = $1;
   $20 = HEAP32[$19>>2]|0;
   $21 = (($20) + 20|0);
   HEAP32[$21>>2] = 100;
   $22 = $1;
   $23 = (($22) + 464|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + 20|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 24|0);
   HEAP32[$29>>2] = $26;
   $30 = $1;
   $31 = HEAP32[$30>>2]|0;
   $32 = (($31) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $1;
   FUNCTION_TABLE_vii[$33 & 511]($34,3);
   $35 = $1;
   $36 = (($35) + 440|0);
   HEAP32[$36>>2] = 0;
  } else {
   $37 = $1;
   $38 = (($37) + 24|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + 20|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $1;
   $43 = $1;
   $44 = (($43) + 464|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = (($45) + 20|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (FUNCTION_TABLE_iii[$41 & 255]($42,$47)|0);
   $49 = ($48|0)!=(0);
   if ($49) {
    break;
   }
   $0 = 0;
   $61 = $0;
   STACKTOP = sp;return ($61|0);
  }
 } while(0);
 $50 = $1;
 $51 = (($50) + 464|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) + 20|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 1)|0;
 $56 = $55 & 7;
 $57 = $1;
 $58 = (($57) + 464|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + 20|0);
 HEAP32[$60>>2] = $56;
 $0 = 1;
 $61 = $0;
 STACKTOP = sp;return ($61|0);
}
function _skip_variable($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $bytes_in_buffer = 0, $datasrc = 0, $length = 0, $next_input_byte = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $datasrc = $4;
 $5 = $datasrc;
 $6 = HEAP32[$5>>2]|0;
 $next_input_byte = $6;
 $7 = $datasrc;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $bytes_in_buffer = $9;
 $10 = $bytes_in_buffer;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = $datasrc;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (FUNCTION_TABLE_ii[$14 & 255]($15)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $datasrc;
    $19 = HEAP32[$18>>2]|0;
    $next_input_byte = $19;
    $20 = $datasrc;
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $bytes_in_buffer = $22;
    break;
   }
   $0 = 0;
   $86 = $0;
   STACKTOP = sp;return ($86|0);
  }
 } while(0);
 $23 = $bytes_in_buffer;
 $24 = (($23) + -1)|0;
 $bytes_in_buffer = $24;
 $25 = $next_input_byte;
 $26 = (($25) + 1|0);
 $next_input_byte = $26;
 $27 = HEAP8[$25>>0]|0;
 $28 = $27&255;
 $29 = $28 << 8;
 $length = $29;
 $30 = $bytes_in_buffer;
 $31 = ($30|0)==(0);
 do {
  if ($31) {
   $32 = $datasrc;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $1;
   $36 = (FUNCTION_TABLE_ii[$34 & 255]($35)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $datasrc;
    $39 = HEAP32[$38>>2]|0;
    $next_input_byte = $39;
    $40 = $datasrc;
    $41 = (($40) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $bytes_in_buffer = $42;
    break;
   }
   $0 = 0;
   $86 = $0;
   STACKTOP = sp;return ($86|0);
  }
 } while(0);
 $43 = $bytes_in_buffer;
 $44 = (($43) + -1)|0;
 $bytes_in_buffer = $44;
 $45 = $next_input_byte;
 $46 = (($45) + 1|0);
 $next_input_byte = $46;
 $47 = HEAP8[$45>>0]|0;
 $48 = $47&255;
 $49 = $length;
 $50 = (($49) + ($48))|0;
 $length = $50;
 $51 = $length;
 $52 = (($51) - 2)|0;
 $length = $52;
 $53 = $1;
 $54 = HEAP32[$53>>2]|0;
 $55 = (($54) + 20|0);
 HEAP32[$55>>2] = 93;
 $56 = $1;
 $57 = (($56) + 440|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $1;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 24|0);
 HEAP32[$61>>2] = $58;
 $62 = $length;
 $63 = $1;
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + 24|0);
 $66 = (($65) + 4|0);
 HEAP32[$66>>2] = $62;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $1;
 FUNCTION_TABLE_vii[$70 & 511]($71,1);
 $72 = $next_input_byte;
 $73 = $datasrc;
 HEAP32[$73>>2] = $72;
 $74 = $bytes_in_buffer;
 $75 = $datasrc;
 $76 = (($75) + 4|0);
 HEAP32[$76>>2] = $74;
 $77 = $length;
 $78 = ($77|0)>(0);
 if ($78) {
  $79 = $1;
  $80 = (($79) + 24|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $1;
  $85 = $length;
  FUNCTION_TABLE_vii[$83 & 511]($84,$85);
 }
 $0 = 1;
 $86 = $0;
 STACKTOP = sp;return ($86|0);
}
function _get_interesting_appn($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $b = 0, $bytes_in_buffer = 0, $datasrc = 0, $i = 0, $length = 0, $next_input_byte = 0, $numtoread = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $b = sp + 32|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $datasrc = $4;
 $5 = $datasrc;
 $6 = HEAP32[$5>>2]|0;
 $next_input_byte = $6;
 $7 = $datasrc;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $bytes_in_buffer = $9;
 $10 = $bytes_in_buffer;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = $datasrc;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (FUNCTION_TABLE_ii[$14 & 255]($15)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $datasrc;
    $19 = HEAP32[$18>>2]|0;
    $next_input_byte = $19;
    $20 = $datasrc;
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $bytes_in_buffer = $22;
    break;
   }
   $0 = 0;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  }
 } while(0);
 $23 = $bytes_in_buffer;
 $24 = (($23) + -1)|0;
 $bytes_in_buffer = $24;
 $25 = $next_input_byte;
 $26 = (($25) + 1|0);
 $next_input_byte = $26;
 $27 = HEAP8[$25>>0]|0;
 $28 = $27&255;
 $29 = $28 << 8;
 $length = $29;
 $30 = $bytes_in_buffer;
 $31 = ($30|0)==(0);
 do {
  if ($31) {
   $32 = $datasrc;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $1;
   $36 = (FUNCTION_TABLE_ii[$34 & 255]($35)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $datasrc;
    $39 = HEAP32[$38>>2]|0;
    $next_input_byte = $39;
    $40 = $datasrc;
    $41 = (($40) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $bytes_in_buffer = $42;
    break;
   }
   $0 = 0;
   $122 = $0;
   STACKTOP = sp;return ($122|0);
  }
 } while(0);
 $43 = $bytes_in_buffer;
 $44 = (($43) + -1)|0;
 $bytes_in_buffer = $44;
 $45 = $next_input_byte;
 $46 = (($45) + 1|0);
 $next_input_byte = $46;
 $47 = HEAP8[$45>>0]|0;
 $48 = $47&255;
 $49 = $length;
 $50 = (($49) + ($48))|0;
 $length = $50;
 $51 = $length;
 $52 = (($51) - 2)|0;
 $length = $52;
 $53 = $length;
 $54 = ($53|0)>=(14);
 if ($54) {
  $numtoread = 14;
 } else {
  $55 = $length;
  $56 = ($55|0)>(0);
  if ($56) {
   $57 = $length;
   $numtoread = $57;
  } else {
   $numtoread = 0;
  }
 }
 $i = 0;
 while(1) {
  $58 = $i;
  $59 = $numtoread;
  $60 = ($58>>>0)<($59>>>0);
  if (!($60)) {
   break;
  }
  $61 = $bytes_in_buffer;
  $62 = ($61|0)==(0);
  if ($62) {
   $63 = $datasrc;
   $64 = (($63) + 12|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $1;
   $67 = (FUNCTION_TABLE_ii[$65 & 255]($66)|0);
   $68 = ($67|0)!=(0);
   if (!($68)) {
    label = 22;
    break;
   }
   $69 = $datasrc;
   $70 = HEAP32[$69>>2]|0;
   $next_input_byte = $70;
   $71 = $datasrc;
   $72 = (($71) + 4|0);
   $73 = HEAP32[$72>>2]|0;
   $bytes_in_buffer = $73;
  }
  $74 = $bytes_in_buffer;
  $75 = (($74) + -1)|0;
  $bytes_in_buffer = $75;
  $76 = $next_input_byte;
  $77 = (($76) + 1|0);
  $next_input_byte = $77;
  $78 = HEAP8[$76>>0]|0;
  $79 = $i;
  $80 = (($b) + ($79)|0);
  HEAP8[$80>>0] = $78;
  $81 = $i;
  $82 = (($81) + 1)|0;
  $i = $82;
 }
 if ((label|0) == 22) {
  $0 = 0;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 $83 = $numtoread;
 $84 = $length;
 $85 = (($84) - ($83))|0;
 $length = $85;
 $86 = $1;
 $87 = (($86) + 440|0);
 $88 = HEAP32[$87>>2]|0;
 if ((($88|0) == 238)) {
  $92 = $1;
  $93 = $numtoread;
  $94 = $length;
  _examine_app14($92,$b,$93,$94);
 } else if ((($88|0) == 224)) {
  $89 = $1;
  $90 = $numtoread;
  $91 = $length;
  _examine_app0($89,$b,$90,$91);
 } else {
  $95 = $1;
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 20|0);
  HEAP32[$97>>2] = 70;
  $98 = $1;
  $99 = (($98) + 440|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $1;
  $102 = HEAP32[$101>>2]|0;
  $103 = (($102) + 24|0);
  HEAP32[$103>>2] = $100;
  $104 = $1;
  $105 = HEAP32[$104>>2]|0;
  $106 = HEAP32[$105>>2]|0;
  $107 = $1;
  FUNCTION_TABLE_vi[$106 & 511]($107);
 }
 $108 = $next_input_byte;
 $109 = $datasrc;
 HEAP32[$109>>2] = $108;
 $110 = $bytes_in_buffer;
 $111 = $datasrc;
 $112 = (($111) + 4|0);
 HEAP32[$112>>2] = $110;
 $113 = $length;
 $114 = ($113|0)>(0);
 if ($114) {
  $115 = $1;
  $116 = (($115) + 24|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = (($117) + 16|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $1;
  $121 = $length;
  FUNCTION_TABLE_vii[$119 & 511]($120,$121);
 }
 $0 = 1;
 $122 = $0;
 STACKTOP = sp;return ($122|0);
}
function _jpeg_save_markers($cinfo,$marker_code,$length_limit) {
 $cinfo = $cinfo|0;
 $marker_code = $marker_code|0;
 $length_limit = $length_limit|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $marker = 0, $maxlength = 0, $processor = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $marker_code;
 $2 = $length_limit;
 $3 = $0;
 $4 = (($3) + 464|0);
 $5 = HEAP32[$4>>2]|0;
 $marker = $5;
 $6 = $0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 48|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($10) - 20)|0;
 $maxlength = $11;
 $12 = $2;
 $13 = $maxlength;
 $14 = ($12|0)>($13|0);
 if ($14) {
  $15 = $maxlength;
  $2 = $15;
 }
 $16 = $2;
 $17 = ($16|0)!=(0);
 if ($17) {
  $processor = 221;
  $18 = $1;
  $19 = ($18|0)==(224);
  if ($19) {
   $20 = $2;
   $21 = ($20>>>0)<(14);
   if ($21) {
    $2 = 14;
   } else {
    label = 7;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   $22 = $1;
   $23 = ($22|0)==(238);
   if ($23) {
    $24 = $2;
    $25 = ($24>>>0)<(12);
    if ($25) {
     $2 = 12;
    }
   }
  }
 } else {
  $processor = 219;
  $26 = $1;
  $27 = ($26|0)==(224);
  if ($27) {
   label = 14;
  } else {
   $28 = $1;
   $29 = ($28|0)==(238);
   if ($29) {
    label = 14;
   }
  }
  if ((label|0) == 14) {
   $processor = 220;
  }
 }
 $30 = $1;
 $31 = ($30|0)==(254);
 if ($31) {
  $32 = $processor;
  $33 = $marker;
  $34 = (($33) + 28|0);
  HEAP32[$34>>2] = $32;
  $35 = $2;
  $36 = $marker;
  $37 = (($36) + 96|0);
  HEAP32[$37>>2] = $35;
  STACKTOP = sp;return;
 }
 $38 = $1;
 $39 = ($38|0)>=(224);
 if ($39) {
  $40 = $1;
  $41 = ($40|0)<=(239);
  if ($41) {
   $42 = $processor;
   $43 = $1;
   $44 = (($43) - 224)|0;
   $45 = $marker;
   $46 = (($45) + 32|0);
   $47 = (($46) + ($44<<2)|0);
   HEAP32[$47>>2] = $42;
   $48 = $2;
   $49 = $1;
   $50 = (($49) - 224)|0;
   $51 = $marker;
   $52 = (($51) + 100|0);
   $53 = (($52) + ($50<<2)|0);
   HEAP32[$53>>2] = $48;
  } else {
   label = 21;
  }
 } else {
  label = 21;
 }
 if ((label|0) == 21) {
  $54 = $0;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 20|0);
  HEAP32[$56>>2] = 70;
  $57 = $1;
  $58 = $0;
  $59 = HEAP32[$58>>2]|0;
  $60 = (($59) + 24|0);
  HEAP32[$60>>2] = $57;
  $61 = $0;
  $62 = HEAP32[$61>>2]|0;
  $63 = HEAP32[$62>>2]|0;
  $64 = $0;
  FUNCTION_TABLE_vi[$63 & 511]($64);
 }
 STACKTOP = sp;return;
}
function _save_marker($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $bytes_in_buffer = 0, $bytes_read = 0, $cur_marker = 0, $data = 0, $data_length = 0, $datasrc = 0, $length = 0, $limit = 0, $marker = 0, $next_input_byte = 0, $prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 464|0);
 $4 = HEAP32[$3>>2]|0;
 $marker = $4;
 $5 = $marker;
 $6 = (($5) + 164|0);
 $7 = HEAP32[$6>>2]|0;
 $cur_marker = $7;
 $length = 0;
 $8 = $1;
 $9 = (($8) + 24|0);
 $10 = HEAP32[$9>>2]|0;
 $datasrc = $10;
 $11 = $datasrc;
 $12 = HEAP32[$11>>2]|0;
 $next_input_byte = $12;
 $13 = $datasrc;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $bytes_in_buffer = $15;
 $16 = $cur_marker;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $bytes_in_buffer;
  $19 = ($18|0)==(0);
  do {
   if ($19) {
    $20 = $datasrc;
    $21 = (($20) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $1;
    $24 = (FUNCTION_TABLE_ii[$22 & 255]($23)|0);
    $25 = ($24|0)!=(0);
    if ($25) {
     $26 = $datasrc;
     $27 = HEAP32[$26>>2]|0;
     $next_input_byte = $27;
     $28 = $datasrc;
     $29 = (($28) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $bytes_in_buffer = $30;
     break;
    }
    $0 = 0;
    $238 = $0;
    STACKTOP = sp;return ($238|0);
   }
  } while(0);
  $31 = $bytes_in_buffer;
  $32 = (($31) + -1)|0;
  $bytes_in_buffer = $32;
  $33 = $next_input_byte;
  $34 = (($33) + 1|0);
  $next_input_byte = $34;
  $35 = HEAP8[$33>>0]|0;
  $36 = $35&255;
  $37 = $36 << 8;
  $length = $37;
  $38 = $bytes_in_buffer;
  $39 = ($38|0)==(0);
  do {
   if ($39) {
    $40 = $datasrc;
    $41 = (($40) + 12|0);
    $42 = HEAP32[$41>>2]|0;
    $43 = $1;
    $44 = (FUNCTION_TABLE_ii[$42 & 255]($43)|0);
    $45 = ($44|0)!=(0);
    if ($45) {
     $46 = $datasrc;
     $47 = HEAP32[$46>>2]|0;
     $next_input_byte = $47;
     $48 = $datasrc;
     $49 = (($48) + 4|0);
     $50 = HEAP32[$49>>2]|0;
     $bytes_in_buffer = $50;
     break;
    }
    $0 = 0;
    $238 = $0;
    STACKTOP = sp;return ($238|0);
   }
  } while(0);
  $51 = $bytes_in_buffer;
  $52 = (($51) + -1)|0;
  $bytes_in_buffer = $52;
  $53 = $next_input_byte;
  $54 = (($53) + 1|0);
  $next_input_byte = $54;
  $55 = HEAP8[$53>>0]|0;
  $56 = $55&255;
  $57 = $length;
  $58 = (($57) + ($56))|0;
  $length = $58;
  $59 = $length;
  $60 = (($59) - 2)|0;
  $length = $60;
  $61 = $length;
  $62 = ($61|0)>=(0);
  if ($62) {
   $63 = $1;
   $64 = (($63) + 440|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)==(254);
   if ($66) {
    $67 = $marker;
    $68 = (($67) + 96|0);
    $69 = HEAP32[$68>>2]|0;
    $limit = $69;
   } else {
    $70 = $1;
    $71 = (($70) + 440|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) - 224)|0;
    $74 = $marker;
    $75 = (($74) + 100|0);
    $76 = (($75) + ($73<<2)|0);
    $77 = HEAP32[$76>>2]|0;
    $limit = $77;
   }
   $78 = $length;
   $79 = $limit;
   $80 = ($78>>>0)<($79>>>0);
   if ($80) {
    $81 = $length;
    $limit = $81;
   }
   $82 = $1;
   $83 = (($82) + 4|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $1;
   $88 = $limit;
   $89 = (20 + ($88))|0;
   $90 = (FUNCTION_TABLE_iiii[$86 & 511]($87,1,$89)|0);
   $cur_marker = $90;
   $91 = $cur_marker;
   HEAP32[$91>>2] = 0;
   $92 = $1;
   $93 = (($92) + 440|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $94&255;
   $96 = $cur_marker;
   $97 = (($96) + 4|0);
   HEAP8[$97>>0] = $95;
   $98 = $length;
   $99 = $cur_marker;
   $100 = (($99) + 8|0);
   HEAP32[$100>>2] = $98;
   $101 = $limit;
   $102 = $cur_marker;
   $103 = (($102) + 12|0);
   HEAP32[$103>>2] = $101;
   $104 = $cur_marker;
   $105 = (($104) + 20|0);
   $106 = $cur_marker;
   $107 = (($106) + 16|0);
   HEAP32[$107>>2] = $105;
   $data = $105;
   $108 = $cur_marker;
   $109 = $marker;
   $110 = (($109) + 164|0);
   HEAP32[$110>>2] = $108;
   $111 = $marker;
   $112 = (($111) + 168|0);
   HEAP32[$112>>2] = 0;
   $bytes_read = 0;
   $113 = $limit;
   $data_length = $113;
  } else {
   $data_length = 0;
   $bytes_read = 0;
   $data = 0;
  }
 } else {
  $114 = $marker;
  $115 = (($114) + 168|0);
  $116 = HEAP32[$115>>2]|0;
  $bytes_read = $116;
  $117 = $cur_marker;
  $118 = (($117) + 12|0);
  $119 = HEAP32[$118>>2]|0;
  $data_length = $119;
  $120 = $cur_marker;
  $121 = (($120) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $bytes_read;
  $124 = (($122) + ($123)|0);
  $data = $124;
 }
 while(1) {
  $125 = $bytes_read;
  $126 = $data_length;
  $127 = ($125>>>0)<($126>>>0);
  if (!($127)) {
   break;
  }
  $128 = $next_input_byte;
  $129 = $datasrc;
  HEAP32[$129>>2] = $128;
  $130 = $bytes_in_buffer;
  $131 = $datasrc;
  $132 = (($131) + 4|0);
  HEAP32[$132>>2] = $130;
  $133 = $bytes_read;
  $134 = $marker;
  $135 = (($134) + 168|0);
  HEAP32[$135>>2] = $133;
  $136 = $bytes_in_buffer;
  $137 = ($136|0)==(0);
  if ($137) {
   $138 = $datasrc;
   $139 = (($138) + 12|0);
   $140 = HEAP32[$139>>2]|0;
   $141 = $1;
   $142 = (FUNCTION_TABLE_ii[$140 & 255]($141)|0);
   $143 = ($142|0)!=(0);
   if (!($143)) {
    label = 26;
    break;
   }
   $144 = $datasrc;
   $145 = HEAP32[$144>>2]|0;
   $next_input_byte = $145;
   $146 = $datasrc;
   $147 = (($146) + 4|0);
   $148 = HEAP32[$147>>2]|0;
   $bytes_in_buffer = $148;
  }
  while(1) {
   $149 = $bytes_read;
   $150 = $data_length;
   $151 = ($149>>>0)<($150>>>0);
   if ($151) {
    $152 = $bytes_in_buffer;
    $153 = ($152>>>0)>(0);
    $239 = $153;
   } else {
    $239 = 0;
   }
   if (!($239)) {
    break;
   }
   $154 = $next_input_byte;
   $155 = (($154) + 1|0);
   $next_input_byte = $155;
   $156 = HEAP8[$154>>0]|0;
   $157 = $data;
   $158 = (($157) + 1|0);
   $data = $158;
   HEAP8[$157>>0] = $156;
   $159 = $bytes_in_buffer;
   $160 = (($159) + -1)|0;
   $bytes_in_buffer = $160;
   $161 = $bytes_read;
   $162 = (($161) + 1)|0;
   $bytes_read = $162;
  }
 }
 if ((label|0) == 26) {
  $0 = 0;
  $238 = $0;
  STACKTOP = sp;return ($238|0);
 }
 $163 = $cur_marker;
 $164 = ($163|0)!=(0|0);
 if ($164) {
  $165 = $1;
  $166 = (($165) + 312|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($167|0)==(0|0);
  if ($168) {
   $169 = $cur_marker;
   $170 = $1;
   $171 = (($170) + 312|0);
   HEAP32[$171>>2] = $169;
  } else {
   $172 = $1;
   $173 = (($172) + 312|0);
   $174 = HEAP32[$173>>2]|0;
   $prev = $174;
   while(1) {
    $175 = $prev;
    $176 = HEAP32[$175>>2]|0;
    $177 = ($176|0)!=(0|0);
    if (!($177)) {
     break;
    }
    $178 = $prev;
    $179 = HEAP32[$178>>2]|0;
    $prev = $179;
   }
   $180 = $cur_marker;
   $181 = $prev;
   HEAP32[$181>>2] = $180;
  }
  $182 = $cur_marker;
  $183 = (($182) + 16|0);
  $184 = HEAP32[$183>>2]|0;
  $data = $184;
  $185 = $cur_marker;
  $186 = (($185) + 8|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $data_length;
  $189 = (($187) - ($188))|0;
  $length = $189;
 }
 $190 = $marker;
 $191 = (($190) + 164|0);
 HEAP32[$191>>2] = 0;
 $192 = $1;
 $193 = (($192) + 440|0);
 $194 = HEAP32[$193>>2]|0;
 if ((($194|0) == 238)) {
  $199 = $1;
  $200 = $data;
  $201 = $data_length;
  $202 = $length;
  _examine_app14($199,$200,$201,$202);
 } else if ((($194|0) == 224)) {
  $195 = $1;
  $196 = $data;
  $197 = $data_length;
  $198 = $length;
  _examine_app0($195,$196,$197,$198);
 } else {
  $203 = $1;
  $204 = HEAP32[$203>>2]|0;
  $205 = (($204) + 20|0);
  HEAP32[$205>>2] = 93;
  $206 = $1;
  $207 = (($206) + 440|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = $1;
  $210 = HEAP32[$209>>2]|0;
  $211 = (($210) + 24|0);
  HEAP32[$211>>2] = $208;
  $212 = $data_length;
  $213 = $length;
  $214 = (($212) + ($213))|0;
  $215 = $1;
  $216 = HEAP32[$215>>2]|0;
  $217 = (($216) + 24|0);
  $218 = (($217) + 4|0);
  HEAP32[$218>>2] = $214;
  $219 = $1;
  $220 = HEAP32[$219>>2]|0;
  $221 = (($220) + 4|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = $1;
  FUNCTION_TABLE_vii[$222 & 511]($223,1);
 }
 $224 = $next_input_byte;
 $225 = $datasrc;
 HEAP32[$225>>2] = $224;
 $226 = $bytes_in_buffer;
 $227 = $datasrc;
 $228 = (($227) + 4|0);
 HEAP32[$228>>2] = $226;
 $229 = $length;
 $230 = ($229|0)>(0);
 if ($230) {
  $231 = $1;
  $232 = (($231) + 24|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = (($233) + 16|0);
  $235 = HEAP32[$234>>2]|0;
  $236 = $1;
  $237 = $length;
  FUNCTION_TABLE_vii[$235 & 511]($236,$237);
 }
 $0 = 1;
 $238 = $0;
 STACKTOP = sp;return ($238|0);
}
function _examine_app0($cinfo,$data,$datalen,$remaining) {
 $cinfo = $cinfo|0;
 $data = $data|0;
 $datalen = $datalen|0;
 $remaining = $remaining|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_mp = 0, $totallen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $data;
 $2 = $datalen;
 $3 = $remaining;
 $4 = $2;
 $5 = $3;
 $6 = (($4) + ($5))|0;
 $totallen = $6;
 $7 = $2;
 $8 = ($7>>>0)>=(14);
 if ($8) {
  $9 = $1;
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = ($11|0)==(74);
  if ($12) {
   $13 = $1;
   $14 = (($13) + 1|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = ($16|0)==(70);
   if ($17) {
    $18 = $1;
    $19 = (($18) + 2|0);
    $20 = HEAP8[$19>>0]|0;
    $21 = $20&255;
    $22 = ($21|0)==(73);
    if ($22) {
     $23 = $1;
     $24 = (($23) + 3|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25&255;
     $27 = ($26|0)==(70);
     if ($27) {
      $28 = $1;
      $29 = (($28) + 4|0);
      $30 = HEAP8[$29>>0]|0;
      $31 = $30&255;
      $32 = ($31|0)==(0);
      if ($32) {
       $33 = $0;
       $34 = (($33) + 284|0);
       HEAP32[$34>>2] = 1;
       $35 = $1;
       $36 = (($35) + 5|0);
       $37 = HEAP8[$36>>0]|0;
       $38 = $0;
       $39 = (($38) + 288|0);
       HEAP8[$39>>0] = $37;
       $40 = $1;
       $41 = (($40) + 6|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = $0;
       $44 = (($43) + 289|0);
       HEAP8[$44>>0] = $42;
       $45 = $1;
       $46 = (($45) + 7|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = $0;
       $49 = (($48) + 290|0);
       HEAP8[$49>>0] = $47;
       $50 = $1;
       $51 = (($50) + 8|0);
       $52 = HEAP8[$51>>0]|0;
       $53 = $52&255;
       $54 = $53 << 8;
       $55 = $1;
       $56 = (($55) + 9|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = $57&255;
       $59 = (($54) + ($58))|0;
       $60 = $59&65535;
       $61 = $0;
       $62 = (($61) + 292|0);
       HEAP16[$62>>1] = $60;
       $63 = $1;
       $64 = (($63) + 10|0);
       $65 = HEAP8[$64>>0]|0;
       $66 = $65&255;
       $67 = $66 << 8;
       $68 = $1;
       $69 = (($68) + 11|0);
       $70 = HEAP8[$69>>0]|0;
       $71 = $70&255;
       $72 = (($67) + ($71))|0;
       $73 = $72&65535;
       $74 = $0;
       $75 = (($74) + 294|0);
       HEAP16[$75>>1] = $73;
       $76 = $0;
       $77 = (($76) + 288|0);
       $78 = HEAP8[$77>>0]|0;
       $79 = $78&255;
       $80 = ($79|0)!=(1);
       if ($80) {
        $81 = $0;
        $82 = (($81) + 288|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $85 = ($84|0)!=(2);
        if ($85) {
         $86 = $0;
         $87 = HEAP32[$86>>2]|0;
         $88 = (($87) + 20|0);
         HEAP32[$88>>2] = 122;
         $89 = $0;
         $90 = (($89) + 288|0);
         $91 = HEAP8[$90>>0]|0;
         $92 = $91&255;
         $93 = $0;
         $94 = HEAP32[$93>>2]|0;
         $95 = (($94) + 24|0);
         HEAP32[$95>>2] = $92;
         $96 = $0;
         $97 = (($96) + 289|0);
         $98 = HEAP8[$97>>0]|0;
         $99 = $98&255;
         $100 = $0;
         $101 = HEAP32[$100>>2]|0;
         $102 = (($101) + 24|0);
         $103 = (($102) + 4|0);
         HEAP32[$103>>2] = $99;
         $104 = $0;
         $105 = HEAP32[$104>>2]|0;
         $106 = (($105) + 4|0);
         $107 = HEAP32[$106>>2]|0;
         $108 = $0;
         FUNCTION_TABLE_vii[$107 & 511]($108,-1);
        }
       }
       $109 = $0;
       $110 = HEAP32[$109>>2]|0;
       $111 = (($110) + 24|0);
       $_mp = $111;
       $112 = $0;
       $113 = (($112) + 288|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = $114&255;
       $116 = $_mp;
       HEAP32[$116>>2] = $115;
       $117 = $0;
       $118 = (($117) + 289|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = $119&255;
       $121 = $_mp;
       $122 = (($121) + 4|0);
       HEAP32[$122>>2] = $120;
       $123 = $0;
       $124 = (($123) + 292|0);
       $125 = HEAP16[$124>>1]|0;
       $126 = $125&65535;
       $127 = $_mp;
       $128 = (($127) + 8|0);
       HEAP32[$128>>2] = $126;
       $129 = $0;
       $130 = (($129) + 294|0);
       $131 = HEAP16[$130>>1]|0;
       $132 = $131&65535;
       $133 = $_mp;
       $134 = (($133) + 12|0);
       HEAP32[$134>>2] = $132;
       $135 = $0;
       $136 = (($135) + 290|0);
       $137 = HEAP8[$136>>0]|0;
       $138 = $137&255;
       $139 = $_mp;
       $140 = (($139) + 16|0);
       HEAP32[$140>>2] = $138;
       $141 = $0;
       $142 = HEAP32[$141>>2]|0;
       $143 = (($142) + 20|0);
       HEAP32[$143>>2] = 89;
       $144 = $0;
       $145 = HEAP32[$144>>2]|0;
       $146 = (($145) + 4|0);
       $147 = HEAP32[$146>>2]|0;
       $148 = $0;
       FUNCTION_TABLE_vii[$147 & 511]($148,1);
       $149 = $1;
       $150 = (($149) + 12|0);
       $151 = HEAP8[$150>>0]|0;
       $152 = $151&255;
       $153 = $1;
       $154 = (($153) + 13|0);
       $155 = HEAP8[$154>>0]|0;
       $156 = $155&255;
       $157 = $152 | $156;
       $158 = ($157|0)!=(0);
       if ($158) {
        $159 = $0;
        $160 = HEAP32[$159>>2]|0;
        $161 = (($160) + 20|0);
        HEAP32[$161>>2] = 92;
        $162 = $1;
        $163 = (($162) + 12|0);
        $164 = HEAP8[$163>>0]|0;
        $165 = $164&255;
        $166 = $0;
        $167 = HEAP32[$166>>2]|0;
        $168 = (($167) + 24|0);
        HEAP32[$168>>2] = $165;
        $169 = $1;
        $170 = (($169) + 13|0);
        $171 = HEAP8[$170>>0]|0;
        $172 = $171&255;
        $173 = $0;
        $174 = HEAP32[$173>>2]|0;
        $175 = (($174) + 24|0);
        $176 = (($175) + 4|0);
        HEAP32[$176>>2] = $172;
        $177 = $0;
        $178 = HEAP32[$177>>2]|0;
        $179 = (($178) + 4|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = $0;
        FUNCTION_TABLE_vii[$180 & 511]($181,1);
       }
       $182 = $totallen;
       $183 = (($182) - 14)|0;
       $totallen = $183;
       $184 = $totallen;
       $185 = $1;
       $186 = (($185) + 12|0);
       $187 = HEAP8[$186>>0]|0;
       $188 = $187&255;
       $189 = $1;
       $190 = (($189) + 13|0);
       $191 = HEAP8[$190>>0]|0;
       $192 = $191&255;
       $193 = Math_imul($188, $192)|0;
       $194 = ($193*3)|0;
       $195 = ($184|0)!=($194|0);
       if ($195) {
        $196 = $0;
        $197 = HEAP32[$196>>2]|0;
        $198 = (($197) + 20|0);
        HEAP32[$198>>2] = 90;
        $199 = $totallen;
        $200 = $0;
        $201 = HEAP32[$200>>2]|0;
        $202 = (($201) + 24|0);
        HEAP32[$202>>2] = $199;
        $203 = $0;
        $204 = HEAP32[$203>>2]|0;
        $205 = (($204) + 4|0);
        $206 = HEAP32[$205>>2]|0;
        $207 = $0;
        FUNCTION_TABLE_vii[$206 & 511]($207,1);
       }
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $208 = $2;
 $209 = ($208>>>0)>=(6);
 if ($209) {
  $210 = $1;
  $211 = HEAP8[$210>>0]|0;
  $212 = $211&255;
  $213 = ($212|0)==(74);
  if ($213) {
   $214 = $1;
   $215 = (($214) + 1|0);
   $216 = HEAP8[$215>>0]|0;
   $217 = $216&255;
   $218 = ($217|0)==(70);
   if ($218) {
    $219 = $1;
    $220 = (($219) + 2|0);
    $221 = HEAP8[$220>>0]|0;
    $222 = $221&255;
    $223 = ($222|0)==(88);
    if ($223) {
     $224 = $1;
     $225 = (($224) + 3|0);
     $226 = HEAP8[$225>>0]|0;
     $227 = $226&255;
     $228 = ($227|0)==(88);
     if ($228) {
      $229 = $1;
      $230 = (($229) + 4|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = ($232|0)==(0);
      if ($233) {
       $234 = $1;
       $235 = (($234) + 5|0);
       $236 = HEAP8[$235>>0]|0;
       $237 = $236&255;
       if ((($237|0) == 16)) {
        $238 = $0;
        $239 = HEAP32[$238>>2]|0;
        $240 = (($239) + 20|0);
        HEAP32[$240>>2] = 110;
        $241 = $totallen;
        $242 = $0;
        $243 = HEAP32[$242>>2]|0;
        $244 = (($243) + 24|0);
        HEAP32[$244>>2] = $241;
        $245 = $0;
        $246 = HEAP32[$245>>2]|0;
        $247 = (($246) + 4|0);
        $248 = HEAP32[$247>>2]|0;
        $249 = $0;
        FUNCTION_TABLE_vii[$248 & 511]($249,1);
       } else if ((($237|0) == 19)) {
        $262 = $0;
        $263 = HEAP32[$262>>2]|0;
        $264 = (($263) + 20|0);
        HEAP32[$264>>2] = 112;
        $265 = $totallen;
        $266 = $0;
        $267 = HEAP32[$266>>2]|0;
        $268 = (($267) + 24|0);
        HEAP32[$268>>2] = $265;
        $269 = $0;
        $270 = HEAP32[$269>>2]|0;
        $271 = (($270) + 4|0);
        $272 = HEAP32[$271>>2]|0;
        $273 = $0;
        FUNCTION_TABLE_vii[$272 & 511]($273,1);
       } else if ((($237|0) == 17)) {
        $250 = $0;
        $251 = HEAP32[$250>>2]|0;
        $252 = (($251) + 20|0);
        HEAP32[$252>>2] = 111;
        $253 = $totallen;
        $254 = $0;
        $255 = HEAP32[$254>>2]|0;
        $256 = (($255) + 24|0);
        HEAP32[$256>>2] = $253;
        $257 = $0;
        $258 = HEAP32[$257>>2]|0;
        $259 = (($258) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $0;
        FUNCTION_TABLE_vii[$260 & 511]($261,1);
       } else {
        $274 = $0;
        $275 = HEAP32[$274>>2]|0;
        $276 = (($275) + 20|0);
        HEAP32[$276>>2] = 91;
        $277 = $1;
        $278 = (($277) + 5|0);
        $279 = HEAP8[$278>>0]|0;
        $280 = $279&255;
        $281 = $0;
        $282 = HEAP32[$281>>2]|0;
        $283 = (($282) + 24|0);
        HEAP32[$283>>2] = $280;
        $284 = $totallen;
        $285 = $0;
        $286 = HEAP32[$285>>2]|0;
        $287 = (($286) + 24|0);
        $288 = (($287) + 4|0);
        HEAP32[$288>>2] = $284;
        $289 = $0;
        $290 = HEAP32[$289>>2]|0;
        $291 = (($290) + 4|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $0;
        FUNCTION_TABLE_vii[$292 & 511]($293,1);
       }
      } else {
       label = 29;
      }
     } else {
      label = 29;
     }
    } else {
     label = 29;
    }
   } else {
    label = 29;
   }
  } else {
   label = 29;
  }
 } else {
  label = 29;
 }
 if ((label|0) == 29) {
  $294 = $0;
  $295 = HEAP32[$294>>2]|0;
  $296 = (($295) + 20|0);
  HEAP32[$296>>2] = 79;
  $297 = $totallen;
  $298 = $0;
  $299 = HEAP32[$298>>2]|0;
  $300 = (($299) + 24|0);
  HEAP32[$300>>2] = $297;
  $301 = $0;
  $302 = HEAP32[$301>>2]|0;
  $303 = (($302) + 4|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = $0;
  FUNCTION_TABLE_vii[$304 & 511]($305,1);
 }
 STACKTOP = sp;return;
}
function _examine_app14($cinfo,$data,$datalen,$remaining) {
 $cinfo = $cinfo|0;
 $data = $data|0;
 $datalen = $datalen|0;
 $remaining = $remaining|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_mp = 0, $flags0 = 0, $flags1 = 0, $transform = 0, $version = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $data;
 $2 = $datalen;
 $3 = $remaining;
 $4 = $2;
 $5 = ($4>>>0)>=(12);
 if ($5) {
  $6 = $1;
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = ($8|0)==(65);
  if ($9) {
   $10 = $1;
   $11 = (($10) + 1|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $14 = ($13|0)==(100);
   if ($14) {
    $15 = $1;
    $16 = (($15) + 2|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = ($18|0)==(111);
    if ($19) {
     $20 = $1;
     $21 = (($20) + 3|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = $22&255;
     $24 = ($23|0)==(98);
     if ($24) {
      $25 = $1;
      $26 = (($25) + 4|0);
      $27 = HEAP8[$26>>0]|0;
      $28 = $27&255;
      $29 = ($28|0)==(101);
      if ($29) {
       $30 = $1;
       $31 = (($30) + 5|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 << 8;
       $35 = $1;
       $36 = (($35) + 6|0);
       $37 = HEAP8[$36>>0]|0;
       $38 = $37&255;
       $39 = (($34) + ($38))|0;
       $version = $39;
       $40 = $1;
       $41 = (($40) + 7|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = $42&255;
       $44 = $43 << 8;
       $45 = $1;
       $46 = (($45) + 8|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = $47&255;
       $49 = (($44) + ($48))|0;
       $flags0 = $49;
       $50 = $1;
       $51 = (($50) + 9|0);
       $52 = HEAP8[$51>>0]|0;
       $53 = $52&255;
       $54 = $53 << 8;
       $55 = $1;
       $56 = (($55) + 10|0);
       $57 = HEAP8[$56>>0]|0;
       $58 = $57&255;
       $59 = (($54) + ($58))|0;
       $flags1 = $59;
       $60 = $1;
       $61 = (($60) + 11|0);
       $62 = HEAP8[$61>>0]|0;
       $63 = $62&255;
       $transform = $63;
       $64 = $0;
       $65 = HEAP32[$64>>2]|0;
       $66 = (($65) + 24|0);
       $_mp = $66;
       $67 = $version;
       $68 = $_mp;
       HEAP32[$68>>2] = $67;
       $69 = $flags0;
       $70 = $_mp;
       $71 = (($70) + 4|0);
       HEAP32[$71>>2] = $69;
       $72 = $flags1;
       $73 = $_mp;
       $74 = (($73) + 8|0);
       HEAP32[$74>>2] = $72;
       $75 = $transform;
       $76 = $_mp;
       $77 = (($76) + 12|0);
       HEAP32[$77>>2] = $75;
       $78 = $0;
       $79 = HEAP32[$78>>2]|0;
       $80 = (($79) + 20|0);
       HEAP32[$80>>2] = 78;
       $81 = $0;
       $82 = HEAP32[$81>>2]|0;
       $83 = (($82) + 4|0);
       $84 = HEAP32[$83>>2]|0;
       $85 = $0;
       FUNCTION_TABLE_vii[$84 & 511]($85,1);
       $86 = $0;
       $87 = (($86) + 296|0);
       HEAP32[$87>>2] = 1;
       $88 = $transform;
       $89 = $88&255;
       $90 = $0;
       $91 = (($90) + 300|0);
       HEAP8[$91>>0] = $89;
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $92 = $0;
 $93 = HEAP32[$92>>2]|0;
 $94 = (($93) + 20|0);
 HEAP32[$94>>2] = 80;
 $95 = $2;
 $96 = $3;
 $97 = (($95) + ($96))|0;
 $98 = $0;
 $99 = HEAP32[$98>>2]|0;
 $100 = (($99) + 24|0);
 HEAP32[$100>>2] = $97;
 $101 = $0;
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $0;
 FUNCTION_TABLE_vii[$104 & 511]($105,1);
 STACKTOP = sp;return;
}
function _first_marker($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $bytes_in_buffer = 0, $c = 0, $c2 = 0;
 var $datasrc = 0, $next_input_byte = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $datasrc = $4;
 $5 = $datasrc;
 $6 = HEAP32[$5>>2]|0;
 $next_input_byte = $6;
 $7 = $datasrc;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $bytes_in_buffer = $9;
 $10 = $bytes_in_buffer;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = $datasrc;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (FUNCTION_TABLE_ii[$14 & 255]($15)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $datasrc;
    $19 = HEAP32[$18>>2]|0;
    $next_input_byte = $19;
    $20 = $datasrc;
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $bytes_in_buffer = $22;
    break;
   }
   $0 = 0;
   $76 = $0;
   STACKTOP = sp;return ($76|0);
  }
 } while(0);
 $23 = $bytes_in_buffer;
 $24 = (($23) + -1)|0;
 $bytes_in_buffer = $24;
 $25 = $next_input_byte;
 $26 = (($25) + 1|0);
 $next_input_byte = $26;
 $27 = HEAP8[$25>>0]|0;
 $28 = $27&255;
 $c = $28;
 $29 = $bytes_in_buffer;
 $30 = ($29|0)==(0);
 do {
  if ($30) {
   $31 = $datasrc;
   $32 = (($31) + 12|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = $1;
   $35 = (FUNCTION_TABLE_ii[$33 & 255]($34)|0);
   $36 = ($35|0)!=(0);
   if ($36) {
    $37 = $datasrc;
    $38 = HEAP32[$37>>2]|0;
    $next_input_byte = $38;
    $39 = $datasrc;
    $40 = (($39) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $bytes_in_buffer = $41;
    break;
   }
   $0 = 0;
   $76 = $0;
   STACKTOP = sp;return ($76|0);
  }
 } while(0);
 $42 = $bytes_in_buffer;
 $43 = (($42) + -1)|0;
 $bytes_in_buffer = $43;
 $44 = $next_input_byte;
 $45 = (($44) + 1|0);
 $next_input_byte = $45;
 $46 = HEAP8[$44>>0]|0;
 $47 = $46&255;
 $c2 = $47;
 $48 = $c;
 $49 = ($48|0)!=(255);
 if ($49) {
  label = 15;
 } else {
  $50 = $c2;
  $51 = ($50|0)!=(216);
  if ($51) {
   label = 15;
  }
 }
 if ((label|0) == 15) {
  $52 = $1;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + 20|0);
  HEAP32[$54>>2] = 55;
  $55 = $c;
  $56 = $1;
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + 24|0);
  HEAP32[$58>>2] = $55;
  $59 = $c2;
  $60 = $1;
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + 24|0);
  $63 = (($62) + 4|0);
  HEAP32[$63>>2] = $59;
  $64 = $1;
  $65 = HEAP32[$64>>2]|0;
  $66 = HEAP32[$65>>2]|0;
  $67 = $1;
  FUNCTION_TABLE_vi[$66 & 511]($67);
 }
 $68 = $c2;
 $69 = $1;
 $70 = (($69) + 440|0);
 HEAP32[$70>>2] = $68;
 $71 = $next_input_byte;
 $72 = $datasrc;
 HEAP32[$72>>2] = $71;
 $73 = $bytes_in_buffer;
 $74 = $datasrc;
 $75 = (($74) + 4|0);
 HEAP32[$75>>2] = $73;
 $0 = 1;
 $76 = $0;
 STACKTOP = sp;return ($76|0);
}
function _get_soi($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 HEAP32[$3>>2] = 104;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 FUNCTION_TABLE_vii[$7 & 511]($8,1);
 $9 = $0;
 $10 = (($9) + 464|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 20|0);
  HEAP32[$17>>2] = 64;
  $18 = $0;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  FUNCTION_TABLE_vi[$20 & 511]($21);
 }
 $i = 0;
 while(1) {
  $22 = $i;
  $23 = ($22|0)<(16);
  if (!($23)) {
   break;
  }
  $24 = $i;
  $25 = $0;
  $26 = (($25) + 232|0);
  $27 = (($26) + ($24)|0);
  HEAP8[$27>>0] = 0;
  $28 = $i;
  $29 = $0;
  $30 = (($29) + 248|0);
  $31 = (($30) + ($28)|0);
  HEAP8[$31>>0] = 1;
  $32 = $i;
  $33 = $0;
  $34 = (($33) + 264|0);
  $35 = (($34) + ($32)|0);
  HEAP8[$35>>0] = 5;
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 $38 = $0;
 $39 = (($38) + 280|0);
 HEAP32[$39>>2] = 0;
 $40 = $0;
 $41 = (($40) + 40|0);
 HEAP32[$41>>2] = 0;
 $42 = $0;
 $43 = (($42) + 304|0);
 HEAP32[$43>>2] = 0;
 $44 = $0;
 $45 = (($44) + 308|0);
 HEAP32[$45>>2] = 0;
 $46 = $0;
 $47 = (($46) + 284|0);
 HEAP32[$47>>2] = 0;
 $48 = $0;
 $49 = (($48) + 288|0);
 HEAP8[$49>>0] = 1;
 $50 = $0;
 $51 = (($50) + 289|0);
 HEAP8[$51>>0] = 1;
 $52 = $0;
 $53 = (($52) + 290|0);
 HEAP8[$53>>0] = 0;
 $54 = $0;
 $55 = (($54) + 292|0);
 HEAP16[$55>>1] = 1;
 $56 = $0;
 $57 = (($56) + 294|0);
 HEAP16[$57>>1] = 1;
 $58 = $0;
 $59 = (($58) + 296|0);
 HEAP32[$59>>2] = 0;
 $60 = $0;
 $61 = (($60) + 300|0);
 HEAP8[$61>>0] = 0;
 $62 = $0;
 $63 = (($62) + 464|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + 12|0);
 HEAP32[$65>>2] = 1;
 STACKTOP = sp;return 1;
}
function _get_sof($cinfo,$is_baseline,$is_prog,$is_arith) {
 $cinfo = $cinfo|0;
 $is_baseline = $is_baseline|0;
 $is_prog = $is_prog|0;
 $is_arith = $is_arith|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $_mp = 0, $_mp1 = 0, $bytes_in_buffer = 0, $c = 0, $ci = 0, $compptr = 0, $datasrc = 0, $i = 0, $length = 0, $next_input_byte = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $cinfo;
 $2 = $is_baseline;
 $3 = $is_prog;
 $4 = $is_arith;
 $5 = $1;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $datasrc = $7;
 $8 = $datasrc;
 $9 = HEAP32[$8>>2]|0;
 $next_input_byte = $9;
 $10 = $datasrc;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $bytes_in_buffer = $12;
 $13 = $2;
 $14 = $1;
 $15 = (($14) + 220|0);
 HEAP32[$15>>2] = $13;
 $16 = $3;
 $17 = $1;
 $18 = (($17) + 224|0);
 HEAP32[$18>>2] = $16;
 $19 = $4;
 $20 = $1;
 $21 = (($20) + 228|0);
 HEAP32[$21>>2] = $19;
 $22 = $bytes_in_buffer;
 $23 = ($22|0)==(0);
 do {
  if ($23) {
   $24 = $datasrc;
   $25 = (($24) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $1;
   $28 = (FUNCTION_TABLE_ii[$26 & 255]($27)|0);
   $29 = ($28|0)!=(0);
   if ($29) {
    $30 = $datasrc;
    $31 = HEAP32[$30>>2]|0;
    $next_input_byte = $31;
    $32 = $datasrc;
    $33 = (($32) + 4|0);
    $34 = HEAP32[$33>>2]|0;
    $bytes_in_buffer = $34;
    break;
   }
   $0 = 0;
   $442 = $0;
   STACKTOP = sp;return ($442|0);
  }
 } while(0);
 $35 = $bytes_in_buffer;
 $36 = (($35) + -1)|0;
 $bytes_in_buffer = $36;
 $37 = $next_input_byte;
 $38 = (($37) + 1|0);
 $next_input_byte = $38;
 $39 = HEAP8[$37>>0]|0;
 $40 = $39&255;
 $41 = $40 << 8;
 $length = $41;
 $42 = $bytes_in_buffer;
 $43 = ($42|0)==(0);
 do {
  if ($43) {
   $44 = $datasrc;
   $45 = (($44) + 12|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $1;
   $48 = (FUNCTION_TABLE_ii[$46 & 255]($47)|0);
   $49 = ($48|0)!=(0);
   if ($49) {
    $50 = $datasrc;
    $51 = HEAP32[$50>>2]|0;
    $next_input_byte = $51;
    $52 = $datasrc;
    $53 = (($52) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $bytes_in_buffer = $54;
    break;
   }
   $0 = 0;
   $442 = $0;
   STACKTOP = sp;return ($442|0);
  }
 } while(0);
 $55 = $bytes_in_buffer;
 $56 = (($55) + -1)|0;
 $bytes_in_buffer = $56;
 $57 = $next_input_byte;
 $58 = (($57) + 1|0);
 $next_input_byte = $58;
 $59 = HEAP8[$57>>0]|0;
 $60 = $59&255;
 $61 = $length;
 $62 = (($61) + ($60))|0;
 $length = $62;
 $63 = $bytes_in_buffer;
 $64 = ($63|0)==(0);
 do {
  if ($64) {
   $65 = $datasrc;
   $66 = (($65) + 12|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = $1;
   $69 = (FUNCTION_TABLE_ii[$67 & 255]($68)|0);
   $70 = ($69|0)!=(0);
   if ($70) {
    $71 = $datasrc;
    $72 = HEAP32[$71>>2]|0;
    $next_input_byte = $72;
    $73 = $datasrc;
    $74 = (($73) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $bytes_in_buffer = $75;
    break;
   }
   $0 = 0;
   $442 = $0;
   STACKTOP = sp;return ($442|0);
  }
 } while(0);
 $76 = $bytes_in_buffer;
 $77 = (($76) + -1)|0;
 $bytes_in_buffer = $77;
 $78 = $next_input_byte;
 $79 = (($78) + 1|0);
 $next_input_byte = $79;
 $80 = HEAP8[$78>>0]|0;
 $81 = $80&255;
 $82 = $1;
 $83 = (($82) + 212|0);
 HEAP32[$83>>2] = $81;
 $84 = $bytes_in_buffer;
 $85 = ($84|0)==(0);
 do {
  if ($85) {
   $86 = $datasrc;
   $87 = (($86) + 12|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $1;
   $90 = (FUNCTION_TABLE_ii[$88 & 255]($89)|0);
   $91 = ($90|0)!=(0);
   if ($91) {
    $92 = $datasrc;
    $93 = HEAP32[$92>>2]|0;
    $next_input_byte = $93;
    $94 = $datasrc;
    $95 = (($94) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    $bytes_in_buffer = $96;
    break;
   }
   $0 = 0;
   $442 = $0;
   STACKTOP = sp;return ($442|0);
  }
 } while(0);
 $97 = $bytes_in_buffer;
 $98 = (($97) + -1)|0;
 $bytes_in_buffer = $98;
 $99 = $next_input_byte;
 $100 = (($99) + 1|0);
 $next_input_byte = $100;
 $101 = HEAP8[$99>>0]|0;
 $102 = $101&255;
 $103 = $102 << 8;
 $104 = $1;
 $105 = (($104) + 32|0);
 HEAP32[$105>>2] = $103;
 $106 = $bytes_in_buffer;
 $107 = ($106|0)==(0);
 do {
  if ($107) {
   $108 = $datasrc;
   $109 = (($108) + 12|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = $1;
   $112 = (FUNCTION_TABLE_ii[$110 & 255]($111)|0);
   $113 = ($112|0)!=(0);
   if ($113) {
    $114 = $datasrc;
    $115 = HEAP32[$114>>2]|0;
    $next_input_byte = $115;
    $116 = $datasrc;
    $117 = (($116) + 4|0);
    $118 = HEAP32[$117>>2]|0;
    $bytes_in_buffer = $118;
    break;
   }
   $0 = 0;
   $442 = $0;
   STACKTOP = sp;return ($442|0);
  }
 } while(0);
 $119 = $bytes_in_buffer;
 $120 = (($119) + -1)|0;
 $bytes_in_buffer = $120;
 $121 = $next_input_byte;
 $122 = (($121) + 1|0);
 $next_input_byte = $122;
 $123 = HEAP8[$121>>0]|0;
 $124 = $123&255;
 $125 = $1;
 $126 = (($125) + 32|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = (($127) + ($124))|0;
 HEAP32[$126>>2] = $128;
 $129 = $bytes_in_buffer;
 $130 = ($129|0)==(0);
 do {
  if ($130) {
   $131 = $datasrc;
   $132 = (($131) + 12|0);
   $133 = HEAP32[$132>>2]|0;
   $134 = $1;
   $135 = (FUNCTION_TABLE_ii[$133 & 255]($134)|0);
   $136 = ($135|0)!=(0);
   if ($136) {
    $137 = $datasrc;
    $138 = HEAP32[$137>>2]|0;
    $next_input_byte = $138;
    $139 = $datasrc;
    $140 = (($139) + 4|0);
    $141 = HEAP32[$140>>2]|0;
    $bytes_in_buffer = $141;
    break;
   }
   $0 = 0;
   $442 = $0;
   STACKTOP = sp;return ($442|0);
  }
 } while(0);
 $142 = $bytes_in_buffer;
 $143 = (($142) + -1)|0;
 $bytes_in_buffer = $143;
 $144 = $next_input_byte;
 $145 = (($144) + 1|0);
 $next_input_byte = $145;
 $146 = HEAP8[$144>>0]|0;
 $147 = $146&255;
 $148 = $147 << 8;
 $149 = $1;
 $150 = (($149) + 28|0);
 HEAP32[$150>>2] = $148;
 $151 = $bytes_in_buffer;
 $152 = ($151|0)==(0);
 do {
  if ($152) {
   $153 = $datasrc;
   $154 = (($153) + 12|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = $1;
   $157 = (FUNCTION_TABLE_ii[$155 & 255]($156)|0);
   $158 = ($157|0)!=(0);
   if ($158) {
    $159 = $datasrc;
    $160 = HEAP32[$159>>2]|0;
    $next_input_byte = $160;
    $161 = $datasrc;
    $162 = (($161) + 4|0);
    $163 = HEAP32[$162>>2]|0;
    $bytes_in_buffer = $163;
    break;
   }
   $0 = 0;
   $442 = $0;
   STACKTOP = sp;return ($442|0);
  }
 } while(0);
 $164 = $bytes_in_buffer;
 $165 = (($164) + -1)|0;
 $bytes_in_buffer = $165;
 $166 = $next_input_byte;
 $167 = (($166) + 1|0);
 $next_input_byte = $167;
 $168 = HEAP8[$166>>0]|0;
 $169 = $168&255;
 $170 = $1;
 $171 = (($170) + 28|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = (($172) + ($169))|0;
 HEAP32[$171>>2] = $173;
 $174 = $bytes_in_buffer;
 $175 = ($174|0)==(0);
 do {
  if ($175) {
   $176 = $datasrc;
   $177 = (($176) + 12|0);
   $178 = HEAP32[$177>>2]|0;
   $179 = $1;
   $180 = (FUNCTION_TABLE_ii[$178 & 255]($179)|0);
   $181 = ($180|0)!=(0);
   if ($181) {
    $182 = $datasrc;
    $183 = HEAP32[$182>>2]|0;
    $next_input_byte = $183;
    $184 = $datasrc;
    $185 = (($184) + 4|0);
    $186 = HEAP32[$185>>2]|0;
    $bytes_in_buffer = $186;
    break;
   }
   $0 = 0;
   $442 = $0;
   STACKTOP = sp;return ($442|0);
  }
 } while(0);
 $187 = $bytes_in_buffer;
 $188 = (($187) + -1)|0;
 $bytes_in_buffer = $188;
 $189 = $next_input_byte;
 $190 = (($189) + 1|0);
 $next_input_byte = $190;
 $191 = HEAP8[$189>>0]|0;
 $192 = $191&255;
 $193 = $1;
 $194 = (($193) + 36|0);
 HEAP32[$194>>2] = $192;
 $195 = $length;
 $196 = (($195) - 8)|0;
 $length = $196;
 $197 = $1;
 $198 = HEAP32[$197>>2]|0;
 $199 = (($198) + 24|0);
 $_mp = $199;
 $200 = $1;
 $201 = (($200) + 440|0);
 $202 = HEAP32[$201>>2]|0;
 $203 = $_mp;
 HEAP32[$203>>2] = $202;
 $204 = $1;
 $205 = (($204) + 28|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = $_mp;
 $208 = (($207) + 4|0);
 HEAP32[$208>>2] = $206;
 $209 = $1;
 $210 = (($209) + 32|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = $_mp;
 $213 = (($212) + 8|0);
 HEAP32[$213>>2] = $211;
 $214 = $1;
 $215 = (($214) + 36|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = $_mp;
 $218 = (($217) + 12|0);
 HEAP32[$218>>2] = $216;
 $219 = $1;
 $220 = HEAP32[$219>>2]|0;
 $221 = (($220) + 20|0);
 HEAP32[$221>>2] = 102;
 $222 = $1;
 $223 = HEAP32[$222>>2]|0;
 $224 = (($223) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $1;
 FUNCTION_TABLE_vii[$225 & 511]($226,1);
 $227 = $1;
 $228 = (($227) + 464|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = (($229) + 16|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = ($231|0)!=(0);
 if ($232) {
  $233 = $1;
  $234 = HEAP32[$233>>2]|0;
  $235 = (($234) + 20|0);
  HEAP32[$235>>2] = 61;
  $236 = $1;
  $237 = HEAP32[$236>>2]|0;
  $238 = HEAP32[$237>>2]|0;
  $239 = $1;
  FUNCTION_TABLE_vi[$238 & 511]($239);
 }
 $240 = $1;
 $241 = (($240) + 32|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = ($242>>>0)<=(0);
 if ($243) {
  label = 50;
 } else {
  $244 = $1;
  $245 = (($244) + 28|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = ($246>>>0)<=(0);
  if ($247) {
   label = 50;
  } else {
   $248 = $1;
   $249 = (($248) + 36|0);
   $250 = HEAP32[$249>>2]|0;
   $251 = ($250|0)<=(0);
   if ($251) {
    label = 50;
   }
  }
 }
 if ((label|0) == 50) {
  $252 = $1;
  $253 = HEAP32[$252>>2]|0;
  $254 = (($253) + 20|0);
  HEAP32[$254>>2] = 33;
  $255 = $1;
  $256 = HEAP32[$255>>2]|0;
  $257 = HEAP32[$256>>2]|0;
  $258 = $1;
  FUNCTION_TABLE_vi[$257 & 511]($258);
 }
 $259 = $length;
 $260 = $1;
 $261 = (($260) + 36|0);
 $262 = HEAP32[$261>>2]|0;
 $263 = ($262*3)|0;
 $264 = ($259|0)!=($263|0);
 if ($264) {
  $265 = $1;
  $266 = HEAP32[$265>>2]|0;
  $267 = (($266) + 20|0);
  HEAP32[$267>>2] = 12;
  $268 = $1;
  $269 = HEAP32[$268>>2]|0;
  $270 = HEAP32[$269>>2]|0;
  $271 = $1;
  FUNCTION_TABLE_vi[$270 & 511]($271);
 }
 $272 = $1;
 $273 = (($272) + 216|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = ($274|0)==(0|0);
 if ($275) {
  $276 = $1;
  $277 = (($276) + 4|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = HEAP32[$278>>2]|0;
  $280 = $1;
  $281 = $1;
  $282 = (($281) + 36|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = ($283*88)|0;
  $285 = (FUNCTION_TABLE_iiii[$279 & 511]($280,1,$284)|0);
  $286 = $1;
  $287 = (($286) + 216|0);
  HEAP32[$287>>2] = $285;
 }
 $ci = 0;
 while(1) {
  $288 = $ci;
  $289 = $1;
  $290 = (($289) + 36|0);
  $291 = HEAP32[$290>>2]|0;
  $292 = ($288|0)<($291|0);
  if (!($292)) {
   label = 91;
   break;
  }
  $293 = $bytes_in_buffer;
  $294 = ($293|0)==(0);
  if ($294) {
   $295 = $datasrc;
   $296 = (($295) + 12|0);
   $297 = HEAP32[$296>>2]|0;
   $298 = $1;
   $299 = (FUNCTION_TABLE_ii[$297 & 255]($298)|0);
   $300 = ($299|0)!=(0);
   if (!($300)) {
    label = 60;
    break;
   }
   $301 = $datasrc;
   $302 = HEAP32[$301>>2]|0;
   $next_input_byte = $302;
   $303 = $datasrc;
   $304 = (($303) + 4|0);
   $305 = HEAP32[$304>>2]|0;
   $bytes_in_buffer = $305;
  }
  $306 = $bytes_in_buffer;
  $307 = (($306) + -1)|0;
  $bytes_in_buffer = $307;
  $308 = $next_input_byte;
  $309 = (($308) + 1|0);
  $next_input_byte = $309;
  $310 = HEAP8[$308>>0]|0;
  $311 = $310&255;
  $c = $311;
  $i = 0;
  $312 = $1;
  $313 = (($312) + 216|0);
  $314 = HEAP32[$313>>2]|0;
  $compptr = $314;
  while(1) {
   $315 = $i;
   $316 = $ci;
   $317 = ($315|0)<($316|0);
   if (!($317)) {
    break;
   }
   $318 = $c;
   $319 = $compptr;
   $320 = HEAP32[$319>>2]|0;
   $321 = ($318|0)==($320|0);
   if ($321) {
    label = 66;
    break;
   }
   $344 = $i;
   $345 = (($344) + 1)|0;
   $i = $345;
   $346 = $compptr;
   $347 = (($346) + 88|0);
   $compptr = $347;
  }
  if ((label|0) == 66) {
   label = 0;
   $322 = $1;
   $323 = (($322) + 216|0);
   $324 = HEAP32[$323>>2]|0;
   $compptr = $324;
   $325 = $compptr;
   $326 = HEAP32[$325>>2]|0;
   $c = $326;
   $327 = $compptr;
   $328 = (($327) + 88|0);
   $compptr = $328;
   $i = 1;
   while(1) {
    $329 = $i;
    $330 = $ci;
    $331 = ($329|0)<($330|0);
    if (!($331)) {
     break;
    }
    $332 = $compptr;
    $333 = HEAP32[$332>>2]|0;
    $334 = $c;
    $335 = ($333|0)>($334|0);
    if ($335) {
     $336 = $compptr;
     $337 = HEAP32[$336>>2]|0;
     $c = $337;
    }
    $338 = $i;
    $339 = (($338) + 1)|0;
    $i = $339;
    $340 = $compptr;
    $341 = (($340) + 88|0);
    $compptr = $341;
   }
   $342 = $c;
   $343 = (($342) + 1)|0;
   $c = $343;
  }
  $348 = $c;
  $349 = $compptr;
  HEAP32[$349>>2] = $348;
  $350 = $ci;
  $351 = $compptr;
  $352 = (($351) + 4|0);
  HEAP32[$352>>2] = $350;
  $353 = $bytes_in_buffer;
  $354 = ($353|0)==(0);
  if ($354) {
   $355 = $datasrc;
   $356 = (($355) + 12|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = $1;
   $359 = (FUNCTION_TABLE_ii[$357 & 255]($358)|0);
   $360 = ($359|0)!=(0);
   if (!($360)) {
    label = 78;
    break;
   }
   $361 = $datasrc;
   $362 = HEAP32[$361>>2]|0;
   $next_input_byte = $362;
   $363 = $datasrc;
   $364 = (($363) + 4|0);
   $365 = HEAP32[$364>>2]|0;
   $bytes_in_buffer = $365;
  }
  $366 = $bytes_in_buffer;
  $367 = (($366) + -1)|0;
  $bytes_in_buffer = $367;
  $368 = $next_input_byte;
  $369 = (($368) + 1|0);
  $next_input_byte = $369;
  $370 = HEAP8[$368>>0]|0;
  $371 = $370&255;
  $c = $371;
  $372 = $c;
  $373 = $372 >> 4;
  $374 = $373 & 15;
  $375 = $compptr;
  $376 = (($375) + 8|0);
  HEAP32[$376>>2] = $374;
  $377 = $c;
  $378 = $377 & 15;
  $379 = $compptr;
  $380 = (($379) + 12|0);
  HEAP32[$380>>2] = $378;
  $381 = $bytes_in_buffer;
  $382 = ($381|0)==(0);
  if ($382) {
   $383 = $datasrc;
   $384 = (($383) + 12|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = $1;
   $387 = (FUNCTION_TABLE_ii[$385 & 255]($386)|0);
   $388 = ($387|0)!=(0);
   if (!($388)) {
    label = 84;
    break;
   }
   $389 = $datasrc;
   $390 = HEAP32[$389>>2]|0;
   $next_input_byte = $390;
   $391 = $datasrc;
   $392 = (($391) + 4|0);
   $393 = HEAP32[$392>>2]|0;
   $bytes_in_buffer = $393;
  }
  $394 = $bytes_in_buffer;
  $395 = (($394) + -1)|0;
  $bytes_in_buffer = $395;
  $396 = $next_input_byte;
  $397 = (($396) + 1|0);
  $next_input_byte = $397;
  $398 = HEAP8[$396>>0]|0;
  $399 = $398&255;
  $400 = $compptr;
  $401 = (($400) + 16|0);
  HEAP32[$401>>2] = $399;
  $402 = $1;
  $403 = HEAP32[$402>>2]|0;
  $404 = (($403) + 24|0);
  $_mp1 = $404;
  $405 = $compptr;
  $406 = HEAP32[$405>>2]|0;
  $407 = $_mp1;
  HEAP32[$407>>2] = $406;
  $408 = $compptr;
  $409 = (($408) + 8|0);
  $410 = HEAP32[$409>>2]|0;
  $411 = $_mp1;
  $412 = (($411) + 4|0);
  HEAP32[$412>>2] = $410;
  $413 = $compptr;
  $414 = (($413) + 12|0);
  $415 = HEAP32[$414>>2]|0;
  $416 = $_mp1;
  $417 = (($416) + 8|0);
  HEAP32[$417>>2] = $415;
  $418 = $compptr;
  $419 = (($418) + 16|0);
  $420 = HEAP32[$419>>2]|0;
  $421 = $_mp1;
  $422 = (($421) + 12|0);
  HEAP32[$422>>2] = $420;
  $423 = $1;
  $424 = HEAP32[$423>>2]|0;
  $425 = (($424) + 20|0);
  HEAP32[$425>>2] = 103;
  $426 = $1;
  $427 = HEAP32[$426>>2]|0;
  $428 = (($427) + 4|0);
  $429 = HEAP32[$428>>2]|0;
  $430 = $1;
  FUNCTION_TABLE_vii[$429 & 511]($430,1);
  $431 = $ci;
  $432 = (($431) + 1)|0;
  $ci = $432;
 }
 if ((label|0) == 60) {
  $0 = 0;
  $442 = $0;
  STACKTOP = sp;return ($442|0);
 }
 else if ((label|0) == 78) {
  $0 = 0;
  $442 = $0;
  STACKTOP = sp;return ($442|0);
 }
 else if ((label|0) == 84) {
  $0 = 0;
  $442 = $0;
  STACKTOP = sp;return ($442|0);
 }
 else if ((label|0) == 91) {
  $433 = $1;
  $434 = (($433) + 464|0);
  $435 = HEAP32[$434>>2]|0;
  $436 = (($435) + 16|0);
  HEAP32[$436>>2] = 1;
  $437 = $next_input_byte;
  $438 = $datasrc;
  HEAP32[$438>>2] = $437;
  $439 = $bytes_in_buffer;
  $440 = $datasrc;
  $441 = (($440) + 4|0);
  HEAP32[$441>>2] = $439;
  $0 = 1;
  $442 = $0;
  STACKTOP = sp;return ($442|0);
 }
 return 0|0;
}
function _get_sos($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $_mp = 0, $_mp1 = 0, $bytes_in_buffer = 0, $c = 0, $ci = 0, $compptr = 0, $datasrc = 0, $i = 0, $length = 0, $n = 0, $next_input_byte = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $datasrc = $4;
 $5 = $datasrc;
 $6 = HEAP32[$5>>2]|0;
 $next_input_byte = $6;
 $7 = $datasrc;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $bytes_in_buffer = $9;
 $10 = $1;
 $11 = (($10) + 464|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 20|0);
  HEAP32[$18>>2] = 60;
  $19 = $1;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 24|0);
  (_strncpy(($21|0),(2984|0),80)|0);
  $22 = $1;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  FUNCTION_TABLE_vi[$24 & 511]($25);
 }
 $26 = $bytes_in_buffer;
 $27 = ($26|0)==(0);
 do {
  if ($27) {
   $28 = $datasrc;
   $29 = (($28) + 12|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $1;
   $32 = (FUNCTION_TABLE_ii[$30 & 255]($31)|0);
   $33 = ($32|0)!=(0);
   if ($33) {
    $34 = $datasrc;
    $35 = HEAP32[$34>>2]|0;
    $next_input_byte = $35;
    $36 = $datasrc;
    $37 = (($36) + 4|0);
    $38 = HEAP32[$37>>2]|0;
    $bytes_in_buffer = $38;
    break;
   }
   $0 = 0;
   $381 = $0;
   STACKTOP = sp;return ($381|0);
  }
 } while(0);
 $39 = $bytes_in_buffer;
 $40 = (($39) + -1)|0;
 $bytes_in_buffer = $40;
 $41 = $next_input_byte;
 $42 = (($41) + 1|0);
 $next_input_byte = $42;
 $43 = HEAP8[$41>>0]|0;
 $44 = $43&255;
 $45 = $44 << 8;
 $length = $45;
 $46 = $bytes_in_buffer;
 $47 = ($46|0)==(0);
 do {
  if ($47) {
   $48 = $datasrc;
   $49 = (($48) + 12|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $1;
   $52 = (FUNCTION_TABLE_ii[$50 & 255]($51)|0);
   $53 = ($52|0)!=(0);
   if ($53) {
    $54 = $datasrc;
    $55 = HEAP32[$54>>2]|0;
    $next_input_byte = $55;
    $56 = $datasrc;
    $57 = (($56) + 4|0);
    $58 = HEAP32[$57>>2]|0;
    $bytes_in_buffer = $58;
    break;
   }
   $0 = 0;
   $381 = $0;
   STACKTOP = sp;return ($381|0);
  }
 } while(0);
 $59 = $bytes_in_buffer;
 $60 = (($59) + -1)|0;
 $bytes_in_buffer = $60;
 $61 = $next_input_byte;
 $62 = (($61) + 1|0);
 $next_input_byte = $62;
 $63 = HEAP8[$61>>0]|0;
 $64 = $63&255;
 $65 = $length;
 $66 = (($65) + ($64))|0;
 $length = $66;
 $67 = $bytes_in_buffer;
 $68 = ($67|0)==(0);
 do {
  if ($68) {
   $69 = $datasrc;
   $70 = (($69) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = $1;
   $73 = (FUNCTION_TABLE_ii[$71 & 255]($72)|0);
   $74 = ($73|0)!=(0);
   if ($74) {
    $75 = $datasrc;
    $76 = HEAP32[$75>>2]|0;
    $next_input_byte = $76;
    $77 = $datasrc;
    $78 = (($77) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $bytes_in_buffer = $79;
    break;
   }
   $0 = 0;
   $381 = $0;
   STACKTOP = sp;return ($381|0);
  }
 } while(0);
 $80 = $bytes_in_buffer;
 $81 = (($80) + -1)|0;
 $bytes_in_buffer = $81;
 $82 = $next_input_byte;
 $83 = (($82) + 1|0);
 $next_input_byte = $83;
 $84 = HEAP8[$82>>0]|0;
 $85 = $84&255;
 $n = $85;
 $86 = $1;
 $87 = HEAP32[$86>>2]|0;
 $88 = (($87) + 20|0);
 HEAP32[$88>>2] = 105;
 $89 = $n;
 $90 = $1;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + 24|0);
 HEAP32[$92>>2] = $89;
 $93 = $1;
 $94 = HEAP32[$93>>2]|0;
 $95 = (($94) + 4|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = $1;
 FUNCTION_TABLE_vii[$96 & 511]($97,1);
 $98 = $length;
 $99 = $n;
 $100 = $99<<1;
 $101 = (($100) + 6)|0;
 $102 = ($98|0)!=($101|0);
 if ($102) {
  label = 23;
 } else {
  $103 = $n;
  $104 = ($103|0)>(4);
  if ($104) {
   label = 23;
  } else {
   $105 = $n;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = $1;
    $108 = (($107) + 224|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)!=(0);
    if (!($110)) {
     label = 23;
    }
   }
  }
 }
 if ((label|0) == 23) {
  $111 = $1;
  $112 = HEAP32[$111>>2]|0;
  $113 = (($112) + 20|0);
  HEAP32[$113>>2] = 12;
  $114 = $1;
  $115 = HEAP32[$114>>2]|0;
  $116 = HEAP32[$115>>2]|0;
  $117 = $1;
  FUNCTION_TABLE_vi[$116 & 511]($117);
 }
 $118 = $n;
 $119 = $1;
 $120 = (($119) + 340|0);
 HEAP32[$120>>2] = $118;
 $i = 0;
 while(1) {
  $121 = $i;
  $122 = $n;
  $123 = ($121|0)<($122|0);
  if (!($123)) {
   label = 61;
   break;
  }
  $124 = $bytes_in_buffer;
  $125 = ($124|0)==(0);
  if ($125) {
   $126 = $datasrc;
   $127 = (($126) + 12|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = $1;
   $130 = (FUNCTION_TABLE_ii[$128 & 255]($129)|0);
   $131 = ($130|0)!=(0);
   if (!($131)) {
    label = 29;
    break;
   }
   $132 = $datasrc;
   $133 = HEAP32[$132>>2]|0;
   $next_input_byte = $133;
   $134 = $datasrc;
   $135 = (($134) + 4|0);
   $136 = HEAP32[$135>>2]|0;
   $bytes_in_buffer = $136;
  }
  $137 = $bytes_in_buffer;
  $138 = (($137) + -1)|0;
  $bytes_in_buffer = $138;
  $139 = $next_input_byte;
  $140 = (($139) + 1|0);
  $next_input_byte = $140;
  $141 = HEAP8[$139>>0]|0;
  $142 = $141&255;
  $c = $142;
  $ci = 0;
  while(1) {
   $143 = $ci;
   $144 = $i;
   $145 = ($143|0)<($144|0);
   if (!($145)) {
    break;
   }
   $146 = $c;
   $147 = $ci;
   $148 = $1;
   $149 = (($148) + 344|0);
   $150 = (($149) + ($147<<2)|0);
   $151 = HEAP32[$150>>2]|0;
   $152 = HEAP32[$151>>2]|0;
   $153 = ($146|0)==($152|0);
   if ($153) {
    label = 35;
    break;
   }
   $176 = $ci;
   $177 = (($176) + 1)|0;
   $ci = $177;
  }
  if ((label|0) == 35) {
   label = 0;
   $154 = $1;
   $155 = (($154) + 344|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = HEAP32[$156>>2]|0;
   $c = $157;
   $ci = 1;
   while(1) {
    $158 = $ci;
    $159 = $i;
    $160 = ($158|0)<($159|0);
    if (!($160)) {
     break;
    }
    $161 = $ci;
    $162 = $1;
    $163 = (($162) + 344|0);
    $164 = (($163) + ($161<<2)|0);
    $165 = HEAP32[$164>>2]|0;
    $compptr = $165;
    $166 = $compptr;
    $167 = HEAP32[$166>>2]|0;
    $168 = $c;
    $169 = ($167|0)>($168|0);
    if ($169) {
     $170 = $compptr;
     $171 = HEAP32[$170>>2]|0;
     $c = $171;
    }
    $172 = $ci;
    $173 = (($172) + 1)|0;
    $ci = $173;
   }
   $174 = $c;
   $175 = (($174) + 1)|0;
   $c = $175;
  }
  $ci = 0;
  $178 = $1;
  $179 = (($178) + 216|0);
  $180 = HEAP32[$179>>2]|0;
  $compptr = $180;
  while(1) {
   $181 = $ci;
   $182 = $1;
   $183 = (($182) + 36|0);
   $184 = HEAP32[$183>>2]|0;
   $185 = ($181|0)<($184|0);
   if (!($185)) {
    label = 50;
    break;
   }
   $186 = $c;
   $187 = $compptr;
   $188 = HEAP32[$187>>2]|0;
   $189 = ($186|0)==($188|0);
   if ($189) {
    label = 47;
    break;
   }
   $190 = $ci;
   $191 = (($190) + 1)|0;
   $ci = $191;
   $192 = $compptr;
   $193 = (($192) + 88|0);
   $compptr = $193;
  }
  if ((label|0) == 47) {
   label = 0;
  }
  else if ((label|0) == 50) {
   label = 0;
   $194 = $1;
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + 20|0);
   HEAP32[$196>>2] = 4;
   $197 = $c;
   $198 = $1;
   $199 = HEAP32[$198>>2]|0;
   $200 = (($199) + 24|0);
   HEAP32[$200>>2] = $197;
   $201 = $1;
   $202 = HEAP32[$201>>2]|0;
   $203 = HEAP32[$202>>2]|0;
   $204 = $1;
   FUNCTION_TABLE_vi[$203 & 511]($204);
  }
  $205 = $compptr;
  $206 = $i;
  $207 = $1;
  $208 = (($207) + 344|0);
  $209 = (($208) + ($206<<2)|0);
  HEAP32[$209>>2] = $205;
  $210 = $bytes_in_buffer;
  $211 = ($210|0)==(0);
  if ($211) {
   $212 = $datasrc;
   $213 = (($212) + 12|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = $1;
   $216 = (FUNCTION_TABLE_ii[$214 & 255]($215)|0);
   $217 = ($216|0)!=(0);
   if (!($217)) {
    label = 54;
    break;
   }
   $218 = $datasrc;
   $219 = HEAP32[$218>>2]|0;
   $next_input_byte = $219;
   $220 = $datasrc;
   $221 = (($220) + 4|0);
   $222 = HEAP32[$221>>2]|0;
   $bytes_in_buffer = $222;
  }
  $223 = $bytes_in_buffer;
  $224 = (($223) + -1)|0;
  $bytes_in_buffer = $224;
  $225 = $next_input_byte;
  $226 = (($225) + 1|0);
  $next_input_byte = $226;
  $227 = HEAP8[$225>>0]|0;
  $228 = $227&255;
  $c = $228;
  $229 = $c;
  $230 = $229 >> 4;
  $231 = $230 & 15;
  $232 = $compptr;
  $233 = (($232) + 20|0);
  HEAP32[$233>>2] = $231;
  $234 = $c;
  $235 = $234 & 15;
  $236 = $compptr;
  $237 = (($236) + 24|0);
  HEAP32[$237>>2] = $235;
  $238 = $1;
  $239 = HEAP32[$238>>2]|0;
  $240 = (($239) + 24|0);
  $_mp = $240;
  $241 = $compptr;
  $242 = HEAP32[$241>>2]|0;
  $243 = $_mp;
  HEAP32[$243>>2] = $242;
  $244 = $compptr;
  $245 = (($244) + 20|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $_mp;
  $248 = (($247) + 4|0);
  HEAP32[$248>>2] = $246;
  $249 = $compptr;
  $250 = (($249) + 24|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = $_mp;
  $253 = (($252) + 8|0);
  HEAP32[$253>>2] = $251;
  $254 = $1;
  $255 = HEAP32[$254>>2]|0;
  $256 = (($255) + 20|0);
  HEAP32[$256>>2] = 106;
  $257 = $1;
  $258 = HEAP32[$257>>2]|0;
  $259 = (($258) + 4|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $1;
  FUNCTION_TABLE_vii[$260 & 511]($261,1);
  $262 = $i;
  $263 = (($262) + 1)|0;
  $i = $263;
 }
 if ((label|0) == 29) {
  $0 = 0;
  $381 = $0;
  STACKTOP = sp;return ($381|0);
 }
 else if ((label|0) == 54) {
  $0 = 0;
  $381 = $0;
  STACKTOP = sp;return ($381|0);
 }
 else if ((label|0) == 61) {
  $264 = $bytes_in_buffer;
  $265 = ($264|0)==(0);
  do {
   if ($265) {
    $266 = $datasrc;
    $267 = (($266) + 12|0);
    $268 = HEAP32[$267>>2]|0;
    $269 = $1;
    $270 = (FUNCTION_TABLE_ii[$268 & 255]($269)|0);
    $271 = ($270|0)!=(0);
    if ($271) {
     $272 = $datasrc;
     $273 = HEAP32[$272>>2]|0;
     $next_input_byte = $273;
     $274 = $datasrc;
     $275 = (($274) + 4|0);
     $276 = HEAP32[$275>>2]|0;
     $bytes_in_buffer = $276;
     break;
    }
    $0 = 0;
    $381 = $0;
    STACKTOP = sp;return ($381|0);
   }
  } while(0);
  $277 = $bytes_in_buffer;
  $278 = (($277) + -1)|0;
  $bytes_in_buffer = $278;
  $279 = $next_input_byte;
  $280 = (($279) + 1|0);
  $next_input_byte = $280;
  $281 = HEAP8[$279>>0]|0;
  $282 = $281&255;
  $c = $282;
  $283 = $c;
  $284 = $1;
  $285 = (($284) + 412|0);
  HEAP32[$285>>2] = $283;
  $286 = $bytes_in_buffer;
  $287 = ($286|0)==(0);
  do {
   if ($287) {
    $288 = $datasrc;
    $289 = (($288) + 12|0);
    $290 = HEAP32[$289>>2]|0;
    $291 = $1;
    $292 = (FUNCTION_TABLE_ii[$290 & 255]($291)|0);
    $293 = ($292|0)!=(0);
    if ($293) {
     $294 = $datasrc;
     $295 = HEAP32[$294>>2]|0;
     $next_input_byte = $295;
     $296 = $datasrc;
     $297 = (($296) + 4|0);
     $298 = HEAP32[$297>>2]|0;
     $bytes_in_buffer = $298;
     break;
    }
    $0 = 0;
    $381 = $0;
    STACKTOP = sp;return ($381|0);
   }
  } while(0);
  $299 = $bytes_in_buffer;
  $300 = (($299) + -1)|0;
  $bytes_in_buffer = $300;
  $301 = $next_input_byte;
  $302 = (($301) + 1|0);
  $next_input_byte = $302;
  $303 = HEAP8[$301>>0]|0;
  $304 = $303&255;
  $c = $304;
  $305 = $c;
  $306 = $1;
  $307 = (($306) + 416|0);
  HEAP32[$307>>2] = $305;
  $308 = $bytes_in_buffer;
  $309 = ($308|0)==(0);
  do {
   if ($309) {
    $310 = $datasrc;
    $311 = (($310) + 12|0);
    $312 = HEAP32[$311>>2]|0;
    $313 = $1;
    $314 = (FUNCTION_TABLE_ii[$312 & 255]($313)|0);
    $315 = ($314|0)!=(0);
    if ($315) {
     $316 = $datasrc;
     $317 = HEAP32[$316>>2]|0;
     $next_input_byte = $317;
     $318 = $datasrc;
     $319 = (($318) + 4|0);
     $320 = HEAP32[$319>>2]|0;
     $bytes_in_buffer = $320;
     break;
    }
    $0 = 0;
    $381 = $0;
    STACKTOP = sp;return ($381|0);
   }
  } while(0);
  $321 = $bytes_in_buffer;
  $322 = (($321) + -1)|0;
  $bytes_in_buffer = $322;
  $323 = $next_input_byte;
  $324 = (($323) + 1|0);
  $next_input_byte = $324;
  $325 = HEAP8[$323>>0]|0;
  $326 = $325&255;
  $c = $326;
  $327 = $c;
  $328 = $327 >> 4;
  $329 = $328 & 15;
  $330 = $1;
  $331 = (($330) + 420|0);
  HEAP32[$331>>2] = $329;
  $332 = $c;
  $333 = $332 & 15;
  $334 = $1;
  $335 = (($334) + 424|0);
  HEAP32[$335>>2] = $333;
  $336 = $1;
  $337 = HEAP32[$336>>2]|0;
  $338 = (($337) + 24|0);
  $_mp1 = $338;
  $339 = $1;
  $340 = (($339) + 412|0);
  $341 = HEAP32[$340>>2]|0;
  $342 = $_mp1;
  HEAP32[$342>>2] = $341;
  $343 = $1;
  $344 = (($343) + 416|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = $_mp1;
  $347 = (($346) + 4|0);
  HEAP32[$347>>2] = $345;
  $348 = $1;
  $349 = (($348) + 420|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = $_mp1;
  $352 = (($351) + 8|0);
  HEAP32[$352>>2] = $350;
  $353 = $1;
  $354 = (($353) + 424|0);
  $355 = HEAP32[$354>>2]|0;
  $356 = $_mp1;
  $357 = (($356) + 12|0);
  HEAP32[$357>>2] = $355;
  $358 = $1;
  $359 = HEAP32[$358>>2]|0;
  $360 = (($359) + 20|0);
  HEAP32[$360>>2] = 107;
  $361 = $1;
  $362 = HEAP32[$361>>2]|0;
  $363 = (($362) + 4|0);
  $364 = HEAP32[$363>>2]|0;
  $365 = $1;
  FUNCTION_TABLE_vii[$364 & 511]($365,1);
  $366 = $1;
  $367 = (($366) + 464|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = (($368) + 20|0);
  HEAP32[$369>>2] = 0;
  $370 = $n;
  $371 = ($370|0)!=(0);
  if ($371) {
   $372 = $1;
   $373 = (($372) + 144|0);
   $374 = HEAP32[$373>>2]|0;
   $375 = (($374) + 1)|0;
   HEAP32[$373>>2] = $375;
  }
  $376 = $next_input_byte;
  $377 = $datasrc;
  HEAP32[$377>>2] = $376;
  $378 = $bytes_in_buffer;
  $379 = $datasrc;
  $380 = (($379) + 4|0);
  HEAP32[$380>>2] = $378;
  $0 = 1;
  $381 = $0;
  STACKTOP = sp;return ($381|0);
 }
 return 0|0;
}
function _get_dac($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytes_in_buffer = 0, $datasrc = 0, $index = 0, $length = 0, $next_input_byte = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $datasrc = $4;
 $5 = $datasrc;
 $6 = HEAP32[$5>>2]|0;
 $next_input_byte = $6;
 $7 = $datasrc;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $bytes_in_buffer = $9;
 $10 = $bytes_in_buffer;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = $datasrc;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (FUNCTION_TABLE_ii[$14 & 255]($15)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $datasrc;
    $19 = HEAP32[$18>>2]|0;
    $next_input_byte = $19;
    $20 = $datasrc;
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $bytes_in_buffer = $22;
    break;
   }
   $0 = 0;
   $188 = $0;
   STACKTOP = sp;return ($188|0);
  }
 } while(0);
 $23 = $bytes_in_buffer;
 $24 = (($23) + -1)|0;
 $bytes_in_buffer = $24;
 $25 = $next_input_byte;
 $26 = (($25) + 1|0);
 $next_input_byte = $26;
 $27 = HEAP8[$25>>0]|0;
 $28 = $27&255;
 $29 = $28 << 8;
 $length = $29;
 $30 = $bytes_in_buffer;
 $31 = ($30|0)==(0);
 do {
  if ($31) {
   $32 = $datasrc;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $1;
   $36 = (FUNCTION_TABLE_ii[$34 & 255]($35)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $datasrc;
    $39 = HEAP32[$38>>2]|0;
    $next_input_byte = $39;
    $40 = $datasrc;
    $41 = (($40) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $bytes_in_buffer = $42;
    break;
   }
   $0 = 0;
   $188 = $0;
   STACKTOP = sp;return ($188|0);
  }
 } while(0);
 $43 = $bytes_in_buffer;
 $44 = (($43) + -1)|0;
 $bytes_in_buffer = $44;
 $45 = $next_input_byte;
 $46 = (($45) + 1|0);
 $next_input_byte = $46;
 $47 = HEAP8[$45>>0]|0;
 $48 = $47&255;
 $49 = $length;
 $50 = (($49) + ($48))|0;
 $length = $50;
 $51 = $length;
 $52 = (($51) - 2)|0;
 $length = $52;
 while(1) {
  $53 = $length;
  $54 = ($53|0)>(0);
  if (!($54)) {
   label = 34;
   break;
  }
  $55 = $bytes_in_buffer;
  $56 = ($55|0)==(0);
  if ($56) {
   $57 = $datasrc;
   $58 = (($57) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $1;
   $61 = (FUNCTION_TABLE_ii[$59 & 255]($60)|0);
   $62 = ($61|0)!=(0);
   if (!($62)) {
    label = 16;
    break;
   }
   $63 = $datasrc;
   $64 = HEAP32[$63>>2]|0;
   $next_input_byte = $64;
   $65 = $datasrc;
   $66 = (($65) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $bytes_in_buffer = $67;
  }
  $68 = $bytes_in_buffer;
  $69 = (($68) + -1)|0;
  $bytes_in_buffer = $69;
  $70 = $next_input_byte;
  $71 = (($70) + 1|0);
  $next_input_byte = $71;
  $72 = HEAP8[$70>>0]|0;
  $73 = $72&255;
  $index = $73;
  $74 = $bytes_in_buffer;
  $75 = ($74|0)==(0);
  if ($75) {
   $76 = $datasrc;
   $77 = (($76) + 12|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $1;
   $80 = (FUNCTION_TABLE_ii[$78 & 255]($79)|0);
   $81 = ($80|0)!=(0);
   if (!($81)) {
    label = 22;
    break;
   }
   $82 = $datasrc;
   $83 = HEAP32[$82>>2]|0;
   $next_input_byte = $83;
   $84 = $datasrc;
   $85 = (($84) + 4|0);
   $86 = HEAP32[$85>>2]|0;
   $bytes_in_buffer = $86;
  }
  $87 = $bytes_in_buffer;
  $88 = (($87) + -1)|0;
  $bytes_in_buffer = $88;
  $89 = $next_input_byte;
  $90 = (($89) + 1|0);
  $next_input_byte = $90;
  $91 = HEAP8[$89>>0]|0;
  $92 = $91&255;
  $val = $92;
  $93 = $length;
  $94 = (($93) - 2)|0;
  $length = $94;
  $95 = $1;
  $96 = HEAP32[$95>>2]|0;
  $97 = (($96) + 20|0);
  HEAP32[$97>>2] = 81;
  $98 = $index;
  $99 = $1;
  $100 = HEAP32[$99>>2]|0;
  $101 = (($100) + 24|0);
  HEAP32[$101>>2] = $98;
  $102 = $val;
  $103 = $1;
  $104 = HEAP32[$103>>2]|0;
  $105 = (($104) + 24|0);
  $106 = (($105) + 4|0);
  HEAP32[$106>>2] = $102;
  $107 = $1;
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + 4|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = $1;
  FUNCTION_TABLE_vii[$110 & 511]($111,1);
  $112 = $index;
  $113 = ($112|0)<(0);
  if ($113) {
   label = 27;
  } else {
   $114 = $index;
   $115 = ($114|0)>=(32);
   if ($115) {
    label = 27;
   }
  }
  if ((label|0) == 27) {
   label = 0;
   $116 = $1;
   $117 = HEAP32[$116>>2]|0;
   $118 = (($117) + 20|0);
   HEAP32[$118>>2] = 29;
   $119 = $index;
   $120 = $1;
   $121 = HEAP32[$120>>2]|0;
   $122 = (($121) + 24|0);
   HEAP32[$122>>2] = $119;
   $123 = $1;
   $124 = HEAP32[$123>>2]|0;
   $125 = HEAP32[$124>>2]|0;
   $126 = $1;
   FUNCTION_TABLE_vi[$125 & 511]($126);
  }
  $127 = $index;
  $128 = ($127|0)>=(16);
  if ($128) {
   $129 = $val;
   $130 = $129&255;
   $131 = $index;
   $132 = (($131) - 16)|0;
   $133 = $1;
   $134 = (($133) + 264|0);
   $135 = (($134) + ($132)|0);
   HEAP8[$135>>0] = $130;
  } else {
   $136 = $val;
   $137 = $136 & 15;
   $138 = $137&255;
   $139 = $index;
   $140 = $1;
   $141 = (($140) + 232|0);
   $142 = (($141) + ($139)|0);
   HEAP8[$142>>0] = $138;
   $143 = $val;
   $144 = $143 >> 4;
   $145 = $144&255;
   $146 = $index;
   $147 = $1;
   $148 = (($147) + 248|0);
   $149 = (($148) + ($146)|0);
   HEAP8[$149>>0] = $145;
   $150 = $index;
   $151 = $1;
   $152 = (($151) + 232|0);
   $153 = (($152) + ($150)|0);
   $154 = HEAP8[$153>>0]|0;
   $155 = $154&255;
   $156 = $index;
   $157 = $1;
   $158 = (($157) + 248|0);
   $159 = (($158) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = ($155|0)>($161|0);
   if ($162) {
    $163 = $1;
    $164 = HEAP32[$163>>2]|0;
    $165 = (($164) + 20|0);
    HEAP32[$165>>2] = 30;
    $166 = $val;
    $167 = $1;
    $168 = HEAP32[$167>>2]|0;
    $169 = (($168) + 24|0);
    HEAP32[$169>>2] = $166;
    $170 = $1;
    $171 = HEAP32[$170>>2]|0;
    $172 = HEAP32[$171>>2]|0;
    $173 = $1;
    FUNCTION_TABLE_vi[$172 & 511]($173);
   }
  }
 }
 if ((label|0) == 16) {
  $0 = 0;
  $188 = $0;
  STACKTOP = sp;return ($188|0);
 }
 else if ((label|0) == 22) {
  $0 = 0;
  $188 = $0;
  STACKTOP = sp;return ($188|0);
 }
 else if ((label|0) == 34) {
  $174 = $length;
  $175 = ($174|0)!=(0);
  if ($175) {
   $176 = $1;
   $177 = HEAP32[$176>>2]|0;
   $178 = (($177) + 20|0);
   HEAP32[$178>>2] = 12;
   $179 = $1;
   $180 = HEAP32[$179>>2]|0;
   $181 = HEAP32[$180>>2]|0;
   $182 = $1;
   FUNCTION_TABLE_vi[$181 & 511]($182);
  }
  $183 = $next_input_byte;
  $184 = $datasrc;
  HEAP32[$184>>2] = $183;
  $185 = $bytes_in_buffer;
  $186 = $datasrc;
  $187 = (($186) + 4|0);
  HEAP32[$187>>2] = $185;
  $0 = 1;
  $188 = $0;
  STACKTOP = sp;return ($188|0);
 }
 return 0|0;
}
function _get_dht($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_mp = 0, $_mp1 = 0, $bits = 0, $bytes_in_buffer = 0, $count = 0, $datasrc = 0, $htblptr = 0, $huffval = 0;
 var $i = 0, $index = 0, $length = 0, $next_input_byte = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $bits = sp + 304|0;
 $huffval = sp + 48|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $datasrc = $4;
 $5 = $datasrc;
 $6 = HEAP32[$5>>2]|0;
 $next_input_byte = $6;
 $7 = $datasrc;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $bytes_in_buffer = $9;
 $10 = $bytes_in_buffer;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = $datasrc;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (FUNCTION_TABLE_ii[$14 & 255]($15)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $datasrc;
    $19 = HEAP32[$18>>2]|0;
    $next_input_byte = $19;
    $20 = $datasrc;
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $bytes_in_buffer = $22;
    break;
   }
   $0 = 0;
   $311 = $0;
   STACKTOP = sp;return ($311|0);
  }
 } while(0);
 $23 = $bytes_in_buffer;
 $24 = (($23) + -1)|0;
 $bytes_in_buffer = $24;
 $25 = $next_input_byte;
 $26 = (($25) + 1|0);
 $next_input_byte = $26;
 $27 = HEAP8[$25>>0]|0;
 $28 = $27&255;
 $29 = $28 << 8;
 $length = $29;
 $30 = $bytes_in_buffer;
 $31 = ($30|0)==(0);
 do {
  if ($31) {
   $32 = $datasrc;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $1;
   $36 = (FUNCTION_TABLE_ii[$34 & 255]($35)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $datasrc;
    $39 = HEAP32[$38>>2]|0;
    $next_input_byte = $39;
    $40 = $datasrc;
    $41 = (($40) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $bytes_in_buffer = $42;
    break;
   }
   $0 = 0;
   $311 = $0;
   STACKTOP = sp;return ($311|0);
  }
 } while(0);
 $43 = $bytes_in_buffer;
 $44 = (($43) + -1)|0;
 $bytes_in_buffer = $44;
 $45 = $next_input_byte;
 $46 = (($45) + 1|0);
 $next_input_byte = $46;
 $47 = HEAP8[$45>>0]|0;
 $48 = $47&255;
 $49 = $length;
 $50 = (($49) + ($48))|0;
 $length = $50;
 $51 = $length;
 $52 = (($51) - 2)|0;
 $length = $52;
 L17: while(1) {
  $53 = $length;
  $54 = ($53|0)>(16);
  if (!($54)) {
   label = 55;
   break;
  }
  $55 = $bytes_in_buffer;
  $56 = ($55|0)==(0);
  if ($56) {
   $57 = $datasrc;
   $58 = (($57) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $1;
   $61 = (FUNCTION_TABLE_ii[$59 & 255]($60)|0);
   $62 = ($61|0)!=(0);
   if (!($62)) {
    label = 16;
    break;
   }
   $63 = $datasrc;
   $64 = HEAP32[$63>>2]|0;
   $next_input_byte = $64;
   $65 = $datasrc;
   $66 = (($65) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $bytes_in_buffer = $67;
  }
  $68 = $bytes_in_buffer;
  $69 = (($68) + -1)|0;
  $bytes_in_buffer = $69;
  $70 = $next_input_byte;
  $71 = (($70) + 1|0);
  $next_input_byte = $71;
  $72 = HEAP8[$70>>0]|0;
  $73 = $72&255;
  $index = $73;
  $74 = $1;
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) + 20|0);
  HEAP32[$76>>2] = 82;
  $77 = $index;
  $78 = $1;
  $79 = HEAP32[$78>>2]|0;
  $80 = (($79) + 24|0);
  HEAP32[$80>>2] = $77;
  $81 = $1;
  $82 = HEAP32[$81>>2]|0;
  $83 = (($82) + 4|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $1;
  FUNCTION_TABLE_vii[$84 & 511]($85,1);
  HEAP8[$bits>>0] = 0;
  $count = 0;
  $i = 1;
  while(1) {
   $86 = $i;
   $87 = ($86|0)<=(16);
   if (!($87)) {
    break;
   }
   $88 = $bytes_in_buffer;
   $89 = ($88|0)==(0);
   if ($89) {
    $90 = $datasrc;
    $91 = (($90) + 12|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = $1;
    $94 = (FUNCTION_TABLE_ii[$92 & 255]($93)|0);
    $95 = ($94|0)!=(0);
    if (!($95)) {
     label = 24;
     break L17;
    }
    $96 = $datasrc;
    $97 = HEAP32[$96>>2]|0;
    $next_input_byte = $97;
    $98 = $datasrc;
    $99 = (($98) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $bytes_in_buffer = $100;
   }
   $101 = $bytes_in_buffer;
   $102 = (($101) + -1)|0;
   $bytes_in_buffer = $102;
   $103 = $next_input_byte;
   $104 = (($103) + 1|0);
   $next_input_byte = $104;
   $105 = HEAP8[$103>>0]|0;
   $106 = $i;
   $107 = (($bits) + ($106)|0);
   HEAP8[$107>>0] = $105;
   $108 = $i;
   $109 = (($bits) + ($108)|0);
   $110 = HEAP8[$109>>0]|0;
   $111 = $110&255;
   $112 = $count;
   $113 = (($112) + ($111))|0;
   $count = $113;
   $114 = $i;
   $115 = (($114) + 1)|0;
   $i = $115;
  }
  $116 = $length;
  $117 = (($116) - 17)|0;
  $length = $117;
  $118 = $1;
  $119 = HEAP32[$118>>2]|0;
  $120 = (($119) + 24|0);
  $_mp = $120;
  $121 = (($bits) + 1|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = $_mp;
  HEAP32[$124>>2] = $123;
  $125 = (($bits) + 2|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&255;
  $128 = $_mp;
  $129 = (($128) + 4|0);
  HEAP32[$129>>2] = $127;
  $130 = (($bits) + 3|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = $_mp;
  $134 = (($133) + 8|0);
  HEAP32[$134>>2] = $132;
  $135 = (($bits) + 4|0);
  $136 = HEAP8[$135>>0]|0;
  $137 = $136&255;
  $138 = $_mp;
  $139 = (($138) + 12|0);
  HEAP32[$139>>2] = $137;
  $140 = (($bits) + 5|0);
  $141 = HEAP8[$140>>0]|0;
  $142 = $141&255;
  $143 = $_mp;
  $144 = (($143) + 16|0);
  HEAP32[$144>>2] = $142;
  $145 = (($bits) + 6|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = $146&255;
  $148 = $_mp;
  $149 = (($148) + 20|0);
  HEAP32[$149>>2] = $147;
  $150 = (($bits) + 7|0);
  $151 = HEAP8[$150>>0]|0;
  $152 = $151&255;
  $153 = $_mp;
  $154 = (($153) + 24|0);
  HEAP32[$154>>2] = $152;
  $155 = (($bits) + 8|0);
  $156 = HEAP8[$155>>0]|0;
  $157 = $156&255;
  $158 = $_mp;
  $159 = (($158) + 28|0);
  HEAP32[$159>>2] = $157;
  $160 = $1;
  $161 = HEAP32[$160>>2]|0;
  $162 = (($161) + 20|0);
  HEAP32[$162>>2] = 88;
  $163 = $1;
  $164 = HEAP32[$163>>2]|0;
  $165 = (($164) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $1;
  FUNCTION_TABLE_vii[$166 & 511]($167,2);
  $168 = $1;
  $169 = HEAP32[$168>>2]|0;
  $170 = (($169) + 24|0);
  $_mp1 = $170;
  $171 = (($bits) + 9|0);
  $172 = HEAP8[$171>>0]|0;
  $173 = $172&255;
  $174 = $_mp1;
  HEAP32[$174>>2] = $173;
  $175 = (($bits) + 10|0);
  $176 = HEAP8[$175>>0]|0;
  $177 = $176&255;
  $178 = $_mp1;
  $179 = (($178) + 4|0);
  HEAP32[$179>>2] = $177;
  $180 = (($bits) + 11|0);
  $181 = HEAP8[$180>>0]|0;
  $182 = $181&255;
  $183 = $_mp1;
  $184 = (($183) + 8|0);
  HEAP32[$184>>2] = $182;
  $185 = (($bits) + 12|0);
  $186 = HEAP8[$185>>0]|0;
  $187 = $186&255;
  $188 = $_mp1;
  $189 = (($188) + 12|0);
  HEAP32[$189>>2] = $187;
  $190 = (($bits) + 13|0);
  $191 = HEAP8[$190>>0]|0;
  $192 = $191&255;
  $193 = $_mp1;
  $194 = (($193) + 16|0);
  HEAP32[$194>>2] = $192;
  $195 = (($bits) + 14|0);
  $196 = HEAP8[$195>>0]|0;
  $197 = $196&255;
  $198 = $_mp1;
  $199 = (($198) + 20|0);
  HEAP32[$199>>2] = $197;
  $200 = (($bits) + 15|0);
  $201 = HEAP8[$200>>0]|0;
  $202 = $201&255;
  $203 = $_mp1;
  $204 = (($203) + 24|0);
  HEAP32[$204>>2] = $202;
  $205 = (($bits) + 16|0);
  $206 = HEAP8[$205>>0]|0;
  $207 = $206&255;
  $208 = $_mp1;
  $209 = (($208) + 28|0);
  HEAP32[$209>>2] = $207;
  $210 = $1;
  $211 = HEAP32[$210>>2]|0;
  $212 = (($211) + 20|0);
  HEAP32[$212>>2] = 88;
  $213 = $1;
  $214 = HEAP32[$213>>2]|0;
  $215 = (($214) + 4|0);
  $216 = HEAP32[$215>>2]|0;
  $217 = $1;
  FUNCTION_TABLE_vii[$216 & 511]($217,2);
  $218 = $count;
  $219 = ($218|0)>(256);
  if ($219) {
   label = 35;
  } else {
   $220 = $count;
   $221 = $length;
   $222 = ($220|0)>($221|0);
   if ($222) {
    label = 35;
   }
  }
  if ((label|0) == 35) {
   label = 0;
   $223 = $1;
   $224 = HEAP32[$223>>2]|0;
   $225 = (($224) + 20|0);
   HEAP32[$225>>2] = 9;
   $226 = $1;
   $227 = HEAP32[$226>>2]|0;
   $228 = HEAP32[$227>>2]|0;
   $229 = $1;
   FUNCTION_TABLE_vi[$228 & 511]($229);
  }
  _memset(($huffval|0),0,256)|0;
  $i = 0;
  while(1) {
   $230 = $i;
   $231 = $count;
   $232 = ($230|0)<($231|0);
   if (!($232)) {
    break;
   }
   $233 = $bytes_in_buffer;
   $234 = ($233|0)==(0);
   if ($234) {
    $235 = $datasrc;
    $236 = (($235) + 12|0);
    $237 = HEAP32[$236>>2]|0;
    $238 = $1;
    $239 = (FUNCTION_TABLE_ii[$237 & 255]($238)|0);
    $240 = ($239|0)!=(0);
    if (!($240)) {
     label = 41;
     break L17;
    }
    $241 = $datasrc;
    $242 = HEAP32[$241>>2]|0;
    $next_input_byte = $242;
    $243 = $datasrc;
    $244 = (($243) + 4|0);
    $245 = HEAP32[$244>>2]|0;
    $bytes_in_buffer = $245;
   }
   $246 = $bytes_in_buffer;
   $247 = (($246) + -1)|0;
   $bytes_in_buffer = $247;
   $248 = $next_input_byte;
   $249 = (($248) + 1|0);
   $next_input_byte = $249;
   $250 = HEAP8[$248>>0]|0;
   $251 = $i;
   $252 = (($huffval) + ($251)|0);
   HEAP8[$252>>0] = $250;
   $253 = $i;
   $254 = (($253) + 1)|0;
   $i = $254;
  }
  $255 = $count;
  $256 = $length;
  $257 = (($256) - ($255))|0;
  $length = $257;
  $258 = $index;
  $259 = $258 & 16;
  $260 = ($259|0)!=(0);
  if ($260) {
   $261 = $index;
   $262 = (($261) - 16)|0;
   $index = $262;
   $263 = $index;
   $264 = $1;
   $265 = (($264) + 196|0);
   $266 = (($265) + ($263<<2)|0);
   $htblptr = $266;
  } else {
   $267 = $index;
   $268 = $1;
   $269 = (($268) + 180|0);
   $270 = (($269) + ($267<<2)|0);
   $htblptr = $270;
  }
  $271 = $index;
  $272 = ($271|0)<(0);
  if ($272) {
   label = 51;
  } else {
   $273 = $index;
   $274 = ($273|0)>=(4);
   if ($274) {
    label = 51;
   }
  }
  if ((label|0) == 51) {
   label = 0;
   $275 = $1;
   $276 = HEAP32[$275>>2]|0;
   $277 = (($276) + 20|0);
   HEAP32[$277>>2] = 31;
   $278 = $index;
   $279 = $1;
   $280 = HEAP32[$279>>2]|0;
   $281 = (($280) + 24|0);
   HEAP32[$281>>2] = $278;
   $282 = $1;
   $283 = HEAP32[$282>>2]|0;
   $284 = HEAP32[$283>>2]|0;
   $285 = $1;
   FUNCTION_TABLE_vi[$284 & 511]($285);
  }
  $286 = $htblptr;
  $287 = HEAP32[$286>>2]|0;
  $288 = ($287|0)==(0|0);
  if ($288) {
   $289 = $1;
   $290 = (_jpeg_alloc_huff_table($289)|0);
   $291 = $htblptr;
   HEAP32[$291>>2] = $290;
  }
  $292 = $htblptr;
  $293 = HEAP32[$292>>2]|0;
  dest=$293+0|0; src=$bits+0|0; stop=dest+17|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
  $294 = $htblptr;
  $295 = HEAP32[$294>>2]|0;
  $296 = (($295) + 17|0);
  _memcpy(($296|0),($huffval|0),256)|0;
 }
 if ((label|0) == 16) {
  $0 = 0;
  $311 = $0;
  STACKTOP = sp;return ($311|0);
 }
 else if ((label|0) == 24) {
  $0 = 0;
  $311 = $0;
  STACKTOP = sp;return ($311|0);
 }
 else if ((label|0) == 41) {
  $0 = 0;
  $311 = $0;
  STACKTOP = sp;return ($311|0);
 }
 else if ((label|0) == 55) {
  $297 = $length;
  $298 = ($297|0)!=(0);
  if ($298) {
   $299 = $1;
   $300 = HEAP32[$299>>2]|0;
   $301 = (($300) + 20|0);
   HEAP32[$301>>2] = 12;
   $302 = $1;
   $303 = HEAP32[$302>>2]|0;
   $304 = HEAP32[$303>>2]|0;
   $305 = $1;
   FUNCTION_TABLE_vi[$304 & 511]($305);
  }
  $306 = $next_input_byte;
  $307 = $datasrc;
  HEAP32[$307>>2] = $306;
  $308 = $bytes_in_buffer;
  $309 = $datasrc;
  $310 = (($309) + 4|0);
  HEAP32[$310>>2] = $308;
  $0 = 1;
  $311 = $0;
  STACKTOP = sp;return ($311|0);
 }
 return 0|0;
}
function _get_dqt($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_mp = 0, $bytes_in_buffer = 0, $count = 0, $datasrc = 0, $i = 0, $length = 0, $n = 0, $natural_order = 0, $next_input_byte = 0;
 var $prec = 0, $quant_ptr = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $datasrc = $4;
 $5 = $datasrc;
 $6 = HEAP32[$5>>2]|0;
 $next_input_byte = $6;
 $7 = $datasrc;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $bytes_in_buffer = $9;
 $10 = $bytes_in_buffer;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = $datasrc;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (FUNCTION_TABLE_ii[$14 & 255]($15)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $datasrc;
    $19 = HEAP32[$18>>2]|0;
    $next_input_byte = $19;
    $20 = $datasrc;
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $bytes_in_buffer = $22;
    break;
   }
   $0 = 0;
   $330 = $0;
   STACKTOP = sp;return ($330|0);
  }
 } while(0);
 $23 = $bytes_in_buffer;
 $24 = (($23) + -1)|0;
 $bytes_in_buffer = $24;
 $25 = $next_input_byte;
 $26 = (($25) + 1|0);
 $next_input_byte = $26;
 $27 = HEAP8[$25>>0]|0;
 $28 = $27&255;
 $29 = $28 << 8;
 $length = $29;
 $30 = $bytes_in_buffer;
 $31 = ($30|0)==(0);
 do {
  if ($31) {
   $32 = $datasrc;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $1;
   $36 = (FUNCTION_TABLE_ii[$34 & 255]($35)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $datasrc;
    $39 = HEAP32[$38>>2]|0;
    $next_input_byte = $39;
    $40 = $datasrc;
    $41 = (($40) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $bytes_in_buffer = $42;
    break;
   }
   $0 = 0;
   $330 = $0;
   STACKTOP = sp;return ($330|0);
  }
 } while(0);
 $43 = $bytes_in_buffer;
 $44 = (($43) + -1)|0;
 $bytes_in_buffer = $44;
 $45 = $next_input_byte;
 $46 = (($45) + 1|0);
 $next_input_byte = $46;
 $47 = HEAP8[$45>>0]|0;
 $48 = $47&255;
 $49 = $length;
 $50 = (($49) + ($48))|0;
 $length = $50;
 $51 = $length;
 $52 = (($51) - 2)|0;
 $length = $52;
 L17: while(1) {
  $53 = $length;
  $54 = ($53|0)>(0);
  if (!($54)) {
   label = 82;
   break;
  }
  $55 = $length;
  $56 = (($55) + -1)|0;
  $length = $56;
  $57 = $bytes_in_buffer;
  $58 = ($57|0)==(0);
  if ($58) {
   $59 = $datasrc;
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $1;
   $63 = (FUNCTION_TABLE_ii[$61 & 255]($62)|0);
   $64 = ($63|0)!=(0);
   if (!($64)) {
    label = 16;
    break;
   }
   $65 = $datasrc;
   $66 = HEAP32[$65>>2]|0;
   $next_input_byte = $66;
   $67 = $datasrc;
   $68 = (($67) + 4|0);
   $69 = HEAP32[$68>>2]|0;
   $bytes_in_buffer = $69;
  }
  $70 = $bytes_in_buffer;
  $71 = (($70) + -1)|0;
  $bytes_in_buffer = $71;
  $72 = $next_input_byte;
  $73 = (($72) + 1|0);
  $next_input_byte = $73;
  $74 = HEAP8[$72>>0]|0;
  $75 = $74&255;
  $n = $75;
  $76 = $n;
  $77 = $76 >> 4;
  $prec = $77;
  $78 = $n;
  $79 = $78 & 15;
  $n = $79;
  $80 = $1;
  $81 = HEAP32[$80>>2]|0;
  $82 = (($81) + 20|0);
  HEAP32[$82>>2] = 83;
  $83 = $n;
  $84 = $1;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + 24|0);
  HEAP32[$86>>2] = $83;
  $87 = $prec;
  $88 = $1;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + 24|0);
  $91 = (($90) + 4|0);
  HEAP32[$91>>2] = $87;
  $92 = $1;
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $1;
  FUNCTION_TABLE_vii[$95 & 511]($96,1);
  $97 = $n;
  $98 = ($97|0)>=(4);
  if ($98) {
   $99 = $1;
   $100 = HEAP32[$99>>2]|0;
   $101 = (($100) + 20|0);
   HEAP32[$101>>2] = 32;
   $102 = $n;
   $103 = $1;
   $104 = HEAP32[$103>>2]|0;
   $105 = (($104) + 24|0);
   HEAP32[$105>>2] = $102;
   $106 = $1;
   $107 = HEAP32[$106>>2]|0;
   $108 = HEAP32[$107>>2]|0;
   $109 = $1;
   FUNCTION_TABLE_vi[$108 & 511]($109);
  }
  $110 = $n;
  $111 = $1;
  $112 = (($111) + 164|0);
  $113 = (($112) + ($110<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114|0)==(0|0);
  if ($115) {
   $116 = $1;
   $117 = (_jpeg_alloc_quant_table($116)|0);
   $118 = $n;
   $119 = $1;
   $120 = (($119) + 164|0);
   $121 = (($120) + ($118<<2)|0);
   HEAP32[$121>>2] = $117;
  }
  $122 = $n;
  $123 = $1;
  $124 = (($123) + 164|0);
  $125 = (($124) + ($122<<2)|0);
  $126 = HEAP32[$125>>2]|0;
  $quant_ptr = $126;
  $127 = $prec;
  $128 = ($127|0)!=(0);
  if ($128) {
   $129 = $length;
   $130 = ($129|0)<(128);
   if ($130) {
    $i = 0;
    while(1) {
     $131 = $i;
     $132 = ($131|0)<(64);
     if (!($132)) {
      break;
     }
     $133 = $i;
     $134 = $quant_ptr;
     $135 = (($134) + ($133<<1)|0);
     HEAP16[$135>>1] = 1;
     $136 = $i;
     $137 = (($136) + 1)|0;
     $i = $137;
    }
    $138 = $length;
    $139 = $138 >> 1;
    $count = $139;
   } else {
    $count = 64;
   }
  } else {
   $140 = $length;
   $141 = ($140|0)<(64);
   if ($141) {
    $i = 0;
    while(1) {
     $142 = $i;
     $143 = ($142|0)<(64);
     if (!($143)) {
      break;
     }
     $144 = $i;
     $145 = $quant_ptr;
     $146 = (($145) + ($144<<1)|0);
     HEAP16[$146>>1] = 1;
     $147 = $i;
     $148 = (($147) + 1)|0;
     $i = $148;
    }
    $149 = $length;
    $count = $149;
   } else {
    $count = 64;
   }
  }
  $150 = $count;
  switch ($150|0) {
  case 49:  {
   $natural_order = 9208;
   break;
  }
  case 4:  {
   $natural_order = 10080;
   break;
  }
  case 9:  {
   $natural_order = 9976;
   break;
  }
  case 16:  {
   $natural_order = 9848;
   break;
  }
  case 25:  {
   $natural_order = 9680;
   break;
  }
  case 36:  {
   $natural_order = 9472;
   break;
  }
  default: {
   $natural_order = 8888;
  }
  }
  $i = 0;
  while(1) {
   $151 = $i;
   $152 = $count;
   $153 = ($151|0)<($152|0);
   if (!($153)) {
    break;
   }
   $154 = $prec;
   $155 = ($154|0)!=(0);
   if ($155) {
    $156 = $bytes_in_buffer;
    $157 = ($156|0)==(0);
    if ($157) {
     $158 = $datasrc;
     $159 = (($158) + 12|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = $1;
     $162 = (FUNCTION_TABLE_ii[$160 & 255]($161)|0);
     $163 = ($162|0)!=(0);
     if (!($163)) {
      label = 54;
      break L17;
     }
     $164 = $datasrc;
     $165 = HEAP32[$164>>2]|0;
     $next_input_byte = $165;
     $166 = $datasrc;
     $167 = (($166) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $bytes_in_buffer = $168;
    }
    $169 = $bytes_in_buffer;
    $170 = (($169) + -1)|0;
    $bytes_in_buffer = $170;
    $171 = $next_input_byte;
    $172 = (($171) + 1|0);
    $next_input_byte = $172;
    $173 = HEAP8[$171>>0]|0;
    $174 = $173&255;
    $175 = $174 << 8;
    $tmp = $175;
    $176 = $bytes_in_buffer;
    $177 = ($176|0)==(0);
    if ($177) {
     $178 = $datasrc;
     $179 = (($178) + 12|0);
     $180 = HEAP32[$179>>2]|0;
     $181 = $1;
     $182 = (FUNCTION_TABLE_ii[$180 & 255]($181)|0);
     $183 = ($182|0)!=(0);
     if (!($183)) {
      label = 58;
      break L17;
     }
     $184 = $datasrc;
     $185 = HEAP32[$184>>2]|0;
     $next_input_byte = $185;
     $186 = $datasrc;
     $187 = (($186) + 4|0);
     $188 = HEAP32[$187>>2]|0;
     $bytes_in_buffer = $188;
    }
    $189 = $bytes_in_buffer;
    $190 = (($189) + -1)|0;
    $bytes_in_buffer = $190;
    $191 = $next_input_byte;
    $192 = (($191) + 1|0);
    $next_input_byte = $192;
    $193 = HEAP8[$191>>0]|0;
    $194 = $193&255;
    $195 = $tmp;
    $196 = (($195) + ($194))|0;
    $tmp = $196;
   } else {
    $197 = $bytes_in_buffer;
    $198 = ($197|0)==(0);
    if ($198) {
     $199 = $datasrc;
     $200 = (($199) + 12|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = $1;
     $203 = (FUNCTION_TABLE_ii[$201 & 255]($202)|0);
     $204 = ($203|0)!=(0);
     if (!($204)) {
      label = 65;
      break L17;
     }
     $205 = $datasrc;
     $206 = HEAP32[$205>>2]|0;
     $next_input_byte = $206;
     $207 = $datasrc;
     $208 = (($207) + 4|0);
     $209 = HEAP32[$208>>2]|0;
     $bytes_in_buffer = $209;
    }
    $210 = $bytes_in_buffer;
    $211 = (($210) + -1)|0;
    $bytes_in_buffer = $211;
    $212 = $next_input_byte;
    $213 = (($212) + 1|0);
    $next_input_byte = $213;
    $214 = HEAP8[$212>>0]|0;
    $215 = $214&255;
    $tmp = $215;
   }
   $216 = $tmp;
   $217 = $216&65535;
   $218 = $i;
   $219 = $natural_order;
   $220 = (($219) + ($218<<2)|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = $quant_ptr;
   $223 = (($222) + ($221<<1)|0);
   HEAP16[$223>>1] = $217;
   $224 = $i;
   $225 = (($224) + 1)|0;
   $i = $225;
  }
  $226 = $1;
  $227 = HEAP32[$226>>2]|0;
  $228 = (($227) + 104|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = ($229|0)>=(2);
  if ($230) {
   $i = 0;
   while(1) {
    $231 = $i;
    $232 = ($231|0)<(64);
    if (!($232)) {
     break;
    }
    $233 = $1;
    $234 = HEAP32[$233>>2]|0;
    $235 = (($234) + 24|0);
    $_mp = $235;
    $236 = $i;
    $237 = $quant_ptr;
    $238 = (($237) + ($236<<1)|0);
    $239 = HEAP16[$238>>1]|0;
    $240 = $239&65535;
    $241 = $_mp;
    HEAP32[$241>>2] = $240;
    $242 = $i;
    $243 = (($242) + 1)|0;
    $244 = $quant_ptr;
    $245 = (($244) + ($243<<1)|0);
    $246 = HEAP16[$245>>1]|0;
    $247 = $246&65535;
    $248 = $_mp;
    $249 = (($248) + 4|0);
    HEAP32[$249>>2] = $247;
    $250 = $i;
    $251 = (($250) + 2)|0;
    $252 = $quant_ptr;
    $253 = (($252) + ($251<<1)|0);
    $254 = HEAP16[$253>>1]|0;
    $255 = $254&65535;
    $256 = $_mp;
    $257 = (($256) + 8|0);
    HEAP32[$257>>2] = $255;
    $258 = $i;
    $259 = (($258) + 3)|0;
    $260 = $quant_ptr;
    $261 = (($260) + ($259<<1)|0);
    $262 = HEAP16[$261>>1]|0;
    $263 = $262&65535;
    $264 = $_mp;
    $265 = (($264) + 12|0);
    HEAP32[$265>>2] = $263;
    $266 = $i;
    $267 = (($266) + 4)|0;
    $268 = $quant_ptr;
    $269 = (($268) + ($267<<1)|0);
    $270 = HEAP16[$269>>1]|0;
    $271 = $270&65535;
    $272 = $_mp;
    $273 = (($272) + 16|0);
    HEAP32[$273>>2] = $271;
    $274 = $i;
    $275 = (($274) + 5)|0;
    $276 = $quant_ptr;
    $277 = (($276) + ($275<<1)|0);
    $278 = HEAP16[$277>>1]|0;
    $279 = $278&65535;
    $280 = $_mp;
    $281 = (($280) + 20|0);
    HEAP32[$281>>2] = $279;
    $282 = $i;
    $283 = (($282) + 6)|0;
    $284 = $quant_ptr;
    $285 = (($284) + ($283<<1)|0);
    $286 = HEAP16[$285>>1]|0;
    $287 = $286&65535;
    $288 = $_mp;
    $289 = (($288) + 24|0);
    HEAP32[$289>>2] = $287;
    $290 = $i;
    $291 = (($290) + 7)|0;
    $292 = $quant_ptr;
    $293 = (($292) + ($291<<1)|0);
    $294 = HEAP16[$293>>1]|0;
    $295 = $294&65535;
    $296 = $_mp;
    $297 = (($296) + 28|0);
    HEAP32[$297>>2] = $295;
    $298 = $1;
    $299 = HEAP32[$298>>2]|0;
    $300 = (($299) + 20|0);
    HEAP32[$300>>2] = 95;
    $301 = $1;
    $302 = HEAP32[$301>>2]|0;
    $303 = (($302) + 4|0);
    $304 = HEAP32[$303>>2]|0;
    $305 = $1;
    FUNCTION_TABLE_vii[$304 & 511]($305,2);
    $306 = $i;
    $307 = (($306) + 8)|0;
    $i = $307;
   }
  }
  $308 = $count;
  $309 = $length;
  $310 = (($309) - ($308))|0;
  $length = $310;
  $311 = $prec;
  $312 = ($311|0)!=(0);
  if ($312) {
   $313 = $count;
   $314 = $length;
   $315 = (($314) - ($313))|0;
   $length = $315;
  }
 }
 if ((label|0) == 16) {
  $0 = 0;
  $330 = $0;
  STACKTOP = sp;return ($330|0);
 }
 else if ((label|0) == 54) {
  $0 = 0;
  $330 = $0;
  STACKTOP = sp;return ($330|0);
 }
 else if ((label|0) == 58) {
  $0 = 0;
  $330 = $0;
  STACKTOP = sp;return ($330|0);
 }
 else if ((label|0) == 65) {
  $0 = 0;
  $330 = $0;
  STACKTOP = sp;return ($330|0);
 }
 else if ((label|0) == 82) {
  $316 = $length;
  $317 = ($316|0)!=(0);
  if ($317) {
   $318 = $1;
   $319 = HEAP32[$318>>2]|0;
   $320 = (($319) + 20|0);
   HEAP32[$320>>2] = 12;
   $321 = $1;
   $322 = HEAP32[$321>>2]|0;
   $323 = HEAP32[$322>>2]|0;
   $324 = $1;
   FUNCTION_TABLE_vi[$323 & 511]($324);
  }
  $325 = $next_input_byte;
  $326 = $datasrc;
  HEAP32[$326>>2] = $325;
  $327 = $bytes_in_buffer;
  $328 = $datasrc;
  $329 = (($328) + 4|0);
  HEAP32[$329>>2] = $327;
  $0 = 1;
  $330 = $0;
  STACKTOP = sp;return ($330|0);
 }
 return 0|0;
}
function _get_dri($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bytes_in_buffer = 0, $datasrc = 0, $length = 0, $next_input_byte = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $datasrc = $4;
 $5 = $datasrc;
 $6 = HEAP32[$5>>2]|0;
 $next_input_byte = $6;
 $7 = $datasrc;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $bytes_in_buffer = $9;
 $10 = $bytes_in_buffer;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = $datasrc;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $1;
   $16 = (FUNCTION_TABLE_ii[$14 & 255]($15)|0);
   $17 = ($16|0)!=(0);
   if ($17) {
    $18 = $datasrc;
    $19 = HEAP32[$18>>2]|0;
    $next_input_byte = $19;
    $20 = $datasrc;
    $21 = (($20) + 4|0);
    $22 = HEAP32[$21>>2]|0;
    $bytes_in_buffer = $22;
    break;
   }
   $0 = 0;
   $121 = $0;
   STACKTOP = sp;return ($121|0);
  }
 } while(0);
 $23 = $bytes_in_buffer;
 $24 = (($23) + -1)|0;
 $bytes_in_buffer = $24;
 $25 = $next_input_byte;
 $26 = (($25) + 1|0);
 $next_input_byte = $26;
 $27 = HEAP8[$25>>0]|0;
 $28 = $27&255;
 $29 = $28 << 8;
 $length = $29;
 $30 = $bytes_in_buffer;
 $31 = ($30|0)==(0);
 do {
  if ($31) {
   $32 = $datasrc;
   $33 = (($32) + 12|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $1;
   $36 = (FUNCTION_TABLE_ii[$34 & 255]($35)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $datasrc;
    $39 = HEAP32[$38>>2]|0;
    $next_input_byte = $39;
    $40 = $datasrc;
    $41 = (($40) + 4|0);
    $42 = HEAP32[$41>>2]|0;
    $bytes_in_buffer = $42;
    break;
   }
   $0 = 0;
   $121 = $0;
   STACKTOP = sp;return ($121|0);
  }
 } while(0);
 $43 = $bytes_in_buffer;
 $44 = (($43) + -1)|0;
 $bytes_in_buffer = $44;
 $45 = $next_input_byte;
 $46 = (($45) + 1|0);
 $next_input_byte = $46;
 $47 = HEAP8[$45>>0]|0;
 $48 = $47&255;
 $49 = $length;
 $50 = (($49) + ($48))|0;
 $length = $50;
 $51 = $length;
 $52 = ($51|0)!=(4);
 if ($52) {
  $53 = $1;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 20|0);
  HEAP32[$55>>2] = 12;
  $56 = $1;
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$57>>2]|0;
  $59 = $1;
  FUNCTION_TABLE_vi[$58 & 511]($59);
 }
 $60 = $bytes_in_buffer;
 $61 = ($60|0)==(0);
 do {
  if ($61) {
   $62 = $datasrc;
   $63 = (($62) + 12|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $1;
   $66 = (FUNCTION_TABLE_ii[$64 & 255]($65)|0);
   $67 = ($66|0)!=(0);
   if ($67) {
    $68 = $datasrc;
    $69 = HEAP32[$68>>2]|0;
    $next_input_byte = $69;
    $70 = $datasrc;
    $71 = (($70) + 4|0);
    $72 = HEAP32[$71>>2]|0;
    $bytes_in_buffer = $72;
    break;
   }
   $0 = 0;
   $121 = $0;
   STACKTOP = sp;return ($121|0);
  }
 } while(0);
 $73 = $bytes_in_buffer;
 $74 = (($73) + -1)|0;
 $bytes_in_buffer = $74;
 $75 = $next_input_byte;
 $76 = (($75) + 1|0);
 $next_input_byte = $76;
 $77 = HEAP8[$75>>0]|0;
 $78 = $77&255;
 $79 = $78 << 8;
 $tmp = $79;
 $80 = $bytes_in_buffer;
 $81 = ($80|0)==(0);
 do {
  if ($81) {
   $82 = $datasrc;
   $83 = (($82) + 12|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $1;
   $86 = (FUNCTION_TABLE_ii[$84 & 255]($85)|0);
   $87 = ($86|0)!=(0);
   if ($87) {
    $88 = $datasrc;
    $89 = HEAP32[$88>>2]|0;
    $next_input_byte = $89;
    $90 = $datasrc;
    $91 = (($90) + 4|0);
    $92 = HEAP32[$91>>2]|0;
    $bytes_in_buffer = $92;
    break;
   }
   $0 = 0;
   $121 = $0;
   STACKTOP = sp;return ($121|0);
  }
 } while(0);
 $93 = $bytes_in_buffer;
 $94 = (($93) + -1)|0;
 $bytes_in_buffer = $94;
 $95 = $next_input_byte;
 $96 = (($95) + 1|0);
 $next_input_byte = $96;
 $97 = HEAP8[$95>>0]|0;
 $98 = $97&255;
 $99 = $tmp;
 $100 = (($99) + ($98))|0;
 $tmp = $100;
 $101 = $1;
 $102 = HEAP32[$101>>2]|0;
 $103 = (($102) + 20|0);
 HEAP32[$103>>2] = 84;
 $104 = $tmp;
 $105 = $1;
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + 24|0);
 HEAP32[$107>>2] = $104;
 $108 = $1;
 $109 = HEAP32[$108>>2]|0;
 $110 = (($109) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $1;
 FUNCTION_TABLE_vii[$111 & 511]($112,1);
 $113 = $tmp;
 $114 = $1;
 $115 = (($114) + 280|0);
 HEAP32[$115>>2] = $113;
 $116 = $next_input_byte;
 $117 = $datasrc;
 HEAP32[$117>>2] = $116;
 $118 = $bytes_in_buffer;
 $119 = $datasrc;
 $120 = (($119) + 4|0);
 HEAP32[$120>>2] = $118;
 $0 = 1;
 $121 = $0;
 STACKTOP = sp;return ($121|0);
}
function _get_lse($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytes_in_buffer = 0, $cid = 0, $datasrc = 0, $length = 0, $next_input_byte = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $datasrc = $4;
 $5 = $datasrc;
 $6 = HEAP32[$5>>2]|0;
 $next_input_byte = $6;
 $7 = $datasrc;
 $8 = (($7) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $bytes_in_buffer = $9;
 $10 = $1;
 $11 = (($10) + 464|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (($12) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)!=(0);
 if (!($15)) {
  $16 = $1;
  $17 = HEAP32[$16>>2]|0;
  $18 = (($17) + 20|0);
  HEAP32[$18>>2] = 60;
  $19 = $1;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 24|0);
  (_strncpy(($21|0),(2976|0),80)|0);
  $22 = $1;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  FUNCTION_TABLE_vi[$24 & 511]($25);
 }
 $26 = $1;
 $27 = (($26) + 36|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)<(3);
 do {
  if ($29) {
   label = 165;
  } else {
   $30 = $bytes_in_buffer;
   $31 = ($30|0)==(0);
   do {
    if ($31) {
     $32 = $datasrc;
     $33 = (($32) + 12|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = $1;
     $36 = (FUNCTION_TABLE_ii[$34 & 255]($35)|0);
     $37 = ($36|0)!=(0);
     if ($37) {
      $38 = $datasrc;
      $39 = HEAP32[$38>>2]|0;
      $next_input_byte = $39;
      $40 = $datasrc;
      $41 = (($40) + 4|0);
      $42 = HEAP32[$41>>2]|0;
      $bytes_in_buffer = $42;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $43 = $bytes_in_buffer;
   $44 = (($43) + -1)|0;
   $bytes_in_buffer = $44;
   $45 = $next_input_byte;
   $46 = (($45) + 1|0);
   $next_input_byte = $46;
   $47 = HEAP8[$45>>0]|0;
   $48 = $47&255;
   $49 = $48 << 8;
   $length = $49;
   $50 = $bytes_in_buffer;
   $51 = ($50|0)==(0);
   do {
    if ($51) {
     $52 = $datasrc;
     $53 = (($52) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = $1;
     $56 = (FUNCTION_TABLE_ii[$54 & 255]($55)|0);
     $57 = ($56|0)!=(0);
     if ($57) {
      $58 = $datasrc;
      $59 = HEAP32[$58>>2]|0;
      $next_input_byte = $59;
      $60 = $datasrc;
      $61 = (($60) + 4|0);
      $62 = HEAP32[$61>>2]|0;
      $bytes_in_buffer = $62;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $63 = $bytes_in_buffer;
   $64 = (($63) + -1)|0;
   $bytes_in_buffer = $64;
   $65 = $next_input_byte;
   $66 = (($65) + 1|0);
   $next_input_byte = $66;
   $67 = HEAP8[$65>>0]|0;
   $68 = $67&255;
   $69 = $length;
   $70 = (($69) + ($68))|0;
   $length = $70;
   $71 = $length;
   $72 = ($71|0)!=(24);
   if ($72) {
    $73 = $1;
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + 20|0);
    HEAP32[$75>>2] = 12;
    $76 = $1;
    $77 = HEAP32[$76>>2]|0;
    $78 = HEAP32[$77>>2]|0;
    $79 = $1;
    FUNCTION_TABLE_vi[$78 & 511]($79);
   }
   $80 = $bytes_in_buffer;
   $81 = ($80|0)==(0);
   do {
    if ($81) {
     $82 = $datasrc;
     $83 = (($82) + 12|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = $1;
     $86 = (FUNCTION_TABLE_ii[$84 & 255]($85)|0);
     $87 = ($86|0)!=(0);
     if ($87) {
      $88 = $datasrc;
      $89 = HEAP32[$88>>2]|0;
      $next_input_byte = $89;
      $90 = $datasrc;
      $91 = (($90) + 4|0);
      $92 = HEAP32[$91>>2]|0;
      $bytes_in_buffer = $92;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $93 = $bytes_in_buffer;
   $94 = (($93) + -1)|0;
   $bytes_in_buffer = $94;
   $95 = $next_input_byte;
   $96 = (($95) + 1|0);
   $next_input_byte = $96;
   $97 = HEAP8[$95>>0]|0;
   $98 = $97&255;
   $tmp = $98;
   $99 = $tmp;
   $100 = ($99|0)!=(13);
   if ($100) {
    $101 = $1;
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + 20|0);
    HEAP32[$103>>2] = 70;
    $104 = $1;
    $105 = (($104) + 440|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $1;
    $108 = HEAP32[$107>>2]|0;
    $109 = (($108) + 24|0);
    HEAP32[$109>>2] = $106;
    $110 = $1;
    $111 = HEAP32[$110>>2]|0;
    $112 = HEAP32[$111>>2]|0;
    $113 = $1;
    FUNCTION_TABLE_vi[$112 & 511]($113);
   }
   $114 = $bytes_in_buffer;
   $115 = ($114|0)==(0);
   do {
    if ($115) {
     $116 = $datasrc;
     $117 = (($116) + 12|0);
     $118 = HEAP32[$117>>2]|0;
     $119 = $1;
     $120 = (FUNCTION_TABLE_ii[$118 & 255]($119)|0);
     $121 = ($120|0)!=(0);
     if ($121) {
      $122 = $datasrc;
      $123 = HEAP32[$122>>2]|0;
      $next_input_byte = $123;
      $124 = $datasrc;
      $125 = (($124) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $bytes_in_buffer = $126;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $127 = $bytes_in_buffer;
   $128 = (($127) + -1)|0;
   $bytes_in_buffer = $128;
   $129 = $next_input_byte;
   $130 = (($129) + 1|0);
   $next_input_byte = $130;
   $131 = HEAP8[$129>>0]|0;
   $132 = $131&255;
   $133 = $132 << 8;
   $tmp = $133;
   $134 = $bytes_in_buffer;
   $135 = ($134|0)==(0);
   do {
    if ($135) {
     $136 = $datasrc;
     $137 = (($136) + 12|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = $1;
     $140 = (FUNCTION_TABLE_ii[$138 & 255]($139)|0);
     $141 = ($140|0)!=(0);
     if ($141) {
      $142 = $datasrc;
      $143 = HEAP32[$142>>2]|0;
      $next_input_byte = $143;
      $144 = $datasrc;
      $145 = (($144) + 4|0);
      $146 = HEAP32[$145>>2]|0;
      $bytes_in_buffer = $146;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $147 = $bytes_in_buffer;
   $148 = (($147) + -1)|0;
   $bytes_in_buffer = $148;
   $149 = $next_input_byte;
   $150 = (($149) + 1|0);
   $next_input_byte = $150;
   $151 = HEAP8[$149>>0]|0;
   $152 = $151&255;
   $153 = $tmp;
   $154 = (($153) + ($152))|0;
   $tmp = $154;
   $155 = $tmp;
   $156 = ($155|0)!=(255);
   if ($156) {
    label = 165;
    break;
   }
   $157 = $bytes_in_buffer;
   $158 = ($157|0)==(0);
   do {
    if ($158) {
     $159 = $datasrc;
     $160 = (($159) + 12|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = $1;
     $163 = (FUNCTION_TABLE_ii[$161 & 255]($162)|0);
     $164 = ($163|0)!=(0);
     if ($164) {
      $165 = $datasrc;
      $166 = HEAP32[$165>>2]|0;
      $next_input_byte = $166;
      $167 = $datasrc;
      $168 = (($167) + 4|0);
      $169 = HEAP32[$168>>2]|0;
      $bytes_in_buffer = $169;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $170 = $bytes_in_buffer;
   $171 = (($170) + -1)|0;
   $bytes_in_buffer = $171;
   $172 = $next_input_byte;
   $173 = (($172) + 1|0);
   $next_input_byte = $173;
   $174 = HEAP8[$172>>0]|0;
   $175 = $174&255;
   $tmp = $175;
   $176 = $tmp;
   $177 = ($176|0)!=(3);
   if ($177) {
    label = 165;
    break;
   }
   $178 = $bytes_in_buffer;
   $179 = ($178|0)==(0);
   do {
    if ($179) {
     $180 = $datasrc;
     $181 = (($180) + 12|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = $1;
     $184 = (FUNCTION_TABLE_ii[$182 & 255]($183)|0);
     $185 = ($184|0)!=(0);
     if ($185) {
      $186 = $datasrc;
      $187 = HEAP32[$186>>2]|0;
      $next_input_byte = $187;
      $188 = $datasrc;
      $189 = (($188) + 4|0);
      $190 = HEAP32[$189>>2]|0;
      $bytes_in_buffer = $190;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $191 = $bytes_in_buffer;
   $192 = (($191) + -1)|0;
   $bytes_in_buffer = $192;
   $193 = $next_input_byte;
   $194 = (($193) + 1|0);
   $next_input_byte = $194;
   $195 = HEAP8[$193>>0]|0;
   $196 = $195&255;
   $cid = $196;
   $197 = $cid;
   $198 = $1;
   $199 = (($198) + 216|0);
   $200 = HEAP32[$199>>2]|0;
   $201 = (($200) + 88|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = ($197|0)!=($202|0);
   if ($203) {
    label = 165;
    break;
   }
   $204 = $bytes_in_buffer;
   $205 = ($204|0)==(0);
   do {
    if ($205) {
     $206 = $datasrc;
     $207 = (($206) + 12|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = $1;
     $210 = (FUNCTION_TABLE_ii[$208 & 255]($209)|0);
     $211 = ($210|0)!=(0);
     if ($211) {
      $212 = $datasrc;
      $213 = HEAP32[$212>>2]|0;
      $next_input_byte = $213;
      $214 = $datasrc;
      $215 = (($214) + 4|0);
      $216 = HEAP32[$215>>2]|0;
      $bytes_in_buffer = $216;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $217 = $bytes_in_buffer;
   $218 = (($217) + -1)|0;
   $bytes_in_buffer = $218;
   $219 = $next_input_byte;
   $220 = (($219) + 1|0);
   $next_input_byte = $220;
   $221 = HEAP8[$219>>0]|0;
   $222 = $221&255;
   $cid = $222;
   $223 = $cid;
   $224 = $1;
   $225 = (($224) + 216|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = HEAP32[$226>>2]|0;
   $228 = ($223|0)!=($227|0);
   if ($228) {
    label = 165;
    break;
   }
   $229 = $bytes_in_buffer;
   $230 = ($229|0)==(0);
   do {
    if ($230) {
     $231 = $datasrc;
     $232 = (($231) + 12|0);
     $233 = HEAP32[$232>>2]|0;
     $234 = $1;
     $235 = (FUNCTION_TABLE_ii[$233 & 255]($234)|0);
     $236 = ($235|0)!=(0);
     if ($236) {
      $237 = $datasrc;
      $238 = HEAP32[$237>>2]|0;
      $next_input_byte = $238;
      $239 = $datasrc;
      $240 = (($239) + 4|0);
      $241 = HEAP32[$240>>2]|0;
      $bytes_in_buffer = $241;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $242 = $bytes_in_buffer;
   $243 = (($242) + -1)|0;
   $bytes_in_buffer = $243;
   $244 = $next_input_byte;
   $245 = (($244) + 1|0);
   $next_input_byte = $245;
   $246 = HEAP8[$244>>0]|0;
   $247 = $246&255;
   $cid = $247;
   $248 = $cid;
   $249 = $1;
   $250 = (($249) + 216|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = (($251) + 176|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = ($248|0)!=($253|0);
   if ($254) {
    label = 165;
    break;
   }
   $255 = $bytes_in_buffer;
   $256 = ($255|0)==(0);
   do {
    if ($256) {
     $257 = $datasrc;
     $258 = (($257) + 12|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = $1;
     $261 = (FUNCTION_TABLE_ii[$259 & 255]($260)|0);
     $262 = ($261|0)!=(0);
     if ($262) {
      $263 = $datasrc;
      $264 = HEAP32[$263>>2]|0;
      $next_input_byte = $264;
      $265 = $datasrc;
      $266 = (($265) + 4|0);
      $267 = HEAP32[$266>>2]|0;
      $bytes_in_buffer = $267;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $268 = $bytes_in_buffer;
   $269 = (($268) + -1)|0;
   $bytes_in_buffer = $269;
   $270 = $next_input_byte;
   $271 = (($270) + 1|0);
   $next_input_byte = $271;
   $272 = HEAP8[$270>>0]|0;
   $273 = $272&255;
   $tmp = $273;
   $274 = $tmp;
   $275 = ($274|0)!=(128);
   if ($275) {
    label = 165;
    break;
   }
   $276 = $bytes_in_buffer;
   $277 = ($276|0)==(0);
   do {
    if ($277) {
     $278 = $datasrc;
     $279 = (($278) + 12|0);
     $280 = HEAP32[$279>>2]|0;
     $281 = $1;
     $282 = (FUNCTION_TABLE_ii[$280 & 255]($281)|0);
     $283 = ($282|0)!=(0);
     if ($283) {
      $284 = $datasrc;
      $285 = HEAP32[$284>>2]|0;
      $next_input_byte = $285;
      $286 = $datasrc;
      $287 = (($286) + 4|0);
      $288 = HEAP32[$287>>2]|0;
      $bytes_in_buffer = $288;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $289 = $bytes_in_buffer;
   $290 = (($289) + -1)|0;
   $bytes_in_buffer = $290;
   $291 = $next_input_byte;
   $292 = (($291) + 1|0);
   $next_input_byte = $292;
   $293 = HEAP8[$291>>0]|0;
   $294 = $293&255;
   $295 = $294 << 8;
   $tmp = $295;
   $296 = $bytes_in_buffer;
   $297 = ($296|0)==(0);
   do {
    if ($297) {
     $298 = $datasrc;
     $299 = (($298) + 12|0);
     $300 = HEAP32[$299>>2]|0;
     $301 = $1;
     $302 = (FUNCTION_TABLE_ii[$300 & 255]($301)|0);
     $303 = ($302|0)!=(0);
     if ($303) {
      $304 = $datasrc;
      $305 = HEAP32[$304>>2]|0;
      $next_input_byte = $305;
      $306 = $datasrc;
      $307 = (($306) + 4|0);
      $308 = HEAP32[$307>>2]|0;
      $bytes_in_buffer = $308;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $309 = $bytes_in_buffer;
   $310 = (($309) + -1)|0;
   $bytes_in_buffer = $310;
   $311 = $next_input_byte;
   $312 = (($311) + 1|0);
   $next_input_byte = $312;
   $313 = HEAP8[$311>>0]|0;
   $314 = $313&255;
   $315 = $tmp;
   $316 = (($315) + ($314))|0;
   $tmp = $316;
   $317 = $tmp;
   $318 = ($317|0)!=(0);
   if ($318) {
    label = 165;
    break;
   }
   $319 = $bytes_in_buffer;
   $320 = ($319|0)==(0);
   do {
    if ($320) {
     $321 = $datasrc;
     $322 = (($321) + 12|0);
     $323 = HEAP32[$322>>2]|0;
     $324 = $1;
     $325 = (FUNCTION_TABLE_ii[$323 & 255]($324)|0);
     $326 = ($325|0)!=(0);
     if ($326) {
      $327 = $datasrc;
      $328 = HEAP32[$327>>2]|0;
      $next_input_byte = $328;
      $329 = $datasrc;
      $330 = (($329) + 4|0);
      $331 = HEAP32[$330>>2]|0;
      $bytes_in_buffer = $331;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $332 = $bytes_in_buffer;
   $333 = (($332) + -1)|0;
   $bytes_in_buffer = $333;
   $334 = $next_input_byte;
   $335 = (($334) + 1|0);
   $next_input_byte = $335;
   $336 = HEAP8[$334>>0]|0;
   $337 = $336&255;
   $338 = $337 << 8;
   $tmp = $338;
   $339 = $bytes_in_buffer;
   $340 = ($339|0)==(0);
   do {
    if ($340) {
     $341 = $datasrc;
     $342 = (($341) + 12|0);
     $343 = HEAP32[$342>>2]|0;
     $344 = $1;
     $345 = (FUNCTION_TABLE_ii[$343 & 255]($344)|0);
     $346 = ($345|0)!=(0);
     if ($346) {
      $347 = $datasrc;
      $348 = HEAP32[$347>>2]|0;
      $next_input_byte = $348;
      $349 = $datasrc;
      $350 = (($349) + 4|0);
      $351 = HEAP32[$350>>2]|0;
      $bytes_in_buffer = $351;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $352 = $bytes_in_buffer;
   $353 = (($352) + -1)|0;
   $bytes_in_buffer = $353;
   $354 = $next_input_byte;
   $355 = (($354) + 1|0);
   $next_input_byte = $355;
   $356 = HEAP8[$354>>0]|0;
   $357 = $356&255;
   $358 = $tmp;
   $359 = (($358) + ($357))|0;
   $tmp = $359;
   $360 = $tmp;
   $361 = ($360|0)!=(0);
   if ($361) {
    label = 165;
    break;
   }
   $362 = $bytes_in_buffer;
   $363 = ($362|0)==(0);
   do {
    if ($363) {
     $364 = $datasrc;
     $365 = (($364) + 12|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = $1;
     $368 = (FUNCTION_TABLE_ii[$366 & 255]($367)|0);
     $369 = ($368|0)!=(0);
     if ($369) {
      $370 = $datasrc;
      $371 = HEAP32[$370>>2]|0;
      $next_input_byte = $371;
      $372 = $datasrc;
      $373 = (($372) + 4|0);
      $374 = HEAP32[$373>>2]|0;
      $bytes_in_buffer = $374;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $375 = $bytes_in_buffer;
   $376 = (($375) + -1)|0;
   $bytes_in_buffer = $376;
   $377 = $next_input_byte;
   $378 = (($377) + 1|0);
   $next_input_byte = $378;
   $379 = HEAP8[$377>>0]|0;
   $380 = $379&255;
   $tmp = $380;
   $381 = $tmp;
   $382 = ($381|0)!=(0);
   if ($382) {
    label = 165;
    break;
   }
   $383 = $bytes_in_buffer;
   $384 = ($383|0)==(0);
   do {
    if ($384) {
     $385 = $datasrc;
     $386 = (($385) + 12|0);
     $387 = HEAP32[$386>>2]|0;
     $388 = $1;
     $389 = (FUNCTION_TABLE_ii[$387 & 255]($388)|0);
     $390 = ($389|0)!=(0);
     if ($390) {
      $391 = $datasrc;
      $392 = HEAP32[$391>>2]|0;
      $next_input_byte = $392;
      $393 = $datasrc;
      $394 = (($393) + 4|0);
      $395 = HEAP32[$394>>2]|0;
      $bytes_in_buffer = $395;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $396 = $bytes_in_buffer;
   $397 = (($396) + -1)|0;
   $bytes_in_buffer = $397;
   $398 = $next_input_byte;
   $399 = (($398) + 1|0);
   $next_input_byte = $399;
   $400 = HEAP8[$398>>0]|0;
   $401 = $400&255;
   $402 = $401 << 8;
   $tmp = $402;
   $403 = $bytes_in_buffer;
   $404 = ($403|0)==(0);
   do {
    if ($404) {
     $405 = $datasrc;
     $406 = (($405) + 12|0);
     $407 = HEAP32[$406>>2]|0;
     $408 = $1;
     $409 = (FUNCTION_TABLE_ii[$407 & 255]($408)|0);
     $410 = ($409|0)!=(0);
     if ($410) {
      $411 = $datasrc;
      $412 = HEAP32[$411>>2]|0;
      $next_input_byte = $412;
      $413 = $datasrc;
      $414 = (($413) + 4|0);
      $415 = HEAP32[$414>>2]|0;
      $bytes_in_buffer = $415;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $416 = $bytes_in_buffer;
   $417 = (($416) + -1)|0;
   $bytes_in_buffer = $417;
   $418 = $next_input_byte;
   $419 = (($418) + 1|0);
   $next_input_byte = $419;
   $420 = HEAP8[$418>>0]|0;
   $421 = $420&255;
   $422 = $tmp;
   $423 = (($422) + ($421))|0;
   $tmp = $423;
   $424 = $tmp;
   $425 = ($424|0)!=(1);
   if ($425) {
    label = 165;
    break;
   }
   $426 = $bytes_in_buffer;
   $427 = ($426|0)==(0);
   do {
    if ($427) {
     $428 = $datasrc;
     $429 = (($428) + 12|0);
     $430 = HEAP32[$429>>2]|0;
     $431 = $1;
     $432 = (FUNCTION_TABLE_ii[$430 & 255]($431)|0);
     $433 = ($432|0)!=(0);
     if ($433) {
      $434 = $datasrc;
      $435 = HEAP32[$434>>2]|0;
      $next_input_byte = $435;
      $436 = $datasrc;
      $437 = (($436) + 4|0);
      $438 = HEAP32[$437>>2]|0;
      $bytes_in_buffer = $438;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $439 = $bytes_in_buffer;
   $440 = (($439) + -1)|0;
   $bytes_in_buffer = $440;
   $441 = $next_input_byte;
   $442 = (($441) + 1|0);
   $next_input_byte = $442;
   $443 = HEAP8[$441>>0]|0;
   $444 = $443&255;
   $445 = $444 << 8;
   $tmp = $445;
   $446 = $bytes_in_buffer;
   $447 = ($446|0)==(0);
   do {
    if ($447) {
     $448 = $datasrc;
     $449 = (($448) + 12|0);
     $450 = HEAP32[$449>>2]|0;
     $451 = $1;
     $452 = (FUNCTION_TABLE_ii[$450 & 255]($451)|0);
     $453 = ($452|0)!=(0);
     if ($453) {
      $454 = $datasrc;
      $455 = HEAP32[$454>>2]|0;
      $next_input_byte = $455;
      $456 = $datasrc;
      $457 = (($456) + 4|0);
      $458 = HEAP32[$457>>2]|0;
      $bytes_in_buffer = $458;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $459 = $bytes_in_buffer;
   $460 = (($459) + -1)|0;
   $bytes_in_buffer = $460;
   $461 = $next_input_byte;
   $462 = (($461) + 1|0);
   $next_input_byte = $462;
   $463 = HEAP8[$461>>0]|0;
   $464 = $463&255;
   $465 = $tmp;
   $466 = (($465) + ($464))|0;
   $tmp = $466;
   $467 = $tmp;
   $468 = ($467|0)!=(0);
   if ($468) {
    label = 165;
    break;
   }
   $469 = $bytes_in_buffer;
   $470 = ($469|0)==(0);
   do {
    if ($470) {
     $471 = $datasrc;
     $472 = (($471) + 12|0);
     $473 = HEAP32[$472>>2]|0;
     $474 = $1;
     $475 = (FUNCTION_TABLE_ii[$473 & 255]($474)|0);
     $476 = ($475|0)!=(0);
     if ($476) {
      $477 = $datasrc;
      $478 = HEAP32[$477>>2]|0;
      $next_input_byte = $478;
      $479 = $datasrc;
      $480 = (($479) + 4|0);
      $481 = HEAP32[$480>>2]|0;
      $bytes_in_buffer = $481;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $482 = $bytes_in_buffer;
   $483 = (($482) + -1)|0;
   $bytes_in_buffer = $483;
   $484 = $next_input_byte;
   $485 = (($484) + 1|0);
   $next_input_byte = $485;
   $486 = HEAP8[$484>>0]|0;
   $487 = $486&255;
   $tmp = $487;
   $488 = $tmp;
   $489 = ($488|0)!=(0);
   if ($489) {
    label = 165;
    break;
   }
   $490 = $bytes_in_buffer;
   $491 = ($490|0)==(0);
   do {
    if ($491) {
     $492 = $datasrc;
     $493 = (($492) + 12|0);
     $494 = HEAP32[$493>>2]|0;
     $495 = $1;
     $496 = (FUNCTION_TABLE_ii[$494 & 255]($495)|0);
     $497 = ($496|0)!=(0);
     if ($497) {
      $498 = $datasrc;
      $499 = HEAP32[$498>>2]|0;
      $next_input_byte = $499;
      $500 = $datasrc;
      $501 = (($500) + 4|0);
      $502 = HEAP32[$501>>2]|0;
      $bytes_in_buffer = $502;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $503 = $bytes_in_buffer;
   $504 = (($503) + -1)|0;
   $bytes_in_buffer = $504;
   $505 = $next_input_byte;
   $506 = (($505) + 1|0);
   $next_input_byte = $506;
   $507 = HEAP8[$505>>0]|0;
   $508 = $507&255;
   $509 = $508 << 8;
   $tmp = $509;
   $510 = $bytes_in_buffer;
   $511 = ($510|0)==(0);
   do {
    if ($511) {
     $512 = $datasrc;
     $513 = (($512) + 12|0);
     $514 = HEAP32[$513>>2]|0;
     $515 = $1;
     $516 = (FUNCTION_TABLE_ii[$514 & 255]($515)|0);
     $517 = ($516|0)!=(0);
     if ($517) {
      $518 = $datasrc;
      $519 = HEAP32[$518>>2]|0;
      $next_input_byte = $519;
      $520 = $datasrc;
      $521 = (($520) + 4|0);
      $522 = HEAP32[$521>>2]|0;
      $bytes_in_buffer = $522;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $523 = $bytes_in_buffer;
   $524 = (($523) + -1)|0;
   $bytes_in_buffer = $524;
   $525 = $next_input_byte;
   $526 = (($525) + 1|0);
   $next_input_byte = $526;
   $527 = HEAP8[$525>>0]|0;
   $528 = $527&255;
   $529 = $tmp;
   $530 = (($529) + ($528))|0;
   $tmp = $530;
   $531 = $tmp;
   $532 = ($531|0)!=(1);
   if ($532) {
    label = 165;
    break;
   }
   $533 = $bytes_in_buffer;
   $534 = ($533|0)==(0);
   do {
    if ($534) {
     $535 = $datasrc;
     $536 = (($535) + 12|0);
     $537 = HEAP32[$536>>2]|0;
     $538 = $1;
     $539 = (FUNCTION_TABLE_ii[$537 & 255]($538)|0);
     $540 = ($539|0)!=(0);
     if ($540) {
      $541 = $datasrc;
      $542 = HEAP32[$541>>2]|0;
      $next_input_byte = $542;
      $543 = $datasrc;
      $544 = (($543) + 4|0);
      $545 = HEAP32[$544>>2]|0;
      $bytes_in_buffer = $545;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $546 = $bytes_in_buffer;
   $547 = (($546) + -1)|0;
   $bytes_in_buffer = $547;
   $548 = $next_input_byte;
   $549 = (($548) + 1|0);
   $next_input_byte = $549;
   $550 = HEAP8[$548>>0]|0;
   $551 = $550&255;
   $552 = $551 << 8;
   $tmp = $552;
   $553 = $bytes_in_buffer;
   $554 = ($553|0)==(0);
   do {
    if ($554) {
     $555 = $datasrc;
     $556 = (($555) + 12|0);
     $557 = HEAP32[$556>>2]|0;
     $558 = $1;
     $559 = (FUNCTION_TABLE_ii[$557 & 255]($558)|0);
     $560 = ($559|0)!=(0);
     if ($560) {
      $561 = $datasrc;
      $562 = HEAP32[$561>>2]|0;
      $next_input_byte = $562;
      $563 = $datasrc;
      $564 = (($563) + 4|0);
      $565 = HEAP32[$564>>2]|0;
      $bytes_in_buffer = $565;
      break;
     }
     $0 = 0;
     $590 = $0;
     STACKTOP = sp;return ($590|0);
    }
   } while(0);
   $566 = $bytes_in_buffer;
   $567 = (($566) + -1)|0;
   $bytes_in_buffer = $567;
   $568 = $next_input_byte;
   $569 = (($568) + 1|0);
   $next_input_byte = $569;
   $570 = HEAP8[$568>>0]|0;
   $571 = $570&255;
   $572 = $tmp;
   $573 = (($572) + ($571))|0;
   $tmp = $573;
   $574 = $tmp;
   $575 = ($574|0)!=(0);
   if (!($575)) {
    break;
   }
   label = 165;
  }
 } while(0);
 if ((label|0) == 165) {
  $576 = $1;
  $577 = HEAP32[$576>>2]|0;
  $578 = (($577) + 20|0);
  HEAP32[$578>>2] = 28;
  $579 = $1;
  $580 = HEAP32[$579>>2]|0;
  $581 = HEAP32[$580>>2]|0;
  $582 = $1;
  FUNCTION_TABLE_vi[$581 & 511]($582);
 }
 $583 = $1;
 $584 = (($583) + 304|0);
 HEAP32[$584>>2] = 1;
 $585 = $next_input_byte;
 $586 = $datasrc;
 HEAP32[$586>>2] = $585;
 $587 = $bytes_in_buffer;
 $588 = $datasrc;
 $589 = (($588) + 4|0);
 HEAP32[$589>>2] = $587;
 $0 = 1;
 $590 = $0;
 STACKTOP = sp;return ($590|0);
}
function _jpeg_calc_output_dimensions($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0, $ssize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(202);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 20|0);
  HEAP32[$7>>2] = 21;
  $8 = $0;
  $9 = (($8) + 20|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 24|0);
  HEAP32[$13>>2] = $10;
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = $0;
  FUNCTION_TABLE_vi[$16 & 511]($17);
 }
 $18 = $0;
 _jpeg_core_output_dimensions($18);
 $ci = 0;
 $19 = $0;
 $20 = (($19) + 216|0);
 $21 = HEAP32[$20>>2]|0;
 $compptr = $21;
 while(1) {
  $22 = $ci;
  $23 = $0;
  $24 = (($23) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ($22|0)<($25|0);
  if (!($26)) {
   break;
  }
  $ssize = 1;
  while(1) {
   $27 = $0;
   $28 = (($27) + 324|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $ssize;
   $31 = Math_imul($29, $30)|0;
   $32 = $0;
   $33 = (($32) + 76|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ($34|0)!=(0);
   $36 = $35 ? 8 : 4;
   $37 = ($31|0)<=($36|0);
   if ($37) {
    $38 = $0;
    $39 = (($38) + 316|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = $compptr;
    $42 = (($41) + 8|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = $ssize;
    $45 = Math_imul($43, $44)|0;
    $46 = $45<<1;
    $47 = (($40|0) % ($46|0))&-1;
    $48 = ($47|0)==(0);
    $211 = $48;
   } else {
    $211 = 0;
   }
   if (!($211)) {
    break;
   }
   $49 = $ssize;
   $50 = $49<<1;
   $ssize = $50;
  }
  $51 = $0;
  $52 = (($51) + 324|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $ssize;
  $55 = Math_imul($53, $54)|0;
  $56 = $compptr;
  $57 = (($56) + 36|0);
  HEAP32[$57>>2] = $55;
  $ssize = 1;
  while(1) {
   $58 = $0;
   $59 = (($58) + 328|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $ssize;
   $62 = Math_imul($60, $61)|0;
   $63 = $0;
   $64 = (($63) + 76|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = ($65|0)!=(0);
   $67 = $66 ? 8 : 4;
   $68 = ($62|0)<=($67|0);
   if ($68) {
    $69 = $0;
    $70 = (($69) + 320|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $compptr;
    $73 = (($72) + 12|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $ssize;
    $76 = Math_imul($74, $75)|0;
    $77 = $76<<1;
    $78 = (($71|0) % ($77|0))&-1;
    $79 = ($78|0)==(0);
    $212 = $79;
   } else {
    $212 = 0;
   }
   if (!($212)) {
    break;
   }
   $80 = $ssize;
   $81 = $80<<1;
   $ssize = $81;
  }
  $82 = $0;
  $83 = (($82) + 328|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $ssize;
  $86 = Math_imul($84, $85)|0;
  $87 = $compptr;
  $88 = (($87) + 40|0);
  HEAP32[$88>>2] = $86;
  $89 = $compptr;
  $90 = (($89) + 36|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = $compptr;
  $93 = (($92) + 40|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $94<<1;
  $96 = ($91|0)>($95|0);
  if ($96) {
   $97 = $compptr;
   $98 = (($97) + 40|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $99<<1;
   $101 = $compptr;
   $102 = (($101) + 36|0);
   HEAP32[$102>>2] = $100;
  } else {
   $103 = $compptr;
   $104 = (($103) + 40|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $compptr;
   $107 = (($106) + 36|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = $108<<1;
   $110 = ($105|0)>($109|0);
   if ($110) {
    $111 = $compptr;
    $112 = (($111) + 36|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = $113<<1;
    $115 = $compptr;
    $116 = (($115) + 40|0);
    HEAP32[$116>>2] = $114;
   }
  }
  $117 = $ci;
  $118 = (($117) + 1)|0;
  $ci = $118;
  $119 = $compptr;
  $120 = (($119) + 88|0);
  $compptr = $120;
 }
 $ci = 0;
 $121 = $0;
 $122 = (($121) + 216|0);
 $123 = HEAP32[$122>>2]|0;
 $compptr = $123;
 while(1) {
  $124 = $ci;
  $125 = $0;
  $126 = (($125) + 36|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($124|0)<($127|0);
  if (!($128)) {
   break;
  }
  $129 = $0;
  $130 = (($129) + 28|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = $compptr;
  $133 = (($132) + 8|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $compptr;
  $136 = (($135) + 36|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = Math_imul($134, $137)|0;
  $139 = Math_imul($131, $138)|0;
  $140 = $0;
  $141 = (($140) + 316|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $0;
  $144 = (($143) + 428|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = Math_imul($142, $145)|0;
  $147 = (_jdiv_round_up($139,$146)|0);
  $148 = $compptr;
  $149 = (($148) + 44|0);
  HEAP32[$149>>2] = $147;
  $150 = $0;
  $151 = (($150) + 32|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $compptr;
  $154 = (($153) + 12|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $compptr;
  $157 = (($156) + 40|0);
  $158 = HEAP32[$157>>2]|0;
  $159 = Math_imul($155, $158)|0;
  $160 = Math_imul($152, $159)|0;
  $161 = $0;
  $162 = (($161) + 320|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $0;
  $165 = (($164) + 428|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = Math_imul($163, $166)|0;
  $168 = (_jdiv_round_up($160,$167)|0);
  $169 = $compptr;
  $170 = (($169) + 48|0);
  HEAP32[$170>>2] = $168;
  $171 = $ci;
  $172 = (($171) + 1)|0;
  $ci = $172;
  $173 = $compptr;
  $174 = (($173) + 88|0);
  $compptr = $174;
 }
 $175 = $0;
 $176 = (($175) + 44|0);
 $177 = HEAP32[$176>>2]|0;
 switch ($177|0) {
 case 5: case 4:  {
  $184 = $0;
  $185 = (($184) + 120|0);
  HEAP32[$185>>2] = 4;
  break;
 }
 case 6: case 2:  {
  $180 = $0;
  $181 = (($180) + 120|0);
  HEAP32[$181>>2] = 3;
  break;
 }
 case 1:  {
  $178 = $0;
  $179 = (($178) + 120|0);
  HEAP32[$179>>2] = 1;
  break;
 }
 case 7: case 3:  {
  $182 = $0;
  $183 = (($182) + 120|0);
  HEAP32[$183>>2] = 3;
  break;
 }
 default: {
  $186 = $0;
  $187 = (($186) + 36|0);
  $188 = HEAP32[$187>>2]|0;
  $189 = $0;
  $190 = (($189) + 120|0);
  HEAP32[$190>>2] = $188;
 }
 }
 $191 = $0;
 $192 = (($191) + 84|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = ($193|0)!=(0);
 if ($194) {
  $200 = 1;
 } else {
  $195 = $0;
  $196 = (($195) + 120|0);
  $197 = HEAP32[$196>>2]|0;
  $200 = $197;
 }
 $198 = $0;
 $199 = (($198) + 124|0);
 HEAP32[$199>>2] = $200;
 $201 = $0;
 $202 = (_use_merged_upsample($201)|0);
 $203 = ($202|0)!=(0);
 if ($203) {
  $204 = $0;
  $205 = (($204) + 320|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = $0;
  $208 = (($207) + 128|0);
  HEAP32[$208>>2] = $206;
  STACKTOP = sp;return;
 } else {
  $209 = $0;
  $210 = (($209) + 128|0);
  HEAP32[$210>>2] = 1;
  STACKTOP = sp;return;
 }
}
function _use_merged_upsample($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $1 = $cinfo;
 $2 = $1;
 $3 = (($2) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  $6 = $1;
  $7 = (($6) + 308|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if (!($9)) {
   $10 = $1;
   $11 = (($10) + 40|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)!=(3);
   if (!($13)) {
    $14 = $1;
    $15 = (($14) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(3);
    if (!($17)) {
     $18 = $1;
     $19 = (($18) + 44|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($20|0)!=(2);
     if (!($21)) {
      $22 = $1;
      $23 = (($22) + 120|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)!=(3);
      if (!($25)) {
       $26 = $1;
       $27 = (($26) + 304|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($28|0)!=(0);
       if (!($29)) {
        $30 = $1;
        $31 = (($30) + 216|0);
        $32 = HEAP32[$31>>2]|0;
        $33 = (($32) + 8|0);
        $34 = HEAP32[$33>>2]|0;
        $35 = ($34|0)!=(2);
        if (!($35)) {
         $36 = $1;
         $37 = (($36) + 216|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = (($38) + 88|0);
         $40 = (($39) + 8|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = ($41|0)!=(1);
         if (!($42)) {
          $43 = $1;
          $44 = (($43) + 216|0);
          $45 = HEAP32[$44>>2]|0;
          $46 = (($45) + 176|0);
          $47 = (($46) + 8|0);
          $48 = HEAP32[$47>>2]|0;
          $49 = ($48|0)!=(1);
          if (!($49)) {
           $50 = $1;
           $51 = (($50) + 216|0);
           $52 = HEAP32[$51>>2]|0;
           $53 = (($52) + 12|0);
           $54 = HEAP32[$53>>2]|0;
           $55 = ($54|0)>(2);
           if (!($55)) {
            $56 = $1;
            $57 = (($56) + 216|0);
            $58 = HEAP32[$57>>2]|0;
            $59 = (($58) + 88|0);
            $60 = (($59) + 12|0);
            $61 = HEAP32[$60>>2]|0;
            $62 = ($61|0)!=(1);
            if (!($62)) {
             $63 = $1;
             $64 = (($63) + 216|0);
             $65 = HEAP32[$64>>2]|0;
             $66 = (($65) + 176|0);
             $67 = (($66) + 12|0);
             $68 = HEAP32[$67>>2]|0;
             $69 = ($68|0)!=(1);
             if (!($69)) {
              $70 = $1;
              $71 = (($70) + 216|0);
              $72 = HEAP32[$71>>2]|0;
              $73 = (($72) + 36|0);
              $74 = HEAP32[$73>>2]|0;
              $75 = $1;
              $76 = (($75) + 324|0);
              $77 = HEAP32[$76>>2]|0;
              $78 = ($74|0)!=($77|0);
              do {
               if (!($78)) {
                $79 = $1;
                $80 = (($79) + 216|0);
                $81 = HEAP32[$80>>2]|0;
                $82 = (($81) + 88|0);
                $83 = (($82) + 36|0);
                $84 = HEAP32[$83>>2]|0;
                $85 = $1;
                $86 = (($85) + 324|0);
                $87 = HEAP32[$86>>2]|0;
                $88 = ($84|0)!=($87|0);
                if (!($88)) {
                 $89 = $1;
                 $90 = (($89) + 216|0);
                 $91 = HEAP32[$90>>2]|0;
                 $92 = (($91) + 176|0);
                 $93 = (($92) + 36|0);
                 $94 = HEAP32[$93>>2]|0;
                 $95 = $1;
                 $96 = (($95) + 324|0);
                 $97 = HEAP32[$96>>2]|0;
                 $98 = ($94|0)!=($97|0);
                 if (!($98)) {
                  $99 = $1;
                  $100 = (($99) + 216|0);
                  $101 = HEAP32[$100>>2]|0;
                  $102 = (($101) + 40|0);
                  $103 = HEAP32[$102>>2]|0;
                  $104 = $1;
                  $105 = (($104) + 328|0);
                  $106 = HEAP32[$105>>2]|0;
                  $107 = ($103|0)!=($106|0);
                  if ($107) {
                   break;
                  }
                  $108 = $1;
                  $109 = (($108) + 216|0);
                  $110 = HEAP32[$109>>2]|0;
                  $111 = (($110) + 88|0);
                  $112 = (($111) + 40|0);
                  $113 = HEAP32[$112>>2]|0;
                  $114 = $1;
                  $115 = (($114) + 328|0);
                  $116 = HEAP32[$115>>2]|0;
                  $117 = ($113|0)!=($116|0);
                  if ($117) {
                   break;
                  }
                  $118 = $1;
                  $119 = (($118) + 216|0);
                  $120 = HEAP32[$119>>2]|0;
                  $121 = (($120) + 176|0);
                  $122 = (($121) + 40|0);
                  $123 = HEAP32[$122>>2]|0;
                  $124 = $1;
                  $125 = (($124) + 328|0);
                  $126 = HEAP32[$125>>2]|0;
                  $127 = ($123|0)!=($126|0);
                  if ($127) {
                   break;
                  }
                  $0 = 1;
                  $128 = $0;
                  STACKTOP = sp;return ($128|0);
                 }
                }
               }
              } while(0);
              $0 = 0;
              $128 = $0;
              STACKTOP = sp;return ($128|0);
             }
            }
           }
          }
         }
        }
        $0 = 0;
        $128 = $0;
        STACKTOP = sp;return ($128|0);
       }
      }
     }
    }
   }
   $0 = 0;
   $128 = $0;
   STACKTOP = sp;return ($128|0);
  }
 }
 $0 = 0;
 $128 = $0;
 STACKTOP = sp;return ($128|0);
}
function _jinit_master_decompress($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $master = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,28)|0);
 $master = $6;
 $7 = $master;
 $8 = $0;
 $9 = (($8) + 444|0);
 HEAP32[$9>>2] = $7;
 $10 = $master;
 HEAP32[$10>>2] = 222;
 $11 = $master;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 223;
 $13 = $master;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 _master_selection($15);
 STACKTOP = sp;return;
}
function _prepare_for_output_pass($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $master = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 444|0);
 $3 = HEAP32[$2>>2]|0;
 $master = $3;
 $4 = $master;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $master;
  $9 = (($8) + 8|0);
  HEAP32[$9>>2] = 0;
  $10 = $0;
  $11 = (($10) + 484|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  FUNCTION_TABLE_vii[$13 & 511]($14,0);
  $15 = $0;
  $16 = (($15) + 456|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  FUNCTION_TABLE_vii[$18 & 511]($19,2);
  $20 = $0;
  $21 = (($20) + 448|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = HEAP32[$22>>2]|0;
  $24 = $0;
  FUNCTION_TABLE_vii[$23 & 511]($24,2);
 } else {
  $25 = $0;
  $26 = (($25) + 84|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)!=(0);
  if ($28) {
   $29 = $0;
   $30 = (($29) + 136|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(0|0);
   if ($32) {
    $33 = $0;
    $34 = (($33) + 92|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = ($35|0)!=(0);
    if ($36) {
     $37 = $0;
     $38 = (($37) + 108|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)!=(0);
     if ($40) {
      $41 = $master;
      $42 = (($41) + 24|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = $0;
      $45 = (($44) + 484|0);
      HEAP32[$45>>2] = $43;
      $46 = $master;
      $47 = (($46) + 8|0);
      HEAP32[$47>>2] = 1;
     } else {
      label = 8;
     }
    } else {
     label = 8;
    }
    if ((label|0) == 8) {
     $48 = $0;
     $49 = (($48) + 100|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)!=(0);
     if ($51) {
      $52 = $master;
      $53 = (($52) + 20|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = $0;
      $56 = (($55) + 484|0);
      HEAP32[$56>>2] = $54;
     } else {
      $57 = $0;
      $58 = HEAP32[$57>>2]|0;
      $59 = (($58) + 20|0);
      HEAP32[$59>>2] = 47;
      $60 = $0;
      $61 = HEAP32[$60>>2]|0;
      $62 = HEAP32[$61>>2]|0;
      $63 = $0;
      FUNCTION_TABLE_vi[$62 & 511]($63);
     }
    }
   }
  }
  $64 = $0;
  $65 = (($64) + 472|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = HEAP32[$66>>2]|0;
  $68 = $0;
  FUNCTION_TABLE_vi[$67 & 511]($68);
  $69 = $0;
  $70 = (($69) + 452|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (($71) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $0;
  FUNCTION_TABLE_vi[$73 & 511]($74);
  $75 = $0;
  $76 = (($75) + 68|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = ($77|0)!=(0);
  if (!($78)) {
   $79 = $master;
   $80 = (($79) + 16|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = ($81|0)!=(0);
   if (!($82)) {
    $83 = $0;
    $84 = (($83) + 480|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = HEAP32[$85>>2]|0;
    $87 = $0;
    FUNCTION_TABLE_vi[$86 & 511]($87);
   }
   $88 = $0;
   $89 = (($88) + 476|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = HEAP32[$90>>2]|0;
   $92 = $0;
   FUNCTION_TABLE_vi[$91 & 511]($92);
   $93 = $0;
   $94 = (($93) + 84|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)!=(0);
   if ($96) {
    $97 = $0;
    $98 = (($97) + 484|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = HEAP32[$99>>2]|0;
    $101 = $0;
    $102 = $master;
    $103 = (($102) + 8|0);
    $104 = HEAP32[$103>>2]|0;
    FUNCTION_TABLE_vii[$100 & 511]($101,$104);
   }
   $105 = $0;
   $106 = (($105) + 456|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = HEAP32[$107>>2]|0;
   $109 = $0;
   $110 = $master;
   $111 = (($110) + 8|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)!=(0);
   $114 = $113 ? 3 : 0;
   FUNCTION_TABLE_vii[$108 & 511]($109,$114);
   $115 = $0;
   $116 = (($115) + 448|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = HEAP32[$117>>2]|0;
   $119 = $0;
   FUNCTION_TABLE_vii[$118 & 511]($119,0);
  }
 }
 $120 = $0;
 $121 = (($120) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if (!($123)) {
  STACKTOP = sp;return;
 }
 $124 = $master;
 $125 = (($124) + 12|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $0;
 $128 = (($127) + 8|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($129) + 12|0);
 HEAP32[$130>>2] = $126;
 $131 = $master;
 $132 = (($131) + 12|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = $master;
 $135 = (($134) + 8|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)!=(0);
 $138 = $137 ? 2 : 1;
 $139 = (($133) + ($138))|0;
 $140 = $0;
 $141 = (($140) + 8|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = (($142) + 16|0);
 HEAP32[$143>>2] = $139;
 $144 = $0;
 $145 = (($144) + 64|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)!=(0);
 if ($147) {
  $148 = $0;
  $149 = (($148) + 460|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($150) + 20|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = ($152|0)!=(0);
  if (!($153)) {
   $154 = $0;
   $155 = (($154) + 108|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = ($156|0)!=(0);
   $158 = $157 ? 2 : 1;
   $159 = $0;
   $160 = (($159) + 8|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) + 16|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($163) + ($158))|0;
   HEAP32[$162>>2] = $164;
  }
 }
 STACKTOP = sp;return;
}
function _finish_output_pass($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $master = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 444|0);
 $3 = HEAP32[$2>>2]|0;
 $master = $3;
 $4 = $0;
 $5 = (($4) + 84|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 if ($7) {
  $8 = $0;
  $9 = (($8) + 484|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $0;
  FUNCTION_TABLE_vi[$12 & 511]($13);
 }
 $14 = $master;
 $15 = (($14) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$15>>2] = $17;
 STACKTOP = sp;return;
}
function _master_selection($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $jd_samplesperrow = 0, $master = 0;
 var $nscans = 0, $samplesperrow = 0, $use_c_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 444|0);
 $3 = HEAP32[$2>>2]|0;
 $master = $3;
 $4 = $0;
 $5 = (($4) + 212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(8);
 if ($7) {
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 20|0);
  HEAP32[$10>>2] = 16;
  $11 = $0;
  $12 = (($11) + 212|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $0;
  $15 = HEAP32[$14>>2]|0;
  $16 = (($15) + 24|0);
  HEAP32[$16>>2] = $13;
  $17 = $0;
  $18 = HEAP32[$17>>2]|0;
  $19 = HEAP32[$18>>2]|0;
  $20 = $0;
  FUNCTION_TABLE_vi[$19 & 511]($20);
 }
 $21 = $0;
 _jpeg_calc_output_dimensions($21);
 $22 = $0;
 _prepare_range_limit_table($22);
 $23 = $0;
 $24 = (($23) + 116|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25>>>0)<=(0);
 if ($26) {
  label = 6;
 } else {
  $27 = $0;
  $28 = (($27) + 112|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29>>>0)<=(0);
  if ($30) {
   label = 6;
  } else {
   $31 = $0;
   $32 = (($31) + 120|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($33|0)<=(0);
   if ($34) {
    label = 6;
   }
  }
 }
 if ((label|0) == 6) {
  $35 = $0;
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 20|0);
  HEAP32[$37>>2] = 33;
  $38 = $0;
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $41 = $0;
  FUNCTION_TABLE_vi[$40 & 511]($41);
 }
 $42 = $0;
 $43 = (($42) + 112|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $0;
 $46 = (($45) + 120|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = Math_imul($44, $47)|0;
 $samplesperrow = $48;
 $49 = $samplesperrow;
 $jd_samplesperrow = $49;
 $50 = $jd_samplesperrow;
 $51 = $samplesperrow;
 $52 = ($50|0)!=($51|0);
 if ($52) {
  $53 = $0;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + 20|0);
  HEAP32[$55>>2] = 72;
  $56 = $0;
  $57 = HEAP32[$56>>2]|0;
  $58 = HEAP32[$57>>2]|0;
  $59 = $0;
  FUNCTION_TABLE_vi[$58 & 511]($59);
 }
 $60 = $master;
 $61 = (($60) + 12|0);
 HEAP32[$61>>2] = 0;
 $62 = $0;
 $63 = (_use_merged_upsample($62)|0);
 $64 = $master;
 $65 = (($64) + 16|0);
 HEAP32[$65>>2] = $63;
 $66 = $master;
 $67 = (($66) + 20|0);
 HEAP32[$67>>2] = 0;
 $68 = $master;
 $69 = (($68) + 24|0);
 HEAP32[$69>>2] = 0;
 $70 = $0;
 $71 = (($70) + 84|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ($72|0)!=(0);
 if ($73) {
  $74 = $0;
  $75 = (($74) + 64|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ($76|0)!=(0);
  if (!($77)) {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  $78 = $0;
  $79 = (($78) + 100|0);
  HEAP32[$79>>2] = 0;
  $80 = $0;
  $81 = (($80) + 104|0);
  HEAP32[$81>>2] = 0;
  $82 = $0;
  $83 = (($82) + 108|0);
  HEAP32[$83>>2] = 0;
 }
 $84 = $0;
 $85 = (($84) + 84|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = ($86|0)!=(0);
 if ($87) {
  $88 = $0;
  $89 = (($88) + 68|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)!=(0);
  if ($91) {
   $92 = $0;
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + 20|0);
   HEAP32[$94>>2] = 48;
   $95 = $0;
   $96 = HEAP32[$95>>2]|0;
   $97 = HEAP32[$96>>2]|0;
   $98 = $0;
   FUNCTION_TABLE_vi[$97 & 511]($98);
  }
  $99 = $0;
  $100 = (($99) + 120|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = ($101|0)!=(3);
  if ($102) {
   $103 = $0;
   $104 = (($103) + 100|0);
   HEAP32[$104>>2] = 1;
   $105 = $0;
   $106 = (($105) + 104|0);
   HEAP32[$106>>2] = 0;
   $107 = $0;
   $108 = (($107) + 108|0);
   HEAP32[$108>>2] = 0;
   $109 = $0;
   $110 = (($109) + 136|0);
   HEAP32[$110>>2] = 0;
  } else {
   $111 = $0;
   $112 = (($111) + 136|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = ($113|0)!=(0|0);
   if ($114) {
    $115 = $0;
    $116 = (($115) + 104|0);
    HEAP32[$116>>2] = 1;
   } else {
    $117 = $0;
    $118 = (($117) + 92|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)!=(0);
    if ($120) {
     $121 = $0;
     $122 = (($121) + 108|0);
     HEAP32[$122>>2] = 1;
    } else {
     $123 = $0;
     $124 = (($123) + 100|0);
     HEAP32[$124>>2] = 1;
    }
   }
  }
  $125 = $0;
  $126 = (($125) + 100|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($127|0)!=(0);
  if ($128) {
   $129 = $0;
   _jinit_1pass_quantizer($129);
   $130 = $0;
   $131 = (($130) + 484|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = $master;
   $134 = (($133) + 20|0);
   HEAP32[$134>>2] = $132;
  }
  $135 = $0;
  $136 = (($135) + 108|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = ($137|0)!=(0);
  if ($138) {
   label = 28;
  } else {
   $139 = $0;
   $140 = (($139) + 104|0);
   $141 = HEAP32[$140>>2]|0;
   $142 = ($141|0)!=(0);
   if ($142) {
    label = 28;
   }
  }
  if ((label|0) == 28) {
   $143 = $0;
   _jinit_2pass_quantizer($143);
   $144 = $0;
   $145 = (($144) + 484|0);
   $146 = HEAP32[$145>>2]|0;
   $147 = $master;
   $148 = (($147) + 24|0);
   HEAP32[$148>>2] = $146;
  }
 }
 $149 = $0;
 $150 = (($149) + 68|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ($151|0)!=(0);
 if (!($152)) {
  $153 = $master;
  $154 = (($153) + 16|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = ($155|0)!=(0);
  if ($156) {
   $157 = $0;
   _jinit_merged_upsampler($157);
  } else {
   $158 = $0;
   _jinit_color_deconverter($158);
   $159 = $0;
   _jinit_upsampler($159);
  }
  $160 = $0;
  $161 = $0;
  $162 = (($161) + 108|0);
  $163 = HEAP32[$162>>2]|0;
  _jinit_d_post_controller($160,$163);
 }
 $164 = $0;
 _jinit_inverse_dct($164);
 $165 = $0;
 $166 = (($165) + 228|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ($167|0)!=(0);
 if ($168) {
  $169 = $0;
  _jinit_arith_decoder($169);
 } else {
  $170 = $0;
  _jinit_huff_decoder($170);
 }
 $171 = $0;
 $172 = (($171) + 460|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = (($173) + 16|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = ($175|0)!=(0);
 if ($176) {
  $182 = 1;
 } else {
  $177 = $0;
  $178 = (($177) + 64|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = ($179|0)!=(0);
  $182 = $180;
 }
 $181 = $182&1;
 $use_c_buffer = $181;
 $183 = $0;
 $184 = $use_c_buffer;
 _jinit_d_coef_controller($183,$184);
 $185 = $0;
 $186 = (($185) + 68|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = ($187|0)!=(0);
 if (!($188)) {
  $189 = $0;
  _jinit_d_main_controller($189,0);
 }
 $190 = $0;
 $191 = (($190) + 4|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = (($192) + 24|0);
 $194 = HEAP32[$193>>2]|0;
 $195 = $0;
 FUNCTION_TABLE_vi[$194 & 511]($195);
 $196 = $0;
 $197 = (($196) + 460|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = (($198) + 8|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = $0;
 FUNCTION_TABLE_vi[$200 & 511]($201);
 $202 = $0;
 $203 = (($202) + 8|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = ($204|0)!=(0|0);
 if (!($205)) {
  STACKTOP = sp;return;
 }
 $206 = $0;
 $207 = (($206) + 64|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = ($208|0)!=(0);
 if ($209) {
  STACKTOP = sp;return;
 }
 $210 = $0;
 $211 = (($210) + 460|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = (($212) + 16|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = ($214|0)!=(0);
 if (!($215)) {
  STACKTOP = sp;return;
 }
 $216 = $0;
 $217 = (($216) + 224|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = ($218|0)!=(0);
 if ($219) {
  $220 = $0;
  $221 = (($220) + 36|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ($222*3)|0;
  $224 = (2 + ($223))|0;
  $nscans = $224;
 } else {
  $225 = $0;
  $226 = (($225) + 36|0);
  $227 = HEAP32[$226>>2]|0;
  $nscans = $227;
 }
 $228 = $0;
 $229 = (($228) + 8|0);
 $230 = HEAP32[$229>>2]|0;
 $231 = (($230) + 4|0);
 HEAP32[$231>>2] = 0;
 $232 = $0;
 $233 = (($232) + 332|0);
 $234 = HEAP32[$233>>2]|0;
 $235 = $nscans;
 $236 = Math_imul($234, $235)|0;
 $237 = $0;
 $238 = (($237) + 8|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = (($239) + 8|0);
 HEAP32[$240>>2] = $236;
 $241 = $0;
 $242 = (($241) + 8|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = (($243) + 12|0);
 HEAP32[$244>>2] = 0;
 $245 = $0;
 $246 = (($245) + 108|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = ($247|0)!=(0);
 $249 = $248 ? 3 : 2;
 $250 = $0;
 $251 = (($250) + 8|0);
 $252 = HEAP32[$251>>2]|0;
 $253 = (($252) + 16|0);
 HEAP32[$253>>2] = $249;
 $254 = $master;
 $255 = (($254) + 12|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = (($256) + 1)|0;
 HEAP32[$255>>2] = $257;
 STACKTOP = sp;return;
}
function _prepare_range_limit_table($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $table = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,1408)|0);
 $table = $6;
 $7 = $table;
 $8 = (($7) + 256|0);
 $table = $8;
 $9 = $table;
 $10 = $0;
 $11 = (($10) + 336|0);
 HEAP32[$11>>2] = $9;
 $12 = $table;
 $13 = (($12) + -256|0);
 _memset(($13|0),0,256)|0;
 $i = 0;
 while(1) {
  $14 = $i;
  $15 = ($14|0)<=(255);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $16&255;
  $18 = $i;
  $19 = $table;
  $20 = (($19) + ($18)|0);
  HEAP8[$20>>0] = $17;
  $21 = $i;
  $22 = (($21) + 1)|0;
  $i = $22;
 }
 $23 = $table;
 $24 = (($23) + 128|0);
 $table = $24;
 $i = 128;
 while(1) {
  $25 = $i;
  $26 = ($25|0)<(512);
  if (!($26)) {
   break;
  }
  $27 = $i;
  $28 = $table;
  $29 = (($28) + ($27)|0);
  HEAP8[$29>>0] = -1;
  $30 = $i;
  $31 = (($30) + 1)|0;
  $i = $31;
 }
 $32 = $table;
 $33 = (($32) + 512|0);
 _memset(($33|0),0,384)|0;
 $34 = $table;
 $35 = (($34) + 896|0);
 $36 = $0;
 $37 = (($36) + 336|0);
 $38 = HEAP32[$37>>2]|0;
 dest=$35+0|0; src=$38+0|0; stop=dest+128|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _jinit_merged_upsampler($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $upsample = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,48)|0);
 $upsample = $6;
 $7 = $upsample;
 $8 = $0;
 $9 = (($8) + 476|0);
 HEAP32[$9>>2] = $7;
 $10 = $upsample;
 HEAP32[$10>>2] = 224;
 $11 = $upsample;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 $14 = (($13) + 112|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = (($16) + 120|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = Math_imul($15, $18)|0;
 $20 = $upsample;
 $21 = (($20) + 40|0);
 HEAP32[$21>>2] = $19;
 $22 = $0;
 $23 = (($22) + 320|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(2);
 if ($25) {
  $26 = $upsample;
  $27 = (($26) + 4|0);
  HEAP32[$27>>2] = 225;
  $28 = $upsample;
  $29 = (($28) + 12|0);
  HEAP32[$29>>2] = 226;
  $30 = $0;
  $31 = (($30) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($32) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $0;
  $36 = $upsample;
  $37 = (($36) + 40|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38;
  $40 = (FUNCTION_TABLE_iiii[$34 & 511]($35,1,$39)|0);
  $41 = $upsample;
  $42 = (($41) + 32|0);
  HEAP32[$42>>2] = $40;
  $49 = $0;
  _build_ycc_rgb_table57($49);
  STACKTOP = sp;return;
 } else {
  $43 = $upsample;
  $44 = (($43) + 4|0);
  HEAP32[$44>>2] = 227;
  $45 = $upsample;
  $46 = (($45) + 12|0);
  HEAP32[$46>>2] = 228;
  $47 = $upsample;
  $48 = (($47) + 32|0);
  HEAP32[$48>>2] = 0;
  $49 = $0;
  _build_ycc_rgb_table57($49);
  STACKTOP = sp;return;
 }
}
function _start_pass_merged_upsample($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $upsample = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 476|0);
 $3 = HEAP32[$2>>2]|0;
 $upsample = $3;
 $4 = $upsample;
 $5 = (($4) + 36|0);
 HEAP32[$5>>2] = 0;
 $6 = $0;
 $7 = (($6) + 116|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $upsample;
 $10 = (($9) + 44|0);
 HEAP32[$10>>2] = $8;
 STACKTOP = sp;return;
}
function _merged_2v_upsample($cinfo,$input_buf,$in_row_group_ctr,$in_row_groups_avail,$output_buf,$out_row_ctr,$out_rows_avail) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_group_ctr = $in_row_group_ctr|0;
 $in_row_groups_avail = $in_row_groups_avail|0;
 $output_buf = $output_buf|0;
 $out_row_ctr = $out_row_ctr|0;
 $out_rows_avail = $out_rows_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $num_rows = 0, $upsample = 0, $work_ptrs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $work_ptrs = sp + 8|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_group_ctr;
 $3 = $in_row_groups_avail;
 $4 = $output_buf;
 $5 = $out_row_ctr;
 $6 = $out_rows_avail;
 $7 = $0;
 $8 = (($7) + 476|0);
 $9 = HEAP32[$8>>2]|0;
 $upsample = $9;
 $10 = $upsample;
 $11 = (($10) + 36|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $upsample;
  $15 = (($14) + 32|0);
  $16 = $4;
  $17 = $5;
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18<<2)|0);
  $20 = $upsample;
  $21 = (($20) + 40|0);
  $22 = HEAP32[$21>>2]|0;
  _jcopy_sample_rows($15,0,$19,0,1,$22);
  $num_rows = 1;
  $23 = $upsample;
  $24 = (($23) + 36|0);
  HEAP32[$24>>2] = 0;
 } else {
  $num_rows = 2;
  $25 = $num_rows;
  $26 = $upsample;
  $27 = (($26) + 44|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25>>>0)>($28>>>0);
  if ($29) {
   $30 = $upsample;
   $31 = (($30) + 44|0);
   $32 = HEAP32[$31>>2]|0;
   $num_rows = $32;
  }
  $33 = $5;
  $34 = HEAP32[$33>>2]|0;
  $35 = $6;
  $36 = (($35) - ($34))|0;
  $6 = $36;
  $37 = $num_rows;
  $38 = $6;
  $39 = ($37>>>0)>($38>>>0);
  if ($39) {
   $40 = $6;
   $num_rows = $40;
  }
  $41 = $5;
  $42 = HEAP32[$41>>2]|0;
  $43 = $4;
  $44 = (($43) + ($42<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  HEAP32[$work_ptrs>>2] = $45;
  $46 = $num_rows;
  $47 = ($46>>>0)>(1);
  if ($47) {
   $48 = $5;
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + 1)|0;
   $51 = $4;
   $52 = (($51) + ($50<<2)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($work_ptrs) + 4|0);
   HEAP32[$54>>2] = $53;
  } else {
   $55 = $upsample;
   $56 = (($55) + 32|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($work_ptrs) + 4|0);
   HEAP32[$58>>2] = $57;
   $59 = $upsample;
   $60 = (($59) + 36|0);
   HEAP32[$60>>2] = 1;
  }
  $61 = $upsample;
  $62 = (($61) + 12|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = $0;
  $65 = $1;
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  FUNCTION_TABLE_viiii[$63 & 511]($64,$65,$67,$work_ptrs);
 }
 $68 = $num_rows;
 $69 = $5;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($70) + ($68))|0;
 HEAP32[$69>>2] = $71;
 $72 = $num_rows;
 $73 = $upsample;
 $74 = (($73) + 44|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = (($75) - ($72))|0;
 HEAP32[$74>>2] = $76;
 $77 = $upsample;
 $78 = (($77) + 36|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)!=(0);
 if ($80) {
  STACKTOP = sp;return;
 }
 $81 = $2;
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + 1)|0;
 HEAP32[$81>>2] = $83;
 STACKTOP = sp;return;
}
function _h2v2_merged_upsample($cinfo,$input_buf,$in_row_group_ctr,$output_buf) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_group_ctr = $in_row_group_ctr|0;
 $output_buf = $output_buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $Cbbtab = 0, $Cbgtab = 0, $Crgtab = 0, $Crrtab = 0, $cb = 0, $cblue = 0, $cgreen = 0, $col = 0, $cr = 0, $cred = 0, $inptr00 = 0, $inptr01 = 0, $inptr1 = 0, $inptr2 = 0, $outptr0 = 0, $outptr1 = 0, $range_limit = 0;
 var $upsample = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_group_ctr;
 $3 = $output_buf;
 $4 = $0;
 $5 = (($4) + 476|0);
 $6 = HEAP32[$5>>2]|0;
 $upsample = $6;
 $7 = $0;
 $8 = (($7) + 336|0);
 $9 = HEAP32[$8>>2]|0;
 $range_limit = $9;
 $10 = $upsample;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $Crrtab = $12;
 $13 = $upsample;
 $14 = (($13) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $Cbbtab = $15;
 $16 = $upsample;
 $17 = (($16) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $Crgtab = $18;
 $19 = $upsample;
 $20 = (($19) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $Cbgtab = $21;
 $22 = $2;
 $23 = $22<<1;
 $24 = $1;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + ($23<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $inptr00 = $27;
 $28 = $2;
 $29 = $28<<1;
 $30 = (($29) + 1)|0;
 $31 = $1;
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($30<<2)|0);
 $34 = HEAP32[$33>>2]|0;
 $inptr01 = $34;
 $35 = $2;
 $36 = $1;
 $37 = (($36) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($35<<2)|0);
 $40 = HEAP32[$39>>2]|0;
 $inptr1 = $40;
 $41 = $2;
 $42 = $1;
 $43 = (($42) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) + ($41<<2)|0);
 $46 = HEAP32[$45>>2]|0;
 $inptr2 = $46;
 $47 = $3;
 $48 = HEAP32[$47>>2]|0;
 $outptr0 = $48;
 $49 = $3;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $outptr1 = $51;
 $52 = $0;
 $53 = (($52) + 112|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $54 >>> 1;
 $col = $55;
 while(1) {
  $56 = $col;
  $57 = ($56>>>0)>(0);
  if (!($57)) {
   break;
  }
  $58 = $inptr1;
  $59 = (($58) + 1|0);
  $inptr1 = $59;
  $60 = HEAP8[$58>>0]|0;
  $61 = $60&255;
  $cb = $61;
  $62 = $inptr2;
  $63 = (($62) + 1|0);
  $inptr2 = $63;
  $64 = HEAP8[$62>>0]|0;
  $65 = $64&255;
  $cr = $65;
  $66 = $cr;
  $67 = $Crrtab;
  $68 = (($67) + ($66<<2)|0);
  $69 = HEAP32[$68>>2]|0;
  $cred = $69;
  $70 = $cb;
  $71 = $Cbgtab;
  $72 = (($71) + ($70<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $cr;
  $75 = $Crgtab;
  $76 = (($75) + ($74<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = (($73) + ($77))|0;
  $79 = $78 >> 16;
  $cgreen = $79;
  $80 = $cb;
  $81 = $Cbbtab;
  $82 = (($81) + ($80<<2)|0);
  $83 = HEAP32[$82>>2]|0;
  $cblue = $83;
  $84 = $inptr00;
  $85 = (($84) + 1|0);
  $inptr00 = $85;
  $86 = HEAP8[$84>>0]|0;
  $87 = $86&255;
  $y = $87;
  $88 = $y;
  $89 = $cred;
  $90 = (($88) + ($89))|0;
  $91 = $range_limit;
  $92 = (($91) + ($90)|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $outptr0;
  HEAP8[$94>>0] = $93;
  $95 = $y;
  $96 = $cgreen;
  $97 = (($95) + ($96))|0;
  $98 = $range_limit;
  $99 = (($98) + ($97)|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $outptr0;
  $102 = (($101) + 1|0);
  HEAP8[$102>>0] = $100;
  $103 = $y;
  $104 = $cblue;
  $105 = (($103) + ($104))|0;
  $106 = $range_limit;
  $107 = (($106) + ($105)|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $outptr0;
  $110 = (($109) + 2|0);
  HEAP8[$110>>0] = $108;
  $111 = $outptr0;
  $112 = (($111) + 3|0);
  $outptr0 = $112;
  $113 = $inptr00;
  $114 = (($113) + 1|0);
  $inptr00 = $114;
  $115 = HEAP8[$113>>0]|0;
  $116 = $115&255;
  $y = $116;
  $117 = $y;
  $118 = $cred;
  $119 = (($117) + ($118))|0;
  $120 = $range_limit;
  $121 = (($120) + ($119)|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $outptr0;
  HEAP8[$123>>0] = $122;
  $124 = $y;
  $125 = $cgreen;
  $126 = (($124) + ($125))|0;
  $127 = $range_limit;
  $128 = (($127) + ($126)|0);
  $129 = HEAP8[$128>>0]|0;
  $130 = $outptr0;
  $131 = (($130) + 1|0);
  HEAP8[$131>>0] = $129;
  $132 = $y;
  $133 = $cblue;
  $134 = (($132) + ($133))|0;
  $135 = $range_limit;
  $136 = (($135) + ($134)|0);
  $137 = HEAP8[$136>>0]|0;
  $138 = $outptr0;
  $139 = (($138) + 2|0);
  HEAP8[$139>>0] = $137;
  $140 = $outptr0;
  $141 = (($140) + 3|0);
  $outptr0 = $141;
  $142 = $inptr01;
  $143 = (($142) + 1|0);
  $inptr01 = $143;
  $144 = HEAP8[$142>>0]|0;
  $145 = $144&255;
  $y = $145;
  $146 = $y;
  $147 = $cred;
  $148 = (($146) + ($147))|0;
  $149 = $range_limit;
  $150 = (($149) + ($148)|0);
  $151 = HEAP8[$150>>0]|0;
  $152 = $outptr1;
  HEAP8[$152>>0] = $151;
  $153 = $y;
  $154 = $cgreen;
  $155 = (($153) + ($154))|0;
  $156 = $range_limit;
  $157 = (($156) + ($155)|0);
  $158 = HEAP8[$157>>0]|0;
  $159 = $outptr1;
  $160 = (($159) + 1|0);
  HEAP8[$160>>0] = $158;
  $161 = $y;
  $162 = $cblue;
  $163 = (($161) + ($162))|0;
  $164 = $range_limit;
  $165 = (($164) + ($163)|0);
  $166 = HEAP8[$165>>0]|0;
  $167 = $outptr1;
  $168 = (($167) + 2|0);
  HEAP8[$168>>0] = $166;
  $169 = $outptr1;
  $170 = (($169) + 3|0);
  $outptr1 = $170;
  $171 = $inptr01;
  $172 = (($171) + 1|0);
  $inptr01 = $172;
  $173 = HEAP8[$171>>0]|0;
  $174 = $173&255;
  $y = $174;
  $175 = $y;
  $176 = $cred;
  $177 = (($175) + ($176))|0;
  $178 = $range_limit;
  $179 = (($178) + ($177)|0);
  $180 = HEAP8[$179>>0]|0;
  $181 = $outptr1;
  HEAP8[$181>>0] = $180;
  $182 = $y;
  $183 = $cgreen;
  $184 = (($182) + ($183))|0;
  $185 = $range_limit;
  $186 = (($185) + ($184)|0);
  $187 = HEAP8[$186>>0]|0;
  $188 = $outptr1;
  $189 = (($188) + 1|0);
  HEAP8[$189>>0] = $187;
  $190 = $y;
  $191 = $cblue;
  $192 = (($190) + ($191))|0;
  $193 = $range_limit;
  $194 = (($193) + ($192)|0);
  $195 = HEAP8[$194>>0]|0;
  $196 = $outptr1;
  $197 = (($196) + 2|0);
  HEAP8[$197>>0] = $195;
  $198 = $outptr1;
  $199 = (($198) + 3|0);
  $outptr1 = $199;
  $200 = $col;
  $201 = (($200) + -1)|0;
  $col = $201;
 }
 $202 = $0;
 $203 = (($202) + 112|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = $204 & 1;
 $206 = ($205|0)!=(0);
 if (!($206)) {
  STACKTOP = sp;return;
 }
 $207 = $inptr1;
 $208 = HEAP8[$207>>0]|0;
 $209 = $208&255;
 $cb = $209;
 $210 = $inptr2;
 $211 = HEAP8[$210>>0]|0;
 $212 = $211&255;
 $cr = $212;
 $213 = $cr;
 $214 = $Crrtab;
 $215 = (($214) + ($213<<2)|0);
 $216 = HEAP32[$215>>2]|0;
 $cred = $216;
 $217 = $cb;
 $218 = $Cbgtab;
 $219 = (($218) + ($217<<2)|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = $cr;
 $222 = $Crgtab;
 $223 = (($222) + ($221<<2)|0);
 $224 = HEAP32[$223>>2]|0;
 $225 = (($220) + ($224))|0;
 $226 = $225 >> 16;
 $cgreen = $226;
 $227 = $cb;
 $228 = $Cbbtab;
 $229 = (($228) + ($227<<2)|0);
 $230 = HEAP32[$229>>2]|0;
 $cblue = $230;
 $231 = $inptr00;
 $232 = HEAP8[$231>>0]|0;
 $233 = $232&255;
 $y = $233;
 $234 = $y;
 $235 = $cred;
 $236 = (($234) + ($235))|0;
 $237 = $range_limit;
 $238 = (($237) + ($236)|0);
 $239 = HEAP8[$238>>0]|0;
 $240 = $outptr0;
 HEAP8[$240>>0] = $239;
 $241 = $y;
 $242 = $cgreen;
 $243 = (($241) + ($242))|0;
 $244 = $range_limit;
 $245 = (($244) + ($243)|0);
 $246 = HEAP8[$245>>0]|0;
 $247 = $outptr0;
 $248 = (($247) + 1|0);
 HEAP8[$248>>0] = $246;
 $249 = $y;
 $250 = $cblue;
 $251 = (($249) + ($250))|0;
 $252 = $range_limit;
 $253 = (($252) + ($251)|0);
 $254 = HEAP8[$253>>0]|0;
 $255 = $outptr0;
 $256 = (($255) + 2|0);
 HEAP8[$256>>0] = $254;
 $257 = $inptr01;
 $258 = HEAP8[$257>>0]|0;
 $259 = $258&255;
 $y = $259;
 $260 = $y;
 $261 = $cred;
 $262 = (($260) + ($261))|0;
 $263 = $range_limit;
 $264 = (($263) + ($262)|0);
 $265 = HEAP8[$264>>0]|0;
 $266 = $outptr1;
 HEAP8[$266>>0] = $265;
 $267 = $y;
 $268 = $cgreen;
 $269 = (($267) + ($268))|0;
 $270 = $range_limit;
 $271 = (($270) + ($269)|0);
 $272 = HEAP8[$271>>0]|0;
 $273 = $outptr1;
 $274 = (($273) + 1|0);
 HEAP8[$274>>0] = $272;
 $275 = $y;
 $276 = $cblue;
 $277 = (($275) + ($276))|0;
 $278 = $range_limit;
 $279 = (($278) + ($277)|0);
 $280 = HEAP8[$279>>0]|0;
 $281 = $outptr1;
 $282 = (($281) + 2|0);
 HEAP8[$282>>0] = $280;
 STACKTOP = sp;return;
}
function _merged_1v_upsample($cinfo,$input_buf,$in_row_group_ctr,$in_row_groups_avail,$output_buf,$out_row_ctr,$out_rows_avail) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_group_ctr = $in_row_group_ctr|0;
 $in_row_groups_avail = $in_row_groups_avail|0;
 $output_buf = $output_buf|0;
 $out_row_ctr = $out_row_ctr|0;
 $out_rows_avail = $out_rows_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $upsample = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_group_ctr;
 $3 = $in_row_groups_avail;
 $4 = $output_buf;
 $5 = $out_row_ctr;
 $6 = $out_rows_avail;
 $7 = $0;
 $8 = (($7) + 476|0);
 $9 = HEAP32[$8>>2]|0;
 $upsample = $9;
 $10 = $upsample;
 $11 = (($10) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = $1;
 $15 = $2;
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = $5;
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) + ($19<<2)|0);
 FUNCTION_TABLE_viiii[$12 & 511]($13,$14,$16,$20);
 $21 = $5;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[$21>>2] = $23;
 $24 = $2;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 1)|0;
 HEAP32[$24>>2] = $26;
 STACKTOP = sp;return;
}
function _h2v1_merged_upsample($cinfo,$input_buf,$in_row_group_ctr,$output_buf) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_group_ctr = $in_row_group_ctr|0;
 $output_buf = $output_buf|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Cbbtab = 0, $Cbgtab = 0, $Crgtab = 0, $Crrtab = 0, $cb = 0, $cblue = 0, $cgreen = 0, $col = 0, $cr = 0, $cred = 0, $inptr0 = 0, $inptr1 = 0;
 var $inptr2 = 0, $outptr = 0, $range_limit = 0, $upsample = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_group_ctr;
 $3 = $output_buf;
 $4 = $0;
 $5 = (($4) + 476|0);
 $6 = HEAP32[$5>>2]|0;
 $upsample = $6;
 $7 = $0;
 $8 = (($7) + 336|0);
 $9 = HEAP32[$8>>2]|0;
 $range_limit = $9;
 $10 = $upsample;
 $11 = (($10) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $Crrtab = $12;
 $13 = $upsample;
 $14 = (($13) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $Cbbtab = $15;
 $16 = $upsample;
 $17 = (($16) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $Crgtab = $18;
 $19 = $upsample;
 $20 = (($19) + 28|0);
 $21 = HEAP32[$20>>2]|0;
 $Cbgtab = $21;
 $22 = $2;
 $23 = $1;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + ($22<<2)|0);
 $26 = HEAP32[$25>>2]|0;
 $inptr0 = $26;
 $27 = $2;
 $28 = $1;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + ($27<<2)|0);
 $32 = HEAP32[$31>>2]|0;
 $inptr1 = $32;
 $33 = $2;
 $34 = $1;
 $35 = (($34) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) + ($33<<2)|0);
 $38 = HEAP32[$37>>2]|0;
 $inptr2 = $38;
 $39 = $3;
 $40 = HEAP32[$39>>2]|0;
 $outptr = $40;
 $41 = $0;
 $42 = (($41) + 112|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $43 >>> 1;
 $col = $44;
 while(1) {
  $45 = $col;
  $46 = ($45>>>0)>(0);
  if (!($46)) {
   break;
  }
  $47 = $inptr1;
  $48 = (($47) + 1|0);
  $inptr1 = $48;
  $49 = HEAP8[$47>>0]|0;
  $50 = $49&255;
  $cb = $50;
  $51 = $inptr2;
  $52 = (($51) + 1|0);
  $inptr2 = $52;
  $53 = HEAP8[$51>>0]|0;
  $54 = $53&255;
  $cr = $54;
  $55 = $cr;
  $56 = $Crrtab;
  $57 = (($56) + ($55<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $cred = $58;
  $59 = $cb;
  $60 = $Cbgtab;
  $61 = (($60) + ($59<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $cr;
  $64 = $Crgtab;
  $65 = (($64) + ($63<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($62) + ($66))|0;
  $68 = $67 >> 16;
  $cgreen = $68;
  $69 = $cb;
  $70 = $Cbbtab;
  $71 = (($70) + ($69<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $cblue = $72;
  $73 = $inptr0;
  $74 = (($73) + 1|0);
  $inptr0 = $74;
  $75 = HEAP8[$73>>0]|0;
  $76 = $75&255;
  $y = $76;
  $77 = $y;
  $78 = $cred;
  $79 = (($77) + ($78))|0;
  $80 = $range_limit;
  $81 = (($80) + ($79)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $outptr;
  HEAP8[$83>>0] = $82;
  $84 = $y;
  $85 = $cgreen;
  $86 = (($84) + ($85))|0;
  $87 = $range_limit;
  $88 = (($87) + ($86)|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $outptr;
  $91 = (($90) + 1|0);
  HEAP8[$91>>0] = $89;
  $92 = $y;
  $93 = $cblue;
  $94 = (($92) + ($93))|0;
  $95 = $range_limit;
  $96 = (($95) + ($94)|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $outptr;
  $99 = (($98) + 2|0);
  HEAP8[$99>>0] = $97;
  $100 = $outptr;
  $101 = (($100) + 3|0);
  $outptr = $101;
  $102 = $inptr0;
  $103 = (($102) + 1|0);
  $inptr0 = $103;
  $104 = HEAP8[$102>>0]|0;
  $105 = $104&255;
  $y = $105;
  $106 = $y;
  $107 = $cred;
  $108 = (($106) + ($107))|0;
  $109 = $range_limit;
  $110 = (($109) + ($108)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $outptr;
  HEAP8[$112>>0] = $111;
  $113 = $y;
  $114 = $cgreen;
  $115 = (($113) + ($114))|0;
  $116 = $range_limit;
  $117 = (($116) + ($115)|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $outptr;
  $120 = (($119) + 1|0);
  HEAP8[$120>>0] = $118;
  $121 = $y;
  $122 = $cblue;
  $123 = (($121) + ($122))|0;
  $124 = $range_limit;
  $125 = (($124) + ($123)|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $outptr;
  $128 = (($127) + 2|0);
  HEAP8[$128>>0] = $126;
  $129 = $outptr;
  $130 = (($129) + 3|0);
  $outptr = $130;
  $131 = $col;
  $132 = (($131) + -1)|0;
  $col = $132;
 }
 $133 = $0;
 $134 = (($133) + 112|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = $135 & 1;
 $137 = ($136|0)!=(0);
 if (!($137)) {
  STACKTOP = sp;return;
 }
 $138 = $inptr1;
 $139 = HEAP8[$138>>0]|0;
 $140 = $139&255;
 $cb = $140;
 $141 = $inptr2;
 $142 = HEAP8[$141>>0]|0;
 $143 = $142&255;
 $cr = $143;
 $144 = $cr;
 $145 = $Crrtab;
 $146 = (($145) + ($144<<2)|0);
 $147 = HEAP32[$146>>2]|0;
 $cred = $147;
 $148 = $cb;
 $149 = $Cbgtab;
 $150 = (($149) + ($148<<2)|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = $cr;
 $153 = $Crgtab;
 $154 = (($153) + ($152<<2)|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = (($151) + ($155))|0;
 $157 = $156 >> 16;
 $cgreen = $157;
 $158 = $cb;
 $159 = $Cbbtab;
 $160 = (($159) + ($158<<2)|0);
 $161 = HEAP32[$160>>2]|0;
 $cblue = $161;
 $162 = $inptr0;
 $163 = HEAP8[$162>>0]|0;
 $164 = $163&255;
 $y = $164;
 $165 = $y;
 $166 = $cred;
 $167 = (($165) + ($166))|0;
 $168 = $range_limit;
 $169 = (($168) + ($167)|0);
 $170 = HEAP8[$169>>0]|0;
 $171 = $outptr;
 HEAP8[$171>>0] = $170;
 $172 = $y;
 $173 = $cgreen;
 $174 = (($172) + ($173))|0;
 $175 = $range_limit;
 $176 = (($175) + ($174)|0);
 $177 = HEAP8[$176>>0]|0;
 $178 = $outptr;
 $179 = (($178) + 1|0);
 HEAP8[$179>>0] = $177;
 $180 = $y;
 $181 = $cblue;
 $182 = (($180) + ($181))|0;
 $183 = $range_limit;
 $184 = (($183) + ($182)|0);
 $185 = HEAP8[$184>>0]|0;
 $186 = $outptr;
 $187 = (($186) + 2|0);
 HEAP8[$187>>0] = $185;
 STACKTOP = sp;return;
}
function _build_ycc_rgb_table57($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $i = 0, $upsample = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 476|0);
 $3 = HEAP32[$2>>2]|0;
 $upsample = $3;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (FUNCTION_TABLE_iiii[$7 & 511]($8,1,1024)|0);
 $10 = $upsample;
 $11 = (($10) + 16|0);
 HEAP32[$11>>2] = $9;
 $12 = $0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$14>>2]|0;
 $16 = $0;
 $17 = (FUNCTION_TABLE_iiii[$15 & 511]($16,1,1024)|0);
 $18 = $upsample;
 $19 = (($18) + 20|0);
 HEAP32[$19>>2] = $17;
 $20 = $0;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$22>>2]|0;
 $24 = $0;
 $25 = (FUNCTION_TABLE_iiii[$23 & 511]($24,1,1024)|0);
 $26 = $upsample;
 $27 = (($26) + 24|0);
 HEAP32[$27>>2] = $25;
 $28 = $0;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 $33 = (FUNCTION_TABLE_iiii[$31 & 511]($32,1,1024)|0);
 $34 = $upsample;
 $35 = (($34) + 28|0);
 HEAP32[$35>>2] = $33;
 $i = 0;
 $x = -128;
 while(1) {
  $36 = $i;
  $37 = ($36|0)<=(255);
  if (!($37)) {
   break;
  }
  $38 = $x;
  $39 = ($38*91881)|0;
  $40 = (($39) + 32768)|0;
  $41 = $40 >> 16;
  $42 = $i;
  $43 = $upsample;
  $44 = (($43) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + ($42<<2)|0);
  HEAP32[$46>>2] = $41;
  $47 = $x;
  $48 = ($47*116130)|0;
  $49 = (($48) + 32768)|0;
  $50 = $49 >> 16;
  $51 = $i;
  $52 = $upsample;
  $53 = (($52) + 20|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51<<2)|0);
  HEAP32[$55>>2] = $50;
  $56 = $x;
  $57 = Math_imul(-46802, $56)|0;
  $58 = $i;
  $59 = $upsample;
  $60 = (($59) + 24|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = (($61) + ($58<<2)|0);
  HEAP32[$62>>2] = $57;
  $63 = $x;
  $64 = Math_imul(-22553, $63)|0;
  $65 = (($64) + 32768)|0;
  $66 = $i;
  $67 = $upsample;
  $68 = (($67) + 28|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (($69) + ($66<<2)|0);
  HEAP32[$70>>2] = $65;
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
  $73 = $x;
  $74 = (($73) + 1)|0;
  $x = $74;
 }
 STACKTOP = sp;return;
}
function _jinit_d_post_controller($cinfo,$need_full_buffer) {
 $cinfo = $cinfo|0;
 $need_full_buffer = $need_full_buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $post = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $need_full_buffer;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = (FUNCTION_TABLE_iiii[$5 & 511]($6,1,28)|0);
 $post = $7;
 $8 = $post;
 $9 = $0;
 $10 = (($9) + 456|0);
 HEAP32[$10>>2] = $8;
 $11 = $post;
 HEAP32[$11>>2] = 229;
 $12 = $post;
 $13 = (($12) + 8|0);
 HEAP32[$13>>2] = 0;
 $14 = $post;
 $15 = (($14) + 12|0);
 HEAP32[$15>>2] = 0;
 $16 = $0;
 $17 = (($16) + 84|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)!=(0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = $0;
 $21 = (($20) + 320|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $post;
 $24 = (($23) + 16|0);
 HEAP32[$24>>2] = $22;
 $25 = $1;
 $26 = ($25|0)!=(0);
 if ($26) {
  $27 = $0;
  $28 = (($27) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($29) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $0;
  $33 = $0;
  $34 = (($33) + 112|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $0;
  $37 = (($36) + 120|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = Math_imul($35, $38)|0;
  $40 = $0;
  $41 = (($40) + 116|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $post;
  $44 = (($43) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (_jround_up($42,$45)|0);
  $47 = $post;
  $48 = (($47) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_iiiiiii[$31 & 511]($32,1,0,$39,$46,$49)|0);
  $51 = $post;
  $52 = (($51) + 8|0);
  HEAP32[$52>>2] = $50;
 } else {
  $53 = $0;
  $54 = (($53) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 8|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $0;
  $59 = $0;
  $60 = (($59) + 112|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = $0;
  $63 = (($62) + 120|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = Math_imul($61, $64)|0;
  $66 = $post;
  $67 = (($66) + 16|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (FUNCTION_TABLE_iiiii[$57 & 511]($58,1,$65,$68)|0);
  $70 = $post;
  $71 = (($70) + 12|0);
  HEAP32[$71>>2] = $69;
 }
 STACKTOP = sp;return;
}
function _start_pass_dpost($cinfo,$pass_mode) {
 $cinfo = $cinfo|0;
 $pass_mode = $pass_mode|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $post = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $pass_mode;
 $2 = $0;
 $3 = (($2) + 456|0);
 $4 = HEAP32[$3>>2]|0;
 $post = $4;
 $5 = $1;
 if ((($5|0) == 0)) {
  $6 = $0;
  $7 = (($6) + 84|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $post;
   $11 = (($10) + 4|0);
   HEAP32[$11>>2] = 230;
   $12 = $post;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0|0);
   if ($15) {
    $16 = $0;
    $17 = (($16) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($18) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $0;
    $22 = $post;
    $23 = (($22) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $post;
    $26 = (($25) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (FUNCTION_TABLE_iiiiii[$20 & 511]($21,$24,0,$27,1)|0);
    $29 = $post;
    $30 = (($29) + 12|0);
    HEAP32[$30>>2] = $28;
   }
  } else {
   $31 = $0;
   $32 = (($31) + 476|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($33) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $post;
   $37 = (($36) + 4|0);
   HEAP32[$37>>2] = $35;
  }
 } else if ((($5|0) == 3)) {
  $38 = $post;
  $39 = (($38) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)==(0|0);
  if ($41) {
   $42 = $0;
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + 20|0);
   HEAP32[$44>>2] = 3;
   $45 = $0;
   $46 = HEAP32[$45>>2]|0;
   $47 = HEAP32[$46>>2]|0;
   $48 = $0;
   FUNCTION_TABLE_vi[$47 & 511]($48);
  }
  $49 = $post;
  $50 = (($49) + 4|0);
  HEAP32[$50>>2] = 231;
 } else if ((($5|0) == 2)) {
  $51 = $post;
  $52 = (($51) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)==(0|0);
  if ($54) {
   $55 = $0;
   $56 = HEAP32[$55>>2]|0;
   $57 = (($56) + 20|0);
   HEAP32[$57>>2] = 3;
   $58 = $0;
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP32[$59>>2]|0;
   $61 = $0;
   FUNCTION_TABLE_vi[$60 & 511]($61);
  }
  $62 = $post;
  $63 = (($62) + 4|0);
  HEAP32[$63>>2] = 232;
 } else {
  $64 = $0;
  $65 = HEAP32[$64>>2]|0;
  $66 = (($65) + 20|0);
  HEAP32[$66>>2] = 3;
  $67 = $0;
  $68 = HEAP32[$67>>2]|0;
  $69 = HEAP32[$68>>2]|0;
  $70 = $0;
  FUNCTION_TABLE_vi[$69 & 511]($70);
 }
 $71 = $post;
 $72 = (($71) + 24|0);
 HEAP32[$72>>2] = 0;
 $73 = $post;
 $74 = (($73) + 20|0);
 HEAP32[$74>>2] = 0;
 STACKTOP = sp;return;
}
function _post_process_1pass($cinfo,$input_buf,$in_row_group_ctr,$in_row_groups_avail,$output_buf,$out_row_ctr,$out_rows_avail) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_group_ctr = $in_row_group_ctr|0;
 $in_row_groups_avail = $in_row_groups_avail|0;
 $output_buf = $output_buf|0;
 $out_row_ctr = $out_row_ctr|0;
 $out_rows_avail = $out_rows_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $max_rows = 0, $num_rows = 0, $post = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $num_rows = sp + 4|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_group_ctr;
 $3 = $in_row_groups_avail;
 $4 = $output_buf;
 $5 = $out_row_ctr;
 $6 = $out_rows_avail;
 $7 = $0;
 $8 = (($7) + 456|0);
 $9 = HEAP32[$8>>2]|0;
 $post = $9;
 $10 = $6;
 $11 = $5;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) - ($12))|0;
 $max_rows = $13;
 $14 = $max_rows;
 $15 = $post;
 $16 = (($15) + 16|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14>>>0)>($17>>>0);
 if ($18) {
  $19 = $post;
  $20 = (($19) + 16|0);
  $21 = HEAP32[$20>>2]|0;
  $max_rows = $21;
 }
 HEAP32[$num_rows>>2] = 0;
 $22 = $0;
 $23 = (($22) + 476|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = $1;
 $29 = $2;
 $30 = $3;
 $31 = $post;
 $32 = (($31) + 12|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = $max_rows;
 FUNCTION_TABLE_viiiiiii[$26 & 255]($27,$28,$29,$30,$33,$num_rows,$34);
 $35 = $0;
 $36 = (($35) + 484|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $0;
 $41 = $post;
 $42 = (($41) + 12|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = $4;
 $45 = $5;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + ($46<<2)|0);
 $48 = HEAP32[$num_rows>>2]|0;
 FUNCTION_TABLE_viiii[$39 & 511]($40,$43,$47,$48);
 $49 = HEAP32[$num_rows>>2]|0;
 $50 = $5;
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($49))|0;
 HEAP32[$50>>2] = $52;
 STACKTOP = sp;return;
}
function _post_process_prepass($cinfo,$input_buf,$in_row_group_ctr,$in_row_groups_avail,$output_buf,$out_row_ctr,$out_rows_avail) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_group_ctr = $in_row_group_ctr|0;
 $in_row_groups_avail = $in_row_groups_avail|0;
 $output_buf = $output_buf|0;
 $out_row_ctr = $out_row_ctr|0;
 $out_rows_avail = $out_rows_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $num_rows = 0, $old_next_row = 0, $post = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_group_ctr;
 $3 = $in_row_groups_avail;
 $4 = $output_buf;
 $5 = $out_row_ctr;
 $6 = $out_rows_avail;
 $7 = $0;
 $8 = (($7) + 456|0);
 $9 = HEAP32[$8>>2]|0;
 $post = $9;
 $10 = $post;
 $11 = (($10) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $0;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = $post;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $post;
  $24 = (($23) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $post;
  $27 = (($26) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (FUNCTION_TABLE_iiiiii[$18 & 511]($19,$22,$25,$28,1)|0);
  $30 = $post;
  $31 = (($30) + 12|0);
  HEAP32[$31>>2] = $29;
 }
 $32 = $post;
 $33 = (($32) + 24|0);
 $34 = HEAP32[$33>>2]|0;
 $old_next_row = $34;
 $35 = $0;
 $36 = (($35) + 476|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $0;
 $41 = $1;
 $42 = $2;
 $43 = $3;
 $44 = $post;
 $45 = (($44) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $post;
 $48 = (($47) + 24|0);
 $49 = $post;
 $50 = (($49) + 16|0);
 $51 = HEAP32[$50>>2]|0;
 FUNCTION_TABLE_viiiiiii[$39 & 255]($40,$41,$42,$43,$46,$48,$51);
 $52 = $post;
 $53 = (($52) + 24|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = $old_next_row;
 $56 = ($54>>>0)>($55>>>0);
 if ($56) {
  $57 = $post;
  $58 = (($57) + 24|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $old_next_row;
  $61 = (($59) - ($60))|0;
  $num_rows = $61;
  $62 = $0;
  $63 = (($62) + 484|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + 4|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $0;
  $68 = $post;
  $69 = (($68) + 12|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $old_next_row;
  $72 = (($70) + ($71<<2)|0);
  $73 = $num_rows;
  FUNCTION_TABLE_viiii[$66 & 511]($67,$72,0,$73);
  $74 = $num_rows;
  $75 = $5;
  $76 = HEAP32[$75>>2]|0;
  $77 = (($76) + ($74))|0;
  HEAP32[$75>>2] = $77;
 }
 $78 = $post;
 $79 = (($78) + 24|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = $post;
 $82 = (($81) + 16|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($80>>>0)>=($83>>>0);
 if (!($84)) {
  STACKTOP = sp;return;
 }
 $85 = $post;
 $86 = (($85) + 16|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $post;
 $89 = (($88) + 20|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = (($90) + ($87))|0;
 HEAP32[$89>>2] = $91;
 $92 = $post;
 $93 = (($92) + 24|0);
 HEAP32[$93>>2] = 0;
 STACKTOP = sp;return;
}
function _post_process_2pass($cinfo,$input_buf,$in_row_group_ctr,$in_row_groups_avail,$output_buf,$out_row_ctr,$out_rows_avail) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_group_ctr = $in_row_group_ctr|0;
 $in_row_groups_avail = $in_row_groups_avail|0;
 $output_buf = $output_buf|0;
 $out_row_ctr = $out_row_ctr|0;
 $out_rows_avail = $out_rows_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $max_rows = 0, $num_rows = 0, $post = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_group_ctr;
 $3 = $in_row_groups_avail;
 $4 = $output_buf;
 $5 = $out_row_ctr;
 $6 = $out_rows_avail;
 $7 = $0;
 $8 = (($7) + 456|0);
 $9 = HEAP32[$8>>2]|0;
 $post = $9;
 $10 = $post;
 $11 = (($10) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if ($13) {
  $14 = $0;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 28|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = $post;
  $21 = (($20) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $post;
  $24 = (($23) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $post;
  $27 = (($26) + 16|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (FUNCTION_TABLE_iiiiii[$18 & 511]($19,$22,$25,$28,0)|0);
  $30 = $post;
  $31 = (($30) + 12|0);
  HEAP32[$31>>2] = $29;
 }
 $32 = $post;
 $33 = (($32) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $post;
 $36 = (($35) + 24|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($34) - ($37))|0;
 $num_rows = $38;
 $39 = $6;
 $40 = $5;
 $41 = HEAP32[$40>>2]|0;
 $42 = (($39) - ($41))|0;
 $max_rows = $42;
 $43 = $num_rows;
 $44 = $max_rows;
 $45 = ($43>>>0)>($44>>>0);
 if ($45) {
  $46 = $max_rows;
  $num_rows = $46;
 }
 $47 = $0;
 $48 = (($47) + 116|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $post;
 $51 = (($50) + 20|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($49) - ($52))|0;
 $max_rows = $53;
 $54 = $num_rows;
 $55 = $max_rows;
 $56 = ($54>>>0)>($55>>>0);
 if ($56) {
  $57 = $max_rows;
  $num_rows = $57;
 }
 $58 = $0;
 $59 = (($58) + 484|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $0;
 $64 = $post;
 $65 = (($64) + 12|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $post;
 $68 = (($67) + 24|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (($66) + ($69<<2)|0);
 $71 = $4;
 $72 = $5;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + ($73<<2)|0);
 $75 = $num_rows;
 FUNCTION_TABLE_viiii[$62 & 511]($63,$70,$74,$75);
 $76 = $num_rows;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($78) + ($76))|0;
 HEAP32[$77>>2] = $79;
 $80 = $num_rows;
 $81 = $post;
 $82 = (($81) + 24|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = (($83) + ($80))|0;
 HEAP32[$82>>2] = $84;
 $85 = $post;
 $86 = (($85) + 24|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = $post;
 $89 = (($88) + 16|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($87>>>0)>=($90>>>0);
 if (!($91)) {
  STACKTOP = sp;return;
 }
 $92 = $post;
 $93 = (($92) + 16|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = $post;
 $96 = (($95) + 20|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = (($97) + ($94))|0;
 HEAP32[$96>>2] = $98;
 $99 = $post;
 $100 = (($99) + 24|0);
 HEAP32[$100>>2] = 0;
 STACKTOP = sp;return;
}
function _jinit_upsampler($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0, $h_in_group = 0, $h_out_group = 0, $need_buffer = 0, $upsample = 0, $v_in_group = 0, $v_out_group = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,160)|0);
 $upsample = $6;
 $7 = $upsample;
 $8 = $0;
 $9 = (($8) + 476|0);
 HEAP32[$9>>2] = $7;
 $10 = $upsample;
 HEAP32[$10>>2] = 233;
 $11 = $upsample;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 234;
 $13 = $upsample;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = (($15) + 308|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0);
 if ($18) {
  $19 = $0;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 20|0);
  HEAP32[$21>>2] = 26;
  $22 = $0;
  $23 = HEAP32[$22>>2]|0;
  $24 = HEAP32[$23>>2]|0;
  $25 = $0;
  FUNCTION_TABLE_vi[$24 & 511]($25);
 }
 $ci = 0;
 $26 = $0;
 $27 = (($26) + 216|0);
 $28 = HEAP32[$27>>2]|0;
 $compptr = $28;
 while(1) {
  $29 = $ci;
  $30 = $0;
  $31 = (($30) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $compptr;
  $35 = (($34) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $compptr;
  $38 = (($37) + 36|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $41 = $0;
  $42 = (($41) + 324|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($40|0) / ($43|0))&-1;
  $h_in_group = $44;
  $45 = $compptr;
  $46 = (($45) + 12|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $compptr;
  $49 = (($48) + 40|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = Math_imul($47, $50)|0;
  $52 = $0;
  $53 = (($52) + 328|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($51|0) / ($54|0))&-1;
  $v_in_group = $55;
  $56 = $0;
  $57 = (($56) + 316|0);
  $58 = HEAP32[$57>>2]|0;
  $h_out_group = $58;
  $59 = $0;
  $60 = (($59) + 320|0);
  $61 = HEAP32[$60>>2]|0;
  $v_out_group = $61;
  $62 = $v_in_group;
  $63 = $ci;
  $64 = $upsample;
  $65 = (($64) + 100|0);
  $66 = (($65) + ($63<<2)|0);
  HEAP32[$66>>2] = $62;
  $need_buffer = 1;
  $67 = $compptr;
  $68 = (($67) + 52|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($69|0)!=(0);
  if ($70) {
   $75 = $h_in_group;
   $76 = $h_out_group;
   $77 = ($75|0)==($76|0);
   if ($77) {
    $78 = $v_in_group;
    $79 = $v_out_group;
    $80 = ($78|0)==($79|0);
    if ($80) {
     $81 = $ci;
     $82 = $upsample;
     $83 = (($82) + 52|0);
     $84 = (($83) + ($81<<2)|0);
     HEAP32[$84>>2] = 236;
     $need_buffer = 0;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
   if ((label|0) == 10) {
    label = 0;
    $85 = $h_in_group;
    $86 = $85<<1;
    $87 = $h_out_group;
    $88 = ($86|0)==($87|0);
    if ($88) {
     $89 = $v_in_group;
     $90 = $v_out_group;
     $91 = ($89|0)==($90|0);
     if ($91) {
      $92 = $ci;
      $93 = $upsample;
      $94 = (($93) + 52|0);
      $95 = (($94) + ($92<<2)|0);
      HEAP32[$95>>2] = 237;
     } else {
      label = 13;
     }
    } else {
     label = 13;
    }
    if ((label|0) == 13) {
     label = 0;
     $96 = $h_in_group;
     $97 = $96<<1;
     $98 = $h_out_group;
     $99 = ($97|0)==($98|0);
     if ($99) {
      $100 = $v_in_group;
      $101 = $100<<1;
      $102 = $v_out_group;
      $103 = ($101|0)==($102|0);
      if ($103) {
       $104 = $ci;
       $105 = $upsample;
       $106 = (($105) + 52|0);
       $107 = (($106) + ($104<<2)|0);
       HEAP32[$107>>2] = 238;
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      label = 0;
      $108 = $h_out_group;
      $109 = $h_in_group;
      $110 = (($108|0) % ($109|0))&-1;
      $111 = ($110|0)==(0);
      if ($111) {
       $112 = $v_out_group;
       $113 = $v_in_group;
       $114 = (($112|0) % ($113|0))&-1;
       $115 = ($114|0)==(0);
       if ($115) {
        $116 = $ci;
        $117 = $upsample;
        $118 = (($117) + 52|0);
        $119 = (($118) + ($116<<2)|0);
        HEAP32[$119>>2] = 239;
        $120 = $h_out_group;
        $121 = $h_in_group;
        $122 = (($120|0) / ($121|0))&-1;
        $123 = $122&255;
        $124 = $ci;
        $125 = $upsample;
        $126 = (($125) + 140|0);
        $127 = (($126) + ($124)|0);
        HEAP8[$127>>0] = $123;
        $128 = $v_out_group;
        $129 = $v_in_group;
        $130 = (($128|0) / ($129|0))&-1;
        $131 = $130&255;
        $132 = $ci;
        $133 = $upsample;
        $134 = (($133) + 150|0);
        $135 = (($134) + ($132)|0);
        HEAP8[$135>>0] = $131;
       } else {
        label = 19;
       }
      } else {
       label = 19;
      }
      if ((label|0) == 19) {
       label = 0;
       $136 = $0;
       $137 = HEAP32[$136>>2]|0;
       $138 = (($137) + 20|0);
       HEAP32[$138>>2] = 39;
       $139 = $0;
       $140 = HEAP32[$139>>2]|0;
       $141 = HEAP32[$140>>2]|0;
       $142 = $0;
       FUNCTION_TABLE_vi[$141 & 511]($142);
      }
     }
    }
   }
  } else {
   $71 = $ci;
   $72 = $upsample;
   $73 = (($72) + 52|0);
   $74 = (($73) + ($71<<2)|0);
   HEAP32[$74>>2] = 235;
   $need_buffer = 0;
  }
  $143 = $need_buffer;
  $144 = ($143|0)!=(0);
  if ($144) {
   $145 = $0;
   $146 = (($145) + 4|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = (($147) + 8|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $0;
   $151 = $0;
   $152 = (($151) + 112|0);
   $153 = HEAP32[$152>>2]|0;
   $154 = $0;
   $155 = (($154) + 316|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (_jround_up($153,$156)|0);
   $158 = $0;
   $159 = (($158) + 320|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = (FUNCTION_TABLE_iiiii[$149 & 511]($150,1,$157,$160)|0);
   $162 = $ci;
   $163 = $upsample;
   $164 = (($163) + 12|0);
   $165 = (($164) + ($162<<2)|0);
   HEAP32[$165>>2] = $161;
  }
  $166 = $ci;
  $167 = (($166) + 1)|0;
  $ci = $167;
  $168 = $compptr;
  $169 = (($168) + 88|0);
  $compptr = $169;
 }
 STACKTOP = sp;return;
}
function _start_pass_upsample($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $upsample = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 476|0);
 $3 = HEAP32[$2>>2]|0;
 $upsample = $3;
 $4 = $0;
 $5 = (($4) + 320|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $upsample;
 $8 = (($7) + 92|0);
 HEAP32[$8>>2] = $6;
 $9 = $0;
 $10 = (($9) + 116|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $upsample;
 $13 = (($12) + 96|0);
 HEAP32[$13>>2] = $11;
 STACKTOP = sp;return;
}
function _sep_upsample($cinfo,$input_buf,$in_row_group_ctr,$in_row_groups_avail,$output_buf,$out_row_ctr,$out_rows_avail) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $in_row_group_ctr = $in_row_group_ctr|0;
 $in_row_groups_avail = $in_row_groups_avail|0;
 $output_buf = $output_buf|0;
 $out_row_ctr = $out_row_ctr|0;
 $out_rows_avail = $out_rows_avail|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ci = 0, $compptr = 0;
 var $num_rows = 0, $upsample = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $in_row_group_ctr;
 $3 = $in_row_groups_avail;
 $4 = $output_buf;
 $5 = $out_row_ctr;
 $6 = $out_rows_avail;
 $7 = $0;
 $8 = (($7) + 476|0);
 $9 = HEAP32[$8>>2]|0;
 $upsample = $9;
 $10 = $upsample;
 $11 = (($10) + 92|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = (($13) + 320|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($12|0)>=($15|0);
 if ($16) {
  $ci = 0;
  $17 = $0;
  $18 = (($17) + 216|0);
  $19 = HEAP32[$18>>2]|0;
  $compptr = $19;
  while(1) {
   $20 = $ci;
   $21 = $0;
   $22 = (($21) + 36|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($20|0)<($23|0);
   if (!($24)) {
    break;
   }
   $25 = $ci;
   $26 = $upsample;
   $27 = (($26) + 52|0);
   $28 = (($27) + ($25<<2)|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $0;
   $31 = $compptr;
   $32 = $ci;
   $33 = $1;
   $34 = (($33) + ($32<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $2;
   $37 = HEAP32[$36>>2]|0;
   $38 = $ci;
   $39 = $upsample;
   $40 = (($39) + 100|0);
   $41 = (($40) + ($38<<2)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = Math_imul($37, $42)|0;
   $44 = (($35) + ($43<<2)|0);
   $45 = $upsample;
   $46 = (($45) + 12|0);
   $47 = $ci;
   $48 = (($46) + ($47<<2)|0);
   FUNCTION_TABLE_viiii[$29 & 511]($30,$31,$44,$48);
   $49 = $ci;
   $50 = (($49) + 1)|0;
   $ci = $50;
   $51 = $compptr;
   $52 = (($51) + 88|0);
   $compptr = $52;
  }
  $53 = $upsample;
  $54 = (($53) + 92|0);
  HEAP32[$54>>2] = 0;
 }
 $55 = $0;
 $56 = (($55) + 320|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $upsample;
 $59 = (($58) + 92|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = (($57) - ($60))|0;
 $num_rows = $61;
 $62 = $num_rows;
 $63 = $upsample;
 $64 = (($63) + 96|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($62>>>0)>($65>>>0);
 if ($66) {
  $67 = $upsample;
  $68 = (($67) + 96|0);
  $69 = HEAP32[$68>>2]|0;
  $num_rows = $69;
 }
 $70 = $5;
 $71 = HEAP32[$70>>2]|0;
 $72 = $6;
 $73 = (($72) - ($71))|0;
 $6 = $73;
 $74 = $num_rows;
 $75 = $6;
 $76 = ($74>>>0)>($75>>>0);
 if ($76) {
  $77 = $6;
  $num_rows = $77;
 }
 $78 = $0;
 $79 = (($78) + 480|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + 4|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $0;
 $84 = $upsample;
 $85 = (($84) + 12|0);
 $86 = $upsample;
 $87 = (($86) + 92|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $4;
 $90 = $5;
 $91 = HEAP32[$90>>2]|0;
 $92 = (($89) + ($91<<2)|0);
 $93 = $num_rows;
 FUNCTION_TABLE_viiiii[$82 & 255]($83,$85,$88,$92,$93);
 $94 = $num_rows;
 $95 = $5;
 $96 = HEAP32[$95>>2]|0;
 $97 = (($96) + ($94))|0;
 HEAP32[$95>>2] = $97;
 $98 = $num_rows;
 $99 = $upsample;
 $100 = (($99) + 96|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) - ($98))|0;
 HEAP32[$100>>2] = $102;
 $103 = $num_rows;
 $104 = $upsample;
 $105 = (($104) + 92|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + ($103))|0;
 HEAP32[$105>>2] = $107;
 $108 = $upsample;
 $109 = (($108) + 92|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $0;
 $112 = (($111) + 320|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($110|0)>=($113|0);
 if (!($114)) {
  STACKTOP = sp;return;
 }
 $115 = $2;
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) + 1)|0;
 HEAP32[$115>>2] = $117;
 STACKTOP = sp;return;
}
function _noop_upsample($cinfo,$compptr,$input_data,$output_data_ptr) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $input_data = $input_data|0;
 $output_data_ptr = $output_data_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $input_data;
 $3 = $output_data_ptr;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 STACKTOP = sp;return;
}
function _fullsize_upsample($cinfo,$compptr,$input_data,$output_data_ptr) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $input_data = $input_data|0;
 $output_data_ptr = $output_data_ptr|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $input_data;
 $3 = $output_data_ptr;
 $4 = $2;
 $5 = $3;
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function _h2v1_upsample($cinfo,$compptr,$input_data,$output_data_ptr) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $input_data = $input_data|0;
 $output_data_ptr = $output_data_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $inptr = 0, $invalue = 0;
 var $outend = 0, $outptr = 0, $output_data = 0, $outrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $input_data;
 $3 = $output_data_ptr;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $output_data = $5;
 $outrow = 0;
 while(1) {
  $6 = $outrow;
  $7 = $0;
  $8 = (($7) + 320|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $outrow;
  $12 = $2;
  $13 = (($12) + ($11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $inptr = $14;
  $15 = $outrow;
  $16 = $output_data;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $outptr = $18;
  $19 = $outptr;
  $20 = $0;
  $21 = (($20) + 112|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($19) + ($22)|0);
  $outend = $23;
  while(1) {
   $24 = $outptr;
   $25 = $outend;
   $26 = ($24>>>0)<($25>>>0);
   if (!($26)) {
    break;
   }
   $27 = $inptr;
   $28 = (($27) + 1|0);
   $inptr = $28;
   $29 = HEAP8[$27>>0]|0;
   $invalue = $29;
   $30 = $invalue;
   $31 = $outptr;
   $32 = (($31) + 1|0);
   $outptr = $32;
   HEAP8[$31>>0] = $30;
   $33 = $invalue;
   $34 = $outptr;
   $35 = (($34) + 1|0);
   $outptr = $35;
   HEAP8[$34>>0] = $33;
  }
  $36 = $outrow;
  $37 = (($36) + 1)|0;
  $outrow = $37;
 }
 STACKTOP = sp;return;
}
function _h2v2_upsample($cinfo,$compptr,$input_data,$output_data_ptr) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $input_data = $input_data|0;
 $output_data_ptr = $output_data_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $inptr = 0, $inrow = 0, $invalue = 0, $outend = 0, $outptr = 0, $output_data = 0, $outrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $input_data;
 $3 = $output_data_ptr;
 $4 = $3;
 $5 = HEAP32[$4>>2]|0;
 $output_data = $5;
 $outrow = 0;
 $inrow = 0;
 while(1) {
  $6 = $outrow;
  $7 = $0;
  $8 = (($7) + 320|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($6|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $inrow;
  $12 = $2;
  $13 = (($12) + ($11<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $inptr = $14;
  $15 = $outrow;
  $16 = $output_data;
  $17 = (($16) + ($15<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $outptr = $18;
  $19 = $outptr;
  $20 = $0;
  $21 = (($20) + 112|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($19) + ($22)|0);
  $outend = $23;
  while(1) {
   $24 = $outptr;
   $25 = $outend;
   $26 = ($24>>>0)<($25>>>0);
   if (!($26)) {
    break;
   }
   $27 = $inptr;
   $28 = (($27) + 1|0);
   $inptr = $28;
   $29 = HEAP8[$27>>0]|0;
   $invalue = $29;
   $30 = $invalue;
   $31 = $outptr;
   $32 = (($31) + 1|0);
   $outptr = $32;
   HEAP8[$31>>0] = $30;
   $33 = $invalue;
   $34 = $outptr;
   $35 = (($34) + 1|0);
   $outptr = $35;
   HEAP8[$34>>0] = $33;
  }
  $36 = $output_data;
  $37 = $outrow;
  $38 = $output_data;
  $39 = $outrow;
  $40 = (($39) + 1)|0;
  $41 = $0;
  $42 = (($41) + 112|0);
  $43 = HEAP32[$42>>2]|0;
  _jcopy_sample_rows($36,$37,$38,$40,1,$43);
  $44 = $inrow;
  $45 = (($44) + 1)|0;
  $inrow = $45;
  $46 = $outrow;
  $47 = (($46) + 2)|0;
  $outrow = $47;
 }
 STACKTOP = sp;return;
}
function _int_upsample($cinfo,$compptr,$input_data,$output_data_ptr) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $input_data = $input_data|0;
 $output_data_ptr = $output_data_ptr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $h = 0, $h_expand = 0, $inptr = 0, $inrow = 0, $invalue = 0, $outend = 0;
 var $outptr = 0, $output_data = 0, $outrow = 0, $upsample = 0, $v_expand = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $input_data;
 $3 = $output_data_ptr;
 $4 = $0;
 $5 = (($4) + 476|0);
 $6 = HEAP32[$5>>2]|0;
 $upsample = $6;
 $7 = $3;
 $8 = HEAP32[$7>>2]|0;
 $output_data = $8;
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $upsample;
 $13 = (($12) + 140|0);
 $14 = (($13) + ($11)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $h_expand = $16;
 $17 = $1;
 $18 = (($17) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $upsample;
 $21 = (($20) + 150|0);
 $22 = (($21) + ($19)|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $v_expand = $24;
 $outrow = 0;
 $inrow = 0;
 while(1) {
  $25 = $outrow;
  $26 = $0;
  $27 = (($26) + 320|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($25|0)<($28|0);
  if (!($29)) {
   break;
  }
  $30 = $inrow;
  $31 = $2;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $inptr = $33;
  $34 = $outrow;
  $35 = $output_data;
  $36 = (($35) + ($34<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $outptr = $37;
  $38 = $outptr;
  $39 = $0;
  $40 = (($39) + 112|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($38) + ($41)|0);
  $outend = $42;
  while(1) {
   $43 = $outptr;
   $44 = $outend;
   $45 = ($43>>>0)<($44>>>0);
   if (!($45)) {
    break;
   }
   $46 = $inptr;
   $47 = (($46) + 1|0);
   $inptr = $47;
   $48 = HEAP8[$46>>0]|0;
   $invalue = $48;
   $49 = $h_expand;
   $h = $49;
   while(1) {
    $50 = $h;
    $51 = ($50|0)>(0);
    if (!($51)) {
     break;
    }
    $52 = $invalue;
    $53 = $outptr;
    $54 = (($53) + 1|0);
    $outptr = $54;
    HEAP8[$53>>0] = $52;
    $55 = $h;
    $56 = (($55) + -1)|0;
    $h = $56;
   }
  }
  $57 = $v_expand;
  $58 = ($57|0)>(1);
  if ($58) {
   $59 = $output_data;
   $60 = $outrow;
   $61 = $output_data;
   $62 = $outrow;
   $63 = (($62) + 1)|0;
   $64 = $v_expand;
   $65 = (($64) - 1)|0;
   $66 = $0;
   $67 = (($66) + 112|0);
   $68 = HEAP32[$67>>2]|0;
   _jcopy_sample_rows($59,$60,$61,$63,$65,$68);
  }
  $69 = $inrow;
  $70 = (($69) + 1)|0;
  $inrow = $70;
  $71 = $v_expand;
  $72 = $outrow;
  $73 = (($72) + ($71))|0;
  $outrow = $73;
 }
 STACKTOP = sp;return;
}
function _jpeg_std_error($err) {
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $err;
 $1 = $0;
 HEAP32[$1>>2] = 240;
 $2 = $0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = 241;
 $4 = $0;
 $5 = (($4) + 8|0);
 HEAP32[$5>>2] = 242;
 $6 = $0;
 $7 = (($6) + 12|0);
 HEAP32[$7>>2] = 243;
 $8 = $0;
 $9 = (($8) + 16|0);
 HEAP32[$9>>2] = 244;
 $10 = $0;
 $11 = (($10) + 104|0);
 HEAP32[$11>>2] = 0;
 $12 = $0;
 $13 = (($12) + 108|0);
 HEAP32[$13>>2] = 0;
 $14 = $0;
 $15 = (($14) + 20|0);
 HEAP32[$15>>2] = 0;
 $16 = $0;
 $17 = (($16) + 112|0);
 HEAP32[$17>>2] = 8096;
 $18 = $0;
 $19 = (($18) + 116|0);
 HEAP32[$19>>2] = 126;
 $20 = $0;
 $21 = (($20) + 120|0);
 HEAP32[$21>>2] = 0;
 $22 = $0;
 $23 = (($22) + 124|0);
 HEAP32[$23>>2] = 0;
 $24 = $0;
 $25 = (($24) + 128|0);
 HEAP32[$25>>2] = 0;
 $26 = $0;
 STACKTOP = sp;return ($26|0);
}
function _error_exit($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 FUNCTION_TABLE_vi[$4 & 511]($5);
 $6 = $0;
 _jpeg_destroy($6);
 _exit(1);
 // unreachable;
}
function _emit_message($cinfo,$msg_level) {
 $cinfo = $cinfo|0;
 $msg_level = $msg_level|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $err = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $msg_level;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $err = $3;
 $4 = $1;
 $5 = ($4|0)<(0);
 if (!($5)) {
  $22 = $err;
  $23 = (($22) + 104|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $1;
  $26 = ($24|0)>=($25|0);
  if ($26) {
   $27 = $err;
   $28 = (($27) + 8|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = $0;
   FUNCTION_TABLE_vi[$29 & 511]($30);
  }
  STACKTOP = sp;return;
 }
 $6 = $err;
 $7 = (($6) + 108|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  label = 4;
 } else {
  $10 = $err;
  $11 = (($10) + 104|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)>=(3);
  if ($13) {
   label = 4;
  }
 }
 if ((label|0) == 4) {
  $14 = $err;
  $15 = (($14) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $0;
  FUNCTION_TABLE_vi[$16 & 511]($17);
 }
 $18 = $err;
 $19 = (($18) + 108|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 HEAP32[$19>>2] = $21;
 STACKTOP = sp;return;
}
function _output_message($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $buffer = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $vararg_buffer = sp;
 $buffer = sp + 8|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 FUNCTION_TABLE_vii[$4 & 511]($5,$buffer);
 $6 = HEAP32[_stderr>>2]|0;
 HEAP32[$vararg_buffer>>2] = $buffer;
 (_fprintf(($6|0),(8608|0),($vararg_buffer|0))|0);
 STACKTOP = sp;return;
}
function _format_message($cinfo,$buffer) {
 $cinfo = $cinfo|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ch = 0, $err = 0, $isstring = 0, $msg_code = 0, $msgptr = 0, $msgtext = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_ptr10 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, $vararg_ptr8 = 0, $vararg_ptr9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = $cinfo;
 $1 = $buffer;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $err = $3;
 $4 = $err;
 $5 = (($4) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $msg_code = $6;
 $msgtext = 0;
 $7 = $msg_code;
 $8 = ($7|0)>(0);
 if ($8) {
  $9 = $msg_code;
  $10 = $err;
  $11 = (($10) + 116|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<=($12|0);
  if ($13) {
   $14 = $msg_code;
   $15 = $err;
   $16 = (($15) + 112|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($17) + ($14<<2)|0);
   $19 = HEAP32[$18>>2]|0;
   $msgtext = $19;
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $20 = $err;
  $21 = (($20) + 120|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22|0)!=(0|0);
  if ($23) {
   $24 = $msg_code;
   $25 = $err;
   $26 = (($25) + 124|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($24|0)>=($27|0);
   if ($28) {
    $29 = $msg_code;
    $30 = $err;
    $31 = (($30) + 128|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($29|0)<=($32|0);
    if ($33) {
     $34 = $msg_code;
     $35 = $err;
     $36 = (($35) + 124|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (($34) - ($37))|0;
     $39 = $err;
     $40 = (($39) + 120|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($41) + ($38<<2)|0);
     $43 = HEAP32[$42>>2]|0;
     $msgtext = $43;
    }
   }
  }
 }
 $44 = $msgtext;
 $45 = ($44|0)==(0|0);
 if ($45) {
  $46 = $msg_code;
  $47 = $err;
  $48 = (($47) + 24|0);
  HEAP32[$48>>2] = $46;
  $49 = $err;
  $50 = (($49) + 112|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = HEAP32[$51>>2]|0;
  $msgtext = $52;
 }
 $isstring = 0;
 $53 = $msgtext;
 $msgptr = $53;
 while(1) {
  $54 = $msgptr;
  $55 = (($54) + 1|0);
  $msgptr = $55;
  $56 = HEAP8[$54>>0]|0;
  $ch = $56;
  $57 = $56 << 24 >> 24;
  $58 = ($57|0)!=(0);
  if (!($58)) {
   break;
  }
  $59 = $ch;
  $60 = $59 << 24 >> 24;
  $61 = ($60|0)==(37);
  if ($61) {
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  $62 = $msgptr;
  $63 = HEAP8[$62>>0]|0;
  $64 = $63 << 24 >> 24;
  $65 = ($64|0)==(115);
  if ($65) {
   $isstring = 1;
  }
 }
 $66 = $isstring;
 $67 = ($66|0)!=(0);
 if ($67) {
  $68 = $1;
  $69 = $msgtext;
  $70 = $err;
  $71 = (($70) + 24|0);
  HEAP32[$vararg_buffer>>2] = $71;
  (_sprintf($68,$69,$vararg_buffer)|0);
  STACKTOP = sp;return;
 } else {
  $72 = $1;
  $73 = $msgtext;
  $74 = $err;
  $75 = (($74) + 24|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = $err;
  $78 = (($77) + 24|0);
  $79 = (($78) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $err;
  $82 = (($81) + 24|0);
  $83 = (($82) + 8|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $err;
  $86 = (($85) + 24|0);
  $87 = (($86) + 12|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $err;
  $90 = (($89) + 24|0);
  $91 = (($90) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $err;
  $94 = (($93) + 24|0);
  $95 = (($94) + 20|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $err;
  $98 = (($97) + 24|0);
  $99 = (($98) + 24|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = $err;
  $102 = (($101) + 24|0);
  $103 = (($102) + 28|0);
  $104 = HEAP32[$103>>2]|0;
  HEAP32[$vararg_buffer1>>2] = $76;
  $vararg_ptr4 = (($vararg_buffer1) + 4|0);
  HEAP32[$vararg_ptr4>>2] = $80;
  $vararg_ptr5 = (($vararg_buffer1) + 8|0);
  HEAP32[$vararg_ptr5>>2] = $84;
  $vararg_ptr6 = (($vararg_buffer1) + 12|0);
  HEAP32[$vararg_ptr6>>2] = $88;
  $vararg_ptr7 = (($vararg_buffer1) + 16|0);
  HEAP32[$vararg_ptr7>>2] = $92;
  $vararg_ptr8 = (($vararg_buffer1) + 20|0);
  HEAP32[$vararg_ptr8>>2] = $96;
  $vararg_ptr9 = (($vararg_buffer1) + 24|0);
  HEAP32[$vararg_ptr9>>2] = $100;
  $vararg_ptr10 = (($vararg_buffer1) + 28|0);
  HEAP32[$vararg_ptr10>>2] = $104;
  (_sprintf($72,$73,$vararg_buffer1)|0);
  STACKTOP = sp;return;
 }
}
function _reset_error_mgr($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 108|0);
 HEAP32[$3>>2] = 0;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + 20|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function _jpeg_fdct_float($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0;
 var $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0.0, $187 = 0.0, $188 = 0;
 var $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0.0, $2 = 0, $20 = 0.0, $200 = 0.0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0, $205 = 0;
 var $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0, $219 = 0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0, $23 = 0, $230 = 0, $231 = 0.0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0.0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0;
 var $260 = 0.0, $261 = 0.0, $262 = 0.0, $263 = 0.0, $264 = 0, $265 = 0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0, $27 = 0, $270 = 0, $271 = 0.0, $272 = 0.0, $273 = 0.0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0.0, $278 = 0.0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0.0, $286 = 0.0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0.0, $313 = 0;
 var $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0.0, $tmp1 = 0.0, $tmp10 = 0.0, $tmp11 = 0.0, $tmp12 = 0.0, $tmp13 = 0.0, $tmp2 = 0.0, $tmp3 = 0.0, $tmp4 = 0.0, $tmp5 = 0.0, $tmp6 = 0.0, $tmp7 = 0.0, $z1 = 0.0;
 var $z11 = 0.0, $z13 = 0.0, $z2 = 0.0, $z3 = 0.0, $z4 = 0.0, $z5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = ($4|0)<(8);
  if (!($5)) {
   break;
  }
  $6 = $ctr;
  $7 = $1;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = (($9) + ($10)|0);
  $elemptr = $11;
  $12 = $elemptr;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $elemptr;
  $16 = (($15) + 7|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($14) + ($18))|0;
  $20 = (+($19|0));
  $tmp0 = $20;
  $21 = $elemptr;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $elemptr;
  $25 = (($24) + 7|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (($23) - ($27))|0;
  $29 = (+($28|0));
  $tmp7 = $29;
  $30 = $elemptr;
  $31 = (($30) + 1|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $elemptr;
  $35 = (($34) + 6|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (($33) + ($37))|0;
  $39 = (+($38|0));
  $tmp1 = $39;
  $40 = $elemptr;
  $41 = (($40) + 1|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $elemptr;
  $45 = (($44) + 6|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = (($43) - ($47))|0;
  $49 = (+($48|0));
  $tmp6 = $49;
  $50 = $elemptr;
  $51 = (($50) + 2|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = $elemptr;
  $55 = (($54) + 5|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = (($53) + ($57))|0;
  $59 = (+($58|0));
  $tmp2 = $59;
  $60 = $elemptr;
  $61 = (($60) + 2|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $elemptr;
  $65 = (($64) + 5|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = (($63) - ($67))|0;
  $69 = (+($68|0));
  $tmp5 = $69;
  $70 = $elemptr;
  $71 = (($70) + 3|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = $elemptr;
  $75 = (($74) + 4|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = (($73) + ($77))|0;
  $79 = (+($78|0));
  $tmp3 = $79;
  $80 = $elemptr;
  $81 = (($80) + 3|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = $elemptr;
  $85 = (($84) + 4|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = (($83) - ($87))|0;
  $89 = (+($88|0));
  $tmp4 = $89;
  $90 = $tmp0;
  $91 = $tmp3;
  $92 = $90 + $91;
  $tmp10 = $92;
  $93 = $tmp0;
  $94 = $tmp3;
  $95 = $93 - $94;
  $tmp13 = $95;
  $96 = $tmp1;
  $97 = $tmp2;
  $98 = $96 + $97;
  $tmp11 = $98;
  $99 = $tmp1;
  $100 = $tmp2;
  $101 = $99 - $100;
  $tmp12 = $101;
  $102 = $tmp10;
  $103 = $tmp11;
  $104 = $102 + $103;
  $105 = $104 - 1024.0;
  $106 = $dataptr;
  HEAPF32[$106>>2] = $105;
  $107 = $tmp10;
  $108 = $tmp11;
  $109 = $107 - $108;
  $110 = $dataptr;
  $111 = (($110) + 16|0);
  HEAPF32[$111>>2] = $109;
  $112 = $tmp12;
  $113 = $tmp13;
  $114 = $112 + $113;
  $115 = $114 * 0.707106769084930419921;
  $z1 = $115;
  $116 = $tmp13;
  $117 = $z1;
  $118 = $116 + $117;
  $119 = $dataptr;
  $120 = (($119) + 8|0);
  HEAPF32[$120>>2] = $118;
  $121 = $tmp13;
  $122 = $z1;
  $123 = $121 - $122;
  $124 = $dataptr;
  $125 = (($124) + 24|0);
  HEAPF32[$125>>2] = $123;
  $126 = $tmp4;
  $127 = $tmp5;
  $128 = $126 + $127;
  $tmp10 = $128;
  $129 = $tmp5;
  $130 = $tmp6;
  $131 = $129 + $130;
  $tmp11 = $131;
  $132 = $tmp6;
  $133 = $tmp7;
  $134 = $132 + $133;
  $tmp12 = $134;
  $135 = $tmp10;
  $136 = $tmp12;
  $137 = $135 - $136;
  $138 = $137 * 0.382683426141738891602;
  $z5 = $138;
  $139 = $tmp10;
  $140 = 0.541196107864379882813 * $139;
  $141 = $z5;
  $142 = $140 + $141;
  $z2 = $142;
  $143 = $tmp12;
  $144 = 1.30656301975250244141 * $143;
  $145 = $z5;
  $146 = $144 + $145;
  $z4 = $146;
  $147 = $tmp11;
  $148 = $147 * 0.707106769084930419921;
  $z3 = $148;
  $149 = $tmp7;
  $150 = $z3;
  $151 = $149 + $150;
  $z11 = $151;
  $152 = $tmp7;
  $153 = $z3;
  $154 = $152 - $153;
  $z13 = $154;
  $155 = $z13;
  $156 = $z2;
  $157 = $155 + $156;
  $158 = $dataptr;
  $159 = (($158) + 20|0);
  HEAPF32[$159>>2] = $157;
  $160 = $z13;
  $161 = $z2;
  $162 = $160 - $161;
  $163 = $dataptr;
  $164 = (($163) + 12|0);
  HEAPF32[$164>>2] = $162;
  $165 = $z11;
  $166 = $z4;
  $167 = $165 + $166;
  $168 = $dataptr;
  $169 = (($168) + 4|0);
  HEAPF32[$169>>2] = $167;
  $170 = $z11;
  $171 = $z4;
  $172 = $170 - $171;
  $173 = $dataptr;
  $174 = (($173) + 28|0);
  HEAPF32[$174>>2] = $172;
  $175 = $dataptr;
  $176 = (($175) + 32|0);
  $dataptr = $176;
  $177 = $ctr;
  $178 = (($177) + 1)|0;
  $ctr = $178;
 }
 $179 = $0;
 $dataptr = $179;
 $ctr = 7;
 while(1) {
  $180 = $ctr;
  $181 = ($180|0)>=(0);
  if (!($181)) {
   break;
  }
  $182 = $dataptr;
  $183 = +HEAPF32[$182>>2];
  $184 = $dataptr;
  $185 = (($184) + 224|0);
  $186 = +HEAPF32[$185>>2];
  $187 = $183 + $186;
  $tmp0 = $187;
  $188 = $dataptr;
  $189 = +HEAPF32[$188>>2];
  $190 = $dataptr;
  $191 = (($190) + 224|0);
  $192 = +HEAPF32[$191>>2];
  $193 = $189 - $192;
  $tmp7 = $193;
  $194 = $dataptr;
  $195 = (($194) + 32|0);
  $196 = +HEAPF32[$195>>2];
  $197 = $dataptr;
  $198 = (($197) + 192|0);
  $199 = +HEAPF32[$198>>2];
  $200 = $196 + $199;
  $tmp1 = $200;
  $201 = $dataptr;
  $202 = (($201) + 32|0);
  $203 = +HEAPF32[$202>>2];
  $204 = $dataptr;
  $205 = (($204) + 192|0);
  $206 = +HEAPF32[$205>>2];
  $207 = $203 - $206;
  $tmp6 = $207;
  $208 = $dataptr;
  $209 = (($208) + 64|0);
  $210 = +HEAPF32[$209>>2];
  $211 = $dataptr;
  $212 = (($211) + 160|0);
  $213 = +HEAPF32[$212>>2];
  $214 = $210 + $213;
  $tmp2 = $214;
  $215 = $dataptr;
  $216 = (($215) + 64|0);
  $217 = +HEAPF32[$216>>2];
  $218 = $dataptr;
  $219 = (($218) + 160|0);
  $220 = +HEAPF32[$219>>2];
  $221 = $217 - $220;
  $tmp5 = $221;
  $222 = $dataptr;
  $223 = (($222) + 96|0);
  $224 = +HEAPF32[$223>>2];
  $225 = $dataptr;
  $226 = (($225) + 128|0);
  $227 = +HEAPF32[$226>>2];
  $228 = $224 + $227;
  $tmp3 = $228;
  $229 = $dataptr;
  $230 = (($229) + 96|0);
  $231 = +HEAPF32[$230>>2];
  $232 = $dataptr;
  $233 = (($232) + 128|0);
  $234 = +HEAPF32[$233>>2];
  $235 = $231 - $234;
  $tmp4 = $235;
  $236 = $tmp0;
  $237 = $tmp3;
  $238 = $236 + $237;
  $tmp10 = $238;
  $239 = $tmp0;
  $240 = $tmp3;
  $241 = $239 - $240;
  $tmp13 = $241;
  $242 = $tmp1;
  $243 = $tmp2;
  $244 = $242 + $243;
  $tmp11 = $244;
  $245 = $tmp1;
  $246 = $tmp2;
  $247 = $245 - $246;
  $tmp12 = $247;
  $248 = $tmp10;
  $249 = $tmp11;
  $250 = $248 + $249;
  $251 = $dataptr;
  HEAPF32[$251>>2] = $250;
  $252 = $tmp10;
  $253 = $tmp11;
  $254 = $252 - $253;
  $255 = $dataptr;
  $256 = (($255) + 128|0);
  HEAPF32[$256>>2] = $254;
  $257 = $tmp12;
  $258 = $tmp13;
  $259 = $257 + $258;
  $260 = $259 * 0.707106769084930419921;
  $z1 = $260;
  $261 = $tmp13;
  $262 = $z1;
  $263 = $261 + $262;
  $264 = $dataptr;
  $265 = (($264) + 64|0);
  HEAPF32[$265>>2] = $263;
  $266 = $tmp13;
  $267 = $z1;
  $268 = $266 - $267;
  $269 = $dataptr;
  $270 = (($269) + 192|0);
  HEAPF32[$270>>2] = $268;
  $271 = $tmp4;
  $272 = $tmp5;
  $273 = $271 + $272;
  $tmp10 = $273;
  $274 = $tmp5;
  $275 = $tmp6;
  $276 = $274 + $275;
  $tmp11 = $276;
  $277 = $tmp6;
  $278 = $tmp7;
  $279 = $277 + $278;
  $tmp12 = $279;
  $280 = $tmp10;
  $281 = $tmp12;
  $282 = $280 - $281;
  $283 = $282 * 0.382683426141738891602;
  $z5 = $283;
  $284 = $tmp10;
  $285 = 0.541196107864379882813 * $284;
  $286 = $z5;
  $287 = $285 + $286;
  $z2 = $287;
  $288 = $tmp12;
  $289 = 1.30656301975250244141 * $288;
  $290 = $z5;
  $291 = $289 + $290;
  $z4 = $291;
  $292 = $tmp11;
  $293 = $292 * 0.707106769084930419921;
  $z3 = $293;
  $294 = $tmp7;
  $295 = $z3;
  $296 = $294 + $295;
  $z11 = $296;
  $297 = $tmp7;
  $298 = $z3;
  $299 = $297 - $298;
  $z13 = $299;
  $300 = $z13;
  $301 = $z2;
  $302 = $300 + $301;
  $303 = $dataptr;
  $304 = (($303) + 160|0);
  HEAPF32[$304>>2] = $302;
  $305 = $z13;
  $306 = $z2;
  $307 = $305 - $306;
  $308 = $dataptr;
  $309 = (($308) + 96|0);
  HEAPF32[$309>>2] = $307;
  $310 = $z11;
  $311 = $z4;
  $312 = $310 + $311;
  $313 = $dataptr;
  $314 = (($313) + 32|0);
  HEAPF32[$314>>2] = $312;
  $315 = $z11;
  $316 = $z4;
  $317 = $315 - $316;
  $318 = $dataptr;
  $319 = (($318) + 224|0);
  HEAPF32[$319>>2] = $317;
  $320 = $dataptr;
  $321 = (($320) + 4|0);
  $dataptr = $321;
  $322 = $ctr;
  $323 = (($322) + -1)|0;
  $ctr = $323;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_ifast($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $tmp6 = 0;
 var $tmp7 = 0, $z1 = 0, $z11 = 0, $z13 = 0, $z2 = 0, $z3 = 0, $z4 = 0, $z5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = ($4|0)<(8);
  if (!($5)) {
   break;
  }
  $6 = $ctr;
  $7 = $1;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = (($9) + ($10)|0);
  $elemptr = $11;
  $12 = $elemptr;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $elemptr;
  $16 = (($15) + 7|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($14) + ($18))|0;
  $tmp0 = $19;
  $20 = $elemptr;
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $elemptr;
  $24 = (($23) + 7|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($22) - ($26))|0;
  $tmp7 = $27;
  $28 = $elemptr;
  $29 = (($28) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $elemptr;
  $33 = (($32) + 6|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (($31) + ($35))|0;
  $tmp1 = $36;
  $37 = $elemptr;
  $38 = (($37) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $elemptr;
  $42 = (($41) + 6|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = (($40) - ($44))|0;
  $tmp6 = $45;
  $46 = $elemptr;
  $47 = (($46) + 2|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $elemptr;
  $51 = (($50) + 5|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = (($49) + ($53))|0;
  $tmp2 = $54;
  $55 = $elemptr;
  $56 = (($55) + 2|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = $elemptr;
  $60 = (($59) + 5|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = (($58) - ($62))|0;
  $tmp5 = $63;
  $64 = $elemptr;
  $65 = (($64) + 3|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = $elemptr;
  $69 = (($68) + 4|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = (($67) + ($71))|0;
  $tmp3 = $72;
  $73 = $elemptr;
  $74 = (($73) + 3|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = $elemptr;
  $78 = (($77) + 4|0);
  $79 = HEAP8[$78>>0]|0;
  $80 = $79&255;
  $81 = (($76) - ($80))|0;
  $tmp4 = $81;
  $82 = $tmp0;
  $83 = $tmp3;
  $84 = (($82) + ($83))|0;
  $tmp10 = $84;
  $85 = $tmp0;
  $86 = $tmp3;
  $87 = (($85) - ($86))|0;
  $tmp13 = $87;
  $88 = $tmp1;
  $89 = $tmp2;
  $90 = (($88) + ($89))|0;
  $tmp11 = $90;
  $91 = $tmp1;
  $92 = $tmp2;
  $93 = (($91) - ($92))|0;
  $tmp12 = $93;
  $94 = $tmp10;
  $95 = $tmp11;
  $96 = (($94) + ($95))|0;
  $97 = (($96) - 1024)|0;
  $98 = $dataptr;
  HEAP32[$98>>2] = $97;
  $99 = $tmp10;
  $100 = $tmp11;
  $101 = (($99) - ($100))|0;
  $102 = $dataptr;
  $103 = (($102) + 16|0);
  HEAP32[$103>>2] = $101;
  $104 = $tmp12;
  $105 = $tmp13;
  $106 = (($104) + ($105))|0;
  $107 = ($106*181)|0;
  $108 = $107 >> 8;
  $z1 = $108;
  $109 = $tmp13;
  $110 = $z1;
  $111 = (($109) + ($110))|0;
  $112 = $dataptr;
  $113 = (($112) + 8|0);
  HEAP32[$113>>2] = $111;
  $114 = $tmp13;
  $115 = $z1;
  $116 = (($114) - ($115))|0;
  $117 = $dataptr;
  $118 = (($117) + 24|0);
  HEAP32[$118>>2] = $116;
  $119 = $tmp4;
  $120 = $tmp5;
  $121 = (($119) + ($120))|0;
  $tmp10 = $121;
  $122 = $tmp5;
  $123 = $tmp6;
  $124 = (($122) + ($123))|0;
  $tmp11 = $124;
  $125 = $tmp6;
  $126 = $tmp7;
  $127 = (($125) + ($126))|0;
  $tmp12 = $127;
  $128 = $tmp10;
  $129 = $tmp12;
  $130 = (($128) - ($129))|0;
  $131 = ($130*98)|0;
  $132 = $131 >> 8;
  $z5 = $132;
  $133 = $tmp10;
  $134 = ($133*139)|0;
  $135 = $134 >> 8;
  $136 = $z5;
  $137 = (($135) + ($136))|0;
  $z2 = $137;
  $138 = $tmp12;
  $139 = ($138*334)|0;
  $140 = $139 >> 8;
  $141 = $z5;
  $142 = (($140) + ($141))|0;
  $z4 = $142;
  $143 = $tmp11;
  $144 = ($143*181)|0;
  $145 = $144 >> 8;
  $z3 = $145;
  $146 = $tmp7;
  $147 = $z3;
  $148 = (($146) + ($147))|0;
  $z11 = $148;
  $149 = $tmp7;
  $150 = $z3;
  $151 = (($149) - ($150))|0;
  $z13 = $151;
  $152 = $z13;
  $153 = $z2;
  $154 = (($152) + ($153))|0;
  $155 = $dataptr;
  $156 = (($155) + 20|0);
  HEAP32[$156>>2] = $154;
  $157 = $z13;
  $158 = $z2;
  $159 = (($157) - ($158))|0;
  $160 = $dataptr;
  $161 = (($160) + 12|0);
  HEAP32[$161>>2] = $159;
  $162 = $z11;
  $163 = $z4;
  $164 = (($162) + ($163))|0;
  $165 = $dataptr;
  $166 = (($165) + 4|0);
  HEAP32[$166>>2] = $164;
  $167 = $z11;
  $168 = $z4;
  $169 = (($167) - ($168))|0;
  $170 = $dataptr;
  $171 = (($170) + 28|0);
  HEAP32[$171>>2] = $169;
  $172 = $dataptr;
  $173 = (($172) + 32|0);
  $dataptr = $173;
  $174 = $ctr;
  $175 = (($174) + 1)|0;
  $ctr = $175;
 }
 $176 = $0;
 $dataptr = $176;
 $ctr = 7;
 while(1) {
  $177 = $ctr;
  $178 = ($177|0)>=(0);
  if (!($178)) {
   break;
  }
  $179 = $dataptr;
  $180 = HEAP32[$179>>2]|0;
  $181 = $dataptr;
  $182 = (($181) + 224|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($180) + ($183))|0;
  $tmp0 = $184;
  $185 = $dataptr;
  $186 = HEAP32[$185>>2]|0;
  $187 = $dataptr;
  $188 = (($187) + 224|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (($186) - ($189))|0;
  $tmp7 = $190;
  $191 = $dataptr;
  $192 = (($191) + 32|0);
  $193 = HEAP32[$192>>2]|0;
  $194 = $dataptr;
  $195 = (($194) + 192|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = (($193) + ($196))|0;
  $tmp1 = $197;
  $198 = $dataptr;
  $199 = (($198) + 32|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = $dataptr;
  $202 = (($201) + 192|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($200) - ($203))|0;
  $tmp6 = $204;
  $205 = $dataptr;
  $206 = (($205) + 64|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = $dataptr;
  $209 = (($208) + 160|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($207) + ($210))|0;
  $tmp2 = $211;
  $212 = $dataptr;
  $213 = (($212) + 64|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $dataptr;
  $216 = (($215) + 160|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($214) - ($217))|0;
  $tmp5 = $218;
  $219 = $dataptr;
  $220 = (($219) + 96|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $dataptr;
  $223 = (($222) + 128|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($221) + ($224))|0;
  $tmp3 = $225;
  $226 = $dataptr;
  $227 = (($226) + 96|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $dataptr;
  $230 = (($229) + 128|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($228) - ($231))|0;
  $tmp4 = $232;
  $233 = $tmp0;
  $234 = $tmp3;
  $235 = (($233) + ($234))|0;
  $tmp10 = $235;
  $236 = $tmp0;
  $237 = $tmp3;
  $238 = (($236) - ($237))|0;
  $tmp13 = $238;
  $239 = $tmp1;
  $240 = $tmp2;
  $241 = (($239) + ($240))|0;
  $tmp11 = $241;
  $242 = $tmp1;
  $243 = $tmp2;
  $244 = (($242) - ($243))|0;
  $tmp12 = $244;
  $245 = $tmp10;
  $246 = $tmp11;
  $247 = (($245) + ($246))|0;
  $248 = $dataptr;
  HEAP32[$248>>2] = $247;
  $249 = $tmp10;
  $250 = $tmp11;
  $251 = (($249) - ($250))|0;
  $252 = $dataptr;
  $253 = (($252) + 128|0);
  HEAP32[$253>>2] = $251;
  $254 = $tmp12;
  $255 = $tmp13;
  $256 = (($254) + ($255))|0;
  $257 = ($256*181)|0;
  $258 = $257 >> 8;
  $z1 = $258;
  $259 = $tmp13;
  $260 = $z1;
  $261 = (($259) + ($260))|0;
  $262 = $dataptr;
  $263 = (($262) + 64|0);
  HEAP32[$263>>2] = $261;
  $264 = $tmp13;
  $265 = $z1;
  $266 = (($264) - ($265))|0;
  $267 = $dataptr;
  $268 = (($267) + 192|0);
  HEAP32[$268>>2] = $266;
  $269 = $tmp4;
  $270 = $tmp5;
  $271 = (($269) + ($270))|0;
  $tmp10 = $271;
  $272 = $tmp5;
  $273 = $tmp6;
  $274 = (($272) + ($273))|0;
  $tmp11 = $274;
  $275 = $tmp6;
  $276 = $tmp7;
  $277 = (($275) + ($276))|0;
  $tmp12 = $277;
  $278 = $tmp10;
  $279 = $tmp12;
  $280 = (($278) - ($279))|0;
  $281 = ($280*98)|0;
  $282 = $281 >> 8;
  $z5 = $282;
  $283 = $tmp10;
  $284 = ($283*139)|0;
  $285 = $284 >> 8;
  $286 = $z5;
  $287 = (($285) + ($286))|0;
  $z2 = $287;
  $288 = $tmp12;
  $289 = ($288*334)|0;
  $290 = $289 >> 8;
  $291 = $z5;
  $292 = (($290) + ($291))|0;
  $z4 = $292;
  $293 = $tmp11;
  $294 = ($293*181)|0;
  $295 = $294 >> 8;
  $z3 = $295;
  $296 = $tmp7;
  $297 = $z3;
  $298 = (($296) + ($297))|0;
  $z11 = $298;
  $299 = $tmp7;
  $300 = $z3;
  $301 = (($299) - ($300))|0;
  $z13 = $301;
  $302 = $z13;
  $303 = $z2;
  $304 = (($302) + ($303))|0;
  $305 = $dataptr;
  $306 = (($305) + 160|0);
  HEAP32[$306>>2] = $304;
  $307 = $z13;
  $308 = $z2;
  $309 = (($307) - ($308))|0;
  $310 = $dataptr;
  $311 = (($310) + 96|0);
  HEAP32[$311>>2] = $309;
  $312 = $z11;
  $313 = $z4;
  $314 = (($312) + ($313))|0;
  $315 = $dataptr;
  $316 = (($315) + 32|0);
  HEAP32[$316>>2] = $314;
  $317 = $z11;
  $318 = $z4;
  $319 = (($317) - ($318))|0;
  $320 = $dataptr;
  $321 = (($320) + 224|0);
  HEAP32[$321>>2] = $319;
  $322 = $dataptr;
  $323 = (($322) + 4|0);
  $dataptr = $323;
  $324 = $ctr;
  $325 = (($324) + -1)|0;
  $ctr = $325;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_islow($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $tmp3 = 0, $z1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = ($4|0)<(8);
  if (!($5)) {
   break;
  }
  $6 = $ctr;
  $7 = $1;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = (($9) + ($10)|0);
  $elemptr = $11;
  $12 = $elemptr;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $elemptr;
  $16 = (($15) + 7|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($14) + ($18))|0;
  $tmp0 = $19;
  $20 = $elemptr;
  $21 = (($20) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $elemptr;
  $25 = (($24) + 6|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (($23) + ($27))|0;
  $tmp1 = $28;
  $29 = $elemptr;
  $30 = (($29) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $elemptr;
  $34 = (($33) + 5|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = (($32) + ($36))|0;
  $tmp2 = $37;
  $38 = $elemptr;
  $39 = (($38) + 3|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $elemptr;
  $43 = (($42) + 4|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = (($41) + ($45))|0;
  $tmp3 = $46;
  $47 = $tmp0;
  $48 = $tmp3;
  $49 = (($47) + ($48))|0;
  $tmp10 = $49;
  $50 = $tmp0;
  $51 = $tmp3;
  $52 = (($50) - ($51))|0;
  $tmp12 = $52;
  $53 = $tmp1;
  $54 = $tmp2;
  $55 = (($53) + ($54))|0;
  $tmp11 = $55;
  $56 = $tmp1;
  $57 = $tmp2;
  $58 = (($56) - ($57))|0;
  $tmp13 = $58;
  $59 = $elemptr;
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $elemptr;
  $63 = (($62) + 7|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = (($61) - ($65))|0;
  $tmp0 = $66;
  $67 = $elemptr;
  $68 = (($67) + 1|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = $elemptr;
  $72 = (($71) + 6|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = (($70) - ($74))|0;
  $tmp1 = $75;
  $76 = $elemptr;
  $77 = (($76) + 2|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $elemptr;
  $81 = (($80) + 5|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = (($79) - ($83))|0;
  $tmp2 = $84;
  $85 = $elemptr;
  $86 = (($85) + 3|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $89 = $elemptr;
  $90 = (($89) + 4|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = (($88) - ($92))|0;
  $tmp3 = $93;
  $94 = $tmp10;
  $95 = $tmp11;
  $96 = (($94) + ($95))|0;
  $97 = (($96) - 1024)|0;
  $98 = $97 << 2;
  $99 = $dataptr;
  HEAP32[$99>>2] = $98;
  $100 = $tmp10;
  $101 = $tmp11;
  $102 = (($100) - ($101))|0;
  $103 = $102 << 2;
  $104 = $dataptr;
  $105 = (($104) + 16|0);
  HEAP32[$105>>2] = $103;
  $106 = $tmp12;
  $107 = $tmp13;
  $108 = (($106) + ($107))|0;
  $109 = ($108*4433)|0;
  $z1 = $109;
  $110 = $z1;
  $111 = (($110) + 1024)|0;
  $z1 = $111;
  $112 = $z1;
  $113 = $tmp12;
  $114 = ($113*6270)|0;
  $115 = (($112) + ($114))|0;
  $116 = $115 >> 11;
  $117 = $dataptr;
  $118 = (($117) + 8|0);
  HEAP32[$118>>2] = $116;
  $119 = $z1;
  $120 = $tmp13;
  $121 = ($120*15137)|0;
  $122 = (($119) - ($121))|0;
  $123 = $122 >> 11;
  $124 = $dataptr;
  $125 = (($124) + 24|0);
  HEAP32[$125>>2] = $123;
  $126 = $tmp0;
  $127 = $tmp2;
  $128 = (($126) + ($127))|0;
  $tmp12 = $128;
  $129 = $tmp1;
  $130 = $tmp3;
  $131 = (($129) + ($130))|0;
  $tmp13 = $131;
  $132 = $tmp12;
  $133 = $tmp13;
  $134 = (($132) + ($133))|0;
  $135 = ($134*9633)|0;
  $z1 = $135;
  $136 = $z1;
  $137 = (($136) + 1024)|0;
  $z1 = $137;
  $138 = $tmp12;
  $139 = Math_imul($138, -3196)|0;
  $tmp12 = $139;
  $140 = $tmp13;
  $141 = Math_imul($140, -16069)|0;
  $tmp13 = $141;
  $142 = $z1;
  $143 = $tmp12;
  $144 = (($143) + ($142))|0;
  $tmp12 = $144;
  $145 = $z1;
  $146 = $tmp13;
  $147 = (($146) + ($145))|0;
  $tmp13 = $147;
  $148 = $tmp0;
  $149 = $tmp3;
  $150 = (($148) + ($149))|0;
  $151 = Math_imul($150, -7373)|0;
  $z1 = $151;
  $152 = $tmp0;
  $153 = ($152*12299)|0;
  $tmp0 = $153;
  $154 = $tmp3;
  $155 = ($154*2446)|0;
  $tmp3 = $155;
  $156 = $z1;
  $157 = $tmp12;
  $158 = (($156) + ($157))|0;
  $159 = $tmp0;
  $160 = (($159) + ($158))|0;
  $tmp0 = $160;
  $161 = $z1;
  $162 = $tmp13;
  $163 = (($161) + ($162))|0;
  $164 = $tmp3;
  $165 = (($164) + ($163))|0;
  $tmp3 = $165;
  $166 = $tmp1;
  $167 = $tmp2;
  $168 = (($166) + ($167))|0;
  $169 = Math_imul($168, -20995)|0;
  $z1 = $169;
  $170 = $tmp1;
  $171 = ($170*25172)|0;
  $tmp1 = $171;
  $172 = $tmp2;
  $173 = ($172*16819)|0;
  $tmp2 = $173;
  $174 = $z1;
  $175 = $tmp13;
  $176 = (($174) + ($175))|0;
  $177 = $tmp1;
  $178 = (($177) + ($176))|0;
  $tmp1 = $178;
  $179 = $z1;
  $180 = $tmp12;
  $181 = (($179) + ($180))|0;
  $182 = $tmp2;
  $183 = (($182) + ($181))|0;
  $tmp2 = $183;
  $184 = $tmp0;
  $185 = $184 >> 11;
  $186 = $dataptr;
  $187 = (($186) + 4|0);
  HEAP32[$187>>2] = $185;
  $188 = $tmp1;
  $189 = $188 >> 11;
  $190 = $dataptr;
  $191 = (($190) + 12|0);
  HEAP32[$191>>2] = $189;
  $192 = $tmp2;
  $193 = $192 >> 11;
  $194 = $dataptr;
  $195 = (($194) + 20|0);
  HEAP32[$195>>2] = $193;
  $196 = $tmp3;
  $197 = $196 >> 11;
  $198 = $dataptr;
  $199 = (($198) + 28|0);
  HEAP32[$199>>2] = $197;
  $200 = $dataptr;
  $201 = (($200) + 32|0);
  $dataptr = $201;
  $202 = $ctr;
  $203 = (($202) + 1)|0;
  $ctr = $203;
 }
 $204 = $0;
 $dataptr = $204;
 $ctr = 7;
 while(1) {
  $205 = $ctr;
  $206 = ($205|0)>=(0);
  if (!($206)) {
   break;
  }
  $207 = $dataptr;
  $208 = HEAP32[$207>>2]|0;
  $209 = $dataptr;
  $210 = (($209) + 224|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = (($208) + ($211))|0;
  $tmp0 = $212;
  $213 = $dataptr;
  $214 = (($213) + 32|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = $dataptr;
  $217 = (($216) + 192|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = (($215) + ($218))|0;
  $tmp1 = $219;
  $220 = $dataptr;
  $221 = (($220) + 64|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = $dataptr;
  $224 = (($223) + 160|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = (($222) + ($225))|0;
  $tmp2 = $226;
  $227 = $dataptr;
  $228 = (($227) + 96|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = $dataptr;
  $231 = (($230) + 128|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = (($229) + ($232))|0;
  $tmp3 = $233;
  $234 = $tmp0;
  $235 = $tmp3;
  $236 = (($234) + ($235))|0;
  $237 = (($236) + 2)|0;
  $tmp10 = $237;
  $238 = $tmp0;
  $239 = $tmp3;
  $240 = (($238) - ($239))|0;
  $tmp12 = $240;
  $241 = $tmp1;
  $242 = $tmp2;
  $243 = (($241) + ($242))|0;
  $tmp11 = $243;
  $244 = $tmp1;
  $245 = $tmp2;
  $246 = (($244) - ($245))|0;
  $tmp13 = $246;
  $247 = $dataptr;
  $248 = HEAP32[$247>>2]|0;
  $249 = $dataptr;
  $250 = (($249) + 224|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = (($248) - ($251))|0;
  $tmp0 = $252;
  $253 = $dataptr;
  $254 = (($253) + 32|0);
  $255 = HEAP32[$254>>2]|0;
  $256 = $dataptr;
  $257 = (($256) + 192|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = (($255) - ($258))|0;
  $tmp1 = $259;
  $260 = $dataptr;
  $261 = (($260) + 64|0);
  $262 = HEAP32[$261>>2]|0;
  $263 = $dataptr;
  $264 = (($263) + 160|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = (($262) - ($265))|0;
  $tmp2 = $266;
  $267 = $dataptr;
  $268 = (($267) + 96|0);
  $269 = HEAP32[$268>>2]|0;
  $270 = $dataptr;
  $271 = (($270) + 128|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = (($269) - ($272))|0;
  $tmp3 = $273;
  $274 = $tmp10;
  $275 = $tmp11;
  $276 = (($274) + ($275))|0;
  $277 = $276 >> 2;
  $278 = $dataptr;
  HEAP32[$278>>2] = $277;
  $279 = $tmp10;
  $280 = $tmp11;
  $281 = (($279) - ($280))|0;
  $282 = $281 >> 2;
  $283 = $dataptr;
  $284 = (($283) + 128|0);
  HEAP32[$284>>2] = $282;
  $285 = $tmp12;
  $286 = $tmp13;
  $287 = (($285) + ($286))|0;
  $288 = ($287*4433)|0;
  $z1 = $288;
  $289 = $z1;
  $290 = (($289) + 16384)|0;
  $z1 = $290;
  $291 = $z1;
  $292 = $tmp12;
  $293 = ($292*6270)|0;
  $294 = (($291) + ($293))|0;
  $295 = $294 >> 15;
  $296 = $dataptr;
  $297 = (($296) + 64|0);
  HEAP32[$297>>2] = $295;
  $298 = $z1;
  $299 = $tmp13;
  $300 = ($299*15137)|0;
  $301 = (($298) - ($300))|0;
  $302 = $301 >> 15;
  $303 = $dataptr;
  $304 = (($303) + 192|0);
  HEAP32[$304>>2] = $302;
  $305 = $tmp0;
  $306 = $tmp2;
  $307 = (($305) + ($306))|0;
  $tmp12 = $307;
  $308 = $tmp1;
  $309 = $tmp3;
  $310 = (($308) + ($309))|0;
  $tmp13 = $310;
  $311 = $tmp12;
  $312 = $tmp13;
  $313 = (($311) + ($312))|0;
  $314 = ($313*9633)|0;
  $z1 = $314;
  $315 = $z1;
  $316 = (($315) + 16384)|0;
  $z1 = $316;
  $317 = $tmp12;
  $318 = Math_imul($317, -3196)|0;
  $tmp12 = $318;
  $319 = $tmp13;
  $320 = Math_imul($319, -16069)|0;
  $tmp13 = $320;
  $321 = $z1;
  $322 = $tmp12;
  $323 = (($322) + ($321))|0;
  $tmp12 = $323;
  $324 = $z1;
  $325 = $tmp13;
  $326 = (($325) + ($324))|0;
  $tmp13 = $326;
  $327 = $tmp0;
  $328 = $tmp3;
  $329 = (($327) + ($328))|0;
  $330 = Math_imul($329, -7373)|0;
  $z1 = $330;
  $331 = $tmp0;
  $332 = ($331*12299)|0;
  $tmp0 = $332;
  $333 = $tmp3;
  $334 = ($333*2446)|0;
  $tmp3 = $334;
  $335 = $z1;
  $336 = $tmp12;
  $337 = (($335) + ($336))|0;
  $338 = $tmp0;
  $339 = (($338) + ($337))|0;
  $tmp0 = $339;
  $340 = $z1;
  $341 = $tmp13;
  $342 = (($340) + ($341))|0;
  $343 = $tmp3;
  $344 = (($343) + ($342))|0;
  $tmp3 = $344;
  $345 = $tmp1;
  $346 = $tmp2;
  $347 = (($345) + ($346))|0;
  $348 = Math_imul($347, -20995)|0;
  $z1 = $348;
  $349 = $tmp1;
  $350 = ($349*25172)|0;
  $tmp1 = $350;
  $351 = $tmp2;
  $352 = ($351*16819)|0;
  $tmp2 = $352;
  $353 = $z1;
  $354 = $tmp13;
  $355 = (($353) + ($354))|0;
  $356 = $tmp1;
  $357 = (($356) + ($355))|0;
  $tmp1 = $357;
  $358 = $z1;
  $359 = $tmp12;
  $360 = (($358) + ($359))|0;
  $361 = $tmp2;
  $362 = (($361) + ($360))|0;
  $tmp2 = $362;
  $363 = $tmp0;
  $364 = $363 >> 15;
  $365 = $dataptr;
  $366 = (($365) + 32|0);
  HEAP32[$366>>2] = $364;
  $367 = $tmp1;
  $368 = $367 >> 15;
  $369 = $dataptr;
  $370 = (($369) + 96|0);
  HEAP32[$370>>2] = $368;
  $371 = $tmp2;
  $372 = $371 >> 15;
  $373 = $dataptr;
  $374 = (($373) + 160|0);
  HEAP32[$374>>2] = $372;
  $375 = $tmp3;
  $376 = $375 >> 15;
  $377 = $dataptr;
  $378 = (($377) + 224|0);
  HEAP32[$378>>2] = $376;
  $379 = $dataptr;
  $380 = (($379) + 4|0);
  $dataptr = $380;
  $381 = $ctr;
  $382 = (($381) + -1)|0;
  $ctr = $382;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_7x7($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0;
 var $tmp2 = 0, $tmp3 = 0, $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = ($5|0)<(7);
  if (!($6)) {
   break;
  }
  $7 = $ctr;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($10) + ($11)|0);
  $elemptr = $12;
  $13 = $elemptr;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $elemptr;
  $17 = (($16) + 6|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($15) + ($19))|0;
  $tmp0 = $20;
  $21 = $elemptr;
  $22 = (($21) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $elemptr;
  $26 = (($25) + 5|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($24) + ($28))|0;
  $tmp1 = $29;
  $30 = $elemptr;
  $31 = (($30) + 2|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $elemptr;
  $35 = (($34) + 4|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (($33) + ($37))|0;
  $tmp2 = $38;
  $39 = $elemptr;
  $40 = (($39) + 3|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $tmp3 = $42;
  $43 = $elemptr;
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $elemptr;
  $47 = (($46) + 6|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = (($45) - ($49))|0;
  $tmp10 = $50;
  $51 = $elemptr;
  $52 = (($51) + 1|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $elemptr;
  $56 = (($55) + 5|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = (($54) - ($58))|0;
  $tmp11 = $59;
  $60 = $elemptr;
  $61 = (($60) + 2|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $elemptr;
  $65 = (($64) + 4|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = (($63) - ($67))|0;
  $tmp12 = $68;
  $69 = $tmp0;
  $70 = $tmp2;
  $71 = (($69) + ($70))|0;
  $z1 = $71;
  $72 = $z1;
  $73 = $tmp1;
  $74 = (($72) + ($73))|0;
  $75 = $tmp3;
  $76 = (($74) + ($75))|0;
  $77 = (($76) - 896)|0;
  $78 = $77 << 2;
  $79 = $dataptr;
  HEAP32[$79>>2] = $78;
  $80 = $tmp3;
  $81 = $tmp3;
  $82 = (($81) + ($80))|0;
  $tmp3 = $82;
  $83 = $tmp3;
  $84 = $z1;
  $85 = (($84) - ($83))|0;
  $z1 = $85;
  $86 = $tmp3;
  $87 = $z1;
  $88 = (($87) - ($86))|0;
  $z1 = $88;
  $89 = $z1;
  $90 = ($89*2896)|0;
  $z1 = $90;
  $91 = $tmp0;
  $92 = $tmp2;
  $93 = (($91) - ($92))|0;
  $94 = ($93*7542)|0;
  $z2 = $94;
  $95 = $tmp1;
  $96 = $tmp2;
  $97 = (($95) - ($96))|0;
  $98 = ($97*2578)|0;
  $z3 = $98;
  $99 = $z1;
  $100 = $z2;
  $101 = (($99) + ($100))|0;
  $102 = $z3;
  $103 = (($101) + ($102))|0;
  $104 = (($103) + 1024)|0;
  $105 = $104 >> 11;
  $106 = $dataptr;
  $107 = (($106) + 8|0);
  HEAP32[$107>>2] = $105;
  $108 = $z2;
  $109 = $z1;
  $110 = (($109) - ($108))|0;
  $z1 = $110;
  $111 = $tmp0;
  $112 = $tmp1;
  $113 = (($111) - ($112))|0;
  $114 = ($113*7223)|0;
  $z2 = $114;
  $115 = $z2;
  $116 = $z3;
  $117 = (($115) + ($116))|0;
  $118 = $tmp1;
  $119 = $tmp3;
  $120 = (($118) - ($119))|0;
  $121 = ($120*5793)|0;
  $122 = (($117) - ($121))|0;
  $123 = (($122) + 1024)|0;
  $124 = $123 >> 11;
  $125 = $dataptr;
  $126 = (($125) + 16|0);
  HEAP32[$126>>2] = $124;
  $127 = $z1;
  $128 = $z2;
  $129 = (($127) + ($128))|0;
  $130 = (($129) + 1024)|0;
  $131 = $130 >> 11;
  $132 = $dataptr;
  $133 = (($132) + 24|0);
  HEAP32[$133>>2] = $131;
  $134 = $tmp10;
  $135 = $tmp11;
  $136 = (($134) + ($135))|0;
  $137 = ($136*7663)|0;
  $tmp1 = $137;
  $138 = $tmp10;
  $139 = $tmp11;
  $140 = (($138) - ($139))|0;
  $141 = ($140*1395)|0;
  $tmp2 = $141;
  $142 = $tmp1;
  $143 = $tmp2;
  $144 = (($142) - ($143))|0;
  $tmp0 = $144;
  $145 = $tmp2;
  $146 = $tmp1;
  $147 = (($146) + ($145))|0;
  $tmp1 = $147;
  $148 = $tmp11;
  $149 = $tmp12;
  $150 = (($148) + ($149))|0;
  $151 = Math_imul($150, -11295)|0;
  $tmp2 = $151;
  $152 = $tmp2;
  $153 = $tmp1;
  $154 = (($153) + ($152))|0;
  $tmp1 = $154;
  $155 = $tmp10;
  $156 = $tmp12;
  $157 = (($155) + ($156))|0;
  $158 = ($157*5027)|0;
  $tmp3 = $158;
  $159 = $tmp3;
  $160 = $tmp0;
  $161 = (($160) + ($159))|0;
  $tmp0 = $161;
  $162 = $tmp3;
  $163 = $tmp12;
  $164 = ($163*15326)|0;
  $165 = (($162) + ($164))|0;
  $166 = $tmp2;
  $167 = (($166) + ($165))|0;
  $tmp2 = $167;
  $168 = $tmp0;
  $169 = (($168) + 1024)|0;
  $170 = $169 >> 11;
  $171 = $dataptr;
  $172 = (($171) + 4|0);
  HEAP32[$172>>2] = $170;
  $173 = $tmp1;
  $174 = (($173) + 1024)|0;
  $175 = $174 >> 11;
  $176 = $dataptr;
  $177 = (($176) + 12|0);
  HEAP32[$177>>2] = $175;
  $178 = $tmp2;
  $179 = (($178) + 1024)|0;
  $180 = $179 >> 11;
  $181 = $dataptr;
  $182 = (($181) + 20|0);
  HEAP32[$182>>2] = $180;
  $183 = $dataptr;
  $184 = (($183) + 32|0);
  $dataptr = $184;
  $185 = $ctr;
  $186 = (($185) + 1)|0;
  $ctr = $186;
 }
 $187 = $0;
 $dataptr = $187;
 $ctr = 0;
 while(1) {
  $188 = $ctr;
  $189 = ($188|0)<(7);
  if (!($189)) {
   break;
  }
  $190 = $dataptr;
  $191 = HEAP32[$190>>2]|0;
  $192 = $dataptr;
  $193 = (($192) + 192|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = (($191) + ($194))|0;
  $tmp0 = $195;
  $196 = $dataptr;
  $197 = (($196) + 32|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $dataptr;
  $200 = (($199) + 160|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = (($198) + ($201))|0;
  $tmp1 = $202;
  $203 = $dataptr;
  $204 = (($203) + 64|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $dataptr;
  $207 = (($206) + 128|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = (($205) + ($208))|0;
  $tmp2 = $209;
  $210 = $dataptr;
  $211 = (($210) + 96|0);
  $212 = HEAP32[$211>>2]|0;
  $tmp3 = $212;
  $213 = $dataptr;
  $214 = HEAP32[$213>>2]|0;
  $215 = $dataptr;
  $216 = (($215) + 192|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($214) - ($217))|0;
  $tmp10 = $218;
  $219 = $dataptr;
  $220 = (($219) + 32|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $dataptr;
  $223 = (($222) + 160|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($221) - ($224))|0;
  $tmp11 = $225;
  $226 = $dataptr;
  $227 = (($226) + 64|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $dataptr;
  $230 = (($229) + 128|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($228) - ($231))|0;
  $tmp12 = $232;
  $233 = $tmp0;
  $234 = $tmp2;
  $235 = (($233) + ($234))|0;
  $z1 = $235;
  $236 = $z1;
  $237 = $tmp1;
  $238 = (($236) + ($237))|0;
  $239 = $tmp3;
  $240 = (($238) + ($239))|0;
  $241 = ($240*10700)|0;
  $242 = (($241) + 16384)|0;
  $243 = $242 >> 15;
  $244 = $dataptr;
  HEAP32[$244>>2] = $243;
  $245 = $tmp3;
  $246 = $tmp3;
  $247 = (($246) + ($245))|0;
  $tmp3 = $247;
  $248 = $tmp3;
  $249 = $z1;
  $250 = (($249) - ($248))|0;
  $z1 = $250;
  $251 = $tmp3;
  $252 = $z1;
  $253 = (($252) - ($251))|0;
  $z1 = $253;
  $254 = $z1;
  $255 = ($254*3783)|0;
  $z1 = $255;
  $256 = $tmp0;
  $257 = $tmp2;
  $258 = (($256) - ($257))|0;
  $259 = ($258*9850)|0;
  $z2 = $259;
  $260 = $tmp1;
  $261 = $tmp2;
  $262 = (($260) - ($261))|0;
  $263 = ($262*3367)|0;
  $z3 = $263;
  $264 = $z1;
  $265 = $z2;
  $266 = (($264) + ($265))|0;
  $267 = $z3;
  $268 = (($266) + ($267))|0;
  $269 = (($268) + 16384)|0;
  $270 = $269 >> 15;
  $271 = $dataptr;
  $272 = (($271) + 64|0);
  HEAP32[$272>>2] = $270;
  $273 = $z2;
  $274 = $z1;
  $275 = (($274) - ($273))|0;
  $z1 = $275;
  $276 = $tmp0;
  $277 = $tmp1;
  $278 = (($276) - ($277))|0;
  $279 = ($278*9434)|0;
  $z2 = $279;
  $280 = $z2;
  $281 = $z3;
  $282 = (($280) + ($281))|0;
  $283 = $tmp1;
  $284 = $tmp3;
  $285 = (($283) - ($284))|0;
  $286 = ($285*7566)|0;
  $287 = (($282) - ($286))|0;
  $288 = (($287) + 16384)|0;
  $289 = $288 >> 15;
  $290 = $dataptr;
  $291 = (($290) + 128|0);
  HEAP32[$291>>2] = $289;
  $292 = $z1;
  $293 = $z2;
  $294 = (($292) + ($293))|0;
  $295 = (($294) + 16384)|0;
  $296 = $295 >> 15;
  $297 = $dataptr;
  $298 = (($297) + 192|0);
  HEAP32[$298>>2] = $296;
  $299 = $tmp10;
  $300 = $tmp11;
  $301 = (($299) + ($300))|0;
  $302 = ($301*10009)|0;
  $tmp1 = $302;
  $303 = $tmp10;
  $304 = $tmp11;
  $305 = (($303) - ($304))|0;
  $306 = ($305*1822)|0;
  $tmp2 = $306;
  $307 = $tmp1;
  $308 = $tmp2;
  $309 = (($307) - ($308))|0;
  $tmp0 = $309;
  $310 = $tmp2;
  $311 = $tmp1;
  $312 = (($311) + ($310))|0;
  $tmp1 = $312;
  $313 = $tmp11;
  $314 = $tmp12;
  $315 = (($313) + ($314))|0;
  $316 = Math_imul($315, -14752)|0;
  $tmp2 = $316;
  $317 = $tmp2;
  $318 = $tmp1;
  $319 = (($318) + ($317))|0;
  $tmp1 = $319;
  $320 = $tmp10;
  $321 = $tmp12;
  $322 = (($320) + ($321))|0;
  $323 = ($322*6565)|0;
  $tmp3 = $323;
  $324 = $tmp3;
  $325 = $tmp0;
  $326 = (($325) + ($324))|0;
  $tmp0 = $326;
  $327 = $tmp3;
  $328 = $tmp12;
  $329 = ($328*20017)|0;
  $330 = (($327) + ($329))|0;
  $331 = $tmp2;
  $332 = (($331) + ($330))|0;
  $tmp2 = $332;
  $333 = $tmp0;
  $334 = (($333) + 16384)|0;
  $335 = $334 >> 15;
  $336 = $dataptr;
  $337 = (($336) + 32|0);
  HEAP32[$337>>2] = $335;
  $338 = $tmp1;
  $339 = (($338) + 16384)|0;
  $340 = $339 >> 15;
  $341 = $dataptr;
  $342 = (($341) + 96|0);
  HEAP32[$342>>2] = $340;
  $343 = $tmp2;
  $344 = (($343) + 16384)|0;
  $345 = $344 >> 15;
  $346 = $dataptr;
  $347 = (($346) + 160|0);
  HEAP32[$347>>2] = $345;
  $348 = $dataptr;
  $349 = (($348) + 4|0);
  $dataptr = $349;
  $350 = $ctr;
  $351 = (($350) + 1)|0;
  $ctr = $351;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_6x6($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0;
 var $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = ($5|0)<(6);
  if (!($6)) {
   break;
  }
  $7 = $ctr;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($10) + ($11)|0);
  $elemptr = $12;
  $13 = $elemptr;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $elemptr;
  $17 = (($16) + 5|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($15) + ($19))|0;
  $tmp0 = $20;
  $21 = $elemptr;
  $22 = (($21) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $elemptr;
  $26 = (($25) + 4|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($24) + ($28))|0;
  $tmp11 = $29;
  $30 = $elemptr;
  $31 = (($30) + 2|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $elemptr;
  $35 = (($34) + 3|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (($33) + ($37))|0;
  $tmp2 = $38;
  $39 = $tmp0;
  $40 = $tmp2;
  $41 = (($39) + ($40))|0;
  $tmp10 = $41;
  $42 = $tmp0;
  $43 = $tmp2;
  $44 = (($42) - ($43))|0;
  $tmp12 = $44;
  $45 = $elemptr;
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $elemptr;
  $49 = (($48) + 5|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = (($47) - ($51))|0;
  $tmp0 = $52;
  $53 = $elemptr;
  $54 = (($53) + 1|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $elemptr;
  $58 = (($57) + 4|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = (($56) - ($60))|0;
  $tmp1 = $61;
  $62 = $elemptr;
  $63 = (($62) + 2|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $elemptr;
  $67 = (($66) + 3|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (($65) - ($69))|0;
  $tmp2 = $70;
  $71 = $tmp10;
  $72 = $tmp11;
  $73 = (($71) + ($72))|0;
  $74 = (($73) - 768)|0;
  $75 = $74 << 2;
  $76 = $dataptr;
  HEAP32[$76>>2] = $75;
  $77 = $tmp12;
  $78 = ($77*10033)|0;
  $79 = (($78) + 1024)|0;
  $80 = $79 >> 11;
  $81 = $dataptr;
  $82 = (($81) + 8|0);
  HEAP32[$82>>2] = $80;
  $83 = $tmp10;
  $84 = $tmp11;
  $85 = (($83) - ($84))|0;
  $86 = $tmp11;
  $87 = (($85) - ($86))|0;
  $88 = ($87*5793)|0;
  $89 = (($88) + 1024)|0;
  $90 = $89 >> 11;
  $91 = $dataptr;
  $92 = (($91) + 16|0);
  HEAP32[$92>>2] = $90;
  $93 = $tmp0;
  $94 = $tmp2;
  $95 = (($93) + ($94))|0;
  $96 = ($95*2998)|0;
  $97 = (($96) + 1024)|0;
  $98 = $97 >> 11;
  $tmp10 = $98;
  $99 = $tmp10;
  $100 = $tmp0;
  $101 = $tmp1;
  $102 = (($100) + ($101))|0;
  $103 = $102 << 2;
  $104 = (($99) + ($103))|0;
  $105 = $dataptr;
  $106 = (($105) + 4|0);
  HEAP32[$106>>2] = $104;
  $107 = $tmp0;
  $108 = $tmp1;
  $109 = (($107) - ($108))|0;
  $110 = $tmp2;
  $111 = (($109) - ($110))|0;
  $112 = $111 << 2;
  $113 = $dataptr;
  $114 = (($113) + 12|0);
  HEAP32[$114>>2] = $112;
  $115 = $tmp10;
  $116 = $tmp2;
  $117 = $tmp1;
  $118 = (($116) - ($117))|0;
  $119 = $118 << 2;
  $120 = (($115) + ($119))|0;
  $121 = $dataptr;
  $122 = (($121) + 20|0);
  HEAP32[$122>>2] = $120;
  $123 = $dataptr;
  $124 = (($123) + 32|0);
  $dataptr = $124;
  $125 = $ctr;
  $126 = (($125) + 1)|0;
  $ctr = $126;
 }
 $127 = $0;
 $dataptr = $127;
 $ctr = 0;
 while(1) {
  $128 = $ctr;
  $129 = ($128|0)<(6);
  if (!($129)) {
   break;
  }
  $130 = $dataptr;
  $131 = HEAP32[$130>>2]|0;
  $132 = $dataptr;
  $133 = (($132) + 160|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($131) + ($134))|0;
  $tmp0 = $135;
  $136 = $dataptr;
  $137 = (($136) + 32|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = $dataptr;
  $140 = (($139) + 128|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($138) + ($141))|0;
  $tmp11 = $142;
  $143 = $dataptr;
  $144 = (($143) + 64|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = $dataptr;
  $147 = (($146) + 96|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = (($145) + ($148))|0;
  $tmp2 = $149;
  $150 = $tmp0;
  $151 = $tmp2;
  $152 = (($150) + ($151))|0;
  $tmp10 = $152;
  $153 = $tmp0;
  $154 = $tmp2;
  $155 = (($153) - ($154))|0;
  $tmp12 = $155;
  $156 = $dataptr;
  $157 = HEAP32[$156>>2]|0;
  $158 = $dataptr;
  $159 = (($158) + 160|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = (($157) - ($160))|0;
  $tmp0 = $161;
  $162 = $dataptr;
  $163 = (($162) + 32|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $dataptr;
  $166 = (($165) + 128|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = (($164) - ($167))|0;
  $tmp1 = $168;
  $169 = $dataptr;
  $170 = (($169) + 64|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = $dataptr;
  $173 = (($172) + 96|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = (($171) - ($174))|0;
  $tmp2 = $175;
  $176 = $tmp10;
  $177 = $tmp11;
  $178 = (($176) + ($177))|0;
  $179 = ($178*14564)|0;
  $180 = (($179) + 16384)|0;
  $181 = $180 >> 15;
  $182 = $dataptr;
  HEAP32[$182>>2] = $181;
  $183 = $tmp12;
  $184 = ($183*17837)|0;
  $185 = (($184) + 16384)|0;
  $186 = $185 >> 15;
  $187 = $dataptr;
  $188 = (($187) + 64|0);
  HEAP32[$188>>2] = $186;
  $189 = $tmp10;
  $190 = $tmp11;
  $191 = (($189) - ($190))|0;
  $192 = $tmp11;
  $193 = (($191) - ($192))|0;
  $194 = ($193*10298)|0;
  $195 = (($194) + 16384)|0;
  $196 = $195 >> 15;
  $197 = $dataptr;
  $198 = (($197) + 128|0);
  HEAP32[$198>>2] = $196;
  $199 = $tmp0;
  $200 = $tmp2;
  $201 = (($199) + ($200))|0;
  $202 = ($201*5331)|0;
  $tmp10 = $202;
  $203 = $tmp10;
  $204 = $tmp0;
  $205 = $tmp1;
  $206 = (($204) + ($205))|0;
  $207 = ($206*14564)|0;
  $208 = (($203) + ($207))|0;
  $209 = (($208) + 16384)|0;
  $210 = $209 >> 15;
  $211 = $dataptr;
  $212 = (($211) + 32|0);
  HEAP32[$212>>2] = $210;
  $213 = $tmp0;
  $214 = $tmp1;
  $215 = (($213) - ($214))|0;
  $216 = $tmp2;
  $217 = (($215) - ($216))|0;
  $218 = ($217*14564)|0;
  $219 = (($218) + 16384)|0;
  $220 = $219 >> 15;
  $221 = $dataptr;
  $222 = (($221) + 96|0);
  HEAP32[$222>>2] = $220;
  $223 = $tmp10;
  $224 = $tmp2;
  $225 = $tmp1;
  $226 = (($224) - ($225))|0;
  $227 = ($226*14564)|0;
  $228 = (($223) + ($227))|0;
  $229 = (($228) + 16384)|0;
  $230 = $229 >> 15;
  $231 = $dataptr;
  $232 = (($231) + 160|0);
  HEAP32[$232>>2] = $230;
  $233 = $dataptr;
  $234 = (($233) + 4|0);
  $dataptr = $234;
  $235 = $ctr;
  $236 = (($235) + 1)|0;
  $ctr = $236;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_5x5($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = ($5|0)<(5);
  if (!($6)) {
   break;
  }
  $7 = $ctr;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($10) + ($11)|0);
  $elemptr = $12;
  $13 = $elemptr;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $elemptr;
  $17 = (($16) + 4|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($15) + ($19))|0;
  $tmp0 = $20;
  $21 = $elemptr;
  $22 = (($21) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $elemptr;
  $26 = (($25) + 3|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($24) + ($28))|0;
  $tmp1 = $29;
  $30 = $elemptr;
  $31 = (($30) + 2|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $tmp2 = $33;
  $34 = $tmp0;
  $35 = $tmp1;
  $36 = (($34) + ($35))|0;
  $tmp10 = $36;
  $37 = $tmp0;
  $38 = $tmp1;
  $39 = (($37) - ($38))|0;
  $tmp11 = $39;
  $40 = $elemptr;
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = $elemptr;
  $44 = (($43) + 4|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = (($42) - ($46))|0;
  $tmp0 = $47;
  $48 = $elemptr;
  $49 = (($48) + 1|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $elemptr;
  $53 = (($52) + 3|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = (($51) - ($55))|0;
  $tmp1 = $56;
  $57 = $tmp10;
  $58 = $tmp2;
  $59 = (($57) + ($58))|0;
  $60 = (($59) - 640)|0;
  $61 = $60 << 3;
  $62 = $dataptr;
  HEAP32[$62>>2] = $61;
  $63 = $tmp11;
  $64 = ($63*6476)|0;
  $tmp11 = $64;
  $65 = $tmp2;
  $66 = $65 << 2;
  $67 = $tmp10;
  $68 = (($67) - ($66))|0;
  $tmp10 = $68;
  $69 = $tmp10;
  $70 = ($69*2896)|0;
  $tmp10 = $70;
  $71 = $tmp11;
  $72 = $tmp10;
  $73 = (($71) + ($72))|0;
  $74 = (($73) + 512)|0;
  $75 = $74 >> 10;
  $76 = $dataptr;
  $77 = (($76) + 8|0);
  HEAP32[$77>>2] = $75;
  $78 = $tmp11;
  $79 = $tmp10;
  $80 = (($78) - ($79))|0;
  $81 = (($80) + 512)|0;
  $82 = $81 >> 10;
  $83 = $dataptr;
  $84 = (($83) + 16|0);
  HEAP32[$84>>2] = $82;
  $85 = $tmp0;
  $86 = $tmp1;
  $87 = (($85) + ($86))|0;
  $88 = ($87*6810)|0;
  $tmp10 = $88;
  $89 = $tmp10;
  $90 = $tmp0;
  $91 = ($90*4209)|0;
  $92 = (($89) + ($91))|0;
  $93 = (($92) + 512)|0;
  $94 = $93 >> 10;
  $95 = $dataptr;
  $96 = (($95) + 4|0);
  HEAP32[$96>>2] = $94;
  $97 = $tmp10;
  $98 = $tmp1;
  $99 = ($98*17828)|0;
  $100 = (($97) - ($99))|0;
  $101 = (($100) + 512)|0;
  $102 = $101 >> 10;
  $103 = $dataptr;
  $104 = (($103) + 12|0);
  HEAP32[$104>>2] = $102;
  $105 = $dataptr;
  $106 = (($105) + 32|0);
  $dataptr = $106;
  $107 = $ctr;
  $108 = (($107) + 1)|0;
  $ctr = $108;
 }
 $109 = $0;
 $dataptr = $109;
 $ctr = 0;
 while(1) {
  $110 = $ctr;
  $111 = ($110|0)<(5);
  if (!($111)) {
   break;
  }
  $112 = $dataptr;
  $113 = HEAP32[$112>>2]|0;
  $114 = $dataptr;
  $115 = (($114) + 128|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($113) + ($116))|0;
  $tmp0 = $117;
  $118 = $dataptr;
  $119 = (($118) + 32|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $dataptr;
  $122 = (($121) + 96|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = (($120) + ($123))|0;
  $tmp1 = $124;
  $125 = $dataptr;
  $126 = (($125) + 64|0);
  $127 = HEAP32[$126>>2]|0;
  $tmp2 = $127;
  $128 = $tmp0;
  $129 = $tmp1;
  $130 = (($128) + ($129))|0;
  $tmp10 = $130;
  $131 = $tmp0;
  $132 = $tmp1;
  $133 = (($131) - ($132))|0;
  $tmp11 = $133;
  $134 = $dataptr;
  $135 = HEAP32[$134>>2]|0;
  $136 = $dataptr;
  $137 = (($136) + 128|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($135) - ($138))|0;
  $tmp0 = $139;
  $140 = $dataptr;
  $141 = (($140) + 32|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $dataptr;
  $144 = (($143) + 96|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($142) - ($145))|0;
  $tmp1 = $146;
  $147 = $tmp10;
  $148 = $tmp2;
  $149 = (($147) + ($148))|0;
  $150 = ($149*10486)|0;
  $151 = (($150) + 16384)|0;
  $152 = $151 >> 15;
  $153 = $dataptr;
  HEAP32[$153>>2] = $152;
  $154 = $tmp11;
  $155 = ($154*8290)|0;
  $tmp11 = $155;
  $156 = $tmp2;
  $157 = $156 << 2;
  $158 = $tmp10;
  $159 = (($158) - ($157))|0;
  $tmp10 = $159;
  $160 = $tmp10;
  $161 = ($160*3707)|0;
  $tmp10 = $161;
  $162 = $tmp11;
  $163 = $tmp10;
  $164 = (($162) + ($163))|0;
  $165 = (($164) + 16384)|0;
  $166 = $165 >> 15;
  $167 = $dataptr;
  $168 = (($167) + 64|0);
  HEAP32[$168>>2] = $166;
  $169 = $tmp11;
  $170 = $tmp10;
  $171 = (($169) - ($170))|0;
  $172 = (($171) + 16384)|0;
  $173 = $172 >> 15;
  $174 = $dataptr;
  $175 = (($174) + 128|0);
  HEAP32[$175>>2] = $173;
  $176 = $tmp0;
  $177 = $tmp1;
  $178 = (($176) + ($177))|0;
  $179 = ($178*8716)|0;
  $tmp10 = $179;
  $180 = $tmp10;
  $181 = $tmp0;
  $182 = ($181*5387)|0;
  $183 = (($180) + ($182))|0;
  $184 = (($183) + 16384)|0;
  $185 = $184 >> 15;
  $186 = $dataptr;
  $187 = (($186) + 32|0);
  HEAP32[$187>>2] = $185;
  $188 = $tmp10;
  $189 = $tmp1;
  $190 = ($189*22820)|0;
  $191 = (($188) - ($190))|0;
  $192 = (($191) + 16384)|0;
  $193 = $192 >> 15;
  $194 = $dataptr;
  $195 = (($194) + 96|0);
  HEAP32[$195>>2] = $193;
  $196 = $dataptr;
  $197 = (($196) + 4|0);
  $dataptr = $197;
  $198 = $ctr;
  $199 = (($198) + 1)|0;
  $ctr = $199;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_4x4($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = ($5|0)<(4);
  if (!($6)) {
   break;
  }
  $7 = $ctr;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($10) + ($11)|0);
  $elemptr = $12;
  $13 = $elemptr;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $elemptr;
  $17 = (($16) + 3|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($15) + ($19))|0;
  $tmp0 = $20;
  $21 = $elemptr;
  $22 = (($21) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $elemptr;
  $26 = (($25) + 2|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($24) + ($28))|0;
  $tmp1 = $29;
  $30 = $elemptr;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $elemptr;
  $34 = (($33) + 3|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = (($32) - ($36))|0;
  $tmp10 = $37;
  $38 = $elemptr;
  $39 = (($38) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $elemptr;
  $43 = (($42) + 2|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = (($41) - ($45))|0;
  $tmp11 = $46;
  $47 = $tmp0;
  $48 = $tmp1;
  $49 = (($47) + ($48))|0;
  $50 = (($49) - 512)|0;
  $51 = $50 << 4;
  $52 = $dataptr;
  HEAP32[$52>>2] = $51;
  $53 = $tmp0;
  $54 = $tmp1;
  $55 = (($53) - ($54))|0;
  $56 = $55 << 4;
  $57 = $dataptr;
  $58 = (($57) + 8|0);
  HEAP32[$58>>2] = $56;
  $59 = $tmp10;
  $60 = $tmp11;
  $61 = (($59) + ($60))|0;
  $62 = ($61*4433)|0;
  $tmp0 = $62;
  $63 = $tmp0;
  $64 = (($63) + 256)|0;
  $tmp0 = $64;
  $65 = $tmp0;
  $66 = $tmp10;
  $67 = ($66*6270)|0;
  $68 = (($65) + ($67))|0;
  $69 = $68 >> 9;
  $70 = $dataptr;
  $71 = (($70) + 4|0);
  HEAP32[$71>>2] = $69;
  $72 = $tmp0;
  $73 = $tmp11;
  $74 = ($73*15137)|0;
  $75 = (($72) - ($74))|0;
  $76 = $75 >> 9;
  $77 = $dataptr;
  $78 = (($77) + 12|0);
  HEAP32[$78>>2] = $76;
  $79 = $dataptr;
  $80 = (($79) + 32|0);
  $dataptr = $80;
  $81 = $ctr;
  $82 = (($81) + 1)|0;
  $ctr = $82;
 }
 $83 = $0;
 $dataptr = $83;
 $ctr = 0;
 while(1) {
  $84 = $ctr;
  $85 = ($84|0)<(4);
  if (!($85)) {
   break;
  }
  $86 = $dataptr;
  $87 = HEAP32[$86>>2]|0;
  $88 = $dataptr;
  $89 = (($88) + 96|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87) + ($90))|0;
  $92 = (($91) + 2)|0;
  $tmp0 = $92;
  $93 = $dataptr;
  $94 = (($93) + 32|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $dataptr;
  $97 = (($96) + 64|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($95) + ($98))|0;
  $tmp1 = $99;
  $100 = $dataptr;
  $101 = HEAP32[$100>>2]|0;
  $102 = $dataptr;
  $103 = (($102) + 96|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($101) - ($104))|0;
  $tmp10 = $105;
  $106 = $dataptr;
  $107 = (($106) + 32|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $dataptr;
  $110 = (($109) + 64|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($108) - ($111))|0;
  $tmp11 = $112;
  $113 = $tmp0;
  $114 = $tmp1;
  $115 = (($113) + ($114))|0;
  $116 = $115 >> 2;
  $117 = $dataptr;
  HEAP32[$117>>2] = $116;
  $118 = $tmp0;
  $119 = $tmp1;
  $120 = (($118) - ($119))|0;
  $121 = $120 >> 2;
  $122 = $dataptr;
  $123 = (($122) + 64|0);
  HEAP32[$123>>2] = $121;
  $124 = $tmp10;
  $125 = $tmp11;
  $126 = (($124) + ($125))|0;
  $127 = ($126*4433)|0;
  $tmp0 = $127;
  $128 = $tmp0;
  $129 = (($128) + 16384)|0;
  $tmp0 = $129;
  $130 = $tmp0;
  $131 = $tmp10;
  $132 = ($131*6270)|0;
  $133 = (($130) + ($132))|0;
  $134 = $133 >> 15;
  $135 = $dataptr;
  $136 = (($135) + 32|0);
  HEAP32[$136>>2] = $134;
  $137 = $tmp0;
  $138 = $tmp11;
  $139 = ($138*15137)|0;
  $140 = (($137) - ($139))|0;
  $141 = $140 >> 15;
  $142 = $dataptr;
  $143 = (($142) + 96|0);
  HEAP32[$143>>2] = $141;
  $144 = $dataptr;
  $145 = (($144) + 4|0);
  $dataptr = $145;
  $146 = $ctr;
  $147 = (($146) + 1)|0;
  $ctr = $147;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_3x3($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = ($5|0)<(3);
  if (!($6)) {
   break;
  }
  $7 = $ctr;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($10) + ($11)|0);
  $elemptr = $12;
  $13 = $elemptr;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $elemptr;
  $17 = (($16) + 2|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($15) + ($19))|0;
  $tmp0 = $20;
  $21 = $elemptr;
  $22 = (($21) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $tmp1 = $24;
  $25 = $elemptr;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $elemptr;
  $29 = (($28) + 2|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (($27) - ($31))|0;
  $tmp2 = $32;
  $33 = $tmp0;
  $34 = $tmp1;
  $35 = (($33) + ($34))|0;
  $36 = (($35) - 384)|0;
  $37 = $36 << 4;
  $38 = $dataptr;
  HEAP32[$38>>2] = $37;
  $39 = $tmp0;
  $40 = $tmp1;
  $41 = (($39) - ($40))|0;
  $42 = $tmp1;
  $43 = (($41) - ($42))|0;
  $44 = ($43*5793)|0;
  $45 = (($44) + 256)|0;
  $46 = $45 >> 9;
  $47 = $dataptr;
  $48 = (($47) + 8|0);
  HEAP32[$48>>2] = $46;
  $49 = $tmp2;
  $50 = ($49*10033)|0;
  $51 = (($50) + 256)|0;
  $52 = $51 >> 9;
  $53 = $dataptr;
  $54 = (($53) + 4|0);
  HEAP32[$54>>2] = $52;
  $55 = $dataptr;
  $56 = (($55) + 32|0);
  $dataptr = $56;
  $57 = $ctr;
  $58 = (($57) + 1)|0;
  $ctr = $58;
 }
 $59 = $0;
 $dataptr = $59;
 $ctr = 0;
 while(1) {
  $60 = $ctr;
  $61 = ($60|0)<(3);
  if (!($61)) {
   break;
  }
  $62 = $dataptr;
  $63 = HEAP32[$62>>2]|0;
  $64 = $dataptr;
  $65 = (($64) + 64|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($63) + ($66))|0;
  $tmp0 = $67;
  $68 = $dataptr;
  $69 = (($68) + 32|0);
  $70 = HEAP32[$69>>2]|0;
  $tmp1 = $70;
  $71 = $dataptr;
  $72 = HEAP32[$71>>2]|0;
  $73 = $dataptr;
  $74 = (($73) + 64|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($72) - ($75))|0;
  $tmp2 = $76;
  $77 = $tmp0;
  $78 = $tmp1;
  $79 = (($77) + ($78))|0;
  $80 = ($79*14564)|0;
  $81 = (($80) + 16384)|0;
  $82 = $81 >> 15;
  $83 = $dataptr;
  HEAP32[$83>>2] = $82;
  $84 = $tmp0;
  $85 = $tmp1;
  $86 = (($84) - ($85))|0;
  $87 = $tmp1;
  $88 = (($86) - ($87))|0;
  $89 = ($88*10298)|0;
  $90 = (($89) + 16384)|0;
  $91 = $90 >> 15;
  $92 = $dataptr;
  $93 = (($92) + 64|0);
  HEAP32[$93>>2] = $91;
  $94 = $tmp2;
  $95 = ($94*17837)|0;
  $96 = (($95) + 16384)|0;
  $97 = $96 >> 15;
  $98 = $dataptr;
  $99 = (($98) + 32|0);
  HEAP32[$99>>2] = $97;
  $100 = $dataptr;
  $101 = (($100) + 4|0);
  $dataptr = $101;
  $102 = $ctr;
  $103 = (($102) + 1)|0;
  $ctr = $103;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_2x2($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp2 = 0, $tmp3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (($5) + ($6)|0);
 $elemptr = $7;
 $8 = $elemptr;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $elemptr;
 $12 = (($11) + 1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (($10) + ($14))|0;
 $tmp0 = $15;
 $16 = $elemptr;
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $elemptr;
 $20 = (($19) + 1|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($18) - ($22))|0;
 $tmp1 = $23;
 $24 = $1;
 $25 = (($24) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $2;
 $28 = (($26) + ($27)|0);
 $elemptr = $28;
 $29 = $elemptr;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $32 = $elemptr;
 $33 = (($32) + 1|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = (($31) + ($35))|0;
 $tmp2 = $36;
 $37 = $elemptr;
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $elemptr;
 $41 = (($40) + 1|0);
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = (($39) - ($43))|0;
 $tmp3 = $44;
 $45 = $tmp0;
 $46 = $tmp2;
 $47 = (($45) + ($46))|0;
 $48 = (($47) - 512)|0;
 $49 = $48 << 4;
 $50 = $0;
 HEAP32[$50>>2] = $49;
 $51 = $tmp0;
 $52 = $tmp2;
 $53 = (($51) - ($52))|0;
 $54 = $53 << 4;
 $55 = $0;
 $56 = (($55) + 32|0);
 HEAP32[$56>>2] = $54;
 $57 = $tmp1;
 $58 = $tmp3;
 $59 = (($57) + ($58))|0;
 $60 = $59 << 4;
 $61 = $0;
 $62 = (($61) + 4|0);
 HEAP32[$62>>2] = $60;
 $63 = $tmp1;
 $64 = $tmp3;
 $65 = (($63) - ($64))|0;
 $66 = $65 << 4;
 $67 = $0;
 $68 = (($67) + 36|0);
 HEAP32[$68>>2] = $66;
 STACKTOP = sp;return;
}
function _jpeg_fdct_1x1($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $2;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($9) - 128)|0;
 $11 = $10 << 6;
 $12 = $0;
 HEAP32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function _jpeg_fdct_9x9($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0;
 var $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (($7) + ($8)|0);
  $elemptr = $9;
  $10 = $elemptr;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $elemptr;
  $14 = (($13) + 8|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($12) + ($16))|0;
  $tmp0 = $17;
  $18 = $elemptr;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $elemptr;
  $23 = (($22) + 7|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $tmp1 = $26;
  $27 = $elemptr;
  $28 = (($27) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $elemptr;
  $32 = (($31) + 6|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($30) + ($34))|0;
  $tmp2 = $35;
  $36 = $elemptr;
  $37 = (($36) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $elemptr;
  $41 = (($40) + 5|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($39) + ($43))|0;
  $tmp3 = $44;
  $45 = $elemptr;
  $46 = (($45) + 4|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $tmp4 = $48;
  $49 = $elemptr;
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = $elemptr;
  $53 = (($52) + 8|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54&255;
  $56 = (($51) - ($55))|0;
  $tmp10 = $56;
  $57 = $elemptr;
  $58 = (($57) + 1|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = $elemptr;
  $62 = (($61) + 7|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = (($60) - ($64))|0;
  $tmp11 = $65;
  $66 = $elemptr;
  $67 = (($66) + 2|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $elemptr;
  $71 = (($70) + 6|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = (($69) - ($73))|0;
  $tmp12 = $74;
  $75 = $elemptr;
  $76 = (($75) + 3|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $elemptr;
  $80 = (($79) + 5|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = (($78) - ($82))|0;
  $tmp13 = $83;
  $84 = $tmp0;
  $85 = $tmp2;
  $86 = (($84) + ($85))|0;
  $87 = $tmp3;
  $88 = (($86) + ($87))|0;
  $z1 = $88;
  $89 = $tmp1;
  $90 = $tmp4;
  $91 = (($89) + ($90))|0;
  $z2 = $91;
  $92 = $z1;
  $93 = $z2;
  $94 = (($92) + ($93))|0;
  $95 = (($94) - 1152)|0;
  $96 = $95 << 1;
  $97 = $dataptr;
  HEAP32[$97>>2] = $96;
  $98 = $z1;
  $99 = $z2;
  $100 = (($98) - ($99))|0;
  $101 = $z2;
  $102 = (($100) - ($101))|0;
  $103 = ($102*5793)|0;
  $104 = (($103) + 2048)|0;
  $105 = $104 >> 12;
  $106 = $dataptr;
  $107 = (($106) + 24|0);
  HEAP32[$107>>2] = $105;
  $108 = $tmp0;
  $109 = $tmp2;
  $110 = (($108) - ($109))|0;
  $111 = ($110*10887)|0;
  $z1 = $111;
  $112 = $tmp1;
  $113 = $tmp4;
  $114 = (($112) - ($113))|0;
  $115 = $tmp4;
  $116 = (($114) - ($115))|0;
  $117 = ($116*5793)|0;
  $z2 = $117;
  $118 = $tmp2;
  $119 = $tmp3;
  $120 = (($118) - ($119))|0;
  $121 = ($120*8875)|0;
  $122 = $z1;
  $123 = (($121) + ($122))|0;
  $124 = $z2;
  $125 = (($123) + ($124))|0;
  $126 = (($125) + 2048)|0;
  $127 = $126 >> 12;
  $128 = $dataptr;
  $129 = (($128) + 8|0);
  HEAP32[$129>>2] = $127;
  $130 = $tmp3;
  $131 = $tmp0;
  $132 = (($130) - ($131))|0;
  $133 = ($132*2012)|0;
  $134 = $z1;
  $135 = (($133) + ($134))|0;
  $136 = $z2;
  $137 = (($135) - ($136))|0;
  $138 = (($137) + 2048)|0;
  $139 = $138 >> 12;
  $140 = $dataptr;
  $141 = (($140) + 16|0);
  HEAP32[$141>>2] = $139;
  $142 = $tmp10;
  $143 = $tmp12;
  $144 = (($142) - ($143))|0;
  $145 = $tmp13;
  $146 = (($144) - ($145))|0;
  $147 = ($146*10033)|0;
  $148 = (($147) + 2048)|0;
  $149 = $148 >> 12;
  $150 = $dataptr;
  $151 = (($150) + 12|0);
  HEAP32[$151>>2] = $149;
  $152 = $tmp11;
  $153 = ($152*10033)|0;
  $tmp11 = $153;
  $154 = $tmp10;
  $155 = $tmp12;
  $156 = (($154) + ($155))|0;
  $157 = ($156*7447)|0;
  $tmp0 = $157;
  $158 = $tmp10;
  $159 = $tmp13;
  $160 = (($158) + ($159))|0;
  $161 = ($160*3962)|0;
  $tmp1 = $161;
  $162 = $tmp11;
  $163 = $tmp0;
  $164 = (($162) + ($163))|0;
  $165 = $tmp1;
  $166 = (($164) + ($165))|0;
  $167 = (($166) + 2048)|0;
  $168 = $167 >> 12;
  $169 = $dataptr;
  $170 = (($169) + 4|0);
  HEAP32[$170>>2] = $168;
  $171 = $tmp12;
  $172 = $tmp13;
  $173 = (($171) - ($172))|0;
  $174 = ($173*11409)|0;
  $tmp2 = $174;
  $175 = $tmp0;
  $176 = $tmp11;
  $177 = (($175) - ($176))|0;
  $178 = $tmp2;
  $179 = (($177) - ($178))|0;
  $180 = (($179) + 2048)|0;
  $181 = $180 >> 12;
  $182 = $dataptr;
  $183 = (($182) + 20|0);
  HEAP32[$183>>2] = $181;
  $184 = $tmp1;
  $185 = $tmp11;
  $186 = (($184) - ($185))|0;
  $187 = $tmp2;
  $188 = (($186) + ($187))|0;
  $189 = (($188) + 2048)|0;
  $190 = $189 >> 12;
  $191 = $dataptr;
  $192 = (($191) + 28|0);
  HEAP32[$192>>2] = $190;
  $193 = $ctr;
  $194 = (($193) + 1)|0;
  $ctr = $194;
  $195 = $ctr;
  $196 = ($195|0)!=(8);
  if ($196) {
   $197 = $ctr;
   $198 = ($197|0)==(9);
   if ($198) {
    break;
   }
   $199 = $dataptr;
   $200 = (($199) + 32|0);
   $dataptr = $200;
  } else {
   $dataptr = $workspace;
  }
 }
 $201 = $0;
 $dataptr = $201;
 $wsptr = $workspace;
 $ctr = 7;
 while(1) {
  $202 = $ctr;
  $203 = ($202|0)>=(0);
  if (!($203)) {
   break;
  }
  $204 = $dataptr;
  $205 = HEAP32[$204>>2]|0;
  $206 = $wsptr;
  $207 = HEAP32[$206>>2]|0;
  $208 = (($205) + ($207))|0;
  $tmp0 = $208;
  $209 = $dataptr;
  $210 = (($209) + 32|0);
  $211 = HEAP32[$210>>2]|0;
  $212 = $dataptr;
  $213 = (($212) + 224|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = (($211) + ($214))|0;
  $tmp1 = $215;
  $216 = $dataptr;
  $217 = (($216) + 64|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $dataptr;
  $220 = (($219) + 192|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($218) + ($221))|0;
  $tmp2 = $222;
  $223 = $dataptr;
  $224 = (($223) + 96|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $dataptr;
  $227 = (($226) + 160|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (($225) + ($228))|0;
  $tmp3 = $229;
  $230 = $dataptr;
  $231 = (($230) + 128|0);
  $232 = HEAP32[$231>>2]|0;
  $tmp4 = $232;
  $233 = $dataptr;
  $234 = HEAP32[$233>>2]|0;
  $235 = $wsptr;
  $236 = HEAP32[$235>>2]|0;
  $237 = (($234) - ($236))|0;
  $tmp10 = $237;
  $238 = $dataptr;
  $239 = (($238) + 32|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $dataptr;
  $242 = (($241) + 224|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = (($240) - ($243))|0;
  $tmp11 = $244;
  $245 = $dataptr;
  $246 = (($245) + 64|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = $dataptr;
  $249 = (($248) + 192|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = (($247) - ($250))|0;
  $tmp12 = $251;
  $252 = $dataptr;
  $253 = (($252) + 96|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $dataptr;
  $256 = (($255) + 160|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (($254) - ($257))|0;
  $tmp13 = $258;
  $259 = $tmp0;
  $260 = $tmp2;
  $261 = (($259) + ($260))|0;
  $262 = $tmp3;
  $263 = (($261) + ($262))|0;
  $z1 = $263;
  $264 = $tmp1;
  $265 = $tmp4;
  $266 = (($264) + ($265))|0;
  $z2 = $266;
  $267 = $z1;
  $268 = $z2;
  $269 = (($267) + ($268))|0;
  $270 = ($269*12945)|0;
  $271 = (($270) + 16384)|0;
  $272 = $271 >> 15;
  $273 = $dataptr;
  HEAP32[$273>>2] = $272;
  $274 = $z1;
  $275 = $z2;
  $276 = (($274) - ($275))|0;
  $277 = $z2;
  $278 = (($276) - ($277))|0;
  $279 = ($278*9154)|0;
  $280 = (($279) + 16384)|0;
  $281 = $280 >> 15;
  $282 = $dataptr;
  $283 = (($282) + 192|0);
  HEAP32[$283>>2] = $281;
  $284 = $tmp0;
  $285 = $tmp2;
  $286 = (($284) - ($285))|0;
  $287 = ($286*17203)|0;
  $z1 = $287;
  $288 = $tmp1;
  $289 = $tmp4;
  $290 = (($288) - ($289))|0;
  $291 = $tmp4;
  $292 = (($290) - ($291))|0;
  $293 = ($292*9154)|0;
  $z2 = $293;
  $294 = $tmp2;
  $295 = $tmp3;
  $296 = (($294) - ($295))|0;
  $297 = ($296*14024)|0;
  $298 = $z1;
  $299 = (($297) + ($298))|0;
  $300 = $z2;
  $301 = (($299) + ($300))|0;
  $302 = (($301) + 16384)|0;
  $303 = $302 >> 15;
  $304 = $dataptr;
  $305 = (($304) + 64|0);
  HEAP32[$305>>2] = $303;
  $306 = $tmp3;
  $307 = $tmp0;
  $308 = (($306) - ($307))|0;
  $309 = ($308*3179)|0;
  $310 = $z1;
  $311 = (($309) + ($310))|0;
  $312 = $z2;
  $313 = (($311) - ($312))|0;
  $314 = (($313) + 16384)|0;
  $315 = $314 >> 15;
  $316 = $dataptr;
  $317 = (($316) + 128|0);
  HEAP32[$317>>2] = $315;
  $318 = $tmp10;
  $319 = $tmp12;
  $320 = (($318) - ($319))|0;
  $321 = $tmp13;
  $322 = (($320) - ($321))|0;
  $323 = ($322*15855)|0;
  $324 = (($323) + 16384)|0;
  $325 = $324 >> 15;
  $326 = $dataptr;
  $327 = (($326) + 96|0);
  HEAP32[$327>>2] = $325;
  $328 = $tmp11;
  $329 = ($328*15855)|0;
  $tmp11 = $329;
  $330 = $tmp10;
  $331 = $tmp12;
  $332 = (($330) + ($331))|0;
  $333 = ($332*11768)|0;
  $tmp0 = $333;
  $334 = $tmp10;
  $335 = $tmp13;
  $336 = (($334) + ($335))|0;
  $337 = ($336*6262)|0;
  $tmp1 = $337;
  $338 = $tmp11;
  $339 = $tmp0;
  $340 = (($338) + ($339))|0;
  $341 = $tmp1;
  $342 = (($340) + ($341))|0;
  $343 = (($342) + 16384)|0;
  $344 = $343 >> 15;
  $345 = $dataptr;
  $346 = (($345) + 32|0);
  HEAP32[$346>>2] = $344;
  $347 = $tmp12;
  $348 = $tmp13;
  $349 = (($347) - ($348))|0;
  $350 = ($349*18029)|0;
  $tmp2 = $350;
  $351 = $tmp0;
  $352 = $tmp11;
  $353 = (($351) - ($352))|0;
  $354 = $tmp2;
  $355 = (($353) - ($354))|0;
  $356 = (($355) + 16384)|0;
  $357 = $356 >> 15;
  $358 = $dataptr;
  $359 = (($358) + 160|0);
  HEAP32[$359>>2] = $357;
  $360 = $tmp1;
  $361 = $tmp11;
  $362 = (($360) - ($361))|0;
  $363 = $tmp2;
  $364 = (($362) + ($363))|0;
  $365 = (($364) + 16384)|0;
  $366 = $365 >> 15;
  $367 = $dataptr;
  $368 = (($367) + 224|0);
  HEAP32[$368>>2] = $366;
  $369 = $dataptr;
  $370 = (($369) + 4|0);
  $dataptr = $370;
  $371 = $wsptr;
  $372 = (($371) + 4|0);
  $wsptr = $372;
  $373 = $ctr;
  $374 = (($373) + -1)|0;
  $ctr = $374;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_10x10($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $workspace = 0;
 var $wsptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (($7) + ($8)|0);
  $elemptr = $9;
  $10 = $elemptr;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $elemptr;
  $14 = (($13) + 9|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($12) + ($16))|0;
  $tmp0 = $17;
  $18 = $elemptr;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $elemptr;
  $23 = (($22) + 8|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $tmp1 = $26;
  $27 = $elemptr;
  $28 = (($27) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $elemptr;
  $32 = (($31) + 7|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($30) + ($34))|0;
  $tmp12 = $35;
  $36 = $elemptr;
  $37 = (($36) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $elemptr;
  $41 = (($40) + 6|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($39) + ($43))|0;
  $tmp3 = $44;
  $45 = $elemptr;
  $46 = (($45) + 4|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $elemptr;
  $50 = (($49) + 5|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (($48) + ($52))|0;
  $tmp4 = $53;
  $54 = $tmp0;
  $55 = $tmp4;
  $56 = (($54) + ($55))|0;
  $tmp10 = $56;
  $57 = $tmp0;
  $58 = $tmp4;
  $59 = (($57) - ($58))|0;
  $tmp13 = $59;
  $60 = $tmp1;
  $61 = $tmp3;
  $62 = (($60) + ($61))|0;
  $tmp11 = $62;
  $63 = $tmp1;
  $64 = $tmp3;
  $65 = (($63) - ($64))|0;
  $tmp14 = $65;
  $66 = $elemptr;
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $elemptr;
  $70 = (($69) + 9|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = (($68) - ($72))|0;
  $tmp0 = $73;
  $74 = $elemptr;
  $75 = (($74) + 1|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $elemptr;
  $79 = (($78) + 8|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = (($77) - ($81))|0;
  $tmp1 = $82;
  $83 = $elemptr;
  $84 = (($83) + 2|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = $elemptr;
  $88 = (($87) + 7|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $91 = (($86) - ($90))|0;
  $tmp2 = $91;
  $92 = $elemptr;
  $93 = (($92) + 3|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = $elemptr;
  $97 = (($96) + 6|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = (($95) - ($99))|0;
  $tmp3 = $100;
  $101 = $elemptr;
  $102 = (($101) + 4|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = $elemptr;
  $106 = (($105) + 5|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $109 = (($104) - ($108))|0;
  $tmp4 = $109;
  $110 = $tmp10;
  $111 = $tmp11;
  $112 = (($110) + ($111))|0;
  $113 = $tmp12;
  $114 = (($112) + ($113))|0;
  $115 = (($114) - 1280)|0;
  $116 = $115 << 1;
  $117 = $dataptr;
  HEAP32[$117>>2] = $116;
  $118 = $tmp12;
  $119 = $tmp12;
  $120 = (($119) + ($118))|0;
  $tmp12 = $120;
  $121 = $tmp10;
  $122 = $tmp12;
  $123 = (($121) - ($122))|0;
  $124 = ($123*9373)|0;
  $125 = $tmp11;
  $126 = $tmp12;
  $127 = (($125) - ($126))|0;
  $128 = ($127*3580)|0;
  $129 = (($124) - ($128))|0;
  $130 = (($129) + 2048)|0;
  $131 = $130 >> 12;
  $132 = $dataptr;
  $133 = (($132) + 16|0);
  HEAP32[$133>>2] = $131;
  $134 = $tmp13;
  $135 = $tmp14;
  $136 = (($134) + ($135))|0;
  $137 = ($136*6810)|0;
  $tmp10 = $137;
  $138 = $tmp10;
  $139 = $tmp13;
  $140 = ($139*4209)|0;
  $141 = (($138) + ($140))|0;
  $142 = (($141) + 2048)|0;
  $143 = $142 >> 12;
  $144 = $dataptr;
  $145 = (($144) + 8|0);
  HEAP32[$145>>2] = $143;
  $146 = $tmp10;
  $147 = $tmp14;
  $148 = ($147*17828)|0;
  $149 = (($146) - ($148))|0;
  $150 = (($149) + 2048)|0;
  $151 = $150 >> 12;
  $152 = $dataptr;
  $153 = (($152) + 24|0);
  HEAP32[$153>>2] = $151;
  $154 = $tmp0;
  $155 = $tmp4;
  $156 = (($154) + ($155))|0;
  $tmp10 = $156;
  $157 = $tmp1;
  $158 = $tmp3;
  $159 = (($157) - ($158))|0;
  $tmp11 = $159;
  $160 = $tmp10;
  $161 = $tmp11;
  $162 = (($160) - ($161))|0;
  $163 = $tmp2;
  $164 = (($162) - ($163))|0;
  $165 = $164 << 1;
  $166 = $dataptr;
  $167 = (($166) + 20|0);
  HEAP32[$167>>2] = $165;
  $168 = $tmp2;
  $169 = $168 << 13;
  $tmp2 = $169;
  $170 = $tmp0;
  $171 = ($170*11443)|0;
  $172 = $tmp1;
  $173 = ($172*10323)|0;
  $174 = (($171) + ($173))|0;
  $175 = $tmp2;
  $176 = (($174) + ($175))|0;
  $177 = $tmp3;
  $178 = ($177*5260)|0;
  $179 = (($176) + ($178))|0;
  $180 = $tmp4;
  $181 = ($180*1812)|0;
  $182 = (($179) + ($181))|0;
  $183 = (($182) + 2048)|0;
  $184 = $183 >> 12;
  $185 = $dataptr;
  $186 = (($185) + 4|0);
  HEAP32[$186>>2] = $184;
  $187 = $tmp0;
  $188 = $tmp4;
  $189 = (($187) - ($188))|0;
  $190 = ($189*7791)|0;
  $191 = $tmp1;
  $192 = $tmp3;
  $193 = (($191) + ($192))|0;
  $194 = ($193*4815)|0;
  $195 = (($190) - ($194))|0;
  $tmp12 = $195;
  $196 = $tmp10;
  $197 = $tmp11;
  $198 = (($196) + ($197))|0;
  $199 = ($198*2531)|0;
  $200 = $tmp11;
  $201 = $200 << 12;
  $202 = (($199) + ($201))|0;
  $203 = $tmp2;
  $204 = (($202) - ($203))|0;
  $tmp13 = $204;
  $205 = $tmp12;
  $206 = $tmp13;
  $207 = (($205) + ($206))|0;
  $208 = (($207) + 2048)|0;
  $209 = $208 >> 12;
  $210 = $dataptr;
  $211 = (($210) + 12|0);
  HEAP32[$211>>2] = $209;
  $212 = $tmp12;
  $213 = $tmp13;
  $214 = (($212) - ($213))|0;
  $215 = (($214) + 2048)|0;
  $216 = $215 >> 12;
  $217 = $dataptr;
  $218 = (($217) + 28|0);
  HEAP32[$218>>2] = $216;
  $219 = $ctr;
  $220 = (($219) + 1)|0;
  $ctr = $220;
  $221 = $ctr;
  $222 = ($221|0)!=(8);
  if ($222) {
   $223 = $ctr;
   $224 = ($223|0)==(10);
   if ($224) {
    break;
   }
   $225 = $dataptr;
   $226 = (($225) + 32|0);
   $dataptr = $226;
  } else {
   $dataptr = $workspace;
  }
 }
 $227 = $0;
 $dataptr = $227;
 $wsptr = $workspace;
 $ctr = 7;
 while(1) {
  $228 = $ctr;
  $229 = ($228|0)>=(0);
  if (!($229)) {
   break;
  }
  $230 = $dataptr;
  $231 = HEAP32[$230>>2]|0;
  $232 = $wsptr;
  $233 = (($232) + 32|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = (($231) + ($234))|0;
  $tmp0 = $235;
  $236 = $dataptr;
  $237 = (($236) + 32|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = $wsptr;
  $240 = HEAP32[$239>>2]|0;
  $241 = (($238) + ($240))|0;
  $tmp1 = $241;
  $242 = $dataptr;
  $243 = (($242) + 64|0);
  $244 = HEAP32[$243>>2]|0;
  $245 = $dataptr;
  $246 = (($245) + 224|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = (($244) + ($247))|0;
  $tmp12 = $248;
  $249 = $dataptr;
  $250 = (($249) + 96|0);
  $251 = HEAP32[$250>>2]|0;
  $252 = $dataptr;
  $253 = (($252) + 192|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = (($251) + ($254))|0;
  $tmp3 = $255;
  $256 = $dataptr;
  $257 = (($256) + 128|0);
  $258 = HEAP32[$257>>2]|0;
  $259 = $dataptr;
  $260 = (($259) + 160|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = (($258) + ($261))|0;
  $tmp4 = $262;
  $263 = $tmp0;
  $264 = $tmp4;
  $265 = (($263) + ($264))|0;
  $tmp10 = $265;
  $266 = $tmp0;
  $267 = $tmp4;
  $268 = (($266) - ($267))|0;
  $tmp13 = $268;
  $269 = $tmp1;
  $270 = $tmp3;
  $271 = (($269) + ($270))|0;
  $tmp11 = $271;
  $272 = $tmp1;
  $273 = $tmp3;
  $274 = (($272) - ($273))|0;
  $tmp14 = $274;
  $275 = $dataptr;
  $276 = HEAP32[$275>>2]|0;
  $277 = $wsptr;
  $278 = (($277) + 32|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = (($276) - ($279))|0;
  $tmp0 = $280;
  $281 = $dataptr;
  $282 = (($281) + 32|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $wsptr;
  $285 = HEAP32[$284>>2]|0;
  $286 = (($283) - ($285))|0;
  $tmp1 = $286;
  $287 = $dataptr;
  $288 = (($287) + 64|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = $dataptr;
  $291 = (($290) + 224|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = (($289) - ($292))|0;
  $tmp2 = $293;
  $294 = $dataptr;
  $295 = (($294) + 96|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = $dataptr;
  $298 = (($297) + 192|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = (($296) - ($299))|0;
  $tmp3 = $300;
  $301 = $dataptr;
  $302 = (($301) + 128|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = $dataptr;
  $305 = (($304) + 160|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = (($303) - ($306))|0;
  $tmp4 = $307;
  $308 = $tmp10;
  $309 = $tmp11;
  $310 = (($308) + ($309))|0;
  $311 = $tmp12;
  $312 = (($310) + ($311))|0;
  $313 = ($312*10486)|0;
  $314 = (($313) + 16384)|0;
  $315 = $314 >> 15;
  $316 = $dataptr;
  HEAP32[$316>>2] = $315;
  $317 = $tmp12;
  $318 = $tmp12;
  $319 = (($318) + ($317))|0;
  $tmp12 = $319;
  $320 = $tmp10;
  $321 = $tmp12;
  $322 = (($320) - ($321))|0;
  $323 = ($322*11997)|0;
  $324 = $tmp11;
  $325 = $tmp12;
  $326 = (($324) - ($325))|0;
  $327 = ($326*4582)|0;
  $328 = (($323) - ($327))|0;
  $329 = (($328) + 16384)|0;
  $330 = $329 >> 15;
  $331 = $dataptr;
  $332 = (($331) + 128|0);
  HEAP32[$332>>2] = $330;
  $333 = $tmp13;
  $334 = $tmp14;
  $335 = (($333) + ($334))|0;
  $336 = ($335*8716)|0;
  $tmp10 = $336;
  $337 = $tmp10;
  $338 = $tmp13;
  $339 = ($338*5387)|0;
  $340 = (($337) + ($339))|0;
  $341 = (($340) + 16384)|0;
  $342 = $341 >> 15;
  $343 = $dataptr;
  $344 = (($343) + 64|0);
  HEAP32[$344>>2] = $342;
  $345 = $tmp10;
  $346 = $tmp14;
  $347 = ($346*22820)|0;
  $348 = (($345) - ($347))|0;
  $349 = (($348) + 16384)|0;
  $350 = $349 >> 15;
  $351 = $dataptr;
  $352 = (($351) + 192|0);
  HEAP32[$352>>2] = $350;
  $353 = $tmp0;
  $354 = $tmp4;
  $355 = (($353) + ($354))|0;
  $tmp10 = $355;
  $356 = $tmp1;
  $357 = $tmp3;
  $358 = (($356) - ($357))|0;
  $tmp11 = $358;
  $359 = $tmp10;
  $360 = $tmp11;
  $361 = (($359) - ($360))|0;
  $362 = $tmp2;
  $363 = (($361) - ($362))|0;
  $364 = ($363*10486)|0;
  $365 = (($364) + 16384)|0;
  $366 = $365 >> 15;
  $367 = $dataptr;
  $368 = (($367) + 160|0);
  HEAP32[$368>>2] = $366;
  $369 = $tmp2;
  $370 = ($369*10486)|0;
  $tmp2 = $370;
  $371 = $tmp0;
  $372 = ($371*14647)|0;
  $373 = $tmp1;
  $374 = ($373*13213)|0;
  $375 = (($372) + ($374))|0;
  $376 = $tmp2;
  $377 = (($375) + ($376))|0;
  $378 = $tmp3;
  $379 = ($378*6732)|0;
  $380 = (($377) + ($379))|0;
  $381 = $tmp4;
  $382 = ($381*2320)|0;
  $383 = (($380) + ($382))|0;
  $384 = (($383) + 16384)|0;
  $385 = $384 >> 15;
  $386 = $dataptr;
  $387 = (($386) + 32|0);
  HEAP32[$387>>2] = $385;
  $388 = $tmp0;
  $389 = $tmp4;
  $390 = (($388) - ($389))|0;
  $391 = ($390*9973)|0;
  $392 = $tmp1;
  $393 = $tmp3;
  $394 = (($392) + ($393))|0;
  $395 = ($394*6163)|0;
  $396 = (($391) - ($395))|0;
  $tmp12 = $396;
  $397 = $tmp10;
  $398 = $tmp11;
  $399 = (($397) + ($398))|0;
  $400 = ($399*3240)|0;
  $401 = $tmp11;
  $402 = ($401*5243)|0;
  $403 = (($400) + ($402))|0;
  $404 = $tmp2;
  $405 = (($403) - ($404))|0;
  $tmp13 = $405;
  $406 = $tmp12;
  $407 = $tmp13;
  $408 = (($406) + ($407))|0;
  $409 = (($408) + 16384)|0;
  $410 = $409 >> 15;
  $411 = $dataptr;
  $412 = (($411) + 96|0);
  HEAP32[$412>>2] = $410;
  $413 = $tmp12;
  $414 = $tmp13;
  $415 = (($413) - ($414))|0;
  $416 = (($415) + 16384)|0;
  $417 = $416 >> 15;
  $418 = $dataptr;
  $419 = (($418) + 224|0);
  HEAP32[$419>>2] = $417;
  $420 = $dataptr;
  $421 = (($420) + 4|0);
  $dataptr = $421;
  $422 = $wsptr;
  $423 = (($422) + 4|0);
  $wsptr = $423;
  $424 = $ctr;
  $425 = (($424) + -1)|0;
  $ctr = $425;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_11x11($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0;
 var $tmp5 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (($7) + ($8)|0);
  $elemptr = $9;
  $10 = $elemptr;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $elemptr;
  $14 = (($13) + 10|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($12) + ($16))|0;
  $tmp0 = $17;
  $18 = $elemptr;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $elemptr;
  $23 = (($22) + 9|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $tmp1 = $26;
  $27 = $elemptr;
  $28 = (($27) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $elemptr;
  $32 = (($31) + 8|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($30) + ($34))|0;
  $tmp2 = $35;
  $36 = $elemptr;
  $37 = (($36) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $elemptr;
  $41 = (($40) + 7|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($39) + ($43))|0;
  $tmp3 = $44;
  $45 = $elemptr;
  $46 = (($45) + 4|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $elemptr;
  $50 = (($49) + 6|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (($48) + ($52))|0;
  $tmp4 = $53;
  $54 = $elemptr;
  $55 = (($54) + 5|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $tmp5 = $57;
  $58 = $elemptr;
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = $elemptr;
  $62 = (($61) + 10|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = $63&255;
  $65 = (($60) - ($64))|0;
  $tmp10 = $65;
  $66 = $elemptr;
  $67 = (($66) + 1|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $elemptr;
  $71 = (($70) + 9|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = (($69) - ($73))|0;
  $tmp11 = $74;
  $75 = $elemptr;
  $76 = (($75) + 2|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $elemptr;
  $80 = (($79) + 8|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = (($78) - ($82))|0;
  $tmp12 = $83;
  $84 = $elemptr;
  $85 = (($84) + 3|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $elemptr;
  $89 = (($88) + 7|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = (($87) - ($91))|0;
  $tmp13 = $92;
  $93 = $elemptr;
  $94 = (($93) + 4|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = $elemptr;
  $98 = (($97) + 6|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = (($96) - ($100))|0;
  $tmp14 = $101;
  $102 = $tmp0;
  $103 = $tmp1;
  $104 = (($102) + ($103))|0;
  $105 = $tmp2;
  $106 = (($104) + ($105))|0;
  $107 = $tmp3;
  $108 = (($106) + ($107))|0;
  $109 = $tmp4;
  $110 = (($108) + ($109))|0;
  $111 = $tmp5;
  $112 = (($110) + ($111))|0;
  $113 = (($112) - 1408)|0;
  $114 = $113 << 1;
  $115 = $dataptr;
  HEAP32[$115>>2] = $114;
  $116 = $tmp5;
  $117 = $tmp5;
  $118 = (($117) + ($116))|0;
  $tmp5 = $118;
  $119 = $tmp5;
  $120 = $tmp0;
  $121 = (($120) - ($119))|0;
  $tmp0 = $121;
  $122 = $tmp5;
  $123 = $tmp1;
  $124 = (($123) - ($122))|0;
  $tmp1 = $124;
  $125 = $tmp5;
  $126 = $tmp2;
  $127 = (($126) - ($125))|0;
  $tmp2 = $127;
  $128 = $tmp5;
  $129 = $tmp3;
  $130 = (($129) - ($128))|0;
  $tmp3 = $130;
  $131 = $tmp5;
  $132 = $tmp4;
  $133 = (($132) - ($131))|0;
  $tmp4 = $133;
  $134 = $tmp0;
  $135 = $tmp3;
  $136 = (($134) + ($135))|0;
  $137 = ($136*11116)|0;
  $138 = $tmp2;
  $139 = $tmp4;
  $140 = (($138) + ($139))|0;
  $141 = ($140*1649)|0;
  $142 = (($137) + ($141))|0;
  $z1 = $142;
  $143 = $tmp1;
  $144 = $tmp3;
  $145 = (($143) - ($144))|0;
  $146 = ($145*7587)|0;
  $z2 = $146;
  $147 = $tmp0;
  $148 = $tmp1;
  $149 = (($147) - ($148))|0;
  $150 = ($149*9746)|0;
  $z3 = $150;
  $151 = $z1;
  $152 = $z2;
  $153 = (($151) + ($152))|0;
  $154 = $tmp3;
  $155 = ($154*8342)|0;
  $156 = (($153) - ($155))|0;
  $157 = $tmp4;
  $158 = ($157*11395)|0;
  $159 = (($156) - ($158))|0;
  $160 = (($159) + 2048)|0;
  $161 = $160 >> 12;
  $162 = $dataptr;
  $163 = (($162) + 8|0);
  HEAP32[$163>>2] = $161;
  $164 = $z2;
  $165 = $z3;
  $166 = (($164) + ($165))|0;
  $167 = $tmp1;
  $168 = ($167*511)|0;
  $169 = (($166) + ($168))|0;
  $170 = $tmp2;
  $171 = ($170*11116)|0;
  $172 = (($169) - ($171))|0;
  $173 = $tmp4;
  $174 = ($173*4813)|0;
  $175 = (($172) + ($174))|0;
  $176 = (($175) + 2048)|0;
  $177 = $176 >> 12;
  $178 = $dataptr;
  $179 = (($178) + 16|0);
  HEAP32[$179>>2] = $177;
  $180 = $z1;
  $181 = $z3;
  $182 = (($180) + ($181))|0;
  $183 = $tmp0;
  $184 = ($183*13275)|0;
  $185 = (($182) - ($184))|0;
  $186 = $tmp2;
  $187 = ($186*6461)|0;
  $188 = (($185) - ($187))|0;
  $189 = (($188) + 2048)|0;
  $190 = $189 >> 12;
  $191 = $dataptr;
  $192 = (($191) + 24|0);
  HEAP32[$192>>2] = $190;
  $193 = $tmp10;
  $194 = $tmp11;
  $195 = (($193) + ($194))|0;
  $196 = ($195*10538)|0;
  $tmp1 = $196;
  $197 = $tmp10;
  $198 = $tmp12;
  $199 = (($197) + ($198))|0;
  $200 = ($199*8756)|0;
  $tmp2 = $200;
  $201 = $tmp10;
  $202 = $tmp13;
  $203 = (($201) + ($202))|0;
  $204 = ($203*6263)|0;
  $tmp3 = $204;
  $205 = $tmp1;
  $206 = $tmp2;
  $207 = (($205) + ($206))|0;
  $208 = $tmp3;
  $209 = (($207) + ($208))|0;
  $210 = $tmp10;
  $211 = ($210*14090)|0;
  $212 = (($209) - ($211))|0;
  $213 = $tmp14;
  $214 = ($213*3264)|0;
  $215 = (($212) + ($214))|0;
  $tmp0 = $215;
  $216 = $tmp11;
  $217 = $tmp12;
  $218 = (($216) + ($217))|0;
  $219 = Math_imul($218, -6263)|0;
  $tmp4 = $219;
  $220 = $tmp11;
  $221 = $tmp13;
  $222 = (($220) + ($221))|0;
  $223 = Math_imul($222, -11467)|0;
  $tmp5 = $223;
  $224 = $tmp4;
  $225 = $tmp5;
  $226 = (($224) + ($225))|0;
  $227 = $tmp11;
  $228 = ($227*10456)|0;
  $229 = (($226) + ($228))|0;
  $230 = $tmp14;
  $231 = ($230*8756)|0;
  $232 = (($229) - ($231))|0;
  $233 = $tmp1;
  $234 = (($233) + ($232))|0;
  $tmp1 = $234;
  $235 = $tmp12;
  $236 = $tmp13;
  $237 = (($235) + ($236))|0;
  $238 = ($237*3264)|0;
  $tmp10 = $238;
  $239 = $tmp4;
  $240 = $tmp10;
  $241 = (($239) + ($240))|0;
  $242 = $tmp12;
  $243 = ($242*16294)|0;
  $244 = (($241) - ($243))|0;
  $245 = $tmp14;
  $246 = ($245*11467)|0;
  $247 = (($244) + ($246))|0;
  $248 = $tmp2;
  $249 = (($248) + ($247))|0;
  $tmp2 = $249;
  $250 = $tmp5;
  $251 = $tmp10;
  $252 = (($250) + ($251))|0;
  $253 = $tmp13;
  $254 = ($253*10695)|0;
  $255 = (($252) + ($254))|0;
  $256 = $tmp14;
  $257 = ($256*10538)|0;
  $258 = (($255) - ($257))|0;
  $259 = $tmp3;
  $260 = (($259) + ($258))|0;
  $tmp3 = $260;
  $261 = $tmp0;
  $262 = (($261) + 2048)|0;
  $263 = $262 >> 12;
  $264 = $dataptr;
  $265 = (($264) + 4|0);
  HEAP32[$265>>2] = $263;
  $266 = $tmp1;
  $267 = (($266) + 2048)|0;
  $268 = $267 >> 12;
  $269 = $dataptr;
  $270 = (($269) + 12|0);
  HEAP32[$270>>2] = $268;
  $271 = $tmp2;
  $272 = (($271) + 2048)|0;
  $273 = $272 >> 12;
  $274 = $dataptr;
  $275 = (($274) + 20|0);
  HEAP32[$275>>2] = $273;
  $276 = $tmp3;
  $277 = (($276) + 2048)|0;
  $278 = $277 >> 12;
  $279 = $dataptr;
  $280 = (($279) + 28|0);
  HEAP32[$280>>2] = $278;
  $281 = $ctr;
  $282 = (($281) + 1)|0;
  $ctr = $282;
  $283 = $ctr;
  $284 = ($283|0)!=(8);
  if ($284) {
   $285 = $ctr;
   $286 = ($285|0)==(11);
   if ($286) {
    break;
   }
   $287 = $dataptr;
   $288 = (($287) + 32|0);
   $dataptr = $288;
  } else {
   $dataptr = $workspace;
  }
 }
 $289 = $0;
 $dataptr = $289;
 $wsptr = $workspace;
 $ctr = 7;
 while(1) {
  $290 = $ctr;
  $291 = ($290|0)>=(0);
  if (!($291)) {
   break;
  }
  $292 = $dataptr;
  $293 = HEAP32[$292>>2]|0;
  $294 = $wsptr;
  $295 = (($294) + 64|0);
  $296 = HEAP32[$295>>2]|0;
  $297 = (($293) + ($296))|0;
  $tmp0 = $297;
  $298 = $dataptr;
  $299 = (($298) + 32|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = $wsptr;
  $302 = (($301) + 32|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = (($300) + ($303))|0;
  $tmp1 = $304;
  $305 = $dataptr;
  $306 = (($305) + 64|0);
  $307 = HEAP32[$306>>2]|0;
  $308 = $wsptr;
  $309 = HEAP32[$308>>2]|0;
  $310 = (($307) + ($309))|0;
  $tmp2 = $310;
  $311 = $dataptr;
  $312 = (($311) + 96|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = $dataptr;
  $315 = (($314) + 224|0);
  $316 = HEAP32[$315>>2]|0;
  $317 = (($313) + ($316))|0;
  $tmp3 = $317;
  $318 = $dataptr;
  $319 = (($318) + 128|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = $dataptr;
  $322 = (($321) + 192|0);
  $323 = HEAP32[$322>>2]|0;
  $324 = (($320) + ($323))|0;
  $tmp4 = $324;
  $325 = $dataptr;
  $326 = (($325) + 160|0);
  $327 = HEAP32[$326>>2]|0;
  $tmp5 = $327;
  $328 = $dataptr;
  $329 = HEAP32[$328>>2]|0;
  $330 = $wsptr;
  $331 = (($330) + 64|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = (($329) - ($332))|0;
  $tmp10 = $333;
  $334 = $dataptr;
  $335 = (($334) + 32|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = $wsptr;
  $338 = (($337) + 32|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = (($336) - ($339))|0;
  $tmp11 = $340;
  $341 = $dataptr;
  $342 = (($341) + 64|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = $wsptr;
  $345 = HEAP32[$344>>2]|0;
  $346 = (($343) - ($345))|0;
  $tmp12 = $346;
  $347 = $dataptr;
  $348 = (($347) + 96|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = $dataptr;
  $351 = (($350) + 224|0);
  $352 = HEAP32[$351>>2]|0;
  $353 = (($349) - ($352))|0;
  $tmp13 = $353;
  $354 = $dataptr;
  $355 = (($354) + 128|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = $dataptr;
  $358 = (($357) + 192|0);
  $359 = HEAP32[$358>>2]|0;
  $360 = (($356) - ($359))|0;
  $tmp14 = $360;
  $361 = $tmp0;
  $362 = $tmp1;
  $363 = (($361) + ($362))|0;
  $364 = $tmp2;
  $365 = (($363) + ($364))|0;
  $366 = $tmp3;
  $367 = (($365) + ($366))|0;
  $368 = $tmp4;
  $369 = (($367) + ($368))|0;
  $370 = $tmp5;
  $371 = (($369) + ($370))|0;
  $372 = ($371*8666)|0;
  $373 = (($372) + 16384)|0;
  $374 = $373 >> 15;
  $375 = $dataptr;
  HEAP32[$375>>2] = $374;
  $376 = $tmp5;
  $377 = $tmp5;
  $378 = (($377) + ($376))|0;
  $tmp5 = $378;
  $379 = $tmp5;
  $380 = $tmp0;
  $381 = (($380) - ($379))|0;
  $tmp0 = $381;
  $382 = $tmp5;
  $383 = $tmp1;
  $384 = (($383) - ($382))|0;
  $tmp1 = $384;
  $385 = $tmp5;
  $386 = $tmp2;
  $387 = (($386) - ($385))|0;
  $tmp2 = $387;
  $388 = $tmp5;
  $389 = $tmp3;
  $390 = (($389) - ($388))|0;
  $tmp3 = $390;
  $391 = $tmp5;
  $392 = $tmp4;
  $393 = (($392) - ($391))|0;
  $tmp4 = $393;
  $394 = $tmp0;
  $395 = $tmp3;
  $396 = (($394) + ($395))|0;
  $397 = ($396*11759)|0;
  $398 = $tmp2;
  $399 = $tmp4;
  $400 = (($398) + ($399))|0;
  $401 = ($400*1744)|0;
  $402 = (($397) + ($401))|0;
  $z1 = $402;
  $403 = $tmp1;
  $404 = $tmp3;
  $405 = (($403) - ($404))|0;
  $406 = ($405*8026)|0;
  $z2 = $406;
  $407 = $tmp0;
  $408 = $tmp1;
  $409 = (($407) - ($408))|0;
  $410 = ($409*10310)|0;
  $z3 = $410;
  $411 = $z1;
  $412 = $z2;
  $413 = (($411) + ($412))|0;
  $414 = $tmp3;
  $415 = ($414*8825)|0;
  $416 = (($413) - ($415))|0;
  $417 = $tmp4;
  $418 = ($417*12054)|0;
  $419 = (($416) - ($418))|0;
  $420 = (($419) + 16384)|0;
  $421 = $420 >> 15;
  $422 = $dataptr;
  $423 = (($422) + 64|0);
  HEAP32[$423>>2] = $421;
  $424 = $z2;
  $425 = $z3;
  $426 = (($424) + ($425))|0;
  $427 = $tmp1;
  $428 = ($427*540)|0;
  $429 = (($426) + ($428))|0;
  $430 = $tmp2;
  $431 = ($430*11759)|0;
  $432 = (($429) - ($431))|0;
  $433 = $tmp4;
  $434 = ($433*5091)|0;
  $435 = (($432) + ($434))|0;
  $436 = (($435) + 16384)|0;
  $437 = $436 >> 15;
  $438 = $dataptr;
  $439 = (($438) + 128|0);
  HEAP32[$439>>2] = $437;
  $440 = $z1;
  $441 = $z3;
  $442 = (($440) + ($441))|0;
  $443 = $tmp0;
  $444 = ($443*14043)|0;
  $445 = (($442) - ($444))|0;
  $446 = $tmp2;
  $447 = ($446*6835)|0;
  $448 = (($445) - ($447))|0;
  $449 = (($448) + 16384)|0;
  $450 = $449 >> 15;
  $451 = $dataptr;
  $452 = (($451) + 192|0);
  HEAP32[$452>>2] = $450;
  $453 = $tmp10;
  $454 = $tmp11;
  $455 = (($453) + ($454))|0;
  $456 = ($455*11148)|0;
  $tmp1 = $456;
  $457 = $tmp10;
  $458 = $tmp12;
  $459 = (($457) + ($458))|0;
  $460 = ($459*9262)|0;
  $tmp2 = $460;
  $461 = $tmp10;
  $462 = $tmp13;
  $463 = (($461) + ($462))|0;
  $464 = ($463*6626)|0;
  $tmp3 = $464;
  $465 = $tmp1;
  $466 = $tmp2;
  $467 = (($465) + ($466))|0;
  $468 = $tmp3;
  $469 = (($467) + ($468))|0;
  $470 = $tmp10;
  $471 = ($470*14905)|0;
  $472 = (($469) - ($471))|0;
  $473 = $tmp14;
  $474 = ($473*3453)|0;
  $475 = (($472) + ($474))|0;
  $tmp0 = $475;
  $476 = $tmp11;
  $477 = $tmp12;
  $478 = (($476) + ($477))|0;
  $479 = Math_imul($478, -6626)|0;
  $tmp4 = $479;
  $480 = $tmp11;
  $481 = $tmp13;
  $482 = (($480) + ($481))|0;
  $483 = Math_imul($482, -12131)|0;
  $tmp5 = $483;
  $484 = $tmp4;
  $485 = $tmp5;
  $486 = (($484) + ($485))|0;
  $487 = $tmp11;
  $488 = ($487*11061)|0;
  $489 = (($486) + ($488))|0;
  $490 = $tmp14;
  $491 = ($490*9262)|0;
  $492 = (($489) - ($491))|0;
  $493 = $tmp1;
  $494 = (($493) + ($492))|0;
  $tmp1 = $494;
  $495 = $tmp12;
  $496 = $tmp13;
  $497 = (($495) + ($496))|0;
  $498 = ($497*3453)|0;
  $tmp10 = $498;
  $499 = $tmp4;
  $500 = $tmp10;
  $501 = (($499) + ($500))|0;
  $502 = $tmp12;
  $503 = ($502*17237)|0;
  $504 = (($501) - ($503))|0;
  $505 = $tmp14;
  $506 = ($505*12131)|0;
  $507 = (($504) + ($506))|0;
  $508 = $tmp2;
  $509 = (($508) + ($507))|0;
  $tmp2 = $509;
  $510 = $tmp5;
  $511 = $tmp10;
  $512 = (($510) + ($511))|0;
  $513 = $tmp13;
  $514 = ($513*11314)|0;
  $515 = (($512) + ($514))|0;
  $516 = $tmp14;
  $517 = ($516*11148)|0;
  $518 = (($515) - ($517))|0;
  $519 = $tmp3;
  $520 = (($519) + ($518))|0;
  $tmp3 = $520;
  $521 = $tmp0;
  $522 = (($521) + 16384)|0;
  $523 = $522 >> 15;
  $524 = $dataptr;
  $525 = (($524) + 32|0);
  HEAP32[$525>>2] = $523;
  $526 = $tmp1;
  $527 = (($526) + 16384)|0;
  $528 = $527 >> 15;
  $529 = $dataptr;
  $530 = (($529) + 96|0);
  HEAP32[$530>>2] = $528;
  $531 = $tmp2;
  $532 = (($531) + 16384)|0;
  $533 = $532 >> 15;
  $534 = $dataptr;
  $535 = (($534) + 160|0);
  HEAP32[$535>>2] = $533;
  $536 = $tmp3;
  $537 = (($536) + 16384)|0;
  $538 = $537 >> 15;
  $539 = $dataptr;
  $540 = (($539) + 224|0);
  HEAP32[$540>>2] = $538;
  $541 = $dataptr;
  $542 = (($541) + 4|0);
  $dataptr = $542;
  $543 = $wsptr;
  $544 = (($543) + 4|0);
  $wsptr = $544;
  $545 = $ctr;
  $546 = (($545) + -1)|0;
  $ctr = $546;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_12x12($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0;
 var $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $workspace = 0, $wsptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (($7) + ($8)|0);
  $elemptr = $9;
  $10 = $elemptr;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $elemptr;
  $14 = (($13) + 11|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($12) + ($16))|0;
  $tmp0 = $17;
  $18 = $elemptr;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $elemptr;
  $23 = (($22) + 10|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $tmp1 = $26;
  $27 = $elemptr;
  $28 = (($27) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $elemptr;
  $32 = (($31) + 9|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($30) + ($34))|0;
  $tmp2 = $35;
  $36 = $elemptr;
  $37 = (($36) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $elemptr;
  $41 = (($40) + 8|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($39) + ($43))|0;
  $tmp3 = $44;
  $45 = $elemptr;
  $46 = (($45) + 4|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $elemptr;
  $50 = (($49) + 7|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (($48) + ($52))|0;
  $tmp4 = $53;
  $54 = $elemptr;
  $55 = (($54) + 5|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $elemptr;
  $59 = (($58) + 6|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (($57) + ($61))|0;
  $tmp5 = $62;
  $63 = $tmp0;
  $64 = $tmp5;
  $65 = (($63) + ($64))|0;
  $tmp10 = $65;
  $66 = $tmp0;
  $67 = $tmp5;
  $68 = (($66) - ($67))|0;
  $tmp13 = $68;
  $69 = $tmp1;
  $70 = $tmp4;
  $71 = (($69) + ($70))|0;
  $tmp11 = $71;
  $72 = $tmp1;
  $73 = $tmp4;
  $74 = (($72) - ($73))|0;
  $tmp14 = $74;
  $75 = $tmp2;
  $76 = $tmp3;
  $77 = (($75) + ($76))|0;
  $tmp12 = $77;
  $78 = $tmp2;
  $79 = $tmp3;
  $80 = (($78) - ($79))|0;
  $tmp15 = $80;
  $81 = $elemptr;
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $84 = $elemptr;
  $85 = (($84) + 11|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = (($83) - ($87))|0;
  $tmp0 = $88;
  $89 = $elemptr;
  $90 = (($89) + 1|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $elemptr;
  $94 = (($93) + 10|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = (($92) - ($96))|0;
  $tmp1 = $97;
  $98 = $elemptr;
  $99 = (($98) + 2|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = $elemptr;
  $103 = (($102) + 9|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = (($101) - ($105))|0;
  $tmp2 = $106;
  $107 = $elemptr;
  $108 = (($107) + 3|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = $elemptr;
  $112 = (($111) + 8|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = (($110) - ($114))|0;
  $tmp3 = $115;
  $116 = $elemptr;
  $117 = (($116) + 4|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&255;
  $120 = $elemptr;
  $121 = (($120) + 7|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = (($119) - ($123))|0;
  $tmp4 = $124;
  $125 = $elemptr;
  $126 = (($125) + 5|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&255;
  $129 = $elemptr;
  $130 = (($129) + 6|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = (($128) - ($132))|0;
  $tmp5 = $133;
  $134 = $tmp10;
  $135 = $tmp11;
  $136 = (($134) + ($135))|0;
  $137 = $tmp12;
  $138 = (($136) + ($137))|0;
  $139 = (($138) - 1536)|0;
  $140 = $dataptr;
  HEAP32[$140>>2] = $139;
  $141 = $tmp13;
  $142 = $tmp14;
  $143 = (($141) - ($142))|0;
  $144 = $tmp15;
  $145 = (($143) - ($144))|0;
  $146 = $dataptr;
  $147 = (($146) + 24|0);
  HEAP32[$147>>2] = $145;
  $148 = $tmp10;
  $149 = $tmp12;
  $150 = (($148) - ($149))|0;
  $151 = ($150*10033)|0;
  $152 = (($151) + 4096)|0;
  $153 = $152 >> 13;
  $154 = $dataptr;
  $155 = (($154) + 16|0);
  HEAP32[$155>>2] = $153;
  $156 = $tmp14;
  $157 = $tmp15;
  $158 = (($156) - ($157))|0;
  $159 = $tmp13;
  $160 = $tmp15;
  $161 = (($159) + ($160))|0;
  $162 = ($161*11190)|0;
  $163 = (($158) + ($162))|0;
  $164 = (($163) + 4096)|0;
  $165 = $164 >> 13;
  $166 = $dataptr;
  $167 = (($166) + 8|0);
  HEAP32[$167>>2] = $165;
  $168 = $tmp1;
  $169 = $tmp4;
  $170 = (($168) + ($169))|0;
  $171 = ($170*4433)|0;
  $tmp10 = $171;
  $172 = $tmp10;
  $173 = $tmp1;
  $174 = ($173*6270)|0;
  $175 = (($172) + ($174))|0;
  $tmp14 = $175;
  $176 = $tmp10;
  $177 = $tmp4;
  $178 = ($177*15137)|0;
  $179 = (($176) - ($178))|0;
  $tmp15 = $179;
  $180 = $tmp0;
  $181 = $tmp2;
  $182 = (($180) + ($181))|0;
  $183 = ($182*9191)|0;
  $tmp12 = $183;
  $184 = $tmp0;
  $185 = $tmp3;
  $186 = (($184) + ($185))|0;
  $187 = ($186*7053)|0;
  $tmp13 = $187;
  $188 = $tmp12;
  $189 = $tmp13;
  $190 = (($188) + ($189))|0;
  $191 = $tmp14;
  $192 = (($190) + ($191))|0;
  $193 = $tmp0;
  $194 = ($193*4758)|0;
  $195 = (($192) - ($194))|0;
  $196 = $tmp5;
  $197 = ($196*1512)|0;
  $198 = (($195) + ($197))|0;
  $tmp10 = $198;
  $199 = $tmp2;
  $200 = $tmp3;
  $201 = (($199) + ($200))|0;
  $202 = Math_imul($201, -1512)|0;
  $tmp11 = $202;
  $203 = $tmp11;
  $204 = $tmp15;
  $205 = (($203) - ($204))|0;
  $206 = $tmp2;
  $207 = ($206*19165)|0;
  $208 = (($205) - ($207))|0;
  $209 = $tmp5;
  $210 = ($209*7053)|0;
  $211 = (($208) + ($210))|0;
  $212 = $tmp12;
  $213 = (($212) + ($211))|0;
  $tmp12 = $213;
  $214 = $tmp11;
  $215 = $tmp14;
  $216 = (($214) - ($215))|0;
  $217 = $tmp3;
  $218 = ($217*5946)|0;
  $219 = (($216) + ($218))|0;
  $220 = $tmp5;
  $221 = ($220*9191)|0;
  $222 = (($219) - ($221))|0;
  $223 = $tmp13;
  $224 = (($223) + ($222))|0;
  $tmp13 = $224;
  $225 = $tmp15;
  $226 = $tmp0;
  $227 = $tmp3;
  $228 = (($226) - ($227))|0;
  $229 = ($228*10703)|0;
  $230 = (($225) + ($229))|0;
  $231 = $tmp2;
  $232 = $tmp5;
  $233 = (($231) + ($232))|0;
  $234 = ($233*4433)|0;
  $235 = (($230) - ($234))|0;
  $tmp11 = $235;
  $236 = $tmp10;
  $237 = (($236) + 4096)|0;
  $238 = $237 >> 13;
  $239 = $dataptr;
  $240 = (($239) + 4|0);
  HEAP32[$240>>2] = $238;
  $241 = $tmp11;
  $242 = (($241) + 4096)|0;
  $243 = $242 >> 13;
  $244 = $dataptr;
  $245 = (($244) + 12|0);
  HEAP32[$245>>2] = $243;
  $246 = $tmp12;
  $247 = (($246) + 4096)|0;
  $248 = $247 >> 13;
  $249 = $dataptr;
  $250 = (($249) + 20|0);
  HEAP32[$250>>2] = $248;
  $251 = $tmp13;
  $252 = (($251) + 4096)|0;
  $253 = $252 >> 13;
  $254 = $dataptr;
  $255 = (($254) + 28|0);
  HEAP32[$255>>2] = $253;
  $256 = $ctr;
  $257 = (($256) + 1)|0;
  $ctr = $257;
  $258 = $ctr;
  $259 = ($258|0)!=(8);
  if ($259) {
   $260 = $ctr;
   $261 = ($260|0)==(12);
   if ($261) {
    break;
   }
   $262 = $dataptr;
   $263 = (($262) + 32|0);
   $dataptr = $263;
  } else {
   $dataptr = $workspace;
  }
 }
 $264 = $0;
 $dataptr = $264;
 $wsptr = $workspace;
 $ctr = 7;
 while(1) {
  $265 = $ctr;
  $266 = ($265|0)>=(0);
  if (!($266)) {
   break;
  }
  $267 = $dataptr;
  $268 = HEAP32[$267>>2]|0;
  $269 = $wsptr;
  $270 = (($269) + 96|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = (($268) + ($271))|0;
  $tmp0 = $272;
  $273 = $dataptr;
  $274 = (($273) + 32|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = $wsptr;
  $277 = (($276) + 64|0);
  $278 = HEAP32[$277>>2]|0;
  $279 = (($275) + ($278))|0;
  $tmp1 = $279;
  $280 = $dataptr;
  $281 = (($280) + 64|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = $wsptr;
  $284 = (($283) + 32|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = (($282) + ($285))|0;
  $tmp2 = $286;
  $287 = $dataptr;
  $288 = (($287) + 96|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = $wsptr;
  $291 = HEAP32[$290>>2]|0;
  $292 = (($289) + ($291))|0;
  $tmp3 = $292;
  $293 = $dataptr;
  $294 = (($293) + 128|0);
  $295 = HEAP32[$294>>2]|0;
  $296 = $dataptr;
  $297 = (($296) + 224|0);
  $298 = HEAP32[$297>>2]|0;
  $299 = (($295) + ($298))|0;
  $tmp4 = $299;
  $300 = $dataptr;
  $301 = (($300) + 160|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = $dataptr;
  $304 = (($303) + 192|0);
  $305 = HEAP32[$304>>2]|0;
  $306 = (($302) + ($305))|0;
  $tmp5 = $306;
  $307 = $tmp0;
  $308 = $tmp5;
  $309 = (($307) + ($308))|0;
  $tmp10 = $309;
  $310 = $tmp0;
  $311 = $tmp5;
  $312 = (($310) - ($311))|0;
  $tmp13 = $312;
  $313 = $tmp1;
  $314 = $tmp4;
  $315 = (($313) + ($314))|0;
  $tmp11 = $315;
  $316 = $tmp1;
  $317 = $tmp4;
  $318 = (($316) - ($317))|0;
  $tmp14 = $318;
  $319 = $tmp2;
  $320 = $tmp3;
  $321 = (($319) + ($320))|0;
  $tmp12 = $321;
  $322 = $tmp2;
  $323 = $tmp3;
  $324 = (($322) - ($323))|0;
  $tmp15 = $324;
  $325 = $dataptr;
  $326 = HEAP32[$325>>2]|0;
  $327 = $wsptr;
  $328 = (($327) + 96|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = (($326) - ($329))|0;
  $tmp0 = $330;
  $331 = $dataptr;
  $332 = (($331) + 32|0);
  $333 = HEAP32[$332>>2]|0;
  $334 = $wsptr;
  $335 = (($334) + 64|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = (($333) - ($336))|0;
  $tmp1 = $337;
  $338 = $dataptr;
  $339 = (($338) + 64|0);
  $340 = HEAP32[$339>>2]|0;
  $341 = $wsptr;
  $342 = (($341) + 32|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = (($340) - ($343))|0;
  $tmp2 = $344;
  $345 = $dataptr;
  $346 = (($345) + 96|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = $wsptr;
  $349 = HEAP32[$348>>2]|0;
  $350 = (($347) - ($349))|0;
  $tmp3 = $350;
  $351 = $dataptr;
  $352 = (($351) + 128|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = $dataptr;
  $355 = (($354) + 224|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = (($353) - ($356))|0;
  $tmp4 = $357;
  $358 = $dataptr;
  $359 = (($358) + 160|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = $dataptr;
  $362 = (($361) + 192|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = (($360) - ($363))|0;
  $tmp5 = $364;
  $365 = $tmp10;
  $366 = $tmp11;
  $367 = (($365) + ($366))|0;
  $368 = $tmp12;
  $369 = (($367) + ($368))|0;
  $370 = ($369*7282)|0;
  $371 = (($370) + 8192)|0;
  $372 = $371 >> 14;
  $373 = $dataptr;
  HEAP32[$373>>2] = $372;
  $374 = $tmp13;
  $375 = $tmp14;
  $376 = (($374) - ($375))|0;
  $377 = $tmp15;
  $378 = (($376) - ($377))|0;
  $379 = ($378*7282)|0;
  $380 = (($379) + 8192)|0;
  $381 = $380 >> 14;
  $382 = $dataptr;
  $383 = (($382) + 192|0);
  HEAP32[$383>>2] = $381;
  $384 = $tmp10;
  $385 = $tmp12;
  $386 = (($384) - ($385))|0;
  $387 = ($386*8918)|0;
  $388 = (($387) + 8192)|0;
  $389 = $388 >> 14;
  $390 = $dataptr;
  $391 = (($390) + 128|0);
  HEAP32[$391>>2] = $389;
  $392 = $tmp14;
  $393 = $tmp15;
  $394 = (($392) - ($393))|0;
  $395 = ($394*7282)|0;
  $396 = $tmp13;
  $397 = $tmp15;
  $398 = (($396) + ($397))|0;
  $399 = ($398*9947)|0;
  $400 = (($395) + ($399))|0;
  $401 = (($400) + 8192)|0;
  $402 = $401 >> 14;
  $403 = $dataptr;
  $404 = (($403) + 64|0);
  HEAP32[$404>>2] = $402;
  $405 = $tmp1;
  $406 = $tmp4;
  $407 = (($405) + ($406))|0;
  $408 = ($407*3941)|0;
  $tmp10 = $408;
  $409 = $tmp10;
  $410 = $tmp1;
  $411 = ($410*5573)|0;
  $412 = (($409) + ($411))|0;
  $tmp14 = $412;
  $413 = $tmp10;
  $414 = $tmp4;
  $415 = ($414*13455)|0;
  $416 = (($413) - ($415))|0;
  $tmp15 = $416;
  $417 = $tmp0;
  $418 = $tmp2;
  $419 = (($417) + ($418))|0;
  $420 = ($419*8170)|0;
  $tmp12 = $420;
  $421 = $tmp0;
  $422 = $tmp3;
  $423 = (($421) + ($422))|0;
  $424 = ($423*6269)|0;
  $tmp13 = $424;
  $425 = $tmp12;
  $426 = $tmp13;
  $427 = (($425) + ($426))|0;
  $428 = $tmp14;
  $429 = (($427) + ($428))|0;
  $430 = $tmp0;
  $431 = ($430*4229)|0;
  $432 = (($429) - ($431))|0;
  $433 = $tmp5;
  $434 = ($433*1344)|0;
  $435 = (($432) + ($434))|0;
  $tmp10 = $435;
  $436 = $tmp2;
  $437 = $tmp3;
  $438 = (($436) + ($437))|0;
  $439 = Math_imul($438, -1344)|0;
  $tmp11 = $439;
  $440 = $tmp11;
  $441 = $tmp15;
  $442 = (($440) - ($441))|0;
  $443 = $tmp2;
  $444 = ($443*17036)|0;
  $445 = (($442) - ($444))|0;
  $446 = $tmp5;
  $447 = ($446*6269)|0;
  $448 = (($445) + ($447))|0;
  $449 = $tmp12;
  $450 = (($449) + ($448))|0;
  $tmp12 = $450;
  $451 = $tmp11;
  $452 = $tmp14;
  $453 = (($451) - ($452))|0;
  $454 = $tmp3;
  $455 = ($454*5285)|0;
  $456 = (($453) + ($455))|0;
  $457 = $tmp5;
  $458 = ($457*8170)|0;
  $459 = (($456) - ($458))|0;
  $460 = $tmp13;
  $461 = (($460) + ($459))|0;
  $tmp13 = $461;
  $462 = $tmp15;
  $463 = $tmp0;
  $464 = $tmp3;
  $465 = (($463) - ($464))|0;
  $466 = ($465*9514)|0;
  $467 = (($462) + ($466))|0;
  $468 = $tmp2;
  $469 = $tmp5;
  $470 = (($468) + ($469))|0;
  $471 = ($470*3941)|0;
  $472 = (($467) - ($471))|0;
  $tmp11 = $472;
  $473 = $tmp10;
  $474 = (($473) + 8192)|0;
  $475 = $474 >> 14;
  $476 = $dataptr;
  $477 = (($476) + 32|0);
  HEAP32[$477>>2] = $475;
  $478 = $tmp11;
  $479 = (($478) + 8192)|0;
  $480 = $479 >> 14;
  $481 = $dataptr;
  $482 = (($481) + 96|0);
  HEAP32[$482>>2] = $480;
  $483 = $tmp12;
  $484 = (($483) + 8192)|0;
  $485 = $484 >> 14;
  $486 = $dataptr;
  $487 = (($486) + 160|0);
  HEAP32[$487>>2] = $485;
  $488 = $tmp13;
  $489 = (($488) + 8192)|0;
  $490 = $489 >> 14;
  $491 = $dataptr;
  $492 = (($491) + 224|0);
  HEAP32[$492>>2] = $490;
  $493 = $dataptr;
  $494 = (($493) + 4|0);
  $dataptr = $494;
  $495 = $wsptr;
  $496 = (($495) + 4|0);
  $wsptr = $496;
  $497 = $ctr;
  $498 = (($497) + -1)|0;
  $ctr = $498;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_13x13($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0;
 var $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $tmp6 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (($7) + ($8)|0);
  $elemptr = $9;
  $10 = $elemptr;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $elemptr;
  $14 = (($13) + 12|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($12) + ($16))|0;
  $tmp0 = $17;
  $18 = $elemptr;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $elemptr;
  $23 = (($22) + 11|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $tmp1 = $26;
  $27 = $elemptr;
  $28 = (($27) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $elemptr;
  $32 = (($31) + 10|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($30) + ($34))|0;
  $tmp2 = $35;
  $36 = $elemptr;
  $37 = (($36) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $elemptr;
  $41 = (($40) + 9|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($39) + ($43))|0;
  $tmp3 = $44;
  $45 = $elemptr;
  $46 = (($45) + 4|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $elemptr;
  $50 = (($49) + 8|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (($48) + ($52))|0;
  $tmp4 = $53;
  $54 = $elemptr;
  $55 = (($54) + 5|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $elemptr;
  $59 = (($58) + 7|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (($57) + ($61))|0;
  $tmp5 = $62;
  $63 = $elemptr;
  $64 = (($63) + 6|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $tmp6 = $66;
  $67 = $elemptr;
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = $elemptr;
  $71 = (($70) + 12|0);
  $72 = HEAP8[$71>>0]|0;
  $73 = $72&255;
  $74 = (($69) - ($73))|0;
  $tmp10 = $74;
  $75 = $elemptr;
  $76 = (($75) + 1|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $elemptr;
  $80 = (($79) + 11|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = (($78) - ($82))|0;
  $tmp11 = $83;
  $84 = $elemptr;
  $85 = (($84) + 2|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $elemptr;
  $89 = (($88) + 10|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = (($87) - ($91))|0;
  $tmp12 = $92;
  $93 = $elemptr;
  $94 = (($93) + 3|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = $elemptr;
  $98 = (($97) + 9|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = (($96) - ($100))|0;
  $tmp13 = $101;
  $102 = $elemptr;
  $103 = (($102) + 4|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = $elemptr;
  $107 = (($106) + 8|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = (($105) - ($109))|0;
  $tmp14 = $110;
  $111 = $elemptr;
  $112 = (($111) + 5|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = $elemptr;
  $116 = (($115) + 7|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (($114) - ($118))|0;
  $tmp15 = $119;
  $120 = $tmp0;
  $121 = $tmp1;
  $122 = (($120) + ($121))|0;
  $123 = $tmp2;
  $124 = (($122) + ($123))|0;
  $125 = $tmp3;
  $126 = (($124) + ($125))|0;
  $127 = $tmp4;
  $128 = (($126) + ($127))|0;
  $129 = $tmp5;
  $130 = (($128) + ($129))|0;
  $131 = $tmp6;
  $132 = (($130) + ($131))|0;
  $133 = (($132) - 1664)|0;
  $134 = $dataptr;
  HEAP32[$134>>2] = $133;
  $135 = $tmp6;
  $136 = $tmp6;
  $137 = (($136) + ($135))|0;
  $tmp6 = $137;
  $138 = $tmp6;
  $139 = $tmp0;
  $140 = (($139) - ($138))|0;
  $tmp0 = $140;
  $141 = $tmp6;
  $142 = $tmp1;
  $143 = (($142) - ($141))|0;
  $tmp1 = $143;
  $144 = $tmp6;
  $145 = $tmp2;
  $146 = (($145) - ($144))|0;
  $tmp2 = $146;
  $147 = $tmp6;
  $148 = $tmp3;
  $149 = (($148) - ($147))|0;
  $tmp3 = $149;
  $150 = $tmp6;
  $151 = $tmp4;
  $152 = (($151) - ($150))|0;
  $tmp4 = $152;
  $153 = $tmp6;
  $154 = $tmp5;
  $155 = (($154) - ($153))|0;
  $tmp5 = $155;
  $156 = $tmp0;
  $157 = ($156*11249)|0;
  $158 = $tmp1;
  $159 = ($158*8672)|0;
  $160 = (($157) + ($159))|0;
  $161 = $tmp2;
  $162 = ($161*4108)|0;
  $163 = (($160) + ($162))|0;
  $164 = $tmp3;
  $165 = ($164*1396)|0;
  $166 = (($163) - ($165))|0;
  $167 = $tmp4;
  $168 = ($167*6581)|0;
  $169 = (($166) - ($168))|0;
  $170 = $tmp5;
  $171 = ($170*10258)|0;
  $172 = (($169) - ($171))|0;
  $173 = (($172) + 4096)|0;
  $174 = $173 >> 13;
  $175 = $dataptr;
  $176 = (($175) + 8|0);
  HEAP32[$176>>2] = $174;
  $177 = $tmp0;
  $178 = $tmp2;
  $179 = (($177) - ($178))|0;
  $180 = ($179*9465)|0;
  $181 = $tmp3;
  $182 = $tmp4;
  $183 = (($181) - ($182))|0;
  $184 = ($183*3570)|0;
  $185 = (($180) - ($184))|0;
  $186 = $tmp1;
  $187 = $tmp5;
  $188 = (($186) - ($187))|0;
  $189 = ($188*2592)|0;
  $190 = (($185) - ($189))|0;
  $z1 = $190;
  $191 = $tmp0;
  $192 = $tmp2;
  $193 = (($191) + ($192))|0;
  $194 = ($193*793)|0;
  $195 = $tmp3;
  $196 = $tmp4;
  $197 = (($195) + ($196))|0;
  $198 = ($197*7678)|0;
  $199 = (($194) - ($198))|0;
  $200 = $tmp1;
  $201 = $tmp5;
  $202 = (($200) + ($201))|0;
  $203 = ($202*3989)|0;
  $204 = (($199) + ($203))|0;
  $z2 = $204;
  $205 = $z1;
  $206 = $z2;
  $207 = (($205) + ($206))|0;
  $208 = (($207) + 4096)|0;
  $209 = $208 >> 13;
  $210 = $dataptr;
  $211 = (($210) + 16|0);
  HEAP32[$211>>2] = $209;
  $212 = $z1;
  $213 = $z2;
  $214 = (($212) - ($213))|0;
  $215 = (($214) + 4096)|0;
  $216 = $215 >> 13;
  $217 = $dataptr;
  $218 = (($217) + 24|0);
  HEAP32[$218>>2] = $216;
  $219 = $tmp10;
  $220 = $tmp11;
  $221 = (($219) + ($220))|0;
  $222 = ($221*10832)|0;
  $tmp1 = $222;
  $223 = $tmp10;
  $224 = $tmp12;
  $225 = (($223) + ($224))|0;
  $226 = ($225*9534)|0;
  $tmp2 = $226;
  $227 = $tmp10;
  $228 = $tmp13;
  $229 = (($227) + ($228))|0;
  $230 = ($229*7682)|0;
  $231 = $tmp14;
  $232 = $tmp15;
  $233 = (($231) + ($232))|0;
  $234 = ($233*2773)|0;
  $235 = (($230) + ($234))|0;
  $tmp3 = $235;
  $236 = $tmp1;
  $237 = $tmp2;
  $238 = (($236) + ($237))|0;
  $239 = $tmp3;
  $240 = (($238) + ($239))|0;
  $241 = $tmp10;
  $242 = ($241*16549)|0;
  $243 = (($240) - ($242))|0;
  $244 = $tmp14;
  $245 = ($244*2611)|0;
  $246 = (($243) + ($245))|0;
  $tmp0 = $246;
  $247 = $tmp14;
  $248 = $tmp15;
  $249 = (($247) - ($248))|0;
  $250 = ($249*7682)|0;
  $251 = $tmp11;
  $252 = $tmp12;
  $253 = (($251) + ($252))|0;
  $254 = ($253*2773)|0;
  $255 = (($250) - ($254))|0;
  $tmp4 = $255;
  $256 = $tmp11;
  $257 = $tmp13;
  $258 = (($256) + ($257))|0;
  $259 = Math_imul($258, -9534)|0;
  $tmp5 = $259;
  $260 = $tmp4;
  $261 = $tmp5;
  $262 = (($260) + ($261))|0;
  $263 = $tmp11;
  $264 = ($263*6859)|0;
  $265 = (($262) + ($264))|0;
  $266 = $tmp14;
  $267 = ($266*19183)|0;
  $268 = (($265) - ($267))|0;
  $269 = $tmp1;
  $270 = (($269) + ($268))|0;
  $tmp1 = $270;
  $271 = $tmp12;
  $272 = $tmp13;
  $273 = (($271) + ($272))|0;
  $274 = Math_imul($273, -5384)|0;
  $tmp6 = $274;
  $275 = $tmp4;
  $276 = $tmp6;
  $277 = (($275) + ($276))|0;
  $278 = $tmp12;
  $279 = ($278*12879)|0;
  $280 = (($277) - ($279))|0;
  $281 = $tmp15;
  $282 = ($281*18515)|0;
  $283 = (($280) + ($282))|0;
  $284 = $tmp2;
  $285 = (($284) + ($283))|0;
  $tmp2 = $285;
  $286 = $tmp5;
  $287 = $tmp6;
  $288 = (($286) + ($287))|0;
  $289 = $tmp13;
  $290 = ($289*18068)|0;
  $291 = (($288) + ($290))|0;
  $292 = $tmp15;
  $293 = ($292*14273)|0;
  $294 = (($291) - ($293))|0;
  $295 = $tmp3;
  $296 = (($295) + ($294))|0;
  $tmp3 = $296;
  $297 = $tmp0;
  $298 = (($297) + 4096)|0;
  $299 = $298 >> 13;
  $300 = $dataptr;
  $301 = (($300) + 4|0);
  HEAP32[$301>>2] = $299;
  $302 = $tmp1;
  $303 = (($302) + 4096)|0;
  $304 = $303 >> 13;
  $305 = $dataptr;
  $306 = (($305) + 12|0);
  HEAP32[$306>>2] = $304;
  $307 = $tmp2;
  $308 = (($307) + 4096)|0;
  $309 = $308 >> 13;
  $310 = $dataptr;
  $311 = (($310) + 20|0);
  HEAP32[$311>>2] = $309;
  $312 = $tmp3;
  $313 = (($312) + 4096)|0;
  $314 = $313 >> 13;
  $315 = $dataptr;
  $316 = (($315) + 28|0);
  HEAP32[$316>>2] = $314;
  $317 = $ctr;
  $318 = (($317) + 1)|0;
  $ctr = $318;
  $319 = $ctr;
  $320 = ($319|0)!=(8);
  if ($320) {
   $321 = $ctr;
   $322 = ($321|0)==(13);
   if ($322) {
    break;
   }
   $323 = $dataptr;
   $324 = (($323) + 32|0);
   $dataptr = $324;
  } else {
   $dataptr = $workspace;
  }
 }
 $325 = $0;
 $dataptr = $325;
 $wsptr = $workspace;
 $ctr = 7;
 while(1) {
  $326 = $ctr;
  $327 = ($326|0)>=(0);
  if (!($327)) {
   break;
  }
  $328 = $dataptr;
  $329 = HEAP32[$328>>2]|0;
  $330 = $wsptr;
  $331 = (($330) + 128|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = (($329) + ($332))|0;
  $tmp0 = $333;
  $334 = $dataptr;
  $335 = (($334) + 32|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = $wsptr;
  $338 = (($337) + 96|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = (($336) + ($339))|0;
  $tmp1 = $340;
  $341 = $dataptr;
  $342 = (($341) + 64|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = $wsptr;
  $345 = (($344) + 64|0);
  $346 = HEAP32[$345>>2]|0;
  $347 = (($343) + ($346))|0;
  $tmp2 = $347;
  $348 = $dataptr;
  $349 = (($348) + 96|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = $wsptr;
  $352 = (($351) + 32|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = (($350) + ($353))|0;
  $tmp3 = $354;
  $355 = $dataptr;
  $356 = (($355) + 128|0);
  $357 = HEAP32[$356>>2]|0;
  $358 = $wsptr;
  $359 = HEAP32[$358>>2]|0;
  $360 = (($357) + ($359))|0;
  $tmp4 = $360;
  $361 = $dataptr;
  $362 = (($361) + 160|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = $dataptr;
  $365 = (($364) + 224|0);
  $366 = HEAP32[$365>>2]|0;
  $367 = (($363) + ($366))|0;
  $tmp5 = $367;
  $368 = $dataptr;
  $369 = (($368) + 192|0);
  $370 = HEAP32[$369>>2]|0;
  $tmp6 = $370;
  $371 = $dataptr;
  $372 = HEAP32[$371>>2]|0;
  $373 = $wsptr;
  $374 = (($373) + 128|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = (($372) - ($375))|0;
  $tmp10 = $376;
  $377 = $dataptr;
  $378 = (($377) + 32|0);
  $379 = HEAP32[$378>>2]|0;
  $380 = $wsptr;
  $381 = (($380) + 96|0);
  $382 = HEAP32[$381>>2]|0;
  $383 = (($379) - ($382))|0;
  $tmp11 = $383;
  $384 = $dataptr;
  $385 = (($384) + 64|0);
  $386 = HEAP32[$385>>2]|0;
  $387 = $wsptr;
  $388 = (($387) + 64|0);
  $389 = HEAP32[$388>>2]|0;
  $390 = (($386) - ($389))|0;
  $tmp12 = $390;
  $391 = $dataptr;
  $392 = (($391) + 96|0);
  $393 = HEAP32[$392>>2]|0;
  $394 = $wsptr;
  $395 = (($394) + 32|0);
  $396 = HEAP32[$395>>2]|0;
  $397 = (($393) - ($396))|0;
  $tmp13 = $397;
  $398 = $dataptr;
  $399 = (($398) + 128|0);
  $400 = HEAP32[$399>>2]|0;
  $401 = $wsptr;
  $402 = HEAP32[$401>>2]|0;
  $403 = (($400) - ($402))|0;
  $tmp14 = $403;
  $404 = $dataptr;
  $405 = (($404) + 160|0);
  $406 = HEAP32[$405>>2]|0;
  $407 = $dataptr;
  $408 = (($407) + 224|0);
  $409 = HEAP32[$408>>2]|0;
  $410 = (($406) - ($409))|0;
  $tmp15 = $410;
  $411 = $tmp0;
  $412 = $tmp1;
  $413 = (($411) + ($412))|0;
  $414 = $tmp2;
  $415 = (($413) + ($414))|0;
  $416 = $tmp3;
  $417 = (($415) + ($416))|0;
  $418 = $tmp4;
  $419 = (($417) + ($418))|0;
  $420 = $tmp5;
  $421 = (($419) + ($420))|0;
  $422 = $tmp6;
  $423 = (($421) + ($422))|0;
  $424 = ($423*6205)|0;
  $425 = (($424) + 8192)|0;
  $426 = $425 >> 14;
  $427 = $dataptr;
  HEAP32[$427>>2] = $426;
  $428 = $tmp6;
  $429 = $tmp6;
  $430 = (($429) + ($428))|0;
  $tmp6 = $430;
  $431 = $tmp6;
  $432 = $tmp0;
  $433 = (($432) - ($431))|0;
  $tmp0 = $433;
  $434 = $tmp6;
  $435 = $tmp1;
  $436 = (($435) - ($434))|0;
  $tmp1 = $436;
  $437 = $tmp6;
  $438 = $tmp2;
  $439 = (($438) - ($437))|0;
  $tmp2 = $439;
  $440 = $tmp6;
  $441 = $tmp3;
  $442 = (($441) - ($440))|0;
  $tmp3 = $442;
  $443 = $tmp6;
  $444 = $tmp4;
  $445 = (($444) - ($443))|0;
  $tmp4 = $445;
  $446 = $tmp6;
  $447 = $tmp5;
  $448 = (($447) - ($446))|0;
  $tmp5 = $448;
  $449 = $tmp0;
  $450 = ($449*8520)|0;
  $451 = $tmp1;
  $452 = ($451*6568)|0;
  $453 = (($450) + ($452))|0;
  $454 = $tmp2;
  $455 = ($454*3112)|0;
  $456 = (($453) + ($455))|0;
  $457 = $tmp3;
  $458 = ($457*1058)|0;
  $459 = (($456) - ($458))|0;
  $460 = $tmp4;
  $461 = ($460*4985)|0;
  $462 = (($459) - ($461))|0;
  $463 = $tmp5;
  $464 = ($463*7770)|0;
  $465 = (($462) - ($464))|0;
  $466 = (($465) + 8192)|0;
  $467 = $466 >> 14;
  $468 = $dataptr;
  $469 = (($468) + 64|0);
  HEAP32[$469>>2] = $467;
  $470 = $tmp0;
  $471 = $tmp2;
  $472 = (($470) - ($471))|0;
  $473 = ($472*7169)|0;
  $474 = $tmp3;
  $475 = $tmp4;
  $476 = (($474) - ($475))|0;
  $477 = ($476*2704)|0;
  $478 = (($473) - ($477))|0;
  $479 = $tmp1;
  $480 = $tmp5;
  $481 = (($479) - ($480))|0;
  $482 = ($481*1963)|0;
  $483 = (($478) - ($482))|0;
  $z1 = $483;
  $484 = $tmp0;
  $485 = $tmp2;
  $486 = (($484) + ($485))|0;
  $487 = ($486*601)|0;
  $488 = $tmp3;
  $489 = $tmp4;
  $490 = (($488) + ($489))|0;
  $491 = ($490*5816)|0;
  $492 = (($487) - ($491))|0;
  $493 = $tmp1;
  $494 = $tmp5;
  $495 = (($493) + ($494))|0;
  $496 = ($495*3021)|0;
  $497 = (($492) + ($496))|0;
  $z2 = $497;
  $498 = $z1;
  $499 = $z2;
  $500 = (($498) + ($499))|0;
  $501 = (($500) + 8192)|0;
  $502 = $501 >> 14;
  $503 = $dataptr;
  $504 = (($503) + 128|0);
  HEAP32[$504>>2] = $502;
  $505 = $z1;
  $506 = $z2;
  $507 = (($505) - ($506))|0;
  $508 = (($507) + 8192)|0;
  $509 = $508 >> 14;
  $510 = $dataptr;
  $511 = (($510) + 192|0);
  HEAP32[$511>>2] = $509;
  $512 = $tmp10;
  $513 = $tmp11;
  $514 = (($512) + ($513))|0;
  $515 = ($514*8204)|0;
  $tmp1 = $515;
  $516 = $tmp10;
  $517 = $tmp12;
  $518 = (($516) + ($517))|0;
  $519 = ($518*7221)|0;
  $tmp2 = $519;
  $520 = $tmp10;
  $521 = $tmp13;
  $522 = (($520) + ($521))|0;
  $523 = ($522*5819)|0;
  $524 = $tmp14;
  $525 = $tmp15;
  $526 = (($524) + ($525))|0;
  $527 = ($526*2100)|0;
  $528 = (($523) + ($527))|0;
  $tmp3 = $528;
  $529 = $tmp1;
  $530 = $tmp2;
  $531 = (($529) + ($530))|0;
  $532 = $tmp3;
  $533 = (($531) + ($532))|0;
  $534 = $tmp10;
  $535 = ($534*12534)|0;
  $536 = (($533) - ($535))|0;
  $537 = $tmp14;
  $538 = ($537*1978)|0;
  $539 = (($536) + ($538))|0;
  $tmp0 = $539;
  $540 = $tmp14;
  $541 = $tmp15;
  $542 = (($540) - ($541))|0;
  $543 = ($542*5819)|0;
  $544 = $tmp11;
  $545 = $tmp12;
  $546 = (($544) + ($545))|0;
  $547 = ($546*2100)|0;
  $548 = (($543) - ($547))|0;
  $tmp4 = $548;
  $549 = $tmp11;
  $550 = $tmp13;
  $551 = (($549) + ($550))|0;
  $552 = Math_imul($551, -7221)|0;
  $tmp5 = $552;
  $553 = $tmp4;
  $554 = $tmp5;
  $555 = (($553) + ($554))|0;
  $556 = $tmp11;
  $557 = ($556*5195)|0;
  $558 = (($555) + ($557))|0;
  $559 = $tmp14;
  $560 = ($559*14529)|0;
  $561 = (($558) - ($560))|0;
  $562 = $tmp1;
  $563 = (($562) + ($561))|0;
  $tmp1 = $563;
  $564 = $tmp12;
  $565 = $tmp13;
  $566 = (($564) + ($565))|0;
  $567 = Math_imul($566, -4078)|0;
  $tmp6 = $567;
  $568 = $tmp4;
  $569 = $tmp6;
  $570 = (($568) + ($569))|0;
  $571 = $tmp12;
  $572 = ($571*9754)|0;
  $573 = (($570) - ($572))|0;
  $574 = $tmp15;
  $575 = ($574*14023)|0;
  $576 = (($573) + ($575))|0;
  $577 = $tmp2;
  $578 = (($577) + ($576))|0;
  $tmp2 = $578;
  $579 = $tmp5;
  $580 = $tmp6;
  $581 = (($579) + ($580))|0;
  $582 = $tmp13;
  $583 = ($582*13685)|0;
  $584 = (($581) + ($583))|0;
  $585 = $tmp15;
  $586 = ($585*10811)|0;
  $587 = (($584) - ($586))|0;
  $588 = $tmp3;
  $589 = (($588) + ($587))|0;
  $tmp3 = $589;
  $590 = $tmp0;
  $591 = (($590) + 8192)|0;
  $592 = $591 >> 14;
  $593 = $dataptr;
  $594 = (($593) + 32|0);
  HEAP32[$594>>2] = $592;
  $595 = $tmp1;
  $596 = (($595) + 8192)|0;
  $597 = $596 >> 14;
  $598 = $dataptr;
  $599 = (($598) + 96|0);
  HEAP32[$599>>2] = $597;
  $600 = $tmp2;
  $601 = (($600) + 8192)|0;
  $602 = $601 >> 14;
  $603 = $dataptr;
  $604 = (($603) + 160|0);
  HEAP32[$604>>2] = $602;
  $605 = $tmp3;
  $606 = (($605) + 8192)|0;
  $607 = $606 >> 14;
  $608 = $dataptr;
  $609 = (($608) + 224|0);
  HEAP32[$609>>2] = $607;
  $610 = $dataptr;
  $611 = (($610) + 4|0);
  $dataptr = $611;
  $612 = $wsptr;
  $613 = (($612) + 4|0);
  $wsptr = $613;
  $614 = $ctr;
  $615 = (($614) + -1)|0;
  $ctr = $615;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_14x14($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0;
 var $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp16 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $tmp6 = 0, $workspace = 0, $wsptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (($7) + ($8)|0);
  $elemptr = $9;
  $10 = $elemptr;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $elemptr;
  $14 = (($13) + 13|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($12) + ($16))|0;
  $tmp0 = $17;
  $18 = $elemptr;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $elemptr;
  $23 = (($22) + 12|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $tmp1 = $26;
  $27 = $elemptr;
  $28 = (($27) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $elemptr;
  $32 = (($31) + 11|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($30) + ($34))|0;
  $tmp2 = $35;
  $36 = $elemptr;
  $37 = (($36) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $elemptr;
  $41 = (($40) + 10|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($39) + ($43))|0;
  $tmp13 = $44;
  $45 = $elemptr;
  $46 = (($45) + 4|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $elemptr;
  $50 = (($49) + 9|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (($48) + ($52))|0;
  $tmp4 = $53;
  $54 = $elemptr;
  $55 = (($54) + 5|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $elemptr;
  $59 = (($58) + 8|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (($57) + ($61))|0;
  $tmp5 = $62;
  $63 = $elemptr;
  $64 = (($63) + 6|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $elemptr;
  $68 = (($67) + 7|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = (($66) + ($70))|0;
  $tmp6 = $71;
  $72 = $tmp0;
  $73 = $tmp6;
  $74 = (($72) + ($73))|0;
  $tmp10 = $74;
  $75 = $tmp0;
  $76 = $tmp6;
  $77 = (($75) - ($76))|0;
  $tmp14 = $77;
  $78 = $tmp1;
  $79 = $tmp5;
  $80 = (($78) + ($79))|0;
  $tmp11 = $80;
  $81 = $tmp1;
  $82 = $tmp5;
  $83 = (($81) - ($82))|0;
  $tmp15 = $83;
  $84 = $tmp2;
  $85 = $tmp4;
  $86 = (($84) + ($85))|0;
  $tmp12 = $86;
  $87 = $tmp2;
  $88 = $tmp4;
  $89 = (($87) - ($88))|0;
  $tmp16 = $89;
  $90 = $elemptr;
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = $elemptr;
  $94 = (($93) + 13|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = (($92) - ($96))|0;
  $tmp0 = $97;
  $98 = $elemptr;
  $99 = (($98) + 1|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = $elemptr;
  $103 = (($102) + 12|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = (($101) - ($105))|0;
  $tmp1 = $106;
  $107 = $elemptr;
  $108 = (($107) + 2|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $111 = $elemptr;
  $112 = (($111) + 11|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = (($110) - ($114))|0;
  $tmp2 = $115;
  $116 = $elemptr;
  $117 = (($116) + 3|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&255;
  $120 = $elemptr;
  $121 = (($120) + 10|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = (($119) - ($123))|0;
  $tmp3 = $124;
  $125 = $elemptr;
  $126 = (($125) + 4|0);
  $127 = HEAP8[$126>>0]|0;
  $128 = $127&255;
  $129 = $elemptr;
  $130 = (($129) + 9|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = (($128) - ($132))|0;
  $tmp4 = $133;
  $134 = $elemptr;
  $135 = (($134) + 5|0);
  $136 = HEAP8[$135>>0]|0;
  $137 = $136&255;
  $138 = $elemptr;
  $139 = (($138) + 8|0);
  $140 = HEAP8[$139>>0]|0;
  $141 = $140&255;
  $142 = (($137) - ($141))|0;
  $tmp5 = $142;
  $143 = $elemptr;
  $144 = (($143) + 6|0);
  $145 = HEAP8[$144>>0]|0;
  $146 = $145&255;
  $147 = $elemptr;
  $148 = (($147) + 7|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $149&255;
  $151 = (($146) - ($150))|0;
  $tmp6 = $151;
  $152 = $tmp10;
  $153 = $tmp11;
  $154 = (($152) + ($153))|0;
  $155 = $tmp12;
  $156 = (($154) + ($155))|0;
  $157 = $tmp13;
  $158 = (($156) + ($157))|0;
  $159 = (($158) - 1792)|0;
  $160 = $dataptr;
  HEAP32[$160>>2] = $159;
  $161 = $tmp13;
  $162 = $tmp13;
  $163 = (($162) + ($161))|0;
  $tmp13 = $163;
  $164 = $tmp10;
  $165 = $tmp13;
  $166 = (($164) - ($165))|0;
  $167 = ($166*10438)|0;
  $168 = $tmp11;
  $169 = $tmp13;
  $170 = (($168) - ($169))|0;
  $171 = ($170*2578)|0;
  $172 = (($167) + ($171))|0;
  $173 = $tmp12;
  $174 = $tmp13;
  $175 = (($173) - ($174))|0;
  $176 = ($175*7223)|0;
  $177 = (($172) - ($176))|0;
  $178 = (($177) + 4096)|0;
  $179 = $178 >> 13;
  $180 = $dataptr;
  $181 = (($180) + 16|0);
  HEAP32[$181>>2] = $179;
  $182 = $tmp14;
  $183 = $tmp15;
  $184 = (($182) + ($183))|0;
  $185 = ($184*9058)|0;
  $tmp10 = $185;
  $186 = $tmp10;
  $187 = $tmp14;
  $188 = ($187*2237)|0;
  $189 = (($186) + ($188))|0;
  $190 = $tmp16;
  $191 = ($190*5027)|0;
  $192 = (($189) + ($191))|0;
  $193 = (($192) + 4096)|0;
  $194 = $193 >> 13;
  $195 = $dataptr;
  $196 = (($195) + 8|0);
  HEAP32[$196>>2] = $194;
  $197 = $tmp10;
  $198 = $tmp15;
  $199 = ($198*14084)|0;
  $200 = (($197) - ($199))|0;
  $201 = $tmp16;
  $202 = ($201*11295)|0;
  $203 = (($200) - ($202))|0;
  $204 = (($203) + 4096)|0;
  $205 = $204 >> 13;
  $206 = $dataptr;
  $207 = (($206) + 24|0);
  HEAP32[$207>>2] = $205;
  $208 = $tmp1;
  $209 = $tmp2;
  $210 = (($208) + ($209))|0;
  $tmp10 = $210;
  $211 = $tmp5;
  $212 = $tmp4;
  $213 = (($211) - ($212))|0;
  $tmp11 = $213;
  $214 = $tmp0;
  $215 = $tmp10;
  $216 = (($214) - ($215))|0;
  $217 = $tmp3;
  $218 = (($216) + ($217))|0;
  $219 = $tmp11;
  $220 = (($218) - ($219))|0;
  $221 = $tmp6;
  $222 = (($220) - ($221))|0;
  $223 = $dataptr;
  $224 = (($223) + 28|0);
  HEAP32[$224>>2] = $222;
  $225 = $tmp3;
  $226 = $225 << 13;
  $tmp3 = $226;
  $227 = $tmp10;
  $228 = Math_imul($227, -1297)|0;
  $tmp10 = $228;
  $229 = $tmp11;
  $230 = ($229*11512)|0;
  $tmp11 = $230;
  $231 = $tmp11;
  $232 = $tmp3;
  $233 = (($231) - ($232))|0;
  $234 = $tmp10;
  $235 = (($234) + ($233))|0;
  $tmp10 = $235;
  $236 = $tmp0;
  $237 = $tmp2;
  $238 = (($236) + ($237))|0;
  $239 = ($238*9810)|0;
  $240 = $tmp4;
  $241 = $tmp6;
  $242 = (($240) + ($241))|0;
  $243 = ($242*6164)|0;
  $244 = (($239) + ($243))|0;
  $tmp11 = $244;
  $245 = $tmp10;
  $246 = $tmp11;
  $247 = (($245) + ($246))|0;
  $248 = $tmp2;
  $249 = ($248*19447)|0;
  $250 = (($247) - ($249))|0;
  $251 = $tmp4;
  $252 = ($251*9175)|0;
  $253 = (($250) + ($252))|0;
  $254 = (($253) + 4096)|0;
  $255 = $254 >> 13;
  $256 = $dataptr;
  $257 = (($256) + 20|0);
  HEAP32[$257>>2] = $255;
  $258 = $tmp0;
  $259 = $tmp1;
  $260 = (($258) + ($259))|0;
  $261 = ($260*10935)|0;
  $262 = $tmp5;
  $263 = $tmp6;
  $264 = (($262) - ($263))|0;
  $265 = ($264*3826)|0;
  $266 = (($261) + ($265))|0;
  $tmp12 = $266;
  $267 = $tmp10;
  $268 = $tmp12;
  $269 = (($267) + ($268))|0;
  $270 = $tmp1;
  $271 = ($270*3474)|0;
  $272 = (($269) - ($271))|0;
  $273 = $tmp5;
  $274 = ($273*25148)|0;
  $275 = (($272) - ($274))|0;
  $276 = (($275) + 4096)|0;
  $277 = $276 >> 13;
  $278 = $dataptr;
  $279 = (($278) + 12|0);
  HEAP32[$279>>2] = $277;
  $280 = $tmp11;
  $281 = $tmp12;
  $282 = (($280) + ($281))|0;
  $283 = $tmp3;
  $284 = (($282) + ($283))|0;
  $285 = $tmp6;
  $286 = (($284) + ($285))|0;
  $287 = $tmp0;
  $288 = $tmp6;
  $289 = (($287) + ($288))|0;
  $290 = ($289*9232)|0;
  $291 = (($286) - ($290))|0;
  $292 = (($291) + 4096)|0;
  $293 = $292 >> 13;
  $294 = $dataptr;
  $295 = (($294) + 4|0);
  HEAP32[$295>>2] = $293;
  $296 = $ctr;
  $297 = (($296) + 1)|0;
  $ctr = $297;
  $298 = $ctr;
  $299 = ($298|0)!=(8);
  if ($299) {
   $300 = $ctr;
   $301 = ($300|0)==(14);
   if ($301) {
    break;
   }
   $302 = $dataptr;
   $303 = (($302) + 32|0);
   $dataptr = $303;
  } else {
   $dataptr = $workspace;
  }
 }
 $304 = $0;
 $dataptr = $304;
 $wsptr = $workspace;
 $ctr = 7;
 while(1) {
  $305 = $ctr;
  $306 = ($305|0)>=(0);
  if (!($306)) {
   break;
  }
  $307 = $dataptr;
  $308 = HEAP32[$307>>2]|0;
  $309 = $wsptr;
  $310 = (($309) + 160|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = (($308) + ($311))|0;
  $tmp0 = $312;
  $313 = $dataptr;
  $314 = (($313) + 32|0);
  $315 = HEAP32[$314>>2]|0;
  $316 = $wsptr;
  $317 = (($316) + 128|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = (($315) + ($318))|0;
  $tmp1 = $319;
  $320 = $dataptr;
  $321 = (($320) + 64|0);
  $322 = HEAP32[$321>>2]|0;
  $323 = $wsptr;
  $324 = (($323) + 96|0);
  $325 = HEAP32[$324>>2]|0;
  $326 = (($322) + ($325))|0;
  $tmp2 = $326;
  $327 = $dataptr;
  $328 = (($327) + 96|0);
  $329 = HEAP32[$328>>2]|0;
  $330 = $wsptr;
  $331 = (($330) + 64|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = (($329) + ($332))|0;
  $tmp13 = $333;
  $334 = $dataptr;
  $335 = (($334) + 128|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = $wsptr;
  $338 = (($337) + 32|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = (($336) + ($339))|0;
  $tmp4 = $340;
  $341 = $dataptr;
  $342 = (($341) + 160|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = $wsptr;
  $345 = HEAP32[$344>>2]|0;
  $346 = (($343) + ($345))|0;
  $tmp5 = $346;
  $347 = $dataptr;
  $348 = (($347) + 192|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = $dataptr;
  $351 = (($350) + 224|0);
  $352 = HEAP32[$351>>2]|0;
  $353 = (($349) + ($352))|0;
  $tmp6 = $353;
  $354 = $tmp0;
  $355 = $tmp6;
  $356 = (($354) + ($355))|0;
  $tmp10 = $356;
  $357 = $tmp0;
  $358 = $tmp6;
  $359 = (($357) - ($358))|0;
  $tmp14 = $359;
  $360 = $tmp1;
  $361 = $tmp5;
  $362 = (($360) + ($361))|0;
  $tmp11 = $362;
  $363 = $tmp1;
  $364 = $tmp5;
  $365 = (($363) - ($364))|0;
  $tmp15 = $365;
  $366 = $tmp2;
  $367 = $tmp4;
  $368 = (($366) + ($367))|0;
  $tmp12 = $368;
  $369 = $tmp2;
  $370 = $tmp4;
  $371 = (($369) - ($370))|0;
  $tmp16 = $371;
  $372 = $dataptr;
  $373 = HEAP32[$372>>2]|0;
  $374 = $wsptr;
  $375 = (($374) + 160|0);
  $376 = HEAP32[$375>>2]|0;
  $377 = (($373) - ($376))|0;
  $tmp0 = $377;
  $378 = $dataptr;
  $379 = (($378) + 32|0);
  $380 = HEAP32[$379>>2]|0;
  $381 = $wsptr;
  $382 = (($381) + 128|0);
  $383 = HEAP32[$382>>2]|0;
  $384 = (($380) - ($383))|0;
  $tmp1 = $384;
  $385 = $dataptr;
  $386 = (($385) + 64|0);
  $387 = HEAP32[$386>>2]|0;
  $388 = $wsptr;
  $389 = (($388) + 96|0);
  $390 = HEAP32[$389>>2]|0;
  $391 = (($387) - ($390))|0;
  $tmp2 = $391;
  $392 = $dataptr;
  $393 = (($392) + 96|0);
  $394 = HEAP32[$393>>2]|0;
  $395 = $wsptr;
  $396 = (($395) + 64|0);
  $397 = HEAP32[$396>>2]|0;
  $398 = (($394) - ($397))|0;
  $tmp3 = $398;
  $399 = $dataptr;
  $400 = (($399) + 128|0);
  $401 = HEAP32[$400>>2]|0;
  $402 = $wsptr;
  $403 = (($402) + 32|0);
  $404 = HEAP32[$403>>2]|0;
  $405 = (($401) - ($404))|0;
  $tmp4 = $405;
  $406 = $dataptr;
  $407 = (($406) + 160|0);
  $408 = HEAP32[$407>>2]|0;
  $409 = $wsptr;
  $410 = HEAP32[$409>>2]|0;
  $411 = (($408) - ($410))|0;
  $tmp5 = $411;
  $412 = $dataptr;
  $413 = (($412) + 192|0);
  $414 = HEAP32[$413>>2]|0;
  $415 = $dataptr;
  $416 = (($415) + 224|0);
  $417 = HEAP32[$416>>2]|0;
  $418 = (($414) - ($417))|0;
  $tmp6 = $418;
  $419 = $tmp10;
  $420 = $tmp11;
  $421 = (($419) + ($420))|0;
  $422 = $tmp12;
  $423 = (($421) + ($422))|0;
  $424 = $tmp13;
  $425 = (($423) + ($424))|0;
  $426 = ($425*5350)|0;
  $427 = (($426) + 8192)|0;
  $428 = $427 >> 14;
  $429 = $dataptr;
  HEAP32[$429>>2] = $428;
  $430 = $tmp13;
  $431 = $tmp13;
  $432 = (($431) + ($430))|0;
  $tmp13 = $432;
  $433 = $tmp10;
  $434 = $tmp13;
  $435 = (($433) - ($434))|0;
  $436 = ($435*6817)|0;
  $437 = $tmp11;
  $438 = $tmp13;
  $439 = (($437) - ($438))|0;
  $440 = ($439*1684)|0;
  $441 = (($436) + ($440))|0;
  $442 = $tmp12;
  $443 = $tmp13;
  $444 = (($442) - ($443))|0;
  $445 = ($444*4717)|0;
  $446 = (($441) - ($445))|0;
  $447 = (($446) + 8192)|0;
  $448 = $447 >> 14;
  $449 = $dataptr;
  $450 = (($449) + 128|0);
  HEAP32[$450>>2] = $448;
  $451 = $tmp14;
  $452 = $tmp15;
  $453 = (($451) + ($452))|0;
  $454 = ($453*5915)|0;
  $tmp10 = $454;
  $455 = $tmp10;
  $456 = $tmp14;
  $457 = ($456*1461)|0;
  $458 = (($455) + ($457))|0;
  $459 = $tmp16;
  $460 = ($459*3283)|0;
  $461 = (($458) + ($460))|0;
  $462 = (($461) + 8192)|0;
  $463 = $462 >> 14;
  $464 = $dataptr;
  $465 = (($464) + 64|0);
  HEAP32[$465>>2] = $463;
  $466 = $tmp10;
  $467 = $tmp15;
  $468 = ($467*9198)|0;
  $469 = (($466) - ($468))|0;
  $470 = $tmp16;
  $471 = ($470*7376)|0;
  $472 = (($469) - ($471))|0;
  $473 = (($472) + 8192)|0;
  $474 = $473 >> 14;
  $475 = $dataptr;
  $476 = (($475) + 192|0);
  HEAP32[$476>>2] = $474;
  $477 = $tmp1;
  $478 = $tmp2;
  $479 = (($477) + ($478))|0;
  $tmp10 = $479;
  $480 = $tmp5;
  $481 = $tmp4;
  $482 = (($480) - ($481))|0;
  $tmp11 = $482;
  $483 = $tmp0;
  $484 = $tmp10;
  $485 = (($483) - ($484))|0;
  $486 = $tmp3;
  $487 = (($485) + ($486))|0;
  $488 = $tmp11;
  $489 = (($487) - ($488))|0;
  $490 = $tmp6;
  $491 = (($489) - ($490))|0;
  $492 = ($491*5350)|0;
  $493 = (($492) + 8192)|0;
  $494 = $493 >> 14;
  $495 = $dataptr;
  $496 = (($495) + 224|0);
  HEAP32[$496>>2] = $494;
  $497 = $tmp3;
  $498 = ($497*5350)|0;
  $tmp3 = $498;
  $499 = $tmp10;
  $500 = Math_imul($499, -847)|0;
  $tmp10 = $500;
  $501 = $tmp11;
  $502 = ($501*7518)|0;
  $tmp11 = $502;
  $503 = $tmp11;
  $504 = $tmp3;
  $505 = (($503) - ($504))|0;
  $506 = $tmp10;
  $507 = (($506) + ($505))|0;
  $tmp10 = $507;
  $508 = $tmp0;
  $509 = $tmp2;
  $510 = (($508) + ($509))|0;
  $511 = ($510*6406)|0;
  $512 = $tmp4;
  $513 = $tmp6;
  $514 = (($512) + ($513))|0;
  $515 = ($514*4025)|0;
  $516 = (($511) + ($515))|0;
  $tmp11 = $516;
  $517 = $tmp10;
  $518 = $tmp11;
  $519 = (($517) + ($518))|0;
  $520 = $tmp2;
  $521 = ($520*12700)|0;
  $522 = (($519) - ($521))|0;
  $523 = $tmp4;
  $524 = ($523*5992)|0;
  $525 = (($522) + ($524))|0;
  $526 = (($525) + 8192)|0;
  $527 = $526 >> 14;
  $528 = $dataptr;
  $529 = (($528) + 160|0);
  HEAP32[$529>>2] = $527;
  $530 = $tmp0;
  $531 = $tmp1;
  $532 = (($530) + ($531))|0;
  $533 = ($532*7141)|0;
  $534 = $tmp5;
  $535 = $tmp6;
  $536 = (($534) - ($535))|0;
  $537 = ($536*2499)|0;
  $538 = (($533) + ($537))|0;
  $tmp12 = $538;
  $539 = $tmp10;
  $540 = $tmp12;
  $541 = (($539) + ($540))|0;
  $542 = $tmp1;
  $543 = ($542*2269)|0;
  $544 = (($541) - ($543))|0;
  $545 = $tmp5;
  $546 = ($545*16423)|0;
  $547 = (($544) - ($546))|0;
  $548 = (($547) + 8192)|0;
  $549 = $548 >> 14;
  $550 = $dataptr;
  $551 = (($550) + 96|0);
  HEAP32[$551>>2] = $549;
  $552 = $tmp11;
  $553 = $tmp12;
  $554 = (($552) + ($553))|0;
  $555 = $tmp3;
  $556 = (($554) + ($555))|0;
  $557 = $tmp0;
  $558 = ($557*6029)|0;
  $559 = (($556) - ($558))|0;
  $560 = $tmp6;
  $561 = ($560*679)|0;
  $562 = (($559) - ($561))|0;
  $563 = (($562) + 8192)|0;
  $564 = $563 >> 14;
  $565 = $dataptr;
  $566 = (($565) + 32|0);
  HEAP32[$566>>2] = $564;
  $567 = $dataptr;
  $568 = (($567) + 4|0);
  $dataptr = $568;
  $569 = $wsptr;
  $570 = (($569) + 4|0);
  $wsptr = $570;
  $571 = $ctr;
  $572 = (($571) + -1)|0;
  $ctr = $572;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_15x15($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp16 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0;
 var $tmp6 = 0, $tmp7 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (($7) + ($8)|0);
  $elemptr = $9;
  $10 = $elemptr;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $elemptr;
  $14 = (($13) + 14|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($12) + ($16))|0;
  $tmp0 = $17;
  $18 = $elemptr;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $elemptr;
  $23 = (($22) + 13|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $tmp1 = $26;
  $27 = $elemptr;
  $28 = (($27) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $elemptr;
  $32 = (($31) + 12|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($30) + ($34))|0;
  $tmp2 = $35;
  $36 = $elemptr;
  $37 = (($36) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $elemptr;
  $41 = (($40) + 11|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($39) + ($43))|0;
  $tmp3 = $44;
  $45 = $elemptr;
  $46 = (($45) + 4|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $elemptr;
  $50 = (($49) + 10|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (($48) + ($52))|0;
  $tmp4 = $53;
  $54 = $elemptr;
  $55 = (($54) + 5|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $elemptr;
  $59 = (($58) + 9|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (($57) + ($61))|0;
  $tmp5 = $62;
  $63 = $elemptr;
  $64 = (($63) + 6|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $elemptr;
  $68 = (($67) + 8|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = (($66) + ($70))|0;
  $tmp6 = $71;
  $72 = $elemptr;
  $73 = (($72) + 7|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $tmp7 = $75;
  $76 = $elemptr;
  $77 = HEAP8[$76>>0]|0;
  $78 = $77&255;
  $79 = $elemptr;
  $80 = (($79) + 14|0);
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = (($78) - ($82))|0;
  $tmp10 = $83;
  $84 = $elemptr;
  $85 = (($84) + 1|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $elemptr;
  $89 = (($88) + 13|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = (($87) - ($91))|0;
  $tmp11 = $92;
  $93 = $elemptr;
  $94 = (($93) + 2|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = $elemptr;
  $98 = (($97) + 12|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = (($96) - ($100))|0;
  $tmp12 = $101;
  $102 = $elemptr;
  $103 = (($102) + 3|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = $elemptr;
  $107 = (($106) + 11|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = (($105) - ($109))|0;
  $tmp13 = $110;
  $111 = $elemptr;
  $112 = (($111) + 4|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = $elemptr;
  $116 = (($115) + 10|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (($114) - ($118))|0;
  $tmp14 = $119;
  $120 = $elemptr;
  $121 = (($120) + 5|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = $elemptr;
  $125 = (($124) + 9|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&255;
  $128 = (($123) - ($127))|0;
  $tmp15 = $128;
  $129 = $elemptr;
  $130 = (($129) + 6|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = $elemptr;
  $134 = (($133) + 8|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = (($132) - ($136))|0;
  $tmp16 = $137;
  $138 = $tmp0;
  $139 = $tmp4;
  $140 = (($138) + ($139))|0;
  $141 = $tmp5;
  $142 = (($140) + ($141))|0;
  $z1 = $142;
  $143 = $tmp1;
  $144 = $tmp3;
  $145 = (($143) + ($144))|0;
  $146 = $tmp6;
  $147 = (($145) + ($146))|0;
  $z2 = $147;
  $148 = $tmp2;
  $149 = $tmp7;
  $150 = (($148) + ($149))|0;
  $z3 = $150;
  $151 = $z1;
  $152 = $z2;
  $153 = (($151) + ($152))|0;
  $154 = $z3;
  $155 = (($153) + ($154))|0;
  $156 = (($155) - 1920)|0;
  $157 = $dataptr;
  HEAP32[$157>>2] = $156;
  $158 = $z3;
  $159 = $z3;
  $160 = (($159) + ($158))|0;
  $z3 = $160;
  $161 = $z1;
  $162 = $z3;
  $163 = (($161) - ($162))|0;
  $164 = ($163*9373)|0;
  $165 = $z2;
  $166 = $z3;
  $167 = (($165) - ($166))|0;
  $168 = ($167*3580)|0;
  $169 = (($164) - ($168))|0;
  $170 = (($169) + 4096)|0;
  $171 = $170 >> 13;
  $172 = $dataptr;
  $173 = (($172) + 24|0);
  HEAP32[$173>>2] = $171;
  $174 = $tmp1;
  $175 = $tmp4;
  $176 = (($174) + ($175))|0;
  $177 = $176 >> 1;
  $178 = $tmp7;
  $179 = (($177) - ($178))|0;
  $180 = $tmp7;
  $181 = (($179) - ($180))|0;
  $182 = $tmp2;
  $183 = (($182) + ($181))|0;
  $tmp2 = $183;
  $184 = $tmp3;
  $185 = $tmp2;
  $186 = (($184) - ($185))|0;
  $187 = ($186*12543)|0;
  $188 = $tmp6;
  $189 = $tmp2;
  $190 = (($188) - ($189))|0;
  $191 = ($190*18336)|0;
  $192 = (($187) - ($191))|0;
  $z1 = $192;
  $193 = $tmp5;
  $194 = $tmp2;
  $195 = (($193) - ($194))|0;
  $196 = ($195*6541)|0;
  $197 = $tmp0;
  $198 = $tmp2;
  $199 = (($197) - ($198))|0;
  $200 = ($199*748)|0;
  $201 = (($196) - ($200))|0;
  $z2 = $201;
  $202 = $tmp0;
  $203 = $tmp3;
  $204 = (($202) - ($203))|0;
  $205 = ($204*11332)|0;
  $206 = $tmp6;
  $207 = $tmp5;
  $208 = (($206) - ($207))|0;
  $209 = ($208*7752)|0;
  $210 = (($205) + ($209))|0;
  $211 = $tmp1;
  $212 = $tmp4;
  $213 = (($211) - ($212))|0;
  $214 = ($213*6476)|0;
  $215 = (($210) + ($214))|0;
  $z3 = $215;
  $216 = $z1;
  $217 = $z3;
  $218 = (($216) + ($217))|0;
  $219 = (($218) + 4096)|0;
  $220 = $219 >> 13;
  $221 = $dataptr;
  $222 = (($221) + 8|0);
  HEAP32[$222>>2] = $220;
  $223 = $z2;
  $224 = $z3;
  $225 = (($223) + ($224))|0;
  $226 = (($225) + 4096)|0;
  $227 = $226 >> 13;
  $228 = $dataptr;
  $229 = (($228) + 16|0);
  HEAP32[$229>>2] = $227;
  $230 = $tmp10;
  $231 = $tmp12;
  $232 = (($230) - ($231))|0;
  $233 = $tmp13;
  $234 = (($232) - ($233))|0;
  $235 = $tmp15;
  $236 = (($234) + ($235))|0;
  $237 = $tmp16;
  $238 = (($236) + ($237))|0;
  $239 = ($238*10033)|0;
  $tmp2 = $239;
  $240 = $tmp10;
  $241 = $tmp14;
  $242 = (($240) - ($241))|0;
  $243 = $tmp15;
  $244 = (($242) - ($243))|0;
  $245 = ($244*11018)|0;
  $246 = $tmp11;
  $247 = $tmp13;
  $248 = (($246) - ($247))|0;
  $249 = $tmp16;
  $250 = (($248) - ($249))|0;
  $251 = ($250*6810)|0;
  $252 = (($245) + ($251))|0;
  $tmp1 = $252;
  $253 = $tmp12;
  $254 = ($253*10033)|0;
  $tmp12 = $254;
  $255 = $tmp10;
  $256 = $tmp16;
  $257 = (($255) - ($256))|0;
  $258 = ($257*11522)|0;
  $259 = $tmp11;
  $260 = $tmp14;
  $261 = (($259) + ($260))|0;
  $262 = ($261*11018)|0;
  $263 = (($258) + ($262))|0;
  $264 = $tmp13;
  $265 = $tmp15;
  $266 = (($264) + ($265))|0;
  $267 = ($266*4712)|0;
  $268 = (($263) + ($267))|0;
  $tmp4 = $268;
  $269 = $tmp13;
  $270 = ($269*3897)|0;
  $271 = $tmp14;
  $272 = ($271*4209)|0;
  $273 = (($270) - ($272))|0;
  $274 = $tmp16;
  $275 = ($274*13930)|0;
  $276 = (($273) + ($275))|0;
  $277 = $tmp4;
  $278 = (($276) + ($277))|0;
  $279 = $tmp12;
  $280 = (($278) + ($279))|0;
  $tmp0 = $280;
  $281 = $tmp10;
  $282 = Math_imul($281, -2912)|0;
  $283 = $tmp11;
  $284 = ($283*17828)|0;
  $285 = (($282) - ($284))|0;
  $286 = $tmp15;
  $287 = ($286*7121)|0;
  $288 = (($285) - ($287))|0;
  $289 = $tmp4;
  $290 = (($288) + ($289))|0;
  $291 = $tmp12;
  $292 = (($290) - ($291))|0;
  $tmp3 = $292;
  $293 = $tmp0;
  $294 = (($293) + 4096)|0;
  $295 = $294 >> 13;
  $296 = $dataptr;
  $297 = (($296) + 4|0);
  HEAP32[$297>>2] = $295;
  $298 = $tmp1;
  $299 = (($298) + 4096)|0;
  $300 = $299 >> 13;
  $301 = $dataptr;
  $302 = (($301) + 12|0);
  HEAP32[$302>>2] = $300;
  $303 = $tmp2;
  $304 = (($303) + 4096)|0;
  $305 = $304 >> 13;
  $306 = $dataptr;
  $307 = (($306) + 20|0);
  HEAP32[$307>>2] = $305;
  $308 = $tmp3;
  $309 = (($308) + 4096)|0;
  $310 = $309 >> 13;
  $311 = $dataptr;
  $312 = (($311) + 28|0);
  HEAP32[$312>>2] = $310;
  $313 = $ctr;
  $314 = (($313) + 1)|0;
  $ctr = $314;
  $315 = $ctr;
  $316 = ($315|0)!=(8);
  if ($316) {
   $317 = $ctr;
   $318 = ($317|0)==(15);
   if ($318) {
    break;
   }
   $319 = $dataptr;
   $320 = (($319) + 32|0);
   $dataptr = $320;
  } else {
   $dataptr = $workspace;
  }
 }
 $321 = $0;
 $dataptr = $321;
 $wsptr = $workspace;
 $ctr = 7;
 while(1) {
  $322 = $ctr;
  $323 = ($322|0)>=(0);
  if (!($323)) {
   break;
  }
  $324 = $dataptr;
  $325 = HEAP32[$324>>2]|0;
  $326 = $wsptr;
  $327 = (($326) + 192|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = (($325) + ($328))|0;
  $tmp0 = $329;
  $330 = $dataptr;
  $331 = (($330) + 32|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = $wsptr;
  $334 = (($333) + 160|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = (($332) + ($335))|0;
  $tmp1 = $336;
  $337 = $dataptr;
  $338 = (($337) + 64|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = $wsptr;
  $341 = (($340) + 128|0);
  $342 = HEAP32[$341>>2]|0;
  $343 = (($339) + ($342))|0;
  $tmp2 = $343;
  $344 = $dataptr;
  $345 = (($344) + 96|0);
  $346 = HEAP32[$345>>2]|0;
  $347 = $wsptr;
  $348 = (($347) + 96|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = (($346) + ($349))|0;
  $tmp3 = $350;
  $351 = $dataptr;
  $352 = (($351) + 128|0);
  $353 = HEAP32[$352>>2]|0;
  $354 = $wsptr;
  $355 = (($354) + 64|0);
  $356 = HEAP32[$355>>2]|0;
  $357 = (($353) + ($356))|0;
  $tmp4 = $357;
  $358 = $dataptr;
  $359 = (($358) + 160|0);
  $360 = HEAP32[$359>>2]|0;
  $361 = $wsptr;
  $362 = (($361) + 32|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = (($360) + ($363))|0;
  $tmp5 = $364;
  $365 = $dataptr;
  $366 = (($365) + 192|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = $wsptr;
  $369 = HEAP32[$368>>2]|0;
  $370 = (($367) + ($369))|0;
  $tmp6 = $370;
  $371 = $dataptr;
  $372 = (($371) + 224|0);
  $373 = HEAP32[$372>>2]|0;
  $tmp7 = $373;
  $374 = $dataptr;
  $375 = HEAP32[$374>>2]|0;
  $376 = $wsptr;
  $377 = (($376) + 192|0);
  $378 = HEAP32[$377>>2]|0;
  $379 = (($375) - ($378))|0;
  $tmp10 = $379;
  $380 = $dataptr;
  $381 = (($380) + 32|0);
  $382 = HEAP32[$381>>2]|0;
  $383 = $wsptr;
  $384 = (($383) + 160|0);
  $385 = HEAP32[$384>>2]|0;
  $386 = (($382) - ($385))|0;
  $tmp11 = $386;
  $387 = $dataptr;
  $388 = (($387) + 64|0);
  $389 = HEAP32[$388>>2]|0;
  $390 = $wsptr;
  $391 = (($390) + 128|0);
  $392 = HEAP32[$391>>2]|0;
  $393 = (($389) - ($392))|0;
  $tmp12 = $393;
  $394 = $dataptr;
  $395 = (($394) + 96|0);
  $396 = HEAP32[$395>>2]|0;
  $397 = $wsptr;
  $398 = (($397) + 96|0);
  $399 = HEAP32[$398>>2]|0;
  $400 = (($396) - ($399))|0;
  $tmp13 = $400;
  $401 = $dataptr;
  $402 = (($401) + 128|0);
  $403 = HEAP32[$402>>2]|0;
  $404 = $wsptr;
  $405 = (($404) + 64|0);
  $406 = HEAP32[$405>>2]|0;
  $407 = (($403) - ($406))|0;
  $tmp14 = $407;
  $408 = $dataptr;
  $409 = (($408) + 160|0);
  $410 = HEAP32[$409>>2]|0;
  $411 = $wsptr;
  $412 = (($411) + 32|0);
  $413 = HEAP32[$412>>2]|0;
  $414 = (($410) - ($413))|0;
  $tmp15 = $414;
  $415 = $dataptr;
  $416 = (($415) + 192|0);
  $417 = HEAP32[$416>>2]|0;
  $418 = $wsptr;
  $419 = HEAP32[$418>>2]|0;
  $420 = (($417) - ($419))|0;
  $tmp16 = $420;
  $421 = $tmp0;
  $422 = $tmp4;
  $423 = (($421) + ($422))|0;
  $424 = $tmp5;
  $425 = (($423) + ($424))|0;
  $z1 = $425;
  $426 = $tmp1;
  $427 = $tmp3;
  $428 = (($426) + ($427))|0;
  $429 = $tmp6;
  $430 = (($428) + ($429))|0;
  $z2 = $430;
  $431 = $tmp2;
  $432 = $tmp7;
  $433 = (($431) + ($432))|0;
  $z3 = $433;
  $434 = $z1;
  $435 = $z2;
  $436 = (($434) + ($435))|0;
  $437 = $z3;
  $438 = (($436) + ($437))|0;
  $439 = ($438*9321)|0;
  $440 = (($439) + 16384)|0;
  $441 = $440 >> 15;
  $442 = $dataptr;
  HEAP32[$442>>2] = $441;
  $443 = $z3;
  $444 = $z3;
  $445 = (($444) + ($443))|0;
  $z3 = $445;
  $446 = $z1;
  $447 = $z3;
  $448 = (($446) - ($447))|0;
  $449 = ($448*10664)|0;
  $450 = $z2;
  $451 = $z3;
  $452 = (($450) - ($451))|0;
  $453 = ($452*4073)|0;
  $454 = (($449) - ($453))|0;
  $455 = (($454) + 16384)|0;
  $456 = $455 >> 15;
  $457 = $dataptr;
  $458 = (($457) + 192|0);
  HEAP32[$458>>2] = $456;
  $459 = $tmp1;
  $460 = $tmp4;
  $461 = (($459) + ($460))|0;
  $462 = $461 >> 1;
  $463 = $tmp7;
  $464 = (($462) - ($463))|0;
  $465 = $tmp7;
  $466 = (($464) - ($465))|0;
  $467 = $tmp2;
  $468 = (($467) + ($466))|0;
  $tmp2 = $468;
  $469 = $tmp3;
  $470 = $tmp2;
  $471 = (($469) - ($470))|0;
  $472 = ($471*14271)|0;
  $473 = $tmp6;
  $474 = $tmp2;
  $475 = (($473) - ($474))|0;
  $476 = ($475*20862)|0;
  $477 = (($472) - ($476))|0;
  $z1 = $477;
  $478 = $tmp5;
  $479 = $tmp2;
  $480 = (($478) - ($479))|0;
  $481 = ($480*7442)|0;
  $482 = $tmp0;
  $483 = $tmp2;
  $484 = (($482) - ($483))|0;
  $485 = ($484*852)|0;
  $486 = (($481) - ($485))|0;
  $z2 = $486;
  $487 = $tmp0;
  $488 = $tmp3;
  $489 = (($487) - ($488))|0;
  $490 = ($489*12893)|0;
  $491 = $tmp6;
  $492 = $tmp5;
  $493 = (($491) - ($492))|0;
  $494 = ($493*8820)|0;
  $495 = (($490) + ($494))|0;
  $496 = $tmp1;
  $497 = $tmp4;
  $498 = (($496) - ($497))|0;
  $499 = ($498*7369)|0;
  $500 = (($495) + ($499))|0;
  $z3 = $500;
  $501 = $z1;
  $502 = $z3;
  $503 = (($501) + ($502))|0;
  $504 = (($503) + 16384)|0;
  $505 = $504 >> 15;
  $506 = $dataptr;
  $507 = (($506) + 64|0);
  HEAP32[$507>>2] = $505;
  $508 = $z2;
  $509 = $z3;
  $510 = (($508) + ($509))|0;
  $511 = (($510) + 16384)|0;
  $512 = $511 >> 15;
  $513 = $dataptr;
  $514 = (($513) + 128|0);
  HEAP32[$514>>2] = $512;
  $515 = $tmp10;
  $516 = $tmp12;
  $517 = (($515) - ($516))|0;
  $518 = $tmp13;
  $519 = (($517) - ($518))|0;
  $520 = $tmp15;
  $521 = (($519) + ($520))|0;
  $522 = $tmp16;
  $523 = (($521) + ($522))|0;
  $524 = ($523*11415)|0;
  $tmp2 = $524;
  $525 = $tmp10;
  $526 = $tmp14;
  $527 = (($525) - ($526))|0;
  $528 = $tmp15;
  $529 = (($527) - ($528))|0;
  $530 = ($529*12536)|0;
  $531 = $tmp11;
  $532 = $tmp13;
  $533 = (($531) - ($532))|0;
  $534 = $tmp16;
  $535 = (($533) - ($534))|0;
  $536 = ($535*7748)|0;
  $537 = (($530) + ($536))|0;
  $tmp1 = $537;
  $538 = $tmp12;
  $539 = ($538*11415)|0;
  $tmp12 = $539;
  $540 = $tmp10;
  $541 = $tmp16;
  $542 = (($540) - ($541))|0;
  $543 = ($542*13109)|0;
  $544 = $tmp11;
  $545 = $tmp14;
  $546 = (($544) + ($545))|0;
  $547 = ($546*12536)|0;
  $548 = (($543) + ($547))|0;
  $549 = $tmp13;
  $550 = $tmp15;
  $551 = (($549) + ($550))|0;
  $552 = ($551*5361)|0;
  $553 = (($548) + ($552))|0;
  $tmp4 = $553;
  $554 = $tmp13;
  $555 = ($554*4434)|0;
  $556 = $tmp14;
  $557 = ($556*4788)|0;
  $558 = (($555) - ($557))|0;
  $559 = $tmp16;
  $560 = ($559*15850)|0;
  $561 = (($558) + ($560))|0;
  $562 = $tmp4;
  $563 = (($561) + ($562))|0;
  $564 = $tmp12;
  $565 = (($563) + ($564))|0;
  $tmp0 = $565;
  $566 = $tmp10;
  $567 = Math_imul($566, -3314)|0;
  $568 = $tmp11;
  $569 = ($568*20284)|0;
  $570 = (($567) - ($569))|0;
  $571 = $tmp15;
  $572 = ($571*8102)|0;
  $573 = (($570) - ($572))|0;
  $574 = $tmp4;
  $575 = (($573) + ($574))|0;
  $576 = $tmp12;
  $577 = (($575) - ($576))|0;
  $tmp3 = $577;
  $578 = $tmp0;
  $579 = (($578) + 16384)|0;
  $580 = $579 >> 15;
  $581 = $dataptr;
  $582 = (($581) + 32|0);
  HEAP32[$582>>2] = $580;
  $583 = $tmp1;
  $584 = (($583) + 16384)|0;
  $585 = $584 >> 15;
  $586 = $dataptr;
  $587 = (($586) + 96|0);
  HEAP32[$587>>2] = $585;
  $588 = $tmp2;
  $589 = (($588) + 16384)|0;
  $590 = $589 >> 15;
  $591 = $dataptr;
  $592 = (($591) + 160|0);
  HEAP32[$592>>2] = $590;
  $593 = $tmp3;
  $594 = (($593) + 16384)|0;
  $595 = $594 >> 15;
  $596 = $dataptr;
  $597 = (($596) + 224|0);
  HEAP32[$597>>2] = $595;
  $598 = $dataptr;
  $599 = (($598) + 4|0);
  $dataptr = $599;
  $600 = $wsptr;
  $601 = (($600) + 4|0);
  $wsptr = $601;
  $602 = $ctr;
  $603 = (($602) + -1)|0;
  $ctr = $603;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_16x16($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0;
 var $tmp16 = 0, $tmp17 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $tmp6 = 0, $tmp7 = 0, $workspace = 0, $wsptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (($7) + ($8)|0);
  $elemptr = $9;
  $10 = $elemptr;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $elemptr;
  $14 = (($13) + 15|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($12) + ($16))|0;
  $tmp0 = $17;
  $18 = $elemptr;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $elemptr;
  $23 = (($22) + 14|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $tmp1 = $26;
  $27 = $elemptr;
  $28 = (($27) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $elemptr;
  $32 = (($31) + 13|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($30) + ($34))|0;
  $tmp2 = $35;
  $36 = $elemptr;
  $37 = (($36) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $elemptr;
  $41 = (($40) + 12|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($39) + ($43))|0;
  $tmp3 = $44;
  $45 = $elemptr;
  $46 = (($45) + 4|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $elemptr;
  $50 = (($49) + 11|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = (($48) + ($52))|0;
  $tmp4 = $53;
  $54 = $elemptr;
  $55 = (($54) + 5|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = $elemptr;
  $59 = (($58) + 10|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (($57) + ($61))|0;
  $tmp5 = $62;
  $63 = $elemptr;
  $64 = (($63) + 6|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $elemptr;
  $68 = (($67) + 9|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = (($66) + ($70))|0;
  $tmp6 = $71;
  $72 = $elemptr;
  $73 = (($72) + 7|0);
  $74 = HEAP8[$73>>0]|0;
  $75 = $74&255;
  $76 = $elemptr;
  $77 = (($76) + 8|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (($75) + ($79))|0;
  $tmp7 = $80;
  $81 = $tmp0;
  $82 = $tmp7;
  $83 = (($81) + ($82))|0;
  $tmp10 = $83;
  $84 = $tmp0;
  $85 = $tmp7;
  $86 = (($84) - ($85))|0;
  $tmp14 = $86;
  $87 = $tmp1;
  $88 = $tmp6;
  $89 = (($87) + ($88))|0;
  $tmp11 = $89;
  $90 = $tmp1;
  $91 = $tmp6;
  $92 = (($90) - ($91))|0;
  $tmp15 = $92;
  $93 = $tmp2;
  $94 = $tmp5;
  $95 = (($93) + ($94))|0;
  $tmp12 = $95;
  $96 = $tmp2;
  $97 = $tmp5;
  $98 = (($96) - ($97))|0;
  $tmp16 = $98;
  $99 = $tmp3;
  $100 = $tmp4;
  $101 = (($99) + ($100))|0;
  $tmp13 = $101;
  $102 = $tmp3;
  $103 = $tmp4;
  $104 = (($102) - ($103))|0;
  $tmp17 = $104;
  $105 = $elemptr;
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = $elemptr;
  $109 = (($108) + 15|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = (($107) - ($111))|0;
  $tmp0 = $112;
  $113 = $elemptr;
  $114 = (($113) + 1|0);
  $115 = HEAP8[$114>>0]|0;
  $116 = $115&255;
  $117 = $elemptr;
  $118 = (($117) + 14|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = (($116) - ($120))|0;
  $tmp1 = $121;
  $122 = $elemptr;
  $123 = (($122) + 2|0);
  $124 = HEAP8[$123>>0]|0;
  $125 = $124&255;
  $126 = $elemptr;
  $127 = (($126) + 13|0);
  $128 = HEAP8[$127>>0]|0;
  $129 = $128&255;
  $130 = (($125) - ($129))|0;
  $tmp2 = $130;
  $131 = $elemptr;
  $132 = (($131) + 3|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133&255;
  $135 = $elemptr;
  $136 = (($135) + 12|0);
  $137 = HEAP8[$136>>0]|0;
  $138 = $137&255;
  $139 = (($134) - ($138))|0;
  $tmp3 = $139;
  $140 = $elemptr;
  $141 = (($140) + 4|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142&255;
  $144 = $elemptr;
  $145 = (($144) + 11|0);
  $146 = HEAP8[$145>>0]|0;
  $147 = $146&255;
  $148 = (($143) - ($147))|0;
  $tmp4 = $148;
  $149 = $elemptr;
  $150 = (($149) + 5|0);
  $151 = HEAP8[$150>>0]|0;
  $152 = $151&255;
  $153 = $elemptr;
  $154 = (($153) + 10|0);
  $155 = HEAP8[$154>>0]|0;
  $156 = $155&255;
  $157 = (($152) - ($156))|0;
  $tmp5 = $157;
  $158 = $elemptr;
  $159 = (($158) + 6|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $160&255;
  $162 = $elemptr;
  $163 = (($162) + 9|0);
  $164 = HEAP8[$163>>0]|0;
  $165 = $164&255;
  $166 = (($161) - ($165))|0;
  $tmp6 = $166;
  $167 = $elemptr;
  $168 = (($167) + 7|0);
  $169 = HEAP8[$168>>0]|0;
  $170 = $169&255;
  $171 = $elemptr;
  $172 = (($171) + 8|0);
  $173 = HEAP8[$172>>0]|0;
  $174 = $173&255;
  $175 = (($170) - ($174))|0;
  $tmp7 = $175;
  $176 = $tmp10;
  $177 = $tmp11;
  $178 = (($176) + ($177))|0;
  $179 = $tmp12;
  $180 = (($178) + ($179))|0;
  $181 = $tmp13;
  $182 = (($180) + ($181))|0;
  $183 = (($182) - 2048)|0;
  $184 = $183 << 2;
  $185 = $dataptr;
  HEAP32[$185>>2] = $184;
  $186 = $tmp10;
  $187 = $tmp13;
  $188 = (($186) - ($187))|0;
  $189 = ($188*10703)|0;
  $190 = $tmp11;
  $191 = $tmp12;
  $192 = (($190) - ($191))|0;
  $193 = ($192*4433)|0;
  $194 = (($189) + ($193))|0;
  $195 = (($194) + 1024)|0;
  $196 = $195 >> 11;
  $197 = $dataptr;
  $198 = (($197) + 16|0);
  HEAP32[$198>>2] = $196;
  $199 = $tmp17;
  $200 = $tmp15;
  $201 = (($199) - ($200))|0;
  $202 = ($201*2260)|0;
  $203 = $tmp14;
  $204 = $tmp16;
  $205 = (($203) - ($204))|0;
  $206 = ($205*11363)|0;
  $207 = (($202) + ($206))|0;
  $tmp10 = $207;
  $208 = $tmp10;
  $209 = $tmp15;
  $210 = ($209*11893)|0;
  $211 = (($208) + ($210))|0;
  $212 = $tmp16;
  $213 = ($212*17799)|0;
  $214 = (($211) + ($213))|0;
  $215 = (($214) + 1024)|0;
  $216 = $215 >> 11;
  $217 = $dataptr;
  $218 = (($217) + 8|0);
  HEAP32[$218>>2] = $216;
  $219 = $tmp10;
  $220 = $tmp14;
  $221 = ($220*1730)|0;
  $222 = (($219) - ($221))|0;
  $223 = $tmp17;
  $224 = ($223*8697)|0;
  $225 = (($222) - ($224))|0;
  $226 = (($225) + 1024)|0;
  $227 = $226 >> 11;
  $228 = $dataptr;
  $229 = (($228) + 24|0);
  HEAP32[$229>>2] = $227;
  $230 = $tmp0;
  $231 = $tmp1;
  $232 = (($230) + ($231))|0;
  $233 = ($232*11086)|0;
  $234 = $tmp6;
  $235 = $tmp7;
  $236 = (($234) - ($235))|0;
  $237 = ($236*3363)|0;
  $238 = (($233) + ($237))|0;
  $tmp11 = $238;
  $239 = $tmp0;
  $240 = $tmp2;
  $241 = (($239) + ($240))|0;
  $242 = ($241*10217)|0;
  $243 = $tmp5;
  $244 = $tmp7;
  $245 = (($243) + ($244))|0;
  $246 = ($245*5461)|0;
  $247 = (($242) + ($246))|0;
  $tmp12 = $247;
  $248 = $tmp0;
  $249 = $tmp3;
  $250 = (($248) + ($249))|0;
  $251 = ($250*8956)|0;
  $252 = $tmp4;
  $253 = $tmp7;
  $254 = (($252) - ($253))|0;
  $255 = ($254*7350)|0;
  $256 = (($251) + ($255))|0;
  $tmp13 = $256;
  $257 = $tmp1;
  $258 = $tmp2;
  $259 = (($257) + ($258))|0;
  $260 = ($259*1136)|0;
  $261 = $tmp6;
  $262 = $tmp5;
  $263 = (($261) - ($262))|0;
  $264 = ($263*11529)|0;
  $265 = (($260) + ($264))|0;
  $tmp14 = $265;
  $266 = $tmp1;
  $267 = $tmp3;
  $268 = (($266) + ($267))|0;
  $269 = Math_imul($268, -5461)|0;
  $270 = $tmp4;
  $271 = $tmp6;
  $272 = (($270) + ($271))|0;
  $273 = Math_imul($272, -10217)|0;
  $274 = (($269) + ($273))|0;
  $tmp15 = $274;
  $275 = $tmp2;
  $276 = $tmp3;
  $277 = (($275) + ($276))|0;
  $278 = Math_imul($277, -11086)|0;
  $279 = $tmp5;
  $280 = $tmp4;
  $281 = (($279) - ($280))|0;
  $282 = ($281*3363)|0;
  $283 = (($278) + ($282))|0;
  $tmp16 = $283;
  $284 = $tmp11;
  $285 = $tmp12;
  $286 = (($284) + ($285))|0;
  $287 = $tmp13;
  $288 = (($286) + ($287))|0;
  $289 = $tmp0;
  $290 = ($289*18730)|0;
  $291 = (($288) - ($290))|0;
  $292 = $tmp7;
  $293 = ($292*6387)|0;
  $294 = (($291) + ($293))|0;
  $tmp10 = $294;
  $295 = $tmp14;
  $296 = $tmp15;
  $297 = (($295) + ($296))|0;
  $298 = $tmp1;
  $299 = ($298*589)|0;
  $300 = (($297) + ($299))|0;
  $301 = $tmp6;
  $302 = ($301*13631)|0;
  $303 = (($300) - ($302))|0;
  $304 = $tmp11;
  $305 = (($304) + ($303))|0;
  $tmp11 = $305;
  $306 = $tmp14;
  $307 = $tmp16;
  $308 = (($306) + ($307))|0;
  $309 = $tmp2;
  $310 = ($309*9222)|0;
  $311 = (($308) - ($310))|0;
  $312 = $tmp5;
  $313 = ($312*10055)|0;
  $314 = (($311) + ($313))|0;
  $315 = $tmp12;
  $316 = (($315) + ($314))|0;
  $tmp12 = $316;
  $317 = $tmp15;
  $318 = $tmp16;
  $319 = (($317) + ($318))|0;
  $320 = $tmp3;
  $321 = ($320*8728)|0;
  $322 = (($319) + ($321))|0;
  $323 = $tmp4;
  $324 = ($323*17760)|0;
  $325 = (($322) + ($324))|0;
  $326 = $tmp13;
  $327 = (($326) + ($325))|0;
  $tmp13 = $327;
  $328 = $tmp10;
  $329 = (($328) + 1024)|0;
  $330 = $329 >> 11;
  $331 = $dataptr;
  $332 = (($331) + 4|0);
  HEAP32[$332>>2] = $330;
  $333 = $tmp11;
  $334 = (($333) + 1024)|0;
  $335 = $334 >> 11;
  $336 = $dataptr;
  $337 = (($336) + 12|0);
  HEAP32[$337>>2] = $335;
  $338 = $tmp12;
  $339 = (($338) + 1024)|0;
  $340 = $339 >> 11;
  $341 = $dataptr;
  $342 = (($341) + 20|0);
  HEAP32[$342>>2] = $340;
  $343 = $tmp13;
  $344 = (($343) + 1024)|0;
  $345 = $344 >> 11;
  $346 = $dataptr;
  $347 = (($346) + 28|0);
  HEAP32[$347>>2] = $345;
  $348 = $ctr;
  $349 = (($348) + 1)|0;
  $ctr = $349;
  $350 = $ctr;
  $351 = ($350|0)!=(8);
  if ($351) {
   $352 = $ctr;
   $353 = ($352|0)==(16);
   if ($353) {
    break;
   }
   $354 = $dataptr;
   $355 = (($354) + 32|0);
   $dataptr = $355;
  } else {
   $dataptr = $workspace;
  }
 }
 $356 = $0;
 $dataptr = $356;
 $wsptr = $workspace;
 $ctr = 7;
 while(1) {
  $357 = $ctr;
  $358 = ($357|0)>=(0);
  if (!($358)) {
   break;
  }
  $359 = $dataptr;
  $360 = HEAP32[$359>>2]|0;
  $361 = $wsptr;
  $362 = (($361) + 224|0);
  $363 = HEAP32[$362>>2]|0;
  $364 = (($360) + ($363))|0;
  $tmp0 = $364;
  $365 = $dataptr;
  $366 = (($365) + 32|0);
  $367 = HEAP32[$366>>2]|0;
  $368 = $wsptr;
  $369 = (($368) + 192|0);
  $370 = HEAP32[$369>>2]|0;
  $371 = (($367) + ($370))|0;
  $tmp1 = $371;
  $372 = $dataptr;
  $373 = (($372) + 64|0);
  $374 = HEAP32[$373>>2]|0;
  $375 = $wsptr;
  $376 = (($375) + 160|0);
  $377 = HEAP32[$376>>2]|0;
  $378 = (($374) + ($377))|0;
  $tmp2 = $378;
  $379 = $dataptr;
  $380 = (($379) + 96|0);
  $381 = HEAP32[$380>>2]|0;
  $382 = $wsptr;
  $383 = (($382) + 128|0);
  $384 = HEAP32[$383>>2]|0;
  $385 = (($381) + ($384))|0;
  $tmp3 = $385;
  $386 = $dataptr;
  $387 = (($386) + 128|0);
  $388 = HEAP32[$387>>2]|0;
  $389 = $wsptr;
  $390 = (($389) + 96|0);
  $391 = HEAP32[$390>>2]|0;
  $392 = (($388) + ($391))|0;
  $tmp4 = $392;
  $393 = $dataptr;
  $394 = (($393) + 160|0);
  $395 = HEAP32[$394>>2]|0;
  $396 = $wsptr;
  $397 = (($396) + 64|0);
  $398 = HEAP32[$397>>2]|0;
  $399 = (($395) + ($398))|0;
  $tmp5 = $399;
  $400 = $dataptr;
  $401 = (($400) + 192|0);
  $402 = HEAP32[$401>>2]|0;
  $403 = $wsptr;
  $404 = (($403) + 32|0);
  $405 = HEAP32[$404>>2]|0;
  $406 = (($402) + ($405))|0;
  $tmp6 = $406;
  $407 = $dataptr;
  $408 = (($407) + 224|0);
  $409 = HEAP32[$408>>2]|0;
  $410 = $wsptr;
  $411 = HEAP32[$410>>2]|0;
  $412 = (($409) + ($411))|0;
  $tmp7 = $412;
  $413 = $tmp0;
  $414 = $tmp7;
  $415 = (($413) + ($414))|0;
  $tmp10 = $415;
  $416 = $tmp0;
  $417 = $tmp7;
  $418 = (($416) - ($417))|0;
  $tmp14 = $418;
  $419 = $tmp1;
  $420 = $tmp6;
  $421 = (($419) + ($420))|0;
  $tmp11 = $421;
  $422 = $tmp1;
  $423 = $tmp6;
  $424 = (($422) - ($423))|0;
  $tmp15 = $424;
  $425 = $tmp2;
  $426 = $tmp5;
  $427 = (($425) + ($426))|0;
  $tmp12 = $427;
  $428 = $tmp2;
  $429 = $tmp5;
  $430 = (($428) - ($429))|0;
  $tmp16 = $430;
  $431 = $tmp3;
  $432 = $tmp4;
  $433 = (($431) + ($432))|0;
  $tmp13 = $433;
  $434 = $tmp3;
  $435 = $tmp4;
  $436 = (($434) - ($435))|0;
  $tmp17 = $436;
  $437 = $dataptr;
  $438 = HEAP32[$437>>2]|0;
  $439 = $wsptr;
  $440 = (($439) + 224|0);
  $441 = HEAP32[$440>>2]|0;
  $442 = (($438) - ($441))|0;
  $tmp0 = $442;
  $443 = $dataptr;
  $444 = (($443) + 32|0);
  $445 = HEAP32[$444>>2]|0;
  $446 = $wsptr;
  $447 = (($446) + 192|0);
  $448 = HEAP32[$447>>2]|0;
  $449 = (($445) - ($448))|0;
  $tmp1 = $449;
  $450 = $dataptr;
  $451 = (($450) + 64|0);
  $452 = HEAP32[$451>>2]|0;
  $453 = $wsptr;
  $454 = (($453) + 160|0);
  $455 = HEAP32[$454>>2]|0;
  $456 = (($452) - ($455))|0;
  $tmp2 = $456;
  $457 = $dataptr;
  $458 = (($457) + 96|0);
  $459 = HEAP32[$458>>2]|0;
  $460 = $wsptr;
  $461 = (($460) + 128|0);
  $462 = HEAP32[$461>>2]|0;
  $463 = (($459) - ($462))|0;
  $tmp3 = $463;
  $464 = $dataptr;
  $465 = (($464) + 128|0);
  $466 = HEAP32[$465>>2]|0;
  $467 = $wsptr;
  $468 = (($467) + 96|0);
  $469 = HEAP32[$468>>2]|0;
  $470 = (($466) - ($469))|0;
  $tmp4 = $470;
  $471 = $dataptr;
  $472 = (($471) + 160|0);
  $473 = HEAP32[$472>>2]|0;
  $474 = $wsptr;
  $475 = (($474) + 64|0);
  $476 = HEAP32[$475>>2]|0;
  $477 = (($473) - ($476))|0;
  $tmp5 = $477;
  $478 = $dataptr;
  $479 = (($478) + 192|0);
  $480 = HEAP32[$479>>2]|0;
  $481 = $wsptr;
  $482 = (($481) + 32|0);
  $483 = HEAP32[$482>>2]|0;
  $484 = (($480) - ($483))|0;
  $tmp6 = $484;
  $485 = $dataptr;
  $486 = (($485) + 224|0);
  $487 = HEAP32[$486>>2]|0;
  $488 = $wsptr;
  $489 = HEAP32[$488>>2]|0;
  $490 = (($487) - ($489))|0;
  $tmp7 = $490;
  $491 = $tmp10;
  $492 = $tmp11;
  $493 = (($491) + ($492))|0;
  $494 = $tmp12;
  $495 = (($493) + ($494))|0;
  $496 = $tmp13;
  $497 = (($495) + ($496))|0;
  $498 = (($497) + 8)|0;
  $499 = $498 >> 4;
  $500 = $dataptr;
  HEAP32[$500>>2] = $499;
  $501 = $tmp10;
  $502 = $tmp13;
  $503 = (($501) - ($502))|0;
  $504 = ($503*10703)|0;
  $505 = $tmp11;
  $506 = $tmp12;
  $507 = (($505) - ($506))|0;
  $508 = ($507*4433)|0;
  $509 = (($504) + ($508))|0;
  $510 = (($509) + 65536)|0;
  $511 = $510 >> 17;
  $512 = $dataptr;
  $513 = (($512) + 128|0);
  HEAP32[$513>>2] = $511;
  $514 = $tmp17;
  $515 = $tmp15;
  $516 = (($514) - ($515))|0;
  $517 = ($516*2260)|0;
  $518 = $tmp14;
  $519 = $tmp16;
  $520 = (($518) - ($519))|0;
  $521 = ($520*11363)|0;
  $522 = (($517) + ($521))|0;
  $tmp10 = $522;
  $523 = $tmp10;
  $524 = $tmp15;
  $525 = ($524*11893)|0;
  $526 = (($523) + ($525))|0;
  $527 = $tmp16;
  $528 = ($527*17799)|0;
  $529 = (($526) + ($528))|0;
  $530 = (($529) + 65536)|0;
  $531 = $530 >> 17;
  $532 = $dataptr;
  $533 = (($532) + 64|0);
  HEAP32[$533>>2] = $531;
  $534 = $tmp10;
  $535 = $tmp14;
  $536 = ($535*1730)|0;
  $537 = (($534) - ($536))|0;
  $538 = $tmp17;
  $539 = ($538*8697)|0;
  $540 = (($537) - ($539))|0;
  $541 = (($540) + 65536)|0;
  $542 = $541 >> 17;
  $543 = $dataptr;
  $544 = (($543) + 192|0);
  HEAP32[$544>>2] = $542;
  $545 = $tmp0;
  $546 = $tmp1;
  $547 = (($545) + ($546))|0;
  $548 = ($547*11086)|0;
  $549 = $tmp6;
  $550 = $tmp7;
  $551 = (($549) - ($550))|0;
  $552 = ($551*3363)|0;
  $553 = (($548) + ($552))|0;
  $tmp11 = $553;
  $554 = $tmp0;
  $555 = $tmp2;
  $556 = (($554) + ($555))|0;
  $557 = ($556*10217)|0;
  $558 = $tmp5;
  $559 = $tmp7;
  $560 = (($558) + ($559))|0;
  $561 = ($560*5461)|0;
  $562 = (($557) + ($561))|0;
  $tmp12 = $562;
  $563 = $tmp0;
  $564 = $tmp3;
  $565 = (($563) + ($564))|0;
  $566 = ($565*8956)|0;
  $567 = $tmp4;
  $568 = $tmp7;
  $569 = (($567) - ($568))|0;
  $570 = ($569*7350)|0;
  $571 = (($566) + ($570))|0;
  $tmp13 = $571;
  $572 = $tmp1;
  $573 = $tmp2;
  $574 = (($572) + ($573))|0;
  $575 = ($574*1136)|0;
  $576 = $tmp6;
  $577 = $tmp5;
  $578 = (($576) - ($577))|0;
  $579 = ($578*11529)|0;
  $580 = (($575) + ($579))|0;
  $tmp14 = $580;
  $581 = $tmp1;
  $582 = $tmp3;
  $583 = (($581) + ($582))|0;
  $584 = Math_imul($583, -5461)|0;
  $585 = $tmp4;
  $586 = $tmp6;
  $587 = (($585) + ($586))|0;
  $588 = Math_imul($587, -10217)|0;
  $589 = (($584) + ($588))|0;
  $tmp15 = $589;
  $590 = $tmp2;
  $591 = $tmp3;
  $592 = (($590) + ($591))|0;
  $593 = Math_imul($592, -11086)|0;
  $594 = $tmp5;
  $595 = $tmp4;
  $596 = (($594) - ($595))|0;
  $597 = ($596*3363)|0;
  $598 = (($593) + ($597))|0;
  $tmp16 = $598;
  $599 = $tmp11;
  $600 = $tmp12;
  $601 = (($599) + ($600))|0;
  $602 = $tmp13;
  $603 = (($601) + ($602))|0;
  $604 = $tmp0;
  $605 = ($604*18730)|0;
  $606 = (($603) - ($605))|0;
  $607 = $tmp7;
  $608 = ($607*6387)|0;
  $609 = (($606) + ($608))|0;
  $tmp10 = $609;
  $610 = $tmp14;
  $611 = $tmp15;
  $612 = (($610) + ($611))|0;
  $613 = $tmp1;
  $614 = ($613*589)|0;
  $615 = (($612) + ($614))|0;
  $616 = $tmp6;
  $617 = ($616*13631)|0;
  $618 = (($615) - ($617))|0;
  $619 = $tmp11;
  $620 = (($619) + ($618))|0;
  $tmp11 = $620;
  $621 = $tmp14;
  $622 = $tmp16;
  $623 = (($621) + ($622))|0;
  $624 = $tmp2;
  $625 = ($624*9222)|0;
  $626 = (($623) - ($625))|0;
  $627 = $tmp5;
  $628 = ($627*10055)|0;
  $629 = (($626) + ($628))|0;
  $630 = $tmp12;
  $631 = (($630) + ($629))|0;
  $tmp12 = $631;
  $632 = $tmp15;
  $633 = $tmp16;
  $634 = (($632) + ($633))|0;
  $635 = $tmp3;
  $636 = ($635*8728)|0;
  $637 = (($634) + ($636))|0;
  $638 = $tmp4;
  $639 = ($638*17760)|0;
  $640 = (($637) + ($639))|0;
  $641 = $tmp13;
  $642 = (($641) + ($640))|0;
  $tmp13 = $642;
  $643 = $tmp10;
  $644 = (($643) + 65536)|0;
  $645 = $644 >> 17;
  $646 = $dataptr;
  $647 = (($646) + 32|0);
  HEAP32[$647>>2] = $645;
  $648 = $tmp11;
  $649 = (($648) + 65536)|0;
  $650 = $649 >> 17;
  $651 = $dataptr;
  $652 = (($651) + 96|0);
  HEAP32[$652>>2] = $650;
  $653 = $tmp12;
  $654 = (($653) + 65536)|0;
  $655 = $654 >> 17;
  $656 = $dataptr;
  $657 = (($656) + 160|0);
  HEAP32[$657>>2] = $655;
  $658 = $tmp13;
  $659 = (($658) + 65536)|0;
  $660 = $659 >> 17;
  $661 = $dataptr;
  $662 = (($661) + 224|0);
  HEAP32[$662>>2] = $660;
  $663 = $dataptr;
  $664 = (($663) + 4|0);
  $dataptr = $664;
  $665 = $wsptr;
  $666 = (($665) + 4|0);
  $wsptr = $666;
  $667 = $ctr;
  $668 = (($667) + -1)|0;
  $ctr = $668;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_16x8($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0;
 var $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp16 = 0, $tmp17 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $tmp6 = 0, $tmp7 = 0, $z1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = ($4|0)<(8);
  if (!($5)) {
   break;
  }
  $6 = $ctr;
  $7 = $1;
  $8 = (($7) + ($6<<2)|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $2;
  $11 = (($9) + ($10)|0);
  $elemptr = $11;
  $12 = $elemptr;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $elemptr;
  $16 = (($15) + 15|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($14) + ($18))|0;
  $tmp0 = $19;
  $20 = $elemptr;
  $21 = (($20) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = $elemptr;
  $25 = (($24) + 14|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (($23) + ($27))|0;
  $tmp1 = $28;
  $29 = $elemptr;
  $30 = (($29) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $elemptr;
  $34 = (($33) + 13|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = (($32) + ($36))|0;
  $tmp2 = $37;
  $38 = $elemptr;
  $39 = (($38) + 3|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $elemptr;
  $43 = (($42) + 12|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = (($41) + ($45))|0;
  $tmp3 = $46;
  $47 = $elemptr;
  $48 = (($47) + 4|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $51 = $elemptr;
  $52 = (($51) + 11|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = (($50) + ($54))|0;
  $tmp4 = $55;
  $56 = $elemptr;
  $57 = (($56) + 5|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $elemptr;
  $61 = (($60) + 10|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = (($59) + ($63))|0;
  $tmp5 = $64;
  $65 = $elemptr;
  $66 = (($65) + 6|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $elemptr;
  $70 = (($69) + 9|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = (($68) + ($72))|0;
  $tmp6 = $73;
  $74 = $elemptr;
  $75 = (($74) + 7|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $elemptr;
  $79 = (($78) + 8|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = (($77) + ($81))|0;
  $tmp7 = $82;
  $83 = $tmp0;
  $84 = $tmp7;
  $85 = (($83) + ($84))|0;
  $tmp10 = $85;
  $86 = $tmp0;
  $87 = $tmp7;
  $88 = (($86) - ($87))|0;
  $tmp14 = $88;
  $89 = $tmp1;
  $90 = $tmp6;
  $91 = (($89) + ($90))|0;
  $tmp11 = $91;
  $92 = $tmp1;
  $93 = $tmp6;
  $94 = (($92) - ($93))|0;
  $tmp15 = $94;
  $95 = $tmp2;
  $96 = $tmp5;
  $97 = (($95) + ($96))|0;
  $tmp12 = $97;
  $98 = $tmp2;
  $99 = $tmp5;
  $100 = (($98) - ($99))|0;
  $tmp16 = $100;
  $101 = $tmp3;
  $102 = $tmp4;
  $103 = (($101) + ($102))|0;
  $tmp13 = $103;
  $104 = $tmp3;
  $105 = $tmp4;
  $106 = (($104) - ($105))|0;
  $tmp17 = $106;
  $107 = $elemptr;
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = $elemptr;
  $111 = (($110) + 15|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $112&255;
  $114 = (($109) - ($113))|0;
  $tmp0 = $114;
  $115 = $elemptr;
  $116 = (($115) + 1|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = $elemptr;
  $120 = (($119) + 14|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = $121&255;
  $123 = (($118) - ($122))|0;
  $tmp1 = $123;
  $124 = $elemptr;
  $125 = (($124) + 2|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&255;
  $128 = $elemptr;
  $129 = (($128) + 13|0);
  $130 = HEAP8[$129>>0]|0;
  $131 = $130&255;
  $132 = (($127) - ($131))|0;
  $tmp2 = $132;
  $133 = $elemptr;
  $134 = (($133) + 3|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = $elemptr;
  $138 = (($137) + 12|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = $139&255;
  $141 = (($136) - ($140))|0;
  $tmp3 = $141;
  $142 = $elemptr;
  $143 = (($142) + 4|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = $144&255;
  $146 = $elemptr;
  $147 = (($146) + 11|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = (($145) - ($149))|0;
  $tmp4 = $150;
  $151 = $elemptr;
  $152 = (($151) + 5|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = $153&255;
  $155 = $elemptr;
  $156 = (($155) + 10|0);
  $157 = HEAP8[$156>>0]|0;
  $158 = $157&255;
  $159 = (($154) - ($158))|0;
  $tmp5 = $159;
  $160 = $elemptr;
  $161 = (($160) + 6|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = $162&255;
  $164 = $elemptr;
  $165 = (($164) + 9|0);
  $166 = HEAP8[$165>>0]|0;
  $167 = $166&255;
  $168 = (($163) - ($167))|0;
  $tmp6 = $168;
  $169 = $elemptr;
  $170 = (($169) + 7|0);
  $171 = HEAP8[$170>>0]|0;
  $172 = $171&255;
  $173 = $elemptr;
  $174 = (($173) + 8|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = $175&255;
  $177 = (($172) - ($176))|0;
  $tmp7 = $177;
  $178 = $tmp10;
  $179 = $tmp11;
  $180 = (($178) + ($179))|0;
  $181 = $tmp12;
  $182 = (($180) + ($181))|0;
  $183 = $tmp13;
  $184 = (($182) + ($183))|0;
  $185 = (($184) - 2048)|0;
  $186 = $185 << 2;
  $187 = $dataptr;
  HEAP32[$187>>2] = $186;
  $188 = $tmp10;
  $189 = $tmp13;
  $190 = (($188) - ($189))|0;
  $191 = ($190*10703)|0;
  $192 = $tmp11;
  $193 = $tmp12;
  $194 = (($192) - ($193))|0;
  $195 = ($194*4433)|0;
  $196 = (($191) + ($195))|0;
  $197 = (($196) + 1024)|0;
  $198 = $197 >> 11;
  $199 = $dataptr;
  $200 = (($199) + 16|0);
  HEAP32[$200>>2] = $198;
  $201 = $tmp17;
  $202 = $tmp15;
  $203 = (($201) - ($202))|0;
  $204 = ($203*2260)|0;
  $205 = $tmp14;
  $206 = $tmp16;
  $207 = (($205) - ($206))|0;
  $208 = ($207*11363)|0;
  $209 = (($204) + ($208))|0;
  $tmp10 = $209;
  $210 = $tmp10;
  $211 = $tmp15;
  $212 = ($211*11893)|0;
  $213 = (($210) + ($212))|0;
  $214 = $tmp16;
  $215 = ($214*17799)|0;
  $216 = (($213) + ($215))|0;
  $217 = (($216) + 1024)|0;
  $218 = $217 >> 11;
  $219 = $dataptr;
  $220 = (($219) + 8|0);
  HEAP32[$220>>2] = $218;
  $221 = $tmp10;
  $222 = $tmp14;
  $223 = ($222*1730)|0;
  $224 = (($221) - ($223))|0;
  $225 = $tmp17;
  $226 = ($225*8697)|0;
  $227 = (($224) - ($226))|0;
  $228 = (($227) + 1024)|0;
  $229 = $228 >> 11;
  $230 = $dataptr;
  $231 = (($230) + 24|0);
  HEAP32[$231>>2] = $229;
  $232 = $tmp0;
  $233 = $tmp1;
  $234 = (($232) + ($233))|0;
  $235 = ($234*11086)|0;
  $236 = $tmp6;
  $237 = $tmp7;
  $238 = (($236) - ($237))|0;
  $239 = ($238*3363)|0;
  $240 = (($235) + ($239))|0;
  $tmp11 = $240;
  $241 = $tmp0;
  $242 = $tmp2;
  $243 = (($241) + ($242))|0;
  $244 = ($243*10217)|0;
  $245 = $tmp5;
  $246 = $tmp7;
  $247 = (($245) + ($246))|0;
  $248 = ($247*5461)|0;
  $249 = (($244) + ($248))|0;
  $tmp12 = $249;
  $250 = $tmp0;
  $251 = $tmp3;
  $252 = (($250) + ($251))|0;
  $253 = ($252*8956)|0;
  $254 = $tmp4;
  $255 = $tmp7;
  $256 = (($254) - ($255))|0;
  $257 = ($256*7350)|0;
  $258 = (($253) + ($257))|0;
  $tmp13 = $258;
  $259 = $tmp1;
  $260 = $tmp2;
  $261 = (($259) + ($260))|0;
  $262 = ($261*1136)|0;
  $263 = $tmp6;
  $264 = $tmp5;
  $265 = (($263) - ($264))|0;
  $266 = ($265*11529)|0;
  $267 = (($262) + ($266))|0;
  $tmp14 = $267;
  $268 = $tmp1;
  $269 = $tmp3;
  $270 = (($268) + ($269))|0;
  $271 = Math_imul($270, -5461)|0;
  $272 = $tmp4;
  $273 = $tmp6;
  $274 = (($272) + ($273))|0;
  $275 = Math_imul($274, -10217)|0;
  $276 = (($271) + ($275))|0;
  $tmp15 = $276;
  $277 = $tmp2;
  $278 = $tmp3;
  $279 = (($277) + ($278))|0;
  $280 = Math_imul($279, -11086)|0;
  $281 = $tmp5;
  $282 = $tmp4;
  $283 = (($281) - ($282))|0;
  $284 = ($283*3363)|0;
  $285 = (($280) + ($284))|0;
  $tmp16 = $285;
  $286 = $tmp11;
  $287 = $tmp12;
  $288 = (($286) + ($287))|0;
  $289 = $tmp13;
  $290 = (($288) + ($289))|0;
  $291 = $tmp0;
  $292 = ($291*18730)|0;
  $293 = (($290) - ($292))|0;
  $294 = $tmp7;
  $295 = ($294*6387)|0;
  $296 = (($293) + ($295))|0;
  $tmp10 = $296;
  $297 = $tmp14;
  $298 = $tmp15;
  $299 = (($297) + ($298))|0;
  $300 = $tmp1;
  $301 = ($300*589)|0;
  $302 = (($299) + ($301))|0;
  $303 = $tmp6;
  $304 = ($303*13631)|0;
  $305 = (($302) - ($304))|0;
  $306 = $tmp11;
  $307 = (($306) + ($305))|0;
  $tmp11 = $307;
  $308 = $tmp14;
  $309 = $tmp16;
  $310 = (($308) + ($309))|0;
  $311 = $tmp2;
  $312 = ($311*9222)|0;
  $313 = (($310) - ($312))|0;
  $314 = $tmp5;
  $315 = ($314*10055)|0;
  $316 = (($313) + ($315))|0;
  $317 = $tmp12;
  $318 = (($317) + ($316))|0;
  $tmp12 = $318;
  $319 = $tmp15;
  $320 = $tmp16;
  $321 = (($319) + ($320))|0;
  $322 = $tmp3;
  $323 = ($322*8728)|0;
  $324 = (($321) + ($323))|0;
  $325 = $tmp4;
  $326 = ($325*17760)|0;
  $327 = (($324) + ($326))|0;
  $328 = $tmp13;
  $329 = (($328) + ($327))|0;
  $tmp13 = $329;
  $330 = $tmp10;
  $331 = (($330) + 1024)|0;
  $332 = $331 >> 11;
  $333 = $dataptr;
  $334 = (($333) + 4|0);
  HEAP32[$334>>2] = $332;
  $335 = $tmp11;
  $336 = (($335) + 1024)|0;
  $337 = $336 >> 11;
  $338 = $dataptr;
  $339 = (($338) + 12|0);
  HEAP32[$339>>2] = $337;
  $340 = $tmp12;
  $341 = (($340) + 1024)|0;
  $342 = $341 >> 11;
  $343 = $dataptr;
  $344 = (($343) + 20|0);
  HEAP32[$344>>2] = $342;
  $345 = $tmp13;
  $346 = (($345) + 1024)|0;
  $347 = $346 >> 11;
  $348 = $dataptr;
  $349 = (($348) + 28|0);
  HEAP32[$349>>2] = $347;
  $350 = $dataptr;
  $351 = (($350) + 32|0);
  $dataptr = $351;
  $352 = $ctr;
  $353 = (($352) + 1)|0;
  $ctr = $353;
 }
 $354 = $0;
 $dataptr = $354;
 $ctr = 7;
 while(1) {
  $355 = $ctr;
  $356 = ($355|0)>=(0);
  if (!($356)) {
   break;
  }
  $357 = $dataptr;
  $358 = HEAP32[$357>>2]|0;
  $359 = $dataptr;
  $360 = (($359) + 224|0);
  $361 = HEAP32[$360>>2]|0;
  $362 = (($358) + ($361))|0;
  $tmp0 = $362;
  $363 = $dataptr;
  $364 = (($363) + 32|0);
  $365 = HEAP32[$364>>2]|0;
  $366 = $dataptr;
  $367 = (($366) + 192|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = (($365) + ($368))|0;
  $tmp1 = $369;
  $370 = $dataptr;
  $371 = (($370) + 64|0);
  $372 = HEAP32[$371>>2]|0;
  $373 = $dataptr;
  $374 = (($373) + 160|0);
  $375 = HEAP32[$374>>2]|0;
  $376 = (($372) + ($375))|0;
  $tmp2 = $376;
  $377 = $dataptr;
  $378 = (($377) + 96|0);
  $379 = HEAP32[$378>>2]|0;
  $380 = $dataptr;
  $381 = (($380) + 128|0);
  $382 = HEAP32[$381>>2]|0;
  $383 = (($379) + ($382))|0;
  $tmp3 = $383;
  $384 = $tmp0;
  $385 = $tmp3;
  $386 = (($384) + ($385))|0;
  $tmp10 = $386;
  $387 = $tmp0;
  $388 = $tmp3;
  $389 = (($387) - ($388))|0;
  $tmp12 = $389;
  $390 = $tmp1;
  $391 = $tmp2;
  $392 = (($390) + ($391))|0;
  $tmp11 = $392;
  $393 = $tmp1;
  $394 = $tmp2;
  $395 = (($393) - ($394))|0;
  $tmp13 = $395;
  $396 = $dataptr;
  $397 = HEAP32[$396>>2]|0;
  $398 = $dataptr;
  $399 = (($398) + 224|0);
  $400 = HEAP32[$399>>2]|0;
  $401 = (($397) - ($400))|0;
  $tmp0 = $401;
  $402 = $dataptr;
  $403 = (($402) + 32|0);
  $404 = HEAP32[$403>>2]|0;
  $405 = $dataptr;
  $406 = (($405) + 192|0);
  $407 = HEAP32[$406>>2]|0;
  $408 = (($404) - ($407))|0;
  $tmp1 = $408;
  $409 = $dataptr;
  $410 = (($409) + 64|0);
  $411 = HEAP32[$410>>2]|0;
  $412 = $dataptr;
  $413 = (($412) + 160|0);
  $414 = HEAP32[$413>>2]|0;
  $415 = (($411) - ($414))|0;
  $tmp2 = $415;
  $416 = $dataptr;
  $417 = (($416) + 96|0);
  $418 = HEAP32[$417>>2]|0;
  $419 = $dataptr;
  $420 = (($419) + 128|0);
  $421 = HEAP32[$420>>2]|0;
  $422 = (($418) - ($421))|0;
  $tmp3 = $422;
  $423 = $tmp10;
  $424 = $tmp11;
  $425 = (($423) + ($424))|0;
  $426 = (($425) + 4)|0;
  $427 = $426 >> 3;
  $428 = $dataptr;
  HEAP32[$428>>2] = $427;
  $429 = $tmp10;
  $430 = $tmp11;
  $431 = (($429) - ($430))|0;
  $432 = (($431) + 4)|0;
  $433 = $432 >> 3;
  $434 = $dataptr;
  $435 = (($434) + 128|0);
  HEAP32[$435>>2] = $433;
  $436 = $tmp12;
  $437 = $tmp13;
  $438 = (($436) + ($437))|0;
  $439 = ($438*4433)|0;
  $z1 = $439;
  $440 = $z1;
  $441 = $tmp12;
  $442 = ($441*6270)|0;
  $443 = (($440) + ($442))|0;
  $444 = (($443) + 32768)|0;
  $445 = $444 >> 16;
  $446 = $dataptr;
  $447 = (($446) + 64|0);
  HEAP32[$447>>2] = $445;
  $448 = $z1;
  $449 = $tmp13;
  $450 = ($449*15137)|0;
  $451 = (($448) - ($450))|0;
  $452 = (($451) + 32768)|0;
  $453 = $452 >> 16;
  $454 = $dataptr;
  $455 = (($454) + 192|0);
  HEAP32[$455>>2] = $453;
  $456 = $tmp0;
  $457 = $tmp2;
  $458 = (($456) + ($457))|0;
  $tmp12 = $458;
  $459 = $tmp1;
  $460 = $tmp3;
  $461 = (($459) + ($460))|0;
  $tmp13 = $461;
  $462 = $tmp12;
  $463 = $tmp13;
  $464 = (($462) + ($463))|0;
  $465 = ($464*9633)|0;
  $z1 = $465;
  $466 = $tmp12;
  $467 = Math_imul($466, -3196)|0;
  $tmp12 = $467;
  $468 = $tmp13;
  $469 = Math_imul($468, -16069)|0;
  $tmp13 = $469;
  $470 = $z1;
  $471 = $tmp12;
  $472 = (($471) + ($470))|0;
  $tmp12 = $472;
  $473 = $z1;
  $474 = $tmp13;
  $475 = (($474) + ($473))|0;
  $tmp13 = $475;
  $476 = $tmp0;
  $477 = $tmp3;
  $478 = (($476) + ($477))|0;
  $479 = Math_imul($478, -7373)|0;
  $z1 = $479;
  $480 = $tmp0;
  $481 = ($480*12299)|0;
  $tmp0 = $481;
  $482 = $tmp3;
  $483 = ($482*2446)|0;
  $tmp3 = $483;
  $484 = $z1;
  $485 = $tmp12;
  $486 = (($484) + ($485))|0;
  $487 = $tmp0;
  $488 = (($487) + ($486))|0;
  $tmp0 = $488;
  $489 = $z1;
  $490 = $tmp13;
  $491 = (($489) + ($490))|0;
  $492 = $tmp3;
  $493 = (($492) + ($491))|0;
  $tmp3 = $493;
  $494 = $tmp1;
  $495 = $tmp2;
  $496 = (($494) + ($495))|0;
  $497 = Math_imul($496, -20995)|0;
  $z1 = $497;
  $498 = $tmp1;
  $499 = ($498*25172)|0;
  $tmp1 = $499;
  $500 = $tmp2;
  $501 = ($500*16819)|0;
  $tmp2 = $501;
  $502 = $z1;
  $503 = $tmp13;
  $504 = (($502) + ($503))|0;
  $505 = $tmp1;
  $506 = (($505) + ($504))|0;
  $tmp1 = $506;
  $507 = $z1;
  $508 = $tmp12;
  $509 = (($507) + ($508))|0;
  $510 = $tmp2;
  $511 = (($510) + ($509))|0;
  $tmp2 = $511;
  $512 = $tmp0;
  $513 = (($512) + 32768)|0;
  $514 = $513 >> 16;
  $515 = $dataptr;
  $516 = (($515) + 32|0);
  HEAP32[$516>>2] = $514;
  $517 = $tmp1;
  $518 = (($517) + 32768)|0;
  $519 = $518 >> 16;
  $520 = $dataptr;
  $521 = (($520) + 96|0);
  HEAP32[$521>>2] = $519;
  $522 = $tmp2;
  $523 = (($522) + 32768)|0;
  $524 = $523 >> 16;
  $525 = $dataptr;
  $526 = (($525) + 160|0);
  HEAP32[$526>>2] = $524;
  $527 = $tmp3;
  $528 = (($527) + 32768)|0;
  $529 = $528 >> 16;
  $530 = $dataptr;
  $531 = (($530) + 224|0);
  HEAP32[$531>>2] = $529;
  $532 = $dataptr;
  $533 = (($532) + 4|0);
  $dataptr = $533;
  $534 = $ctr;
  $535 = (($534) + -1)|0;
  $ctr = $535;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_14x7($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0;
 var $tmp14 = 0, $tmp15 = 0, $tmp16 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $tmp6 = 0, $z1 = 0, $z2 = 0, $z3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $4 = (($3) + 224|0);
 dest=$4+0|0; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $5 = $0;
 $dataptr = $5;
 $ctr = 0;
 while(1) {
  $6 = $ctr;
  $7 = ($6|0)<(7);
  if (!($7)) {
   break;
  }
  $8 = $ctr;
  $9 = $1;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = (($11) + ($12)|0);
  $elemptr = $13;
  $14 = $elemptr;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $elemptr;
  $18 = (($17) + 13|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (($16) + ($20))|0;
  $tmp0 = $21;
  $22 = $elemptr;
  $23 = (($22) + 1|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $elemptr;
  $27 = (($26) + 12|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = (($25) + ($29))|0;
  $tmp1 = $30;
  $31 = $elemptr;
  $32 = (($31) + 2|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $elemptr;
  $36 = (($35) + 11|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($34) + ($38))|0;
  $tmp2 = $39;
  $40 = $elemptr;
  $41 = (($40) + 3|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $elemptr;
  $45 = (($44) + 10|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = (($43) + ($47))|0;
  $tmp13 = $48;
  $49 = $elemptr;
  $50 = (($49) + 4|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $elemptr;
  $54 = (($53) + 9|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = (($52) + ($56))|0;
  $tmp4 = $57;
  $58 = $elemptr;
  $59 = (($58) + 5|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $elemptr;
  $63 = (($62) + 8|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = (($61) + ($65))|0;
  $tmp5 = $66;
  $67 = $elemptr;
  $68 = (($67) + 6|0);
  $69 = HEAP8[$68>>0]|0;
  $70 = $69&255;
  $71 = $elemptr;
  $72 = (($71) + 7|0);
  $73 = HEAP8[$72>>0]|0;
  $74 = $73&255;
  $75 = (($70) + ($74))|0;
  $tmp6 = $75;
  $76 = $tmp0;
  $77 = $tmp6;
  $78 = (($76) + ($77))|0;
  $tmp10 = $78;
  $79 = $tmp0;
  $80 = $tmp6;
  $81 = (($79) - ($80))|0;
  $tmp14 = $81;
  $82 = $tmp1;
  $83 = $tmp5;
  $84 = (($82) + ($83))|0;
  $tmp11 = $84;
  $85 = $tmp1;
  $86 = $tmp5;
  $87 = (($85) - ($86))|0;
  $tmp15 = $87;
  $88 = $tmp2;
  $89 = $tmp4;
  $90 = (($88) + ($89))|0;
  $tmp12 = $90;
  $91 = $tmp2;
  $92 = $tmp4;
  $93 = (($91) - ($92))|0;
  $tmp16 = $93;
  $94 = $elemptr;
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = $elemptr;
  $98 = (($97) + 13|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = (($96) - ($100))|0;
  $tmp0 = $101;
  $102 = $elemptr;
  $103 = (($102) + 1|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = $elemptr;
  $107 = (($106) + 12|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = (($105) - ($109))|0;
  $tmp1 = $110;
  $111 = $elemptr;
  $112 = (($111) + 2|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = $elemptr;
  $116 = (($115) + 11|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (($114) - ($118))|0;
  $tmp2 = $119;
  $120 = $elemptr;
  $121 = (($120) + 3|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = $elemptr;
  $125 = (($124) + 10|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&255;
  $128 = (($123) - ($127))|0;
  $tmp3 = $128;
  $129 = $elemptr;
  $130 = (($129) + 4|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = $elemptr;
  $134 = (($133) + 9|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = (($132) - ($136))|0;
  $tmp4 = $137;
  $138 = $elemptr;
  $139 = (($138) + 5|0);
  $140 = HEAP8[$139>>0]|0;
  $141 = $140&255;
  $142 = $elemptr;
  $143 = (($142) + 8|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = $144&255;
  $146 = (($141) - ($145))|0;
  $tmp5 = $146;
  $147 = $elemptr;
  $148 = (($147) + 6|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $149&255;
  $151 = $elemptr;
  $152 = (($151) + 7|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = $153&255;
  $155 = (($150) - ($154))|0;
  $tmp6 = $155;
  $156 = $tmp10;
  $157 = $tmp11;
  $158 = (($156) + ($157))|0;
  $159 = $tmp12;
  $160 = (($158) + ($159))|0;
  $161 = $tmp13;
  $162 = (($160) + ($161))|0;
  $163 = (($162) - 1792)|0;
  $164 = $163 << 2;
  $165 = $dataptr;
  HEAP32[$165>>2] = $164;
  $166 = $tmp13;
  $167 = $tmp13;
  $168 = (($167) + ($166))|0;
  $tmp13 = $168;
  $169 = $tmp10;
  $170 = $tmp13;
  $171 = (($169) - ($170))|0;
  $172 = ($171*10438)|0;
  $173 = $tmp11;
  $174 = $tmp13;
  $175 = (($173) - ($174))|0;
  $176 = ($175*2578)|0;
  $177 = (($172) + ($176))|0;
  $178 = $tmp12;
  $179 = $tmp13;
  $180 = (($178) - ($179))|0;
  $181 = ($180*7223)|0;
  $182 = (($177) - ($181))|0;
  $183 = (($182) + 1024)|0;
  $184 = $183 >> 11;
  $185 = $dataptr;
  $186 = (($185) + 16|0);
  HEAP32[$186>>2] = $184;
  $187 = $tmp14;
  $188 = $tmp15;
  $189 = (($187) + ($188))|0;
  $190 = ($189*9058)|0;
  $tmp10 = $190;
  $191 = $tmp10;
  $192 = $tmp14;
  $193 = ($192*2237)|0;
  $194 = (($191) + ($193))|0;
  $195 = $tmp16;
  $196 = ($195*5027)|0;
  $197 = (($194) + ($196))|0;
  $198 = (($197) + 1024)|0;
  $199 = $198 >> 11;
  $200 = $dataptr;
  $201 = (($200) + 8|0);
  HEAP32[$201>>2] = $199;
  $202 = $tmp10;
  $203 = $tmp15;
  $204 = ($203*14084)|0;
  $205 = (($202) - ($204))|0;
  $206 = $tmp16;
  $207 = ($206*11295)|0;
  $208 = (($205) - ($207))|0;
  $209 = (($208) + 1024)|0;
  $210 = $209 >> 11;
  $211 = $dataptr;
  $212 = (($211) + 24|0);
  HEAP32[$212>>2] = $210;
  $213 = $tmp1;
  $214 = $tmp2;
  $215 = (($213) + ($214))|0;
  $tmp10 = $215;
  $216 = $tmp5;
  $217 = $tmp4;
  $218 = (($216) - ($217))|0;
  $tmp11 = $218;
  $219 = $tmp0;
  $220 = $tmp10;
  $221 = (($219) - ($220))|0;
  $222 = $tmp3;
  $223 = (($221) + ($222))|0;
  $224 = $tmp11;
  $225 = (($223) - ($224))|0;
  $226 = $tmp6;
  $227 = (($225) - ($226))|0;
  $228 = $227 << 2;
  $229 = $dataptr;
  $230 = (($229) + 28|0);
  HEAP32[$230>>2] = $228;
  $231 = $tmp3;
  $232 = $231 << 13;
  $tmp3 = $232;
  $233 = $tmp10;
  $234 = Math_imul($233, -1297)|0;
  $tmp10 = $234;
  $235 = $tmp11;
  $236 = ($235*11512)|0;
  $tmp11 = $236;
  $237 = $tmp11;
  $238 = $tmp3;
  $239 = (($237) - ($238))|0;
  $240 = $tmp10;
  $241 = (($240) + ($239))|0;
  $tmp10 = $241;
  $242 = $tmp0;
  $243 = $tmp2;
  $244 = (($242) + ($243))|0;
  $245 = ($244*9810)|0;
  $246 = $tmp4;
  $247 = $tmp6;
  $248 = (($246) + ($247))|0;
  $249 = ($248*6164)|0;
  $250 = (($245) + ($249))|0;
  $tmp11 = $250;
  $251 = $tmp10;
  $252 = $tmp11;
  $253 = (($251) + ($252))|0;
  $254 = $tmp2;
  $255 = ($254*19447)|0;
  $256 = (($253) - ($255))|0;
  $257 = $tmp4;
  $258 = ($257*9175)|0;
  $259 = (($256) + ($258))|0;
  $260 = (($259) + 1024)|0;
  $261 = $260 >> 11;
  $262 = $dataptr;
  $263 = (($262) + 20|0);
  HEAP32[$263>>2] = $261;
  $264 = $tmp0;
  $265 = $tmp1;
  $266 = (($264) + ($265))|0;
  $267 = ($266*10935)|0;
  $268 = $tmp5;
  $269 = $tmp6;
  $270 = (($268) - ($269))|0;
  $271 = ($270*3826)|0;
  $272 = (($267) + ($271))|0;
  $tmp12 = $272;
  $273 = $tmp10;
  $274 = $tmp12;
  $275 = (($273) + ($274))|0;
  $276 = $tmp1;
  $277 = ($276*3474)|0;
  $278 = (($275) - ($277))|0;
  $279 = $tmp5;
  $280 = ($279*25148)|0;
  $281 = (($278) - ($280))|0;
  $282 = (($281) + 1024)|0;
  $283 = $282 >> 11;
  $284 = $dataptr;
  $285 = (($284) + 12|0);
  HEAP32[$285>>2] = $283;
  $286 = $tmp11;
  $287 = $tmp12;
  $288 = (($286) + ($287))|0;
  $289 = $tmp3;
  $290 = (($288) + ($289))|0;
  $291 = $tmp6;
  $292 = (($290) + ($291))|0;
  $293 = $tmp0;
  $294 = $tmp6;
  $295 = (($293) + ($294))|0;
  $296 = ($295*9232)|0;
  $297 = (($292) - ($296))|0;
  $298 = (($297) + 1024)|0;
  $299 = $298 >> 11;
  $300 = $dataptr;
  $301 = (($300) + 4|0);
  HEAP32[$301>>2] = $299;
  $302 = $dataptr;
  $303 = (($302) + 32|0);
  $dataptr = $303;
  $304 = $ctr;
  $305 = (($304) + 1)|0;
  $ctr = $305;
 }
 $306 = $0;
 $dataptr = $306;
 $ctr = 7;
 while(1) {
  $307 = $ctr;
  $308 = ($307|0)>=(0);
  if (!($308)) {
   break;
  }
  $309 = $dataptr;
  $310 = HEAP32[$309>>2]|0;
  $311 = $dataptr;
  $312 = (($311) + 192|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = (($310) + ($313))|0;
  $tmp0 = $314;
  $315 = $dataptr;
  $316 = (($315) + 32|0);
  $317 = HEAP32[$316>>2]|0;
  $318 = $dataptr;
  $319 = (($318) + 160|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = (($317) + ($320))|0;
  $tmp1 = $321;
  $322 = $dataptr;
  $323 = (($322) + 64|0);
  $324 = HEAP32[$323>>2]|0;
  $325 = $dataptr;
  $326 = (($325) + 128|0);
  $327 = HEAP32[$326>>2]|0;
  $328 = (($324) + ($327))|0;
  $tmp2 = $328;
  $329 = $dataptr;
  $330 = (($329) + 96|0);
  $331 = HEAP32[$330>>2]|0;
  $tmp3 = $331;
  $332 = $dataptr;
  $333 = HEAP32[$332>>2]|0;
  $334 = $dataptr;
  $335 = (($334) + 192|0);
  $336 = HEAP32[$335>>2]|0;
  $337 = (($333) - ($336))|0;
  $tmp10 = $337;
  $338 = $dataptr;
  $339 = (($338) + 32|0);
  $340 = HEAP32[$339>>2]|0;
  $341 = $dataptr;
  $342 = (($341) + 160|0);
  $343 = HEAP32[$342>>2]|0;
  $344 = (($340) - ($343))|0;
  $tmp11 = $344;
  $345 = $dataptr;
  $346 = (($345) + 64|0);
  $347 = HEAP32[$346>>2]|0;
  $348 = $dataptr;
  $349 = (($348) + 128|0);
  $350 = HEAP32[$349>>2]|0;
  $351 = (($347) - ($350))|0;
  $tmp12 = $351;
  $352 = $tmp0;
  $353 = $tmp2;
  $354 = (($352) + ($353))|0;
  $z1 = $354;
  $355 = $z1;
  $356 = $tmp1;
  $357 = (($355) + ($356))|0;
  $358 = $tmp3;
  $359 = (($357) + ($358))|0;
  $360 = ($359*10700)|0;
  $361 = (($360) + 32768)|0;
  $362 = $361 >> 16;
  $363 = $dataptr;
  HEAP32[$363>>2] = $362;
  $364 = $tmp3;
  $365 = $tmp3;
  $366 = (($365) + ($364))|0;
  $tmp3 = $366;
  $367 = $tmp3;
  $368 = $z1;
  $369 = (($368) - ($367))|0;
  $z1 = $369;
  $370 = $tmp3;
  $371 = $z1;
  $372 = (($371) - ($370))|0;
  $z1 = $372;
  $373 = $z1;
  $374 = ($373*3783)|0;
  $z1 = $374;
  $375 = $tmp0;
  $376 = $tmp2;
  $377 = (($375) - ($376))|0;
  $378 = ($377*9850)|0;
  $z2 = $378;
  $379 = $tmp1;
  $380 = $tmp2;
  $381 = (($379) - ($380))|0;
  $382 = ($381*3367)|0;
  $z3 = $382;
  $383 = $z1;
  $384 = $z2;
  $385 = (($383) + ($384))|0;
  $386 = $z3;
  $387 = (($385) + ($386))|0;
  $388 = (($387) + 32768)|0;
  $389 = $388 >> 16;
  $390 = $dataptr;
  $391 = (($390) + 64|0);
  HEAP32[$391>>2] = $389;
  $392 = $z2;
  $393 = $z1;
  $394 = (($393) - ($392))|0;
  $z1 = $394;
  $395 = $tmp0;
  $396 = $tmp1;
  $397 = (($395) - ($396))|0;
  $398 = ($397*9434)|0;
  $z2 = $398;
  $399 = $z2;
  $400 = $z3;
  $401 = (($399) + ($400))|0;
  $402 = $tmp1;
  $403 = $tmp3;
  $404 = (($402) - ($403))|0;
  $405 = ($404*7566)|0;
  $406 = (($401) - ($405))|0;
  $407 = (($406) + 32768)|0;
  $408 = $407 >> 16;
  $409 = $dataptr;
  $410 = (($409) + 128|0);
  HEAP32[$410>>2] = $408;
  $411 = $z1;
  $412 = $z2;
  $413 = (($411) + ($412))|0;
  $414 = (($413) + 32768)|0;
  $415 = $414 >> 16;
  $416 = $dataptr;
  $417 = (($416) + 192|0);
  HEAP32[$417>>2] = $415;
  $418 = $tmp10;
  $419 = $tmp11;
  $420 = (($418) + ($419))|0;
  $421 = ($420*10009)|0;
  $tmp1 = $421;
  $422 = $tmp10;
  $423 = $tmp11;
  $424 = (($422) - ($423))|0;
  $425 = ($424*1822)|0;
  $tmp2 = $425;
  $426 = $tmp1;
  $427 = $tmp2;
  $428 = (($426) - ($427))|0;
  $tmp0 = $428;
  $429 = $tmp2;
  $430 = $tmp1;
  $431 = (($430) + ($429))|0;
  $tmp1 = $431;
  $432 = $tmp11;
  $433 = $tmp12;
  $434 = (($432) + ($433))|0;
  $435 = Math_imul($434, -14752)|0;
  $tmp2 = $435;
  $436 = $tmp2;
  $437 = $tmp1;
  $438 = (($437) + ($436))|0;
  $tmp1 = $438;
  $439 = $tmp10;
  $440 = $tmp12;
  $441 = (($439) + ($440))|0;
  $442 = ($441*6565)|0;
  $tmp3 = $442;
  $443 = $tmp3;
  $444 = $tmp0;
  $445 = (($444) + ($443))|0;
  $tmp0 = $445;
  $446 = $tmp3;
  $447 = $tmp12;
  $448 = ($447*20017)|0;
  $449 = (($446) + ($448))|0;
  $450 = $tmp2;
  $451 = (($450) + ($449))|0;
  $tmp2 = $451;
  $452 = $tmp0;
  $453 = (($452) + 32768)|0;
  $454 = $453 >> 16;
  $455 = $dataptr;
  $456 = (($455) + 32|0);
  HEAP32[$456>>2] = $454;
  $457 = $tmp1;
  $458 = (($457) + 32768)|0;
  $459 = $458 >> 16;
  $460 = $dataptr;
  $461 = (($460) + 96|0);
  HEAP32[$461>>2] = $459;
  $462 = $tmp2;
  $463 = (($462) + 32768)|0;
  $464 = $463 >> 16;
  $465 = $dataptr;
  $466 = (($465) + 160|0);
  HEAP32[$466>>2] = $464;
  $467 = $dataptr;
  $468 = (($467) + 4|0);
  $dataptr = $468;
  $469 = $ctr;
  $470 = (($469) + -1)|0;
  $ctr = $470;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_12x6($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0;
 var $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $4 = (($3) + 192|0);
 dest=$4+0|0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $5 = $0;
 $dataptr = $5;
 $ctr = 0;
 while(1) {
  $6 = $ctr;
  $7 = ($6|0)<(6);
  if (!($7)) {
   break;
  }
  $8 = $ctr;
  $9 = $1;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = (($11) + ($12)|0);
  $elemptr = $13;
  $14 = $elemptr;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $elemptr;
  $18 = (($17) + 11|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (($16) + ($20))|0;
  $tmp0 = $21;
  $22 = $elemptr;
  $23 = (($22) + 1|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $elemptr;
  $27 = (($26) + 10|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = (($25) + ($29))|0;
  $tmp1 = $30;
  $31 = $elemptr;
  $32 = (($31) + 2|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $elemptr;
  $36 = (($35) + 9|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($34) + ($38))|0;
  $tmp2 = $39;
  $40 = $elemptr;
  $41 = (($40) + 3|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $elemptr;
  $45 = (($44) + 8|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = (($43) + ($47))|0;
  $tmp3 = $48;
  $49 = $elemptr;
  $50 = (($49) + 4|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $elemptr;
  $54 = (($53) + 7|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = (($52) + ($56))|0;
  $tmp4 = $57;
  $58 = $elemptr;
  $59 = (($58) + 5|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $elemptr;
  $63 = (($62) + 6|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = (($61) + ($65))|0;
  $tmp5 = $66;
  $67 = $tmp0;
  $68 = $tmp5;
  $69 = (($67) + ($68))|0;
  $tmp10 = $69;
  $70 = $tmp0;
  $71 = $tmp5;
  $72 = (($70) - ($71))|0;
  $tmp13 = $72;
  $73 = $tmp1;
  $74 = $tmp4;
  $75 = (($73) + ($74))|0;
  $tmp11 = $75;
  $76 = $tmp1;
  $77 = $tmp4;
  $78 = (($76) - ($77))|0;
  $tmp14 = $78;
  $79 = $tmp2;
  $80 = $tmp3;
  $81 = (($79) + ($80))|0;
  $tmp12 = $81;
  $82 = $tmp2;
  $83 = $tmp3;
  $84 = (($82) - ($83))|0;
  $tmp15 = $84;
  $85 = $elemptr;
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $88 = $elemptr;
  $89 = (($88) + 11|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = (($87) - ($91))|0;
  $tmp0 = $92;
  $93 = $elemptr;
  $94 = (($93) + 1|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $97 = $elemptr;
  $98 = (($97) + 10|0);
  $99 = HEAP8[$98>>0]|0;
  $100 = $99&255;
  $101 = (($96) - ($100))|0;
  $tmp1 = $101;
  $102 = $elemptr;
  $103 = (($102) + 2|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = $elemptr;
  $107 = (($106) + 9|0);
  $108 = HEAP8[$107>>0]|0;
  $109 = $108&255;
  $110 = (($105) - ($109))|0;
  $tmp2 = $110;
  $111 = $elemptr;
  $112 = (($111) + 3|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = $elemptr;
  $116 = (($115) + 8|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = (($114) - ($118))|0;
  $tmp3 = $119;
  $120 = $elemptr;
  $121 = (($120) + 4|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $122&255;
  $124 = $elemptr;
  $125 = (($124) + 7|0);
  $126 = HEAP8[$125>>0]|0;
  $127 = $126&255;
  $128 = (($123) - ($127))|0;
  $tmp4 = $128;
  $129 = $elemptr;
  $130 = (($129) + 5|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $131&255;
  $133 = $elemptr;
  $134 = (($133) + 6|0);
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = (($132) - ($136))|0;
  $tmp5 = $137;
  $138 = $tmp10;
  $139 = $tmp11;
  $140 = (($138) + ($139))|0;
  $141 = $tmp12;
  $142 = (($140) + ($141))|0;
  $143 = (($142) - 1536)|0;
  $144 = $143 << 2;
  $145 = $dataptr;
  HEAP32[$145>>2] = $144;
  $146 = $tmp13;
  $147 = $tmp14;
  $148 = (($146) - ($147))|0;
  $149 = $tmp15;
  $150 = (($148) - ($149))|0;
  $151 = $150 << 2;
  $152 = $dataptr;
  $153 = (($152) + 24|0);
  HEAP32[$153>>2] = $151;
  $154 = $tmp10;
  $155 = $tmp12;
  $156 = (($154) - ($155))|0;
  $157 = ($156*10033)|0;
  $158 = (($157) + 1024)|0;
  $159 = $158 >> 11;
  $160 = $dataptr;
  $161 = (($160) + 16|0);
  HEAP32[$161>>2] = $159;
  $162 = $tmp14;
  $163 = $tmp15;
  $164 = (($162) - ($163))|0;
  $165 = $tmp13;
  $166 = $tmp15;
  $167 = (($165) + ($166))|0;
  $168 = ($167*11190)|0;
  $169 = (($164) + ($168))|0;
  $170 = (($169) + 1024)|0;
  $171 = $170 >> 11;
  $172 = $dataptr;
  $173 = (($172) + 8|0);
  HEAP32[$173>>2] = $171;
  $174 = $tmp1;
  $175 = $tmp4;
  $176 = (($174) + ($175))|0;
  $177 = ($176*4433)|0;
  $tmp10 = $177;
  $178 = $tmp10;
  $179 = $tmp1;
  $180 = ($179*6270)|0;
  $181 = (($178) + ($180))|0;
  $tmp14 = $181;
  $182 = $tmp10;
  $183 = $tmp4;
  $184 = ($183*15137)|0;
  $185 = (($182) - ($184))|0;
  $tmp15 = $185;
  $186 = $tmp0;
  $187 = $tmp2;
  $188 = (($186) + ($187))|0;
  $189 = ($188*9191)|0;
  $tmp12 = $189;
  $190 = $tmp0;
  $191 = $tmp3;
  $192 = (($190) + ($191))|0;
  $193 = ($192*7053)|0;
  $tmp13 = $193;
  $194 = $tmp12;
  $195 = $tmp13;
  $196 = (($194) + ($195))|0;
  $197 = $tmp14;
  $198 = (($196) + ($197))|0;
  $199 = $tmp0;
  $200 = ($199*4758)|0;
  $201 = (($198) - ($200))|0;
  $202 = $tmp5;
  $203 = ($202*1512)|0;
  $204 = (($201) + ($203))|0;
  $tmp10 = $204;
  $205 = $tmp2;
  $206 = $tmp3;
  $207 = (($205) + ($206))|0;
  $208 = Math_imul($207, -1512)|0;
  $tmp11 = $208;
  $209 = $tmp11;
  $210 = $tmp15;
  $211 = (($209) - ($210))|0;
  $212 = $tmp2;
  $213 = ($212*19165)|0;
  $214 = (($211) - ($213))|0;
  $215 = $tmp5;
  $216 = ($215*7053)|0;
  $217 = (($214) + ($216))|0;
  $218 = $tmp12;
  $219 = (($218) + ($217))|0;
  $tmp12 = $219;
  $220 = $tmp11;
  $221 = $tmp14;
  $222 = (($220) - ($221))|0;
  $223 = $tmp3;
  $224 = ($223*5946)|0;
  $225 = (($222) + ($224))|0;
  $226 = $tmp5;
  $227 = ($226*9191)|0;
  $228 = (($225) - ($227))|0;
  $229 = $tmp13;
  $230 = (($229) + ($228))|0;
  $tmp13 = $230;
  $231 = $tmp15;
  $232 = $tmp0;
  $233 = $tmp3;
  $234 = (($232) - ($233))|0;
  $235 = ($234*10703)|0;
  $236 = (($231) + ($235))|0;
  $237 = $tmp2;
  $238 = $tmp5;
  $239 = (($237) + ($238))|0;
  $240 = ($239*4433)|0;
  $241 = (($236) - ($240))|0;
  $tmp11 = $241;
  $242 = $tmp10;
  $243 = (($242) + 1024)|0;
  $244 = $243 >> 11;
  $245 = $dataptr;
  $246 = (($245) + 4|0);
  HEAP32[$246>>2] = $244;
  $247 = $tmp11;
  $248 = (($247) + 1024)|0;
  $249 = $248 >> 11;
  $250 = $dataptr;
  $251 = (($250) + 12|0);
  HEAP32[$251>>2] = $249;
  $252 = $tmp12;
  $253 = (($252) + 1024)|0;
  $254 = $253 >> 11;
  $255 = $dataptr;
  $256 = (($255) + 20|0);
  HEAP32[$256>>2] = $254;
  $257 = $tmp13;
  $258 = (($257) + 1024)|0;
  $259 = $258 >> 11;
  $260 = $dataptr;
  $261 = (($260) + 28|0);
  HEAP32[$261>>2] = $259;
  $262 = $dataptr;
  $263 = (($262) + 32|0);
  $dataptr = $263;
  $264 = $ctr;
  $265 = (($264) + 1)|0;
  $ctr = $265;
 }
 $266 = $0;
 $dataptr = $266;
 $ctr = 7;
 while(1) {
  $267 = $ctr;
  $268 = ($267|0)>=(0);
  if (!($268)) {
   break;
  }
  $269 = $dataptr;
  $270 = HEAP32[$269>>2]|0;
  $271 = $dataptr;
  $272 = (($271) + 160|0);
  $273 = HEAP32[$272>>2]|0;
  $274 = (($270) + ($273))|0;
  $tmp0 = $274;
  $275 = $dataptr;
  $276 = (($275) + 32|0);
  $277 = HEAP32[$276>>2]|0;
  $278 = $dataptr;
  $279 = (($278) + 128|0);
  $280 = HEAP32[$279>>2]|0;
  $281 = (($277) + ($280))|0;
  $tmp11 = $281;
  $282 = $dataptr;
  $283 = (($282) + 64|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = $dataptr;
  $286 = (($285) + 96|0);
  $287 = HEAP32[$286>>2]|0;
  $288 = (($284) + ($287))|0;
  $tmp2 = $288;
  $289 = $tmp0;
  $290 = $tmp2;
  $291 = (($289) + ($290))|0;
  $tmp10 = $291;
  $292 = $tmp0;
  $293 = $tmp2;
  $294 = (($292) - ($293))|0;
  $tmp12 = $294;
  $295 = $dataptr;
  $296 = HEAP32[$295>>2]|0;
  $297 = $dataptr;
  $298 = (($297) + 160|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = (($296) - ($299))|0;
  $tmp0 = $300;
  $301 = $dataptr;
  $302 = (($301) + 32|0);
  $303 = HEAP32[$302>>2]|0;
  $304 = $dataptr;
  $305 = (($304) + 128|0);
  $306 = HEAP32[$305>>2]|0;
  $307 = (($303) - ($306))|0;
  $tmp1 = $307;
  $308 = $dataptr;
  $309 = (($308) + 64|0);
  $310 = HEAP32[$309>>2]|0;
  $311 = $dataptr;
  $312 = (($311) + 96|0);
  $313 = HEAP32[$312>>2]|0;
  $314 = (($310) - ($313))|0;
  $tmp2 = $314;
  $315 = $tmp10;
  $316 = $tmp11;
  $317 = (($315) + ($316))|0;
  $318 = ($317*14564)|0;
  $319 = (($318) + 32768)|0;
  $320 = $319 >> 16;
  $321 = $dataptr;
  HEAP32[$321>>2] = $320;
  $322 = $tmp12;
  $323 = ($322*17837)|0;
  $324 = (($323) + 32768)|0;
  $325 = $324 >> 16;
  $326 = $dataptr;
  $327 = (($326) + 64|0);
  HEAP32[$327>>2] = $325;
  $328 = $tmp10;
  $329 = $tmp11;
  $330 = (($328) - ($329))|0;
  $331 = $tmp11;
  $332 = (($330) - ($331))|0;
  $333 = ($332*10298)|0;
  $334 = (($333) + 32768)|0;
  $335 = $334 >> 16;
  $336 = $dataptr;
  $337 = (($336) + 128|0);
  HEAP32[$337>>2] = $335;
  $338 = $tmp0;
  $339 = $tmp2;
  $340 = (($338) + ($339))|0;
  $341 = ($340*5331)|0;
  $tmp10 = $341;
  $342 = $tmp10;
  $343 = $tmp0;
  $344 = $tmp1;
  $345 = (($343) + ($344))|0;
  $346 = ($345*14564)|0;
  $347 = (($342) + ($346))|0;
  $348 = (($347) + 32768)|0;
  $349 = $348 >> 16;
  $350 = $dataptr;
  $351 = (($350) + 32|0);
  HEAP32[$351>>2] = $349;
  $352 = $tmp0;
  $353 = $tmp1;
  $354 = (($352) - ($353))|0;
  $355 = $tmp2;
  $356 = (($354) - ($355))|0;
  $357 = ($356*14564)|0;
  $358 = (($357) + 32768)|0;
  $359 = $358 >> 16;
  $360 = $dataptr;
  $361 = (($360) + 96|0);
  HEAP32[$361>>2] = $359;
  $362 = $tmp10;
  $363 = $tmp2;
  $364 = $tmp1;
  $365 = (($363) - ($364))|0;
  $366 = ($365*14564)|0;
  $367 = (($362) + ($366))|0;
  $368 = (($367) + 32768)|0;
  $369 = $368 >> 16;
  $370 = $dataptr;
  $371 = (($370) + 160|0);
  HEAP32[$371>>2] = $369;
  $372 = $dataptr;
  $373 = (($372) + 4|0);
  $dataptr = $373;
  $374 = $ctr;
  $375 = (($374) + -1)|0;
  $ctr = $375;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_10x5($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0;
 var $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $4 = (($3) + 160|0);
 dest=$4+0|0; stop=dest+96|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $5 = $0;
 $dataptr = $5;
 $ctr = 0;
 while(1) {
  $6 = $ctr;
  $7 = ($6|0)<(5);
  if (!($7)) {
   break;
  }
  $8 = $ctr;
  $9 = $1;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = (($11) + ($12)|0);
  $elemptr = $13;
  $14 = $elemptr;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $elemptr;
  $18 = (($17) + 9|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (($16) + ($20))|0;
  $tmp0 = $21;
  $22 = $elemptr;
  $23 = (($22) + 1|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $elemptr;
  $27 = (($26) + 8|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = (($25) + ($29))|0;
  $tmp1 = $30;
  $31 = $elemptr;
  $32 = (($31) + 2|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $elemptr;
  $36 = (($35) + 7|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($34) + ($38))|0;
  $tmp12 = $39;
  $40 = $elemptr;
  $41 = (($40) + 3|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $elemptr;
  $45 = (($44) + 6|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = (($43) + ($47))|0;
  $tmp3 = $48;
  $49 = $elemptr;
  $50 = (($49) + 4|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $elemptr;
  $54 = (($53) + 5|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = (($52) + ($56))|0;
  $tmp4 = $57;
  $58 = $tmp0;
  $59 = $tmp4;
  $60 = (($58) + ($59))|0;
  $tmp10 = $60;
  $61 = $tmp0;
  $62 = $tmp4;
  $63 = (($61) - ($62))|0;
  $tmp13 = $63;
  $64 = $tmp1;
  $65 = $tmp3;
  $66 = (($64) + ($65))|0;
  $tmp11 = $66;
  $67 = $tmp1;
  $68 = $tmp3;
  $69 = (($67) - ($68))|0;
  $tmp14 = $69;
  $70 = $elemptr;
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $elemptr;
  $74 = (($73) + 9|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = (($72) - ($76))|0;
  $tmp0 = $77;
  $78 = $elemptr;
  $79 = (($78) + 1|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = $elemptr;
  $83 = (($82) + 8|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = (($81) - ($85))|0;
  $tmp1 = $86;
  $87 = $elemptr;
  $88 = (($87) + 2|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $91 = $elemptr;
  $92 = (($91) + 7|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = (($90) - ($94))|0;
  $tmp2 = $95;
  $96 = $elemptr;
  $97 = (($96) + 3|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = $elemptr;
  $101 = (($100) + 6|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $104 = (($99) - ($103))|0;
  $tmp3 = $104;
  $105 = $elemptr;
  $106 = (($105) + 4|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  $109 = $elemptr;
  $110 = (($109) + 5|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = (($108) - ($112))|0;
  $tmp4 = $113;
  $114 = $tmp10;
  $115 = $tmp11;
  $116 = (($114) + ($115))|0;
  $117 = $tmp12;
  $118 = (($116) + ($117))|0;
  $119 = (($118) - 1280)|0;
  $120 = $119 << 2;
  $121 = $dataptr;
  HEAP32[$121>>2] = $120;
  $122 = $tmp12;
  $123 = $tmp12;
  $124 = (($123) + ($122))|0;
  $tmp12 = $124;
  $125 = $tmp10;
  $126 = $tmp12;
  $127 = (($125) - ($126))|0;
  $128 = ($127*9373)|0;
  $129 = $tmp11;
  $130 = $tmp12;
  $131 = (($129) - ($130))|0;
  $132 = ($131*3580)|0;
  $133 = (($128) - ($132))|0;
  $134 = (($133) + 1024)|0;
  $135 = $134 >> 11;
  $136 = $dataptr;
  $137 = (($136) + 16|0);
  HEAP32[$137>>2] = $135;
  $138 = $tmp13;
  $139 = $tmp14;
  $140 = (($138) + ($139))|0;
  $141 = ($140*6810)|0;
  $tmp10 = $141;
  $142 = $tmp10;
  $143 = $tmp13;
  $144 = ($143*4209)|0;
  $145 = (($142) + ($144))|0;
  $146 = (($145) + 1024)|0;
  $147 = $146 >> 11;
  $148 = $dataptr;
  $149 = (($148) + 8|0);
  HEAP32[$149>>2] = $147;
  $150 = $tmp10;
  $151 = $tmp14;
  $152 = ($151*17828)|0;
  $153 = (($150) - ($152))|0;
  $154 = (($153) + 1024)|0;
  $155 = $154 >> 11;
  $156 = $dataptr;
  $157 = (($156) + 24|0);
  HEAP32[$157>>2] = $155;
  $158 = $tmp0;
  $159 = $tmp4;
  $160 = (($158) + ($159))|0;
  $tmp10 = $160;
  $161 = $tmp1;
  $162 = $tmp3;
  $163 = (($161) - ($162))|0;
  $tmp11 = $163;
  $164 = $tmp10;
  $165 = $tmp11;
  $166 = (($164) - ($165))|0;
  $167 = $tmp2;
  $168 = (($166) - ($167))|0;
  $169 = $168 << 2;
  $170 = $dataptr;
  $171 = (($170) + 20|0);
  HEAP32[$171>>2] = $169;
  $172 = $tmp2;
  $173 = $172 << 13;
  $tmp2 = $173;
  $174 = $tmp0;
  $175 = ($174*11443)|0;
  $176 = $tmp1;
  $177 = ($176*10323)|0;
  $178 = (($175) + ($177))|0;
  $179 = $tmp2;
  $180 = (($178) + ($179))|0;
  $181 = $tmp3;
  $182 = ($181*5260)|0;
  $183 = (($180) + ($182))|0;
  $184 = $tmp4;
  $185 = ($184*1812)|0;
  $186 = (($183) + ($185))|0;
  $187 = (($186) + 1024)|0;
  $188 = $187 >> 11;
  $189 = $dataptr;
  $190 = (($189) + 4|0);
  HEAP32[$190>>2] = $188;
  $191 = $tmp0;
  $192 = $tmp4;
  $193 = (($191) - ($192))|0;
  $194 = ($193*7791)|0;
  $195 = $tmp1;
  $196 = $tmp3;
  $197 = (($195) + ($196))|0;
  $198 = ($197*4815)|0;
  $199 = (($194) - ($198))|0;
  $tmp12 = $199;
  $200 = $tmp10;
  $201 = $tmp11;
  $202 = (($200) + ($201))|0;
  $203 = ($202*2531)|0;
  $204 = $tmp11;
  $205 = $204 << 12;
  $206 = (($203) + ($205))|0;
  $207 = $tmp2;
  $208 = (($206) - ($207))|0;
  $tmp13 = $208;
  $209 = $tmp12;
  $210 = $tmp13;
  $211 = (($209) + ($210))|0;
  $212 = (($211) + 1024)|0;
  $213 = $212 >> 11;
  $214 = $dataptr;
  $215 = (($214) + 12|0);
  HEAP32[$215>>2] = $213;
  $216 = $tmp12;
  $217 = $tmp13;
  $218 = (($216) - ($217))|0;
  $219 = (($218) + 1024)|0;
  $220 = $219 >> 11;
  $221 = $dataptr;
  $222 = (($221) + 28|0);
  HEAP32[$222>>2] = $220;
  $223 = $dataptr;
  $224 = (($223) + 32|0);
  $dataptr = $224;
  $225 = $ctr;
  $226 = (($225) + 1)|0;
  $ctr = $226;
 }
 $227 = $0;
 $dataptr = $227;
 $ctr = 7;
 while(1) {
  $228 = $ctr;
  $229 = ($228|0)>=(0);
  if (!($229)) {
   break;
  }
  $230 = $dataptr;
  $231 = HEAP32[$230>>2]|0;
  $232 = $dataptr;
  $233 = (($232) + 128|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = (($231) + ($234))|0;
  $tmp0 = $235;
  $236 = $dataptr;
  $237 = (($236) + 32|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = $dataptr;
  $240 = (($239) + 96|0);
  $241 = HEAP32[$240>>2]|0;
  $242 = (($238) + ($241))|0;
  $tmp1 = $242;
  $243 = $dataptr;
  $244 = (($243) + 64|0);
  $245 = HEAP32[$244>>2]|0;
  $tmp2 = $245;
  $246 = $tmp0;
  $247 = $tmp1;
  $248 = (($246) + ($247))|0;
  $tmp10 = $248;
  $249 = $tmp0;
  $250 = $tmp1;
  $251 = (($249) - ($250))|0;
  $tmp11 = $251;
  $252 = $dataptr;
  $253 = HEAP32[$252>>2]|0;
  $254 = $dataptr;
  $255 = (($254) + 128|0);
  $256 = HEAP32[$255>>2]|0;
  $257 = (($253) - ($256))|0;
  $tmp0 = $257;
  $258 = $dataptr;
  $259 = (($258) + 32|0);
  $260 = HEAP32[$259>>2]|0;
  $261 = $dataptr;
  $262 = (($261) + 96|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = (($260) - ($263))|0;
  $tmp1 = $264;
  $265 = $tmp10;
  $266 = $tmp2;
  $267 = (($265) + ($266))|0;
  $268 = ($267*10486)|0;
  $269 = (($268) + 16384)|0;
  $270 = $269 >> 15;
  $271 = $dataptr;
  HEAP32[$271>>2] = $270;
  $272 = $tmp11;
  $273 = ($272*8290)|0;
  $tmp11 = $273;
  $274 = $tmp2;
  $275 = $274 << 2;
  $276 = $tmp10;
  $277 = (($276) - ($275))|0;
  $tmp10 = $277;
  $278 = $tmp10;
  $279 = ($278*3707)|0;
  $tmp10 = $279;
  $280 = $tmp11;
  $281 = $tmp10;
  $282 = (($280) + ($281))|0;
  $283 = (($282) + 16384)|0;
  $284 = $283 >> 15;
  $285 = $dataptr;
  $286 = (($285) + 64|0);
  HEAP32[$286>>2] = $284;
  $287 = $tmp11;
  $288 = $tmp10;
  $289 = (($287) - ($288))|0;
  $290 = (($289) + 16384)|0;
  $291 = $290 >> 15;
  $292 = $dataptr;
  $293 = (($292) + 128|0);
  HEAP32[$293>>2] = $291;
  $294 = $tmp0;
  $295 = $tmp1;
  $296 = (($294) + ($295))|0;
  $297 = ($296*8716)|0;
  $tmp10 = $297;
  $298 = $tmp10;
  $299 = $tmp0;
  $300 = ($299*5387)|0;
  $301 = (($298) + ($300))|0;
  $302 = (($301) + 16384)|0;
  $303 = $302 >> 15;
  $304 = $dataptr;
  $305 = (($304) + 32|0);
  HEAP32[$305>>2] = $303;
  $306 = $tmp10;
  $307 = $tmp1;
  $308 = ($307*22820)|0;
  $309 = (($306) - ($308))|0;
  $310 = (($309) + 16384)|0;
  $311 = $310 >> 15;
  $312 = $dataptr;
  $313 = (($312) + 96|0);
  HEAP32[$313>>2] = $311;
  $314 = $dataptr;
  $315 = (($314) + 4|0);
  $dataptr = $315;
  $316 = $ctr;
  $317 = (($316) + -1)|0;
  $ctr = $317;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_8x4($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0;
 var $tmp2 = 0, $tmp3 = 0, $z1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $4 = (($3) + 128|0);
 dest=$4+0|0; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $5 = $0;
 $dataptr = $5;
 $ctr = 0;
 while(1) {
  $6 = $ctr;
  $7 = ($6|0)<(4);
  if (!($7)) {
   break;
  }
  $8 = $ctr;
  $9 = $1;
  $10 = (($9) + ($8<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  $13 = (($11) + ($12)|0);
  $elemptr = $13;
  $14 = $elemptr;
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = $elemptr;
  $18 = (($17) + 7|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (($16) + ($20))|0;
  $tmp0 = $21;
  $22 = $elemptr;
  $23 = (($22) + 1|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = $elemptr;
  $27 = (($26) + 6|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = (($25) + ($29))|0;
  $tmp1 = $30;
  $31 = $elemptr;
  $32 = (($31) + 2|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = $elemptr;
  $36 = (($35) + 5|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37&255;
  $39 = (($34) + ($38))|0;
  $tmp2 = $39;
  $40 = $elemptr;
  $41 = (($40) + 3|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $elemptr;
  $45 = (($44) + 4|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = (($43) + ($47))|0;
  $tmp3 = $48;
  $49 = $tmp0;
  $50 = $tmp3;
  $51 = (($49) + ($50))|0;
  $tmp10 = $51;
  $52 = $tmp0;
  $53 = $tmp3;
  $54 = (($52) - ($53))|0;
  $tmp12 = $54;
  $55 = $tmp1;
  $56 = $tmp2;
  $57 = (($55) + ($56))|0;
  $tmp11 = $57;
  $58 = $tmp1;
  $59 = $tmp2;
  $60 = (($58) - ($59))|0;
  $tmp13 = $60;
  $61 = $elemptr;
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $elemptr;
  $65 = (($64) + 7|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = (($63) - ($67))|0;
  $tmp0 = $68;
  $69 = $elemptr;
  $70 = (($69) + 1|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = $elemptr;
  $74 = (($73) + 6|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = (($72) - ($76))|0;
  $tmp1 = $77;
  $78 = $elemptr;
  $79 = (($78) + 2|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = $elemptr;
  $83 = (($82) + 5|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = (($81) - ($85))|0;
  $tmp2 = $86;
  $87 = $elemptr;
  $88 = (($87) + 3|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $91 = $elemptr;
  $92 = (($91) + 4|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = (($90) - ($94))|0;
  $tmp3 = $95;
  $96 = $tmp10;
  $97 = $tmp11;
  $98 = (($96) + ($97))|0;
  $99 = (($98) - 1024)|0;
  $100 = $99 << 3;
  $101 = $dataptr;
  HEAP32[$101>>2] = $100;
  $102 = $tmp10;
  $103 = $tmp11;
  $104 = (($102) - ($103))|0;
  $105 = $104 << 3;
  $106 = $dataptr;
  $107 = (($106) + 16|0);
  HEAP32[$107>>2] = $105;
  $108 = $tmp12;
  $109 = $tmp13;
  $110 = (($108) + ($109))|0;
  $111 = ($110*4433)|0;
  $z1 = $111;
  $112 = $z1;
  $113 = (($112) + 512)|0;
  $z1 = $113;
  $114 = $z1;
  $115 = $tmp12;
  $116 = ($115*6270)|0;
  $117 = (($114) + ($116))|0;
  $118 = $117 >> 10;
  $119 = $dataptr;
  $120 = (($119) + 8|0);
  HEAP32[$120>>2] = $118;
  $121 = $z1;
  $122 = $tmp13;
  $123 = ($122*15137)|0;
  $124 = (($121) - ($123))|0;
  $125 = $124 >> 10;
  $126 = $dataptr;
  $127 = (($126) + 24|0);
  HEAP32[$127>>2] = $125;
  $128 = $tmp0;
  $129 = $tmp2;
  $130 = (($128) + ($129))|0;
  $tmp12 = $130;
  $131 = $tmp1;
  $132 = $tmp3;
  $133 = (($131) + ($132))|0;
  $tmp13 = $133;
  $134 = $tmp12;
  $135 = $tmp13;
  $136 = (($134) + ($135))|0;
  $137 = ($136*9633)|0;
  $z1 = $137;
  $138 = $z1;
  $139 = (($138) + 512)|0;
  $z1 = $139;
  $140 = $tmp12;
  $141 = Math_imul($140, -3196)|0;
  $tmp12 = $141;
  $142 = $tmp13;
  $143 = Math_imul($142, -16069)|0;
  $tmp13 = $143;
  $144 = $z1;
  $145 = $tmp12;
  $146 = (($145) + ($144))|0;
  $tmp12 = $146;
  $147 = $z1;
  $148 = $tmp13;
  $149 = (($148) + ($147))|0;
  $tmp13 = $149;
  $150 = $tmp0;
  $151 = $tmp3;
  $152 = (($150) + ($151))|0;
  $153 = Math_imul($152, -7373)|0;
  $z1 = $153;
  $154 = $tmp0;
  $155 = ($154*12299)|0;
  $tmp0 = $155;
  $156 = $tmp3;
  $157 = ($156*2446)|0;
  $tmp3 = $157;
  $158 = $z1;
  $159 = $tmp12;
  $160 = (($158) + ($159))|0;
  $161 = $tmp0;
  $162 = (($161) + ($160))|0;
  $tmp0 = $162;
  $163 = $z1;
  $164 = $tmp13;
  $165 = (($163) + ($164))|0;
  $166 = $tmp3;
  $167 = (($166) + ($165))|0;
  $tmp3 = $167;
  $168 = $tmp1;
  $169 = $tmp2;
  $170 = (($168) + ($169))|0;
  $171 = Math_imul($170, -20995)|0;
  $z1 = $171;
  $172 = $tmp1;
  $173 = ($172*25172)|0;
  $tmp1 = $173;
  $174 = $tmp2;
  $175 = ($174*16819)|0;
  $tmp2 = $175;
  $176 = $z1;
  $177 = $tmp13;
  $178 = (($176) + ($177))|0;
  $179 = $tmp1;
  $180 = (($179) + ($178))|0;
  $tmp1 = $180;
  $181 = $z1;
  $182 = $tmp12;
  $183 = (($181) + ($182))|0;
  $184 = $tmp2;
  $185 = (($184) + ($183))|0;
  $tmp2 = $185;
  $186 = $tmp0;
  $187 = $186 >> 10;
  $188 = $dataptr;
  $189 = (($188) + 4|0);
  HEAP32[$189>>2] = $187;
  $190 = $tmp1;
  $191 = $190 >> 10;
  $192 = $dataptr;
  $193 = (($192) + 12|0);
  HEAP32[$193>>2] = $191;
  $194 = $tmp2;
  $195 = $194 >> 10;
  $196 = $dataptr;
  $197 = (($196) + 20|0);
  HEAP32[$197>>2] = $195;
  $198 = $tmp3;
  $199 = $198 >> 10;
  $200 = $dataptr;
  $201 = (($200) + 28|0);
  HEAP32[$201>>2] = $199;
  $202 = $dataptr;
  $203 = (($202) + 32|0);
  $dataptr = $203;
  $204 = $ctr;
  $205 = (($204) + 1)|0;
  $ctr = $205;
 }
 $206 = $0;
 $dataptr = $206;
 $ctr = 7;
 while(1) {
  $207 = $ctr;
  $208 = ($207|0)>=(0);
  if (!($208)) {
   break;
  }
  $209 = $dataptr;
  $210 = HEAP32[$209>>2]|0;
  $211 = $dataptr;
  $212 = (($211) + 96|0);
  $213 = HEAP32[$212>>2]|0;
  $214 = (($210) + ($213))|0;
  $215 = (($214) + 2)|0;
  $tmp0 = $215;
  $216 = $dataptr;
  $217 = (($216) + 32|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $dataptr;
  $220 = (($219) + 64|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($218) + ($221))|0;
  $tmp1 = $222;
  $223 = $dataptr;
  $224 = HEAP32[$223>>2]|0;
  $225 = $dataptr;
  $226 = (($225) + 96|0);
  $227 = HEAP32[$226>>2]|0;
  $228 = (($224) - ($227))|0;
  $tmp10 = $228;
  $229 = $dataptr;
  $230 = (($229) + 32|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = $dataptr;
  $233 = (($232) + 64|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = (($231) - ($234))|0;
  $tmp11 = $235;
  $236 = $tmp0;
  $237 = $tmp1;
  $238 = (($236) + ($237))|0;
  $239 = $238 >> 2;
  $240 = $dataptr;
  HEAP32[$240>>2] = $239;
  $241 = $tmp0;
  $242 = $tmp1;
  $243 = (($241) - ($242))|0;
  $244 = $243 >> 2;
  $245 = $dataptr;
  $246 = (($245) + 64|0);
  HEAP32[$246>>2] = $244;
  $247 = $tmp10;
  $248 = $tmp11;
  $249 = (($247) + ($248))|0;
  $250 = ($249*4433)|0;
  $tmp0 = $250;
  $251 = $tmp0;
  $252 = (($251) + 16384)|0;
  $tmp0 = $252;
  $253 = $tmp0;
  $254 = $tmp10;
  $255 = ($254*6270)|0;
  $256 = (($253) + ($255))|0;
  $257 = $256 >> 15;
  $258 = $dataptr;
  $259 = (($258) + 32|0);
  HEAP32[$259>>2] = $257;
  $260 = $tmp0;
  $261 = $tmp11;
  $262 = ($261*15137)|0;
  $263 = (($260) - ($262))|0;
  $264 = $263 >> 15;
  $265 = $dataptr;
  $266 = (($265) + 96|0);
  HEAP32[$266>>2] = $264;
  $267 = $dataptr;
  $268 = (($267) + 4|0);
  $dataptr = $268;
  $269 = $ctr;
  $270 = (($269) + -1)|0;
  $ctr = $270;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_6x3($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0;
 var $tmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = ($5|0)<(3);
  if (!($6)) {
   break;
  }
  $7 = $ctr;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($10) + ($11)|0);
  $elemptr = $12;
  $13 = $elemptr;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $elemptr;
  $17 = (($16) + 5|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($15) + ($19))|0;
  $tmp0 = $20;
  $21 = $elemptr;
  $22 = (($21) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $elemptr;
  $26 = (($25) + 4|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($24) + ($28))|0;
  $tmp11 = $29;
  $30 = $elemptr;
  $31 = (($30) + 2|0);
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $elemptr;
  $35 = (($34) + 3|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = (($33) + ($37))|0;
  $tmp2 = $38;
  $39 = $tmp0;
  $40 = $tmp2;
  $41 = (($39) + ($40))|0;
  $tmp10 = $41;
  $42 = $tmp0;
  $43 = $tmp2;
  $44 = (($42) - ($43))|0;
  $tmp12 = $44;
  $45 = $elemptr;
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = $elemptr;
  $49 = (($48) + 5|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = (($47) - ($51))|0;
  $tmp0 = $52;
  $53 = $elemptr;
  $54 = (($53) + 1|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = $elemptr;
  $58 = (($57) + 4|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $59&255;
  $61 = (($56) - ($60))|0;
  $tmp1 = $61;
  $62 = $elemptr;
  $63 = (($62) + 2|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = $elemptr;
  $67 = (($66) + 3|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  $70 = (($65) - ($69))|0;
  $tmp2 = $70;
  $71 = $tmp10;
  $72 = $tmp11;
  $73 = (($71) + ($72))|0;
  $74 = (($73) - 768)|0;
  $75 = $74 << 3;
  $76 = $dataptr;
  HEAP32[$76>>2] = $75;
  $77 = $tmp12;
  $78 = ($77*10033)|0;
  $79 = (($78) + 512)|0;
  $80 = $79 >> 10;
  $81 = $dataptr;
  $82 = (($81) + 8|0);
  HEAP32[$82>>2] = $80;
  $83 = $tmp10;
  $84 = $tmp11;
  $85 = (($83) - ($84))|0;
  $86 = $tmp11;
  $87 = (($85) - ($86))|0;
  $88 = ($87*5793)|0;
  $89 = (($88) + 512)|0;
  $90 = $89 >> 10;
  $91 = $dataptr;
  $92 = (($91) + 16|0);
  HEAP32[$92>>2] = $90;
  $93 = $tmp0;
  $94 = $tmp2;
  $95 = (($93) + ($94))|0;
  $96 = ($95*2998)|0;
  $97 = (($96) + 512)|0;
  $98 = $97 >> 10;
  $tmp10 = $98;
  $99 = $tmp10;
  $100 = $tmp0;
  $101 = $tmp1;
  $102 = (($100) + ($101))|0;
  $103 = $102 << 3;
  $104 = (($99) + ($103))|0;
  $105 = $dataptr;
  $106 = (($105) + 4|0);
  HEAP32[$106>>2] = $104;
  $107 = $tmp0;
  $108 = $tmp1;
  $109 = (($107) - ($108))|0;
  $110 = $tmp2;
  $111 = (($109) - ($110))|0;
  $112 = $111 << 3;
  $113 = $dataptr;
  $114 = (($113) + 12|0);
  HEAP32[$114>>2] = $112;
  $115 = $tmp10;
  $116 = $tmp2;
  $117 = $tmp1;
  $118 = (($116) - ($117))|0;
  $119 = $118 << 3;
  $120 = (($115) + ($119))|0;
  $121 = $dataptr;
  $122 = (($121) + 20|0);
  HEAP32[$122>>2] = $120;
  $123 = $dataptr;
  $124 = (($123) + 32|0);
  $dataptr = $124;
  $125 = $ctr;
  $126 = (($125) + 1)|0;
  $ctr = $126;
 }
 $127 = $0;
 $dataptr = $127;
 $ctr = 0;
 while(1) {
  $128 = $ctr;
  $129 = ($128|0)<(6);
  if (!($129)) {
   break;
  }
  $130 = $dataptr;
  $131 = HEAP32[$130>>2]|0;
  $132 = $dataptr;
  $133 = (($132) + 64|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = (($131) + ($134))|0;
  $tmp0 = $135;
  $136 = $dataptr;
  $137 = (($136) + 32|0);
  $138 = HEAP32[$137>>2]|0;
  $tmp1 = $138;
  $139 = $dataptr;
  $140 = HEAP32[$139>>2]|0;
  $141 = $dataptr;
  $142 = (($141) + 64|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($140) - ($143))|0;
  $tmp2 = $144;
  $145 = $tmp0;
  $146 = $tmp1;
  $147 = (($145) + ($146))|0;
  $148 = ($147*14564)|0;
  $149 = (($148) + 16384)|0;
  $150 = $149 >> 15;
  $151 = $dataptr;
  HEAP32[$151>>2] = $150;
  $152 = $tmp0;
  $153 = $tmp1;
  $154 = (($152) - ($153))|0;
  $155 = $tmp1;
  $156 = (($154) - ($155))|0;
  $157 = ($156*10298)|0;
  $158 = (($157) + 16384)|0;
  $159 = $158 >> 15;
  $160 = $dataptr;
  $161 = (($160) + 64|0);
  HEAP32[$161>>2] = $159;
  $162 = $tmp2;
  $163 = ($162*17837)|0;
  $164 = (($163) + 16384)|0;
  $165 = $164 >> 15;
  $166 = $dataptr;
  $167 = (($166) + 32|0);
  HEAP32[$167>>2] = $165;
  $168 = $dataptr;
  $169 = (($168) + 4|0);
  $dataptr = $169;
  $170 = $ctr;
  $171 = (($170) + 1)|0;
  $ctr = $171;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_4x2($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = ($5|0)<(2);
  if (!($6)) {
   break;
  }
  $7 = $ctr;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($10) + ($11)|0);
  $elemptr = $12;
  $13 = $elemptr;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $elemptr;
  $17 = (($16) + 3|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($15) + ($19))|0;
  $tmp0 = $20;
  $21 = $elemptr;
  $22 = (($21) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $elemptr;
  $26 = (($25) + 2|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($24) + ($28))|0;
  $tmp1 = $29;
  $30 = $elemptr;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $elemptr;
  $34 = (($33) + 3|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = (($32) - ($36))|0;
  $tmp10 = $37;
  $38 = $elemptr;
  $39 = (($38) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $elemptr;
  $43 = (($42) + 2|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = (($41) - ($45))|0;
  $tmp11 = $46;
  $47 = $tmp0;
  $48 = $tmp1;
  $49 = (($47) + ($48))|0;
  $50 = (($49) - 512)|0;
  $51 = $50 << 5;
  $52 = $dataptr;
  HEAP32[$52>>2] = $51;
  $53 = $tmp0;
  $54 = $tmp1;
  $55 = (($53) - ($54))|0;
  $56 = $55 << 5;
  $57 = $dataptr;
  $58 = (($57) + 8|0);
  HEAP32[$58>>2] = $56;
  $59 = $tmp10;
  $60 = $tmp11;
  $61 = (($59) + ($60))|0;
  $62 = ($61*4433)|0;
  $tmp0 = $62;
  $63 = $tmp0;
  $64 = (($63) + 128)|0;
  $tmp0 = $64;
  $65 = $tmp0;
  $66 = $tmp10;
  $67 = ($66*6270)|0;
  $68 = (($65) + ($67))|0;
  $69 = $68 >> 8;
  $70 = $dataptr;
  $71 = (($70) + 4|0);
  HEAP32[$71>>2] = $69;
  $72 = $tmp0;
  $73 = $tmp11;
  $74 = ($73*15137)|0;
  $75 = (($72) - ($74))|0;
  $76 = $75 >> 8;
  $77 = $dataptr;
  $78 = (($77) + 12|0);
  HEAP32[$78>>2] = $76;
  $79 = $dataptr;
  $80 = (($79) + 32|0);
  $dataptr = $80;
  $81 = $ctr;
  $82 = (($81) + 1)|0;
  $ctr = $82;
 }
 $83 = $0;
 $dataptr = $83;
 $ctr = 0;
 while(1) {
  $84 = $ctr;
  $85 = ($84|0)<(4);
  if (!($85)) {
   break;
  }
  $86 = $dataptr;
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + 2)|0;
  $tmp0 = $88;
  $89 = $dataptr;
  $90 = (($89) + 32|0);
  $91 = HEAP32[$90>>2]|0;
  $tmp1 = $91;
  $92 = $tmp0;
  $93 = $tmp1;
  $94 = (($92) + ($93))|0;
  $95 = $94 >> 2;
  $96 = $dataptr;
  HEAP32[$96>>2] = $95;
  $97 = $tmp0;
  $98 = $tmp1;
  $99 = (($97) - ($98))|0;
  $100 = $99 >> 2;
  $101 = $dataptr;
  $102 = (($101) + 32|0);
  HEAP32[$102>>2] = $100;
  $103 = $dataptr;
  $104 = (($103) + 4|0);
  $dataptr = $104;
  $105 = $ctr;
  $106 = (($105) + 1)|0;
  $ctr = $106;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_2x1($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = $2;
 $7 = (($5) + ($6)|0);
 $elemptr = $7;
 $8 = $elemptr;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $tmp0 = $10;
 $11 = $elemptr;
 $12 = (($11) + 1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $tmp1 = $14;
 $15 = $tmp0;
 $16 = $tmp1;
 $17 = (($15) + ($16))|0;
 $18 = (($17) - 256)|0;
 $19 = $18 << 5;
 $20 = $0;
 HEAP32[$20>>2] = $19;
 $21 = $tmp0;
 $22 = $tmp1;
 $23 = (($21) - ($22))|0;
 $24 = $23 << 5;
 $25 = $0;
 $26 = (($25) + 4|0);
 HEAP32[$26>>2] = $24;
 STACKTOP = sp;return;
}
function _jpeg_fdct_8x16($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp16 = 0, $tmp17 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $tmp6 = 0, $tmp7 = 0;
 var $workspace = 0, $wsptr = 0, $z1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 $dataptr = $3;
 $ctr = 0;
 while(1) {
  $4 = $ctr;
  $5 = $1;
  $6 = (($5) + ($4<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = $2;
  $9 = (($7) + ($8)|0);
  $elemptr = $9;
  $10 = $elemptr;
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $elemptr;
  $14 = (($13) + 7|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15&255;
  $17 = (($12) + ($16))|0;
  $tmp0 = $17;
  $18 = $elemptr;
  $19 = (($18) + 1|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = $elemptr;
  $23 = (($22) + 6|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $26 = (($21) + ($25))|0;
  $tmp1 = $26;
  $27 = $elemptr;
  $28 = (($27) + 2|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $elemptr;
  $32 = (($31) + 5|0);
  $33 = HEAP8[$32>>0]|0;
  $34 = $33&255;
  $35 = (($30) + ($34))|0;
  $tmp2 = $35;
  $36 = $elemptr;
  $37 = (($36) + 3|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $elemptr;
  $41 = (($40) + 4|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (($39) + ($43))|0;
  $tmp3 = $44;
  $45 = $tmp0;
  $46 = $tmp3;
  $47 = (($45) + ($46))|0;
  $tmp10 = $47;
  $48 = $tmp0;
  $49 = $tmp3;
  $50 = (($48) - ($49))|0;
  $tmp12 = $50;
  $51 = $tmp1;
  $52 = $tmp2;
  $53 = (($51) + ($52))|0;
  $tmp11 = $53;
  $54 = $tmp1;
  $55 = $tmp2;
  $56 = (($54) - ($55))|0;
  $tmp13 = $56;
  $57 = $elemptr;
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = $elemptr;
  $61 = (($60) + 7|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = (($59) - ($63))|0;
  $tmp0 = $64;
  $65 = $elemptr;
  $66 = (($65) + 1|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $elemptr;
  $70 = (($69) + 6|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71&255;
  $73 = (($68) - ($72))|0;
  $tmp1 = $73;
  $74 = $elemptr;
  $75 = (($74) + 2|0);
  $76 = HEAP8[$75>>0]|0;
  $77 = $76&255;
  $78 = $elemptr;
  $79 = (($78) + 5|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = (($77) - ($81))|0;
  $tmp2 = $82;
  $83 = $elemptr;
  $84 = (($83) + 3|0);
  $85 = HEAP8[$84>>0]|0;
  $86 = $85&255;
  $87 = $elemptr;
  $88 = (($87) + 4|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89&255;
  $91 = (($86) - ($90))|0;
  $tmp3 = $91;
  $92 = $tmp10;
  $93 = $tmp11;
  $94 = (($92) + ($93))|0;
  $95 = (($94) - 1024)|0;
  $96 = $95 << 2;
  $97 = $dataptr;
  HEAP32[$97>>2] = $96;
  $98 = $tmp10;
  $99 = $tmp11;
  $100 = (($98) - ($99))|0;
  $101 = $100 << 2;
  $102 = $dataptr;
  $103 = (($102) + 16|0);
  HEAP32[$103>>2] = $101;
  $104 = $tmp12;
  $105 = $tmp13;
  $106 = (($104) + ($105))|0;
  $107 = ($106*4433)|0;
  $z1 = $107;
  $108 = $z1;
  $109 = $tmp12;
  $110 = ($109*6270)|0;
  $111 = (($108) + ($110))|0;
  $112 = (($111) + 1024)|0;
  $113 = $112 >> 11;
  $114 = $dataptr;
  $115 = (($114) + 8|0);
  HEAP32[$115>>2] = $113;
  $116 = $z1;
  $117 = $tmp13;
  $118 = ($117*15137)|0;
  $119 = (($116) - ($118))|0;
  $120 = (($119) + 1024)|0;
  $121 = $120 >> 11;
  $122 = $dataptr;
  $123 = (($122) + 24|0);
  HEAP32[$123>>2] = $121;
  $124 = $tmp0;
  $125 = $tmp2;
  $126 = (($124) + ($125))|0;
  $tmp12 = $126;
  $127 = $tmp1;
  $128 = $tmp3;
  $129 = (($127) + ($128))|0;
  $tmp13 = $129;
  $130 = $tmp12;
  $131 = $tmp13;
  $132 = (($130) + ($131))|0;
  $133 = ($132*9633)|0;
  $z1 = $133;
  $134 = $tmp12;
  $135 = Math_imul($134, -3196)|0;
  $tmp12 = $135;
  $136 = $tmp13;
  $137 = Math_imul($136, -16069)|0;
  $tmp13 = $137;
  $138 = $z1;
  $139 = $tmp12;
  $140 = (($139) + ($138))|0;
  $tmp12 = $140;
  $141 = $z1;
  $142 = $tmp13;
  $143 = (($142) + ($141))|0;
  $tmp13 = $143;
  $144 = $tmp0;
  $145 = $tmp3;
  $146 = (($144) + ($145))|0;
  $147 = Math_imul($146, -7373)|0;
  $z1 = $147;
  $148 = $tmp0;
  $149 = ($148*12299)|0;
  $tmp0 = $149;
  $150 = $tmp3;
  $151 = ($150*2446)|0;
  $tmp3 = $151;
  $152 = $z1;
  $153 = $tmp12;
  $154 = (($152) + ($153))|0;
  $155 = $tmp0;
  $156 = (($155) + ($154))|0;
  $tmp0 = $156;
  $157 = $z1;
  $158 = $tmp13;
  $159 = (($157) + ($158))|0;
  $160 = $tmp3;
  $161 = (($160) + ($159))|0;
  $tmp3 = $161;
  $162 = $tmp1;
  $163 = $tmp2;
  $164 = (($162) + ($163))|0;
  $165 = Math_imul($164, -20995)|0;
  $z1 = $165;
  $166 = $tmp1;
  $167 = ($166*25172)|0;
  $tmp1 = $167;
  $168 = $tmp2;
  $169 = ($168*16819)|0;
  $tmp2 = $169;
  $170 = $z1;
  $171 = $tmp13;
  $172 = (($170) + ($171))|0;
  $173 = $tmp1;
  $174 = (($173) + ($172))|0;
  $tmp1 = $174;
  $175 = $z1;
  $176 = $tmp12;
  $177 = (($175) + ($176))|0;
  $178 = $tmp2;
  $179 = (($178) + ($177))|0;
  $tmp2 = $179;
  $180 = $tmp0;
  $181 = (($180) + 1024)|0;
  $182 = $181 >> 11;
  $183 = $dataptr;
  $184 = (($183) + 4|0);
  HEAP32[$184>>2] = $182;
  $185 = $tmp1;
  $186 = (($185) + 1024)|0;
  $187 = $186 >> 11;
  $188 = $dataptr;
  $189 = (($188) + 12|0);
  HEAP32[$189>>2] = $187;
  $190 = $tmp2;
  $191 = (($190) + 1024)|0;
  $192 = $191 >> 11;
  $193 = $dataptr;
  $194 = (($193) + 20|0);
  HEAP32[$194>>2] = $192;
  $195 = $tmp3;
  $196 = (($195) + 1024)|0;
  $197 = $196 >> 11;
  $198 = $dataptr;
  $199 = (($198) + 28|0);
  HEAP32[$199>>2] = $197;
  $200 = $ctr;
  $201 = (($200) + 1)|0;
  $ctr = $201;
  $202 = $ctr;
  $203 = ($202|0)!=(8);
  if ($203) {
   $204 = $ctr;
   $205 = ($204|0)==(16);
   if ($205) {
    break;
   }
   $206 = $dataptr;
   $207 = (($206) + 32|0);
   $dataptr = $207;
  } else {
   $dataptr = $workspace;
  }
 }
 $208 = $0;
 $dataptr = $208;
 $wsptr = $workspace;
 $ctr = 7;
 while(1) {
  $209 = $ctr;
  $210 = ($209|0)>=(0);
  if (!($210)) {
   break;
  }
  $211 = $dataptr;
  $212 = HEAP32[$211>>2]|0;
  $213 = $wsptr;
  $214 = (($213) + 224|0);
  $215 = HEAP32[$214>>2]|0;
  $216 = (($212) + ($215))|0;
  $tmp0 = $216;
  $217 = $dataptr;
  $218 = (($217) + 32|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = $wsptr;
  $221 = (($220) + 192|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = (($219) + ($222))|0;
  $tmp1 = $223;
  $224 = $dataptr;
  $225 = (($224) + 64|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = $wsptr;
  $228 = (($227) + 160|0);
  $229 = HEAP32[$228>>2]|0;
  $230 = (($226) + ($229))|0;
  $tmp2 = $230;
  $231 = $dataptr;
  $232 = (($231) + 96|0);
  $233 = HEAP32[$232>>2]|0;
  $234 = $wsptr;
  $235 = (($234) + 128|0);
  $236 = HEAP32[$235>>2]|0;
  $237 = (($233) + ($236))|0;
  $tmp3 = $237;
  $238 = $dataptr;
  $239 = (($238) + 128|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = $wsptr;
  $242 = (($241) + 96|0);
  $243 = HEAP32[$242>>2]|0;
  $244 = (($240) + ($243))|0;
  $tmp4 = $244;
  $245 = $dataptr;
  $246 = (($245) + 160|0);
  $247 = HEAP32[$246>>2]|0;
  $248 = $wsptr;
  $249 = (($248) + 64|0);
  $250 = HEAP32[$249>>2]|0;
  $251 = (($247) + ($250))|0;
  $tmp5 = $251;
  $252 = $dataptr;
  $253 = (($252) + 192|0);
  $254 = HEAP32[$253>>2]|0;
  $255 = $wsptr;
  $256 = (($255) + 32|0);
  $257 = HEAP32[$256>>2]|0;
  $258 = (($254) + ($257))|0;
  $tmp6 = $258;
  $259 = $dataptr;
  $260 = (($259) + 224|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = $wsptr;
  $263 = HEAP32[$262>>2]|0;
  $264 = (($261) + ($263))|0;
  $tmp7 = $264;
  $265 = $tmp0;
  $266 = $tmp7;
  $267 = (($265) + ($266))|0;
  $tmp10 = $267;
  $268 = $tmp0;
  $269 = $tmp7;
  $270 = (($268) - ($269))|0;
  $tmp14 = $270;
  $271 = $tmp1;
  $272 = $tmp6;
  $273 = (($271) + ($272))|0;
  $tmp11 = $273;
  $274 = $tmp1;
  $275 = $tmp6;
  $276 = (($274) - ($275))|0;
  $tmp15 = $276;
  $277 = $tmp2;
  $278 = $tmp5;
  $279 = (($277) + ($278))|0;
  $tmp12 = $279;
  $280 = $tmp2;
  $281 = $tmp5;
  $282 = (($280) - ($281))|0;
  $tmp16 = $282;
  $283 = $tmp3;
  $284 = $tmp4;
  $285 = (($283) + ($284))|0;
  $tmp13 = $285;
  $286 = $tmp3;
  $287 = $tmp4;
  $288 = (($286) - ($287))|0;
  $tmp17 = $288;
  $289 = $dataptr;
  $290 = HEAP32[$289>>2]|0;
  $291 = $wsptr;
  $292 = (($291) + 224|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = (($290) - ($293))|0;
  $tmp0 = $294;
  $295 = $dataptr;
  $296 = (($295) + 32|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = $wsptr;
  $299 = (($298) + 192|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = (($297) - ($300))|0;
  $tmp1 = $301;
  $302 = $dataptr;
  $303 = (($302) + 64|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = $wsptr;
  $306 = (($305) + 160|0);
  $307 = HEAP32[$306>>2]|0;
  $308 = (($304) - ($307))|0;
  $tmp2 = $308;
  $309 = $dataptr;
  $310 = (($309) + 96|0);
  $311 = HEAP32[$310>>2]|0;
  $312 = $wsptr;
  $313 = (($312) + 128|0);
  $314 = HEAP32[$313>>2]|0;
  $315 = (($311) - ($314))|0;
  $tmp3 = $315;
  $316 = $dataptr;
  $317 = (($316) + 128|0);
  $318 = HEAP32[$317>>2]|0;
  $319 = $wsptr;
  $320 = (($319) + 96|0);
  $321 = HEAP32[$320>>2]|0;
  $322 = (($318) - ($321))|0;
  $tmp4 = $322;
  $323 = $dataptr;
  $324 = (($323) + 160|0);
  $325 = HEAP32[$324>>2]|0;
  $326 = $wsptr;
  $327 = (($326) + 64|0);
  $328 = HEAP32[$327>>2]|0;
  $329 = (($325) - ($328))|0;
  $tmp5 = $329;
  $330 = $dataptr;
  $331 = (($330) + 192|0);
  $332 = HEAP32[$331>>2]|0;
  $333 = $wsptr;
  $334 = (($333) + 32|0);
  $335 = HEAP32[$334>>2]|0;
  $336 = (($332) - ($335))|0;
  $tmp6 = $336;
  $337 = $dataptr;
  $338 = (($337) + 224|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = $wsptr;
  $341 = HEAP32[$340>>2]|0;
  $342 = (($339) - ($341))|0;
  $tmp7 = $342;
  $343 = $tmp10;
  $344 = $tmp11;
  $345 = (($343) + ($344))|0;
  $346 = $tmp12;
  $347 = (($345) + ($346))|0;
  $348 = $tmp13;
  $349 = (($347) + ($348))|0;
  $350 = (($349) + 4)|0;
  $351 = $350 >> 3;
  $352 = $dataptr;
  HEAP32[$352>>2] = $351;
  $353 = $tmp10;
  $354 = $tmp13;
  $355 = (($353) - ($354))|0;
  $356 = ($355*10703)|0;
  $357 = $tmp11;
  $358 = $tmp12;
  $359 = (($357) - ($358))|0;
  $360 = ($359*4433)|0;
  $361 = (($356) + ($360))|0;
  $362 = (($361) + 32768)|0;
  $363 = $362 >> 16;
  $364 = $dataptr;
  $365 = (($364) + 128|0);
  HEAP32[$365>>2] = $363;
  $366 = $tmp17;
  $367 = $tmp15;
  $368 = (($366) - ($367))|0;
  $369 = ($368*2260)|0;
  $370 = $tmp14;
  $371 = $tmp16;
  $372 = (($370) - ($371))|0;
  $373 = ($372*11363)|0;
  $374 = (($369) + ($373))|0;
  $tmp10 = $374;
  $375 = $tmp10;
  $376 = $tmp15;
  $377 = ($376*11893)|0;
  $378 = (($375) + ($377))|0;
  $379 = $tmp16;
  $380 = ($379*17799)|0;
  $381 = (($378) + ($380))|0;
  $382 = (($381) + 32768)|0;
  $383 = $382 >> 16;
  $384 = $dataptr;
  $385 = (($384) + 64|0);
  HEAP32[$385>>2] = $383;
  $386 = $tmp10;
  $387 = $tmp14;
  $388 = ($387*1730)|0;
  $389 = (($386) - ($388))|0;
  $390 = $tmp17;
  $391 = ($390*8697)|0;
  $392 = (($389) - ($391))|0;
  $393 = (($392) + 32768)|0;
  $394 = $393 >> 16;
  $395 = $dataptr;
  $396 = (($395) + 192|0);
  HEAP32[$396>>2] = $394;
  $397 = $tmp0;
  $398 = $tmp1;
  $399 = (($397) + ($398))|0;
  $400 = ($399*11086)|0;
  $401 = $tmp6;
  $402 = $tmp7;
  $403 = (($401) - ($402))|0;
  $404 = ($403*3363)|0;
  $405 = (($400) + ($404))|0;
  $tmp11 = $405;
  $406 = $tmp0;
  $407 = $tmp2;
  $408 = (($406) + ($407))|0;
  $409 = ($408*10217)|0;
  $410 = $tmp5;
  $411 = $tmp7;
  $412 = (($410) + ($411))|0;
  $413 = ($412*5461)|0;
  $414 = (($409) + ($413))|0;
  $tmp12 = $414;
  $415 = $tmp0;
  $416 = $tmp3;
  $417 = (($415) + ($416))|0;
  $418 = ($417*8956)|0;
  $419 = $tmp4;
  $420 = $tmp7;
  $421 = (($419) - ($420))|0;
  $422 = ($421*7350)|0;
  $423 = (($418) + ($422))|0;
  $tmp13 = $423;
  $424 = $tmp1;
  $425 = $tmp2;
  $426 = (($424) + ($425))|0;
  $427 = ($426*1136)|0;
  $428 = $tmp6;
  $429 = $tmp5;
  $430 = (($428) - ($429))|0;
  $431 = ($430*11529)|0;
  $432 = (($427) + ($431))|0;
  $tmp14 = $432;
  $433 = $tmp1;
  $434 = $tmp3;
  $435 = (($433) + ($434))|0;
  $436 = Math_imul($435, -5461)|0;
  $437 = $tmp4;
  $438 = $tmp6;
  $439 = (($437) + ($438))|0;
  $440 = Math_imul($439, -10217)|0;
  $441 = (($436) + ($440))|0;
  $tmp15 = $441;
  $442 = $tmp2;
  $443 = $tmp3;
  $444 = (($442) + ($443))|0;
  $445 = Math_imul($444, -11086)|0;
  $446 = $tmp5;
  $447 = $tmp4;
  $448 = (($446) - ($447))|0;
  $449 = ($448*3363)|0;
  $450 = (($445) + ($449))|0;
  $tmp16 = $450;
  $451 = $tmp11;
  $452 = $tmp12;
  $453 = (($451) + ($452))|0;
  $454 = $tmp13;
  $455 = (($453) + ($454))|0;
  $456 = $tmp0;
  $457 = ($456*18730)|0;
  $458 = (($455) - ($457))|0;
  $459 = $tmp7;
  $460 = ($459*6387)|0;
  $461 = (($458) + ($460))|0;
  $tmp10 = $461;
  $462 = $tmp14;
  $463 = $tmp15;
  $464 = (($462) + ($463))|0;
  $465 = $tmp1;
  $466 = ($465*589)|0;
  $467 = (($464) + ($466))|0;
  $468 = $tmp6;
  $469 = ($468*13631)|0;
  $470 = (($467) - ($469))|0;
  $471 = $tmp11;
  $472 = (($471) + ($470))|0;
  $tmp11 = $472;
  $473 = $tmp14;
  $474 = $tmp16;
  $475 = (($473) + ($474))|0;
  $476 = $tmp2;
  $477 = ($476*9222)|0;
  $478 = (($475) - ($477))|0;
  $479 = $tmp5;
  $480 = ($479*10055)|0;
  $481 = (($478) + ($480))|0;
  $482 = $tmp12;
  $483 = (($482) + ($481))|0;
  $tmp12 = $483;
  $484 = $tmp15;
  $485 = $tmp16;
  $486 = (($484) + ($485))|0;
  $487 = $tmp3;
  $488 = ($487*8728)|0;
  $489 = (($486) + ($488))|0;
  $490 = $tmp4;
  $491 = ($490*17760)|0;
  $492 = (($489) + ($491))|0;
  $493 = $tmp13;
  $494 = (($493) + ($492))|0;
  $tmp13 = $494;
  $495 = $tmp10;
  $496 = (($495) + 32768)|0;
  $497 = $496 >> 16;
  $498 = $dataptr;
  $499 = (($498) + 32|0);
  HEAP32[$499>>2] = $497;
  $500 = $tmp11;
  $501 = (($500) + 32768)|0;
  $502 = $501 >> 16;
  $503 = $dataptr;
  $504 = (($503) + 96|0);
  HEAP32[$504>>2] = $502;
  $505 = $tmp12;
  $506 = (($505) + 32768)|0;
  $507 = $506 >> 16;
  $508 = $dataptr;
  $509 = (($508) + 160|0);
  HEAP32[$509>>2] = $507;
  $510 = $tmp13;
  $511 = (($510) + 32768)|0;
  $512 = $511 >> 16;
  $513 = $dataptr;
  $514 = (($513) + 224|0);
  HEAP32[$514>>2] = $512;
  $515 = $dataptr;
  $516 = (($515) + 4|0);
  $dataptr = $516;
  $517 = $wsptr;
  $518 = (($517) + 4|0);
  $wsptr = $518;
  $519 = $ctr;
  $520 = (($519) + -1)|0;
  $ctr = $520;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_7x14($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0;
 var $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp16 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $tmp6 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = $1;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $2;
  $10 = (($8) + ($9)|0);
  $elemptr = $10;
  $11 = $elemptr;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $elemptr;
  $15 = (($14) + 6|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($13) + ($17))|0;
  $tmp0 = $18;
  $19 = $elemptr;
  $20 = (($19) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $elemptr;
  $24 = (($23) + 5|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($22) + ($26))|0;
  $tmp1 = $27;
  $28 = $elemptr;
  $29 = (($28) + 2|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $elemptr;
  $33 = (($32) + 4|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (($31) + ($35))|0;
  $tmp2 = $36;
  $37 = $elemptr;
  $38 = (($37) + 3|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $tmp3 = $40;
  $41 = $elemptr;
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $elemptr;
  $45 = (($44) + 6|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46&255;
  $48 = (($43) - ($47))|0;
  $tmp10 = $48;
  $49 = $elemptr;
  $50 = (($49) + 1|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51&255;
  $53 = $elemptr;
  $54 = (($53) + 5|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $57 = (($52) - ($56))|0;
  $tmp11 = $57;
  $58 = $elemptr;
  $59 = (($58) + 2|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = $elemptr;
  $63 = (($62) + 4|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = (($61) - ($65))|0;
  $tmp12 = $66;
  $67 = $tmp0;
  $68 = $tmp2;
  $69 = (($67) + ($68))|0;
  $z1 = $69;
  $70 = $z1;
  $71 = $tmp1;
  $72 = (($70) + ($71))|0;
  $73 = $tmp3;
  $74 = (($72) + ($73))|0;
  $75 = (($74) - 896)|0;
  $76 = $75 << 2;
  $77 = $dataptr;
  HEAP32[$77>>2] = $76;
  $78 = $tmp3;
  $79 = $tmp3;
  $80 = (($79) + ($78))|0;
  $tmp3 = $80;
  $81 = $tmp3;
  $82 = $z1;
  $83 = (($82) - ($81))|0;
  $z1 = $83;
  $84 = $tmp3;
  $85 = $z1;
  $86 = (($85) - ($84))|0;
  $z1 = $86;
  $87 = $z1;
  $88 = ($87*2896)|0;
  $z1 = $88;
  $89 = $tmp0;
  $90 = $tmp2;
  $91 = (($89) - ($90))|0;
  $92 = ($91*7542)|0;
  $z2 = $92;
  $93 = $tmp1;
  $94 = $tmp2;
  $95 = (($93) - ($94))|0;
  $96 = ($95*2578)|0;
  $z3 = $96;
  $97 = $z1;
  $98 = $z2;
  $99 = (($97) + ($98))|0;
  $100 = $z3;
  $101 = (($99) + ($100))|0;
  $102 = (($101) + 1024)|0;
  $103 = $102 >> 11;
  $104 = $dataptr;
  $105 = (($104) + 8|0);
  HEAP32[$105>>2] = $103;
  $106 = $z2;
  $107 = $z1;
  $108 = (($107) - ($106))|0;
  $z1 = $108;
  $109 = $tmp0;
  $110 = $tmp1;
  $111 = (($109) - ($110))|0;
  $112 = ($111*7223)|0;
  $z2 = $112;
  $113 = $z2;
  $114 = $z3;
  $115 = (($113) + ($114))|0;
  $116 = $tmp1;
  $117 = $tmp3;
  $118 = (($116) - ($117))|0;
  $119 = ($118*5793)|0;
  $120 = (($115) - ($119))|0;
  $121 = (($120) + 1024)|0;
  $122 = $121 >> 11;
  $123 = $dataptr;
  $124 = (($123) + 16|0);
  HEAP32[$124>>2] = $122;
  $125 = $z1;
  $126 = $z2;
  $127 = (($125) + ($126))|0;
  $128 = (($127) + 1024)|0;
  $129 = $128 >> 11;
  $130 = $dataptr;
  $131 = (($130) + 24|0);
  HEAP32[$131>>2] = $129;
  $132 = $tmp10;
  $133 = $tmp11;
  $134 = (($132) + ($133))|0;
  $135 = ($134*7663)|0;
  $tmp1 = $135;
  $136 = $tmp10;
  $137 = $tmp11;
  $138 = (($136) - ($137))|0;
  $139 = ($138*1395)|0;
  $tmp2 = $139;
  $140 = $tmp1;
  $141 = $tmp2;
  $142 = (($140) - ($141))|0;
  $tmp0 = $142;
  $143 = $tmp2;
  $144 = $tmp1;
  $145 = (($144) + ($143))|0;
  $tmp1 = $145;
  $146 = $tmp11;
  $147 = $tmp12;
  $148 = (($146) + ($147))|0;
  $149 = Math_imul($148, -11295)|0;
  $tmp2 = $149;
  $150 = $tmp2;
  $151 = $tmp1;
  $152 = (($151) + ($150))|0;
  $tmp1 = $152;
  $153 = $tmp10;
  $154 = $tmp12;
  $155 = (($153) + ($154))|0;
  $156 = ($155*5027)|0;
  $tmp3 = $156;
  $157 = $tmp3;
  $158 = $tmp0;
  $159 = (($158) + ($157))|0;
  $tmp0 = $159;
  $160 = $tmp3;
  $161 = $tmp12;
  $162 = ($161*15326)|0;
  $163 = (($160) + ($162))|0;
  $164 = $tmp2;
  $165 = (($164) + ($163))|0;
  $tmp2 = $165;
  $166 = $tmp0;
  $167 = (($166) + 1024)|0;
  $168 = $167 >> 11;
  $169 = $dataptr;
  $170 = (($169) + 4|0);
  HEAP32[$170>>2] = $168;
  $171 = $tmp1;
  $172 = (($171) + 1024)|0;
  $173 = $172 >> 11;
  $174 = $dataptr;
  $175 = (($174) + 12|0);
  HEAP32[$175>>2] = $173;
  $176 = $tmp2;
  $177 = (($176) + 1024)|0;
  $178 = $177 >> 11;
  $179 = $dataptr;
  $180 = (($179) + 20|0);
  HEAP32[$180>>2] = $178;
  $181 = $ctr;
  $182 = (($181) + 1)|0;
  $ctr = $182;
  $183 = $ctr;
  $184 = ($183|0)!=(8);
  if ($184) {
   $185 = $ctr;
   $186 = ($185|0)==(14);
   if ($186) {
    break;
   }
   $187 = $dataptr;
   $188 = (($187) + 32|0);
   $dataptr = $188;
  } else {
   $dataptr = $workspace;
  }
 }
 $189 = $0;
 $dataptr = $189;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $190 = $ctr;
  $191 = ($190|0)<(7);
  if (!($191)) {
   break;
  }
  $192 = $dataptr;
  $193 = HEAP32[$192>>2]|0;
  $194 = $wsptr;
  $195 = (($194) + 160|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = (($193) + ($196))|0;
  $tmp0 = $197;
  $198 = $dataptr;
  $199 = (($198) + 32|0);
  $200 = HEAP32[$199>>2]|0;
  $201 = $wsptr;
  $202 = (($201) + 128|0);
  $203 = HEAP32[$202>>2]|0;
  $204 = (($200) + ($203))|0;
  $tmp1 = $204;
  $205 = $dataptr;
  $206 = (($205) + 64|0);
  $207 = HEAP32[$206>>2]|0;
  $208 = $wsptr;
  $209 = (($208) + 96|0);
  $210 = HEAP32[$209>>2]|0;
  $211 = (($207) + ($210))|0;
  $tmp2 = $211;
  $212 = $dataptr;
  $213 = (($212) + 96|0);
  $214 = HEAP32[$213>>2]|0;
  $215 = $wsptr;
  $216 = (($215) + 64|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = (($214) + ($217))|0;
  $tmp13 = $218;
  $219 = $dataptr;
  $220 = (($219) + 128|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = $wsptr;
  $223 = (($222) + 32|0);
  $224 = HEAP32[$223>>2]|0;
  $225 = (($221) + ($224))|0;
  $tmp4 = $225;
  $226 = $dataptr;
  $227 = (($226) + 160|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = $wsptr;
  $230 = HEAP32[$229>>2]|0;
  $231 = (($228) + ($230))|0;
  $tmp5 = $231;
  $232 = $dataptr;
  $233 = (($232) + 192|0);
  $234 = HEAP32[$233>>2]|0;
  $235 = $dataptr;
  $236 = (($235) + 224|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = (($234) + ($237))|0;
  $tmp6 = $238;
  $239 = $tmp0;
  $240 = $tmp6;
  $241 = (($239) + ($240))|0;
  $tmp10 = $241;
  $242 = $tmp0;
  $243 = $tmp6;
  $244 = (($242) - ($243))|0;
  $tmp14 = $244;
  $245 = $tmp1;
  $246 = $tmp5;
  $247 = (($245) + ($246))|0;
  $tmp11 = $247;
  $248 = $tmp1;
  $249 = $tmp5;
  $250 = (($248) - ($249))|0;
  $tmp15 = $250;
  $251 = $tmp2;
  $252 = $tmp4;
  $253 = (($251) + ($252))|0;
  $tmp12 = $253;
  $254 = $tmp2;
  $255 = $tmp4;
  $256 = (($254) - ($255))|0;
  $tmp16 = $256;
  $257 = $dataptr;
  $258 = HEAP32[$257>>2]|0;
  $259 = $wsptr;
  $260 = (($259) + 160|0);
  $261 = HEAP32[$260>>2]|0;
  $262 = (($258) - ($261))|0;
  $tmp0 = $262;
  $263 = $dataptr;
  $264 = (($263) + 32|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $wsptr;
  $267 = (($266) + 128|0);
  $268 = HEAP32[$267>>2]|0;
  $269 = (($265) - ($268))|0;
  $tmp1 = $269;
  $270 = $dataptr;
  $271 = (($270) + 64|0);
  $272 = HEAP32[$271>>2]|0;
  $273 = $wsptr;
  $274 = (($273) + 96|0);
  $275 = HEAP32[$274>>2]|0;
  $276 = (($272) - ($275))|0;
  $tmp2 = $276;
  $277 = $dataptr;
  $278 = (($277) + 96|0);
  $279 = HEAP32[$278>>2]|0;
  $280 = $wsptr;
  $281 = (($280) + 64|0);
  $282 = HEAP32[$281>>2]|0;
  $283 = (($279) - ($282))|0;
  $tmp3 = $283;
  $284 = $dataptr;
  $285 = (($284) + 128|0);
  $286 = HEAP32[$285>>2]|0;
  $287 = $wsptr;
  $288 = (($287) + 32|0);
  $289 = HEAP32[$288>>2]|0;
  $290 = (($286) - ($289))|0;
  $tmp4 = $290;
  $291 = $dataptr;
  $292 = (($291) + 160|0);
  $293 = HEAP32[$292>>2]|0;
  $294 = $wsptr;
  $295 = HEAP32[$294>>2]|0;
  $296 = (($293) - ($295))|0;
  $tmp5 = $296;
  $297 = $dataptr;
  $298 = (($297) + 192|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = $dataptr;
  $301 = (($300) + 224|0);
  $302 = HEAP32[$301>>2]|0;
  $303 = (($299) - ($302))|0;
  $tmp6 = $303;
  $304 = $tmp10;
  $305 = $tmp11;
  $306 = (($304) + ($305))|0;
  $307 = $tmp12;
  $308 = (($306) + ($307))|0;
  $309 = $tmp13;
  $310 = (($308) + ($309))|0;
  $311 = ($310*5350)|0;
  $312 = (($311) + 16384)|0;
  $313 = $312 >> 15;
  $314 = $dataptr;
  HEAP32[$314>>2] = $313;
  $315 = $tmp13;
  $316 = $tmp13;
  $317 = (($316) + ($315))|0;
  $tmp13 = $317;
  $318 = $tmp10;
  $319 = $tmp13;
  $320 = (($318) - ($319))|0;
  $321 = ($320*6817)|0;
  $322 = $tmp11;
  $323 = $tmp13;
  $324 = (($322) - ($323))|0;
  $325 = ($324*1684)|0;
  $326 = (($321) + ($325))|0;
  $327 = $tmp12;
  $328 = $tmp13;
  $329 = (($327) - ($328))|0;
  $330 = ($329*4717)|0;
  $331 = (($326) - ($330))|0;
  $332 = (($331) + 16384)|0;
  $333 = $332 >> 15;
  $334 = $dataptr;
  $335 = (($334) + 128|0);
  HEAP32[$335>>2] = $333;
  $336 = $tmp14;
  $337 = $tmp15;
  $338 = (($336) + ($337))|0;
  $339 = ($338*5915)|0;
  $tmp10 = $339;
  $340 = $tmp10;
  $341 = $tmp14;
  $342 = ($341*1461)|0;
  $343 = (($340) + ($342))|0;
  $344 = $tmp16;
  $345 = ($344*3283)|0;
  $346 = (($343) + ($345))|0;
  $347 = (($346) + 16384)|0;
  $348 = $347 >> 15;
  $349 = $dataptr;
  $350 = (($349) + 64|0);
  HEAP32[$350>>2] = $348;
  $351 = $tmp10;
  $352 = $tmp15;
  $353 = ($352*9198)|0;
  $354 = (($351) - ($353))|0;
  $355 = $tmp16;
  $356 = ($355*7376)|0;
  $357 = (($354) - ($356))|0;
  $358 = (($357) + 16384)|0;
  $359 = $358 >> 15;
  $360 = $dataptr;
  $361 = (($360) + 192|0);
  HEAP32[$361>>2] = $359;
  $362 = $tmp1;
  $363 = $tmp2;
  $364 = (($362) + ($363))|0;
  $tmp10 = $364;
  $365 = $tmp5;
  $366 = $tmp4;
  $367 = (($365) - ($366))|0;
  $tmp11 = $367;
  $368 = $tmp0;
  $369 = $tmp10;
  $370 = (($368) - ($369))|0;
  $371 = $tmp3;
  $372 = (($370) + ($371))|0;
  $373 = $tmp11;
  $374 = (($372) - ($373))|0;
  $375 = $tmp6;
  $376 = (($374) - ($375))|0;
  $377 = ($376*5350)|0;
  $378 = (($377) + 16384)|0;
  $379 = $378 >> 15;
  $380 = $dataptr;
  $381 = (($380) + 224|0);
  HEAP32[$381>>2] = $379;
  $382 = $tmp3;
  $383 = ($382*5350)|0;
  $tmp3 = $383;
  $384 = $tmp10;
  $385 = Math_imul($384, -847)|0;
  $tmp10 = $385;
  $386 = $tmp11;
  $387 = ($386*7518)|0;
  $tmp11 = $387;
  $388 = $tmp11;
  $389 = $tmp3;
  $390 = (($388) - ($389))|0;
  $391 = $tmp10;
  $392 = (($391) + ($390))|0;
  $tmp10 = $392;
  $393 = $tmp0;
  $394 = $tmp2;
  $395 = (($393) + ($394))|0;
  $396 = ($395*6406)|0;
  $397 = $tmp4;
  $398 = $tmp6;
  $399 = (($397) + ($398))|0;
  $400 = ($399*4025)|0;
  $401 = (($396) + ($400))|0;
  $tmp11 = $401;
  $402 = $tmp10;
  $403 = $tmp11;
  $404 = (($402) + ($403))|0;
  $405 = $tmp2;
  $406 = ($405*12700)|0;
  $407 = (($404) - ($406))|0;
  $408 = $tmp4;
  $409 = ($408*5992)|0;
  $410 = (($407) + ($409))|0;
  $411 = (($410) + 16384)|0;
  $412 = $411 >> 15;
  $413 = $dataptr;
  $414 = (($413) + 160|0);
  HEAP32[$414>>2] = $412;
  $415 = $tmp0;
  $416 = $tmp1;
  $417 = (($415) + ($416))|0;
  $418 = ($417*7141)|0;
  $419 = $tmp5;
  $420 = $tmp6;
  $421 = (($419) - ($420))|0;
  $422 = ($421*2499)|0;
  $423 = (($418) + ($422))|0;
  $tmp12 = $423;
  $424 = $tmp10;
  $425 = $tmp12;
  $426 = (($424) + ($425))|0;
  $427 = $tmp1;
  $428 = ($427*2269)|0;
  $429 = (($426) - ($428))|0;
  $430 = $tmp5;
  $431 = ($430*16423)|0;
  $432 = (($429) - ($431))|0;
  $433 = (($432) + 16384)|0;
  $434 = $433 >> 15;
  $435 = $dataptr;
  $436 = (($435) + 96|0);
  HEAP32[$436>>2] = $434;
  $437 = $tmp11;
  $438 = $tmp12;
  $439 = (($437) + ($438))|0;
  $440 = $tmp3;
  $441 = (($439) + ($440))|0;
  $442 = $tmp0;
  $443 = ($442*6029)|0;
  $444 = (($441) - ($443))|0;
  $445 = $tmp6;
  $446 = ($445*679)|0;
  $447 = (($444) - ($446))|0;
  $448 = (($447) + 16384)|0;
  $449 = $448 >> 15;
  $450 = $dataptr;
  $451 = (($450) + 32|0);
  HEAP32[$451>>2] = $449;
  $452 = $dataptr;
  $453 = (($452) + 4|0);
  $dataptr = $453;
  $454 = $wsptr;
  $455 = (($454) + 4|0);
  $wsptr = $455;
  $456 = $ctr;
  $457 = (($456) + 1)|0;
  $ctr = $457;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_6x12($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $workspace = 0;
 var $wsptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = $1;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $2;
  $10 = (($8) + ($9)|0);
  $elemptr = $10;
  $11 = $elemptr;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $elemptr;
  $15 = (($14) + 5|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($13) + ($17))|0;
  $tmp0 = $18;
  $19 = $elemptr;
  $20 = (($19) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $elemptr;
  $24 = (($23) + 4|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($22) + ($26))|0;
  $tmp11 = $27;
  $28 = $elemptr;
  $29 = (($28) + 2|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $elemptr;
  $33 = (($32) + 3|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (($31) + ($35))|0;
  $tmp2 = $36;
  $37 = $tmp0;
  $38 = $tmp2;
  $39 = (($37) + ($38))|0;
  $tmp10 = $39;
  $40 = $tmp0;
  $41 = $tmp2;
  $42 = (($40) - ($41))|0;
  $tmp12 = $42;
  $43 = $elemptr;
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = $elemptr;
  $47 = (($46) + 5|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = (($45) - ($49))|0;
  $tmp0 = $50;
  $51 = $elemptr;
  $52 = (($51) + 1|0);
  $53 = HEAP8[$52>>0]|0;
  $54 = $53&255;
  $55 = $elemptr;
  $56 = (($55) + 4|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = (($54) - ($58))|0;
  $tmp1 = $59;
  $60 = $elemptr;
  $61 = (($60) + 2|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $64 = $elemptr;
  $65 = (($64) + 3|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $68 = (($63) - ($67))|0;
  $tmp2 = $68;
  $69 = $tmp10;
  $70 = $tmp11;
  $71 = (($69) + ($70))|0;
  $72 = (($71) - 768)|0;
  $73 = $72 << 2;
  $74 = $dataptr;
  HEAP32[$74>>2] = $73;
  $75 = $tmp12;
  $76 = ($75*10033)|0;
  $77 = (($76) + 1024)|0;
  $78 = $77 >> 11;
  $79 = $dataptr;
  $80 = (($79) + 8|0);
  HEAP32[$80>>2] = $78;
  $81 = $tmp10;
  $82 = $tmp11;
  $83 = (($81) - ($82))|0;
  $84 = $tmp11;
  $85 = (($83) - ($84))|0;
  $86 = ($85*5793)|0;
  $87 = (($86) + 1024)|0;
  $88 = $87 >> 11;
  $89 = $dataptr;
  $90 = (($89) + 16|0);
  HEAP32[$90>>2] = $88;
  $91 = $tmp0;
  $92 = $tmp2;
  $93 = (($91) + ($92))|0;
  $94 = ($93*2998)|0;
  $95 = (($94) + 1024)|0;
  $96 = $95 >> 11;
  $tmp10 = $96;
  $97 = $tmp10;
  $98 = $tmp0;
  $99 = $tmp1;
  $100 = (($98) + ($99))|0;
  $101 = $100 << 2;
  $102 = (($97) + ($101))|0;
  $103 = $dataptr;
  $104 = (($103) + 4|0);
  HEAP32[$104>>2] = $102;
  $105 = $tmp0;
  $106 = $tmp1;
  $107 = (($105) - ($106))|0;
  $108 = $tmp2;
  $109 = (($107) - ($108))|0;
  $110 = $109 << 2;
  $111 = $dataptr;
  $112 = (($111) + 12|0);
  HEAP32[$112>>2] = $110;
  $113 = $tmp10;
  $114 = $tmp2;
  $115 = $tmp1;
  $116 = (($114) - ($115))|0;
  $117 = $116 << 2;
  $118 = (($113) + ($117))|0;
  $119 = $dataptr;
  $120 = (($119) + 20|0);
  HEAP32[$120>>2] = $118;
  $121 = $ctr;
  $122 = (($121) + 1)|0;
  $ctr = $122;
  $123 = $ctr;
  $124 = ($123|0)!=(8);
  if ($124) {
   $125 = $ctr;
   $126 = ($125|0)==(12);
   if ($126) {
    break;
   }
   $127 = $dataptr;
   $128 = (($127) + 32|0);
   $dataptr = $128;
  } else {
   $dataptr = $workspace;
  }
 }
 $129 = $0;
 $dataptr = $129;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $130 = $ctr;
  $131 = ($130|0)<(6);
  if (!($131)) {
   break;
  }
  $132 = $dataptr;
  $133 = HEAP32[$132>>2]|0;
  $134 = $wsptr;
  $135 = (($134) + 96|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = (($133) + ($136))|0;
  $tmp0 = $137;
  $138 = $dataptr;
  $139 = (($138) + 32|0);
  $140 = HEAP32[$139>>2]|0;
  $141 = $wsptr;
  $142 = (($141) + 64|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = (($140) + ($143))|0;
  $tmp1 = $144;
  $145 = $dataptr;
  $146 = (($145) + 64|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $wsptr;
  $149 = (($148) + 32|0);
  $150 = HEAP32[$149>>2]|0;
  $151 = (($147) + ($150))|0;
  $tmp2 = $151;
  $152 = $dataptr;
  $153 = (($152) + 96|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = $wsptr;
  $156 = HEAP32[$155>>2]|0;
  $157 = (($154) + ($156))|0;
  $tmp3 = $157;
  $158 = $dataptr;
  $159 = (($158) + 128|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $dataptr;
  $162 = (($161) + 224|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($160) + ($163))|0;
  $tmp4 = $164;
  $165 = $dataptr;
  $166 = (($165) + 160|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $dataptr;
  $169 = (($168) + 192|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = (($167) + ($170))|0;
  $tmp5 = $171;
  $172 = $tmp0;
  $173 = $tmp5;
  $174 = (($172) + ($173))|0;
  $tmp10 = $174;
  $175 = $tmp0;
  $176 = $tmp5;
  $177 = (($175) - ($176))|0;
  $tmp13 = $177;
  $178 = $tmp1;
  $179 = $tmp4;
  $180 = (($178) + ($179))|0;
  $tmp11 = $180;
  $181 = $tmp1;
  $182 = $tmp4;
  $183 = (($181) - ($182))|0;
  $tmp14 = $183;
  $184 = $tmp2;
  $185 = $tmp3;
  $186 = (($184) + ($185))|0;
  $tmp12 = $186;
  $187 = $tmp2;
  $188 = $tmp3;
  $189 = (($187) - ($188))|0;
  $tmp15 = $189;
  $190 = $dataptr;
  $191 = HEAP32[$190>>2]|0;
  $192 = $wsptr;
  $193 = (($192) + 96|0);
  $194 = HEAP32[$193>>2]|0;
  $195 = (($191) - ($194))|0;
  $tmp0 = $195;
  $196 = $dataptr;
  $197 = (($196) + 32|0);
  $198 = HEAP32[$197>>2]|0;
  $199 = $wsptr;
  $200 = (($199) + 64|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = (($198) - ($201))|0;
  $tmp1 = $202;
  $203 = $dataptr;
  $204 = (($203) + 64|0);
  $205 = HEAP32[$204>>2]|0;
  $206 = $wsptr;
  $207 = (($206) + 32|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = (($205) - ($208))|0;
  $tmp2 = $209;
  $210 = $dataptr;
  $211 = (($210) + 96|0);
  $212 = HEAP32[$211>>2]|0;
  $213 = $wsptr;
  $214 = HEAP32[$213>>2]|0;
  $215 = (($212) - ($214))|0;
  $tmp3 = $215;
  $216 = $dataptr;
  $217 = (($216) + 128|0);
  $218 = HEAP32[$217>>2]|0;
  $219 = $dataptr;
  $220 = (($219) + 224|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($218) - ($221))|0;
  $tmp4 = $222;
  $223 = $dataptr;
  $224 = (($223) + 160|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $dataptr;
  $227 = (($226) + 192|0);
  $228 = HEAP32[$227>>2]|0;
  $229 = (($225) - ($228))|0;
  $tmp5 = $229;
  $230 = $tmp10;
  $231 = $tmp11;
  $232 = (($230) + ($231))|0;
  $233 = $tmp12;
  $234 = (($232) + ($233))|0;
  $235 = ($234*7282)|0;
  $236 = (($235) + 16384)|0;
  $237 = $236 >> 15;
  $238 = $dataptr;
  HEAP32[$238>>2] = $237;
  $239 = $tmp13;
  $240 = $tmp14;
  $241 = (($239) - ($240))|0;
  $242 = $tmp15;
  $243 = (($241) - ($242))|0;
  $244 = ($243*7282)|0;
  $245 = (($244) + 16384)|0;
  $246 = $245 >> 15;
  $247 = $dataptr;
  $248 = (($247) + 192|0);
  HEAP32[$248>>2] = $246;
  $249 = $tmp10;
  $250 = $tmp12;
  $251 = (($249) - ($250))|0;
  $252 = ($251*8918)|0;
  $253 = (($252) + 16384)|0;
  $254 = $253 >> 15;
  $255 = $dataptr;
  $256 = (($255) + 128|0);
  HEAP32[$256>>2] = $254;
  $257 = $tmp14;
  $258 = $tmp15;
  $259 = (($257) - ($258))|0;
  $260 = ($259*7282)|0;
  $261 = $tmp13;
  $262 = $tmp15;
  $263 = (($261) + ($262))|0;
  $264 = ($263*9947)|0;
  $265 = (($260) + ($264))|0;
  $266 = (($265) + 16384)|0;
  $267 = $266 >> 15;
  $268 = $dataptr;
  $269 = (($268) + 64|0);
  HEAP32[$269>>2] = $267;
  $270 = $tmp1;
  $271 = $tmp4;
  $272 = (($270) + ($271))|0;
  $273 = ($272*3941)|0;
  $tmp10 = $273;
  $274 = $tmp10;
  $275 = $tmp1;
  $276 = ($275*5573)|0;
  $277 = (($274) + ($276))|0;
  $tmp14 = $277;
  $278 = $tmp10;
  $279 = $tmp4;
  $280 = ($279*13455)|0;
  $281 = (($278) - ($280))|0;
  $tmp15 = $281;
  $282 = $tmp0;
  $283 = $tmp2;
  $284 = (($282) + ($283))|0;
  $285 = ($284*8170)|0;
  $tmp12 = $285;
  $286 = $tmp0;
  $287 = $tmp3;
  $288 = (($286) + ($287))|0;
  $289 = ($288*6269)|0;
  $tmp13 = $289;
  $290 = $tmp12;
  $291 = $tmp13;
  $292 = (($290) + ($291))|0;
  $293 = $tmp14;
  $294 = (($292) + ($293))|0;
  $295 = $tmp0;
  $296 = ($295*4229)|0;
  $297 = (($294) - ($296))|0;
  $298 = $tmp5;
  $299 = ($298*1344)|0;
  $300 = (($297) + ($299))|0;
  $tmp10 = $300;
  $301 = $tmp2;
  $302 = $tmp3;
  $303 = (($301) + ($302))|0;
  $304 = Math_imul($303, -1344)|0;
  $tmp11 = $304;
  $305 = $tmp11;
  $306 = $tmp15;
  $307 = (($305) - ($306))|0;
  $308 = $tmp2;
  $309 = ($308*17036)|0;
  $310 = (($307) - ($309))|0;
  $311 = $tmp5;
  $312 = ($311*6269)|0;
  $313 = (($310) + ($312))|0;
  $314 = $tmp12;
  $315 = (($314) + ($313))|0;
  $tmp12 = $315;
  $316 = $tmp11;
  $317 = $tmp14;
  $318 = (($316) - ($317))|0;
  $319 = $tmp3;
  $320 = ($319*5285)|0;
  $321 = (($318) + ($320))|0;
  $322 = $tmp5;
  $323 = ($322*8170)|0;
  $324 = (($321) - ($323))|0;
  $325 = $tmp13;
  $326 = (($325) + ($324))|0;
  $tmp13 = $326;
  $327 = $tmp15;
  $328 = $tmp0;
  $329 = $tmp3;
  $330 = (($328) - ($329))|0;
  $331 = ($330*9514)|0;
  $332 = (($327) + ($331))|0;
  $333 = $tmp2;
  $334 = $tmp5;
  $335 = (($333) + ($334))|0;
  $336 = ($335*3941)|0;
  $337 = (($332) - ($336))|0;
  $tmp11 = $337;
  $338 = $tmp10;
  $339 = (($338) + 16384)|0;
  $340 = $339 >> 15;
  $341 = $dataptr;
  $342 = (($341) + 32|0);
  HEAP32[$342>>2] = $340;
  $343 = $tmp11;
  $344 = (($343) + 16384)|0;
  $345 = $344 >> 15;
  $346 = $dataptr;
  $347 = (($346) + 96|0);
  HEAP32[$347>>2] = $345;
  $348 = $tmp12;
  $349 = (($348) + 16384)|0;
  $350 = $349 >> 15;
  $351 = $dataptr;
  $352 = (($351) + 160|0);
  HEAP32[$352>>2] = $350;
  $353 = $tmp13;
  $354 = (($353) + 16384)|0;
  $355 = $354 >> 15;
  $356 = $dataptr;
  $357 = (($356) + 224|0);
  HEAP32[$357>>2] = $355;
  $358 = $dataptr;
  $359 = (($358) + 4|0);
  $dataptr = $359;
  $360 = $wsptr;
  $361 = (($360) + 4|0);
  $wsptr = $361;
  $362 = $ctr;
  $363 = (($362) + 1)|0;
  $ctr = $363;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_5x10($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0;
 var $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $workspace = 0, $wsptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $workspace = sp + 16|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = $1;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $2;
  $10 = (($8) + ($9)|0);
  $elemptr = $10;
  $11 = $elemptr;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $elemptr;
  $15 = (($14) + 4|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($13) + ($17))|0;
  $tmp0 = $18;
  $19 = $elemptr;
  $20 = (($19) + 1|0);
  $21 = HEAP8[$20>>0]|0;
  $22 = $21&255;
  $23 = $elemptr;
  $24 = (($23) + 3|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($22) + ($26))|0;
  $tmp1 = $27;
  $28 = $elemptr;
  $29 = (($28) + 2|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $tmp2 = $31;
  $32 = $tmp0;
  $33 = $tmp1;
  $34 = (($32) + ($33))|0;
  $tmp10 = $34;
  $35 = $tmp0;
  $36 = $tmp1;
  $37 = (($35) - ($36))|0;
  $tmp11 = $37;
  $38 = $elemptr;
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $elemptr;
  $42 = (($41) + 4|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = (($40) - ($44))|0;
  $tmp0 = $45;
  $46 = $elemptr;
  $47 = (($46) + 1|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = $elemptr;
  $51 = (($50) + 3|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = (($49) - ($53))|0;
  $tmp1 = $54;
  $55 = $tmp10;
  $56 = $tmp2;
  $57 = (($55) + ($56))|0;
  $58 = (($57) - 640)|0;
  $59 = $58 << 2;
  $60 = $dataptr;
  HEAP32[$60>>2] = $59;
  $61 = $tmp11;
  $62 = ($61*6476)|0;
  $tmp11 = $62;
  $63 = $tmp2;
  $64 = $63 << 2;
  $65 = $tmp10;
  $66 = (($65) - ($64))|0;
  $tmp10 = $66;
  $67 = $tmp10;
  $68 = ($67*2896)|0;
  $tmp10 = $68;
  $69 = $tmp11;
  $70 = $tmp10;
  $71 = (($69) + ($70))|0;
  $72 = (($71) + 1024)|0;
  $73 = $72 >> 11;
  $74 = $dataptr;
  $75 = (($74) + 8|0);
  HEAP32[$75>>2] = $73;
  $76 = $tmp11;
  $77 = $tmp10;
  $78 = (($76) - ($77))|0;
  $79 = (($78) + 1024)|0;
  $80 = $79 >> 11;
  $81 = $dataptr;
  $82 = (($81) + 16|0);
  HEAP32[$82>>2] = $80;
  $83 = $tmp0;
  $84 = $tmp1;
  $85 = (($83) + ($84))|0;
  $86 = ($85*6810)|0;
  $tmp10 = $86;
  $87 = $tmp10;
  $88 = $tmp0;
  $89 = ($88*4209)|0;
  $90 = (($87) + ($89))|0;
  $91 = (($90) + 1024)|0;
  $92 = $91 >> 11;
  $93 = $dataptr;
  $94 = (($93) + 4|0);
  HEAP32[$94>>2] = $92;
  $95 = $tmp10;
  $96 = $tmp1;
  $97 = ($96*17828)|0;
  $98 = (($95) - ($97))|0;
  $99 = (($98) + 1024)|0;
  $100 = $99 >> 11;
  $101 = $dataptr;
  $102 = (($101) + 12|0);
  HEAP32[$102>>2] = $100;
  $103 = $ctr;
  $104 = (($103) + 1)|0;
  $ctr = $104;
  $105 = $ctr;
  $106 = ($105|0)!=(8);
  if ($106) {
   $107 = $ctr;
   $108 = ($107|0)==(10);
   if ($108) {
    break;
   }
   $109 = $dataptr;
   $110 = (($109) + 32|0);
   $dataptr = $110;
  } else {
   $dataptr = $workspace;
  }
 }
 $111 = $0;
 $dataptr = $111;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $112 = $ctr;
  $113 = ($112|0)<(5);
  if (!($113)) {
   break;
  }
  $114 = $dataptr;
  $115 = HEAP32[$114>>2]|0;
  $116 = $wsptr;
  $117 = (($116) + 32|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (($115) + ($118))|0;
  $tmp0 = $119;
  $120 = $dataptr;
  $121 = (($120) + 32|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $wsptr;
  $124 = HEAP32[$123>>2]|0;
  $125 = (($122) + ($124))|0;
  $tmp1 = $125;
  $126 = $dataptr;
  $127 = (($126) + 64|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = $dataptr;
  $130 = (($129) + 224|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (($128) + ($131))|0;
  $tmp12 = $132;
  $133 = $dataptr;
  $134 = (($133) + 96|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = $dataptr;
  $137 = (($136) + 192|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($135) + ($138))|0;
  $tmp3 = $139;
  $140 = $dataptr;
  $141 = (($140) + 128|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = $dataptr;
  $144 = (($143) + 160|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = (($142) + ($145))|0;
  $tmp4 = $146;
  $147 = $tmp0;
  $148 = $tmp4;
  $149 = (($147) + ($148))|0;
  $tmp10 = $149;
  $150 = $tmp0;
  $151 = $tmp4;
  $152 = (($150) - ($151))|0;
  $tmp13 = $152;
  $153 = $tmp1;
  $154 = $tmp3;
  $155 = (($153) + ($154))|0;
  $tmp11 = $155;
  $156 = $tmp1;
  $157 = $tmp3;
  $158 = (($156) - ($157))|0;
  $tmp14 = $158;
  $159 = $dataptr;
  $160 = HEAP32[$159>>2]|0;
  $161 = $wsptr;
  $162 = (($161) + 32|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($160) - ($163))|0;
  $tmp0 = $164;
  $165 = $dataptr;
  $166 = (($165) + 32|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = $wsptr;
  $169 = HEAP32[$168>>2]|0;
  $170 = (($167) - ($169))|0;
  $tmp1 = $170;
  $171 = $dataptr;
  $172 = (($171) + 64|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = $dataptr;
  $175 = (($174) + 224|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = (($173) - ($176))|0;
  $tmp2 = $177;
  $178 = $dataptr;
  $179 = (($178) + 96|0);
  $180 = HEAP32[$179>>2]|0;
  $181 = $dataptr;
  $182 = (($181) + 192|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($180) - ($183))|0;
  $tmp3 = $184;
  $185 = $dataptr;
  $186 = (($185) + 128|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = $dataptr;
  $189 = (($188) + 160|0);
  $190 = HEAP32[$189>>2]|0;
  $191 = (($187) - ($190))|0;
  $tmp4 = $191;
  $192 = $tmp10;
  $193 = $tmp11;
  $194 = (($192) + ($193))|0;
  $195 = $tmp12;
  $196 = (($194) + ($195))|0;
  $197 = ($196*10486)|0;
  $198 = (($197) + 16384)|0;
  $199 = $198 >> 15;
  $200 = $dataptr;
  HEAP32[$200>>2] = $199;
  $201 = $tmp12;
  $202 = $tmp12;
  $203 = (($202) + ($201))|0;
  $tmp12 = $203;
  $204 = $tmp10;
  $205 = $tmp12;
  $206 = (($204) - ($205))|0;
  $207 = ($206*11997)|0;
  $208 = $tmp11;
  $209 = $tmp12;
  $210 = (($208) - ($209))|0;
  $211 = ($210*4582)|0;
  $212 = (($207) - ($211))|0;
  $213 = (($212) + 16384)|0;
  $214 = $213 >> 15;
  $215 = $dataptr;
  $216 = (($215) + 128|0);
  HEAP32[$216>>2] = $214;
  $217 = $tmp13;
  $218 = $tmp14;
  $219 = (($217) + ($218))|0;
  $220 = ($219*8716)|0;
  $tmp10 = $220;
  $221 = $tmp10;
  $222 = $tmp13;
  $223 = ($222*5387)|0;
  $224 = (($221) + ($223))|0;
  $225 = (($224) + 16384)|0;
  $226 = $225 >> 15;
  $227 = $dataptr;
  $228 = (($227) + 64|0);
  HEAP32[$228>>2] = $226;
  $229 = $tmp10;
  $230 = $tmp14;
  $231 = ($230*22820)|0;
  $232 = (($229) - ($231))|0;
  $233 = (($232) + 16384)|0;
  $234 = $233 >> 15;
  $235 = $dataptr;
  $236 = (($235) + 192|0);
  HEAP32[$236>>2] = $234;
  $237 = $tmp0;
  $238 = $tmp4;
  $239 = (($237) + ($238))|0;
  $tmp10 = $239;
  $240 = $tmp1;
  $241 = $tmp3;
  $242 = (($240) - ($241))|0;
  $tmp11 = $242;
  $243 = $tmp10;
  $244 = $tmp11;
  $245 = (($243) - ($244))|0;
  $246 = $tmp2;
  $247 = (($245) - ($246))|0;
  $248 = ($247*10486)|0;
  $249 = (($248) + 16384)|0;
  $250 = $249 >> 15;
  $251 = $dataptr;
  $252 = (($251) + 160|0);
  HEAP32[$252>>2] = $250;
  $253 = $tmp2;
  $254 = ($253*10486)|0;
  $tmp2 = $254;
  $255 = $tmp0;
  $256 = ($255*14647)|0;
  $257 = $tmp1;
  $258 = ($257*13213)|0;
  $259 = (($256) + ($258))|0;
  $260 = $tmp2;
  $261 = (($259) + ($260))|0;
  $262 = $tmp3;
  $263 = ($262*6732)|0;
  $264 = (($261) + ($263))|0;
  $265 = $tmp4;
  $266 = ($265*2320)|0;
  $267 = (($264) + ($266))|0;
  $268 = (($267) + 16384)|0;
  $269 = $268 >> 15;
  $270 = $dataptr;
  $271 = (($270) + 32|0);
  HEAP32[$271>>2] = $269;
  $272 = $tmp0;
  $273 = $tmp4;
  $274 = (($272) - ($273))|0;
  $275 = ($274*9973)|0;
  $276 = $tmp1;
  $277 = $tmp3;
  $278 = (($276) + ($277))|0;
  $279 = ($278*6163)|0;
  $280 = (($275) - ($279))|0;
  $tmp12 = $280;
  $281 = $tmp10;
  $282 = $tmp11;
  $283 = (($281) + ($282))|0;
  $284 = ($283*3240)|0;
  $285 = $tmp11;
  $286 = ($285*5243)|0;
  $287 = (($284) + ($286))|0;
  $288 = $tmp2;
  $289 = (($287) - ($288))|0;
  $tmp13 = $289;
  $290 = $tmp12;
  $291 = $tmp13;
  $292 = (($290) + ($291))|0;
  $293 = (($292) + 16384)|0;
  $294 = $293 >> 15;
  $295 = $dataptr;
  $296 = (($295) + 96|0);
  HEAP32[$296>>2] = $294;
  $297 = $tmp12;
  $298 = $tmp13;
  $299 = (($297) - ($298))|0;
  $300 = (($299) + 16384)|0;
  $301 = $300 >> 15;
  $302 = $dataptr;
  $303 = (($302) + 224|0);
  HEAP32[$303>>2] = $301;
  $304 = $dataptr;
  $305 = (($304) + 4|0);
  $dataptr = $305;
  $306 = $wsptr;
  $307 = (($306) + 4|0);
  $wsptr = $307;
  $308 = $ctr;
  $309 = (($308) + 1)|0;
  $ctr = $309;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_4x8($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $tmp3 = 0, $z1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = ($5|0)<(8);
  if (!($6)) {
   break;
  }
  $7 = $ctr;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($10) + ($11)|0);
  $elemptr = $12;
  $13 = $elemptr;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $elemptr;
  $17 = (($16) + 3|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($15) + ($19))|0;
  $tmp0 = $20;
  $21 = $elemptr;
  $22 = (($21) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $25 = $elemptr;
  $26 = (($25) + 2|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($24) + ($28))|0;
  $tmp1 = $29;
  $30 = $elemptr;
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $elemptr;
  $34 = (($33) + 3|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = (($32) - ($36))|0;
  $tmp10 = $37;
  $38 = $elemptr;
  $39 = (($38) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40&255;
  $42 = $elemptr;
  $43 = (($42) + 2|0);
  $44 = HEAP8[$43>>0]|0;
  $45 = $44&255;
  $46 = (($41) - ($45))|0;
  $tmp11 = $46;
  $47 = $tmp0;
  $48 = $tmp1;
  $49 = (($47) + ($48))|0;
  $50 = (($49) - 512)|0;
  $51 = $50 << 3;
  $52 = $dataptr;
  HEAP32[$52>>2] = $51;
  $53 = $tmp0;
  $54 = $tmp1;
  $55 = (($53) - ($54))|0;
  $56 = $55 << 3;
  $57 = $dataptr;
  $58 = (($57) + 8|0);
  HEAP32[$58>>2] = $56;
  $59 = $tmp10;
  $60 = $tmp11;
  $61 = (($59) + ($60))|0;
  $62 = ($61*4433)|0;
  $tmp0 = $62;
  $63 = $tmp0;
  $64 = (($63) + 512)|0;
  $tmp0 = $64;
  $65 = $tmp0;
  $66 = $tmp10;
  $67 = ($66*6270)|0;
  $68 = (($65) + ($67))|0;
  $69 = $68 >> 10;
  $70 = $dataptr;
  $71 = (($70) + 4|0);
  HEAP32[$71>>2] = $69;
  $72 = $tmp0;
  $73 = $tmp11;
  $74 = ($73*15137)|0;
  $75 = (($72) - ($74))|0;
  $76 = $75 >> 10;
  $77 = $dataptr;
  $78 = (($77) + 12|0);
  HEAP32[$78>>2] = $76;
  $79 = $dataptr;
  $80 = (($79) + 32|0);
  $dataptr = $80;
  $81 = $ctr;
  $82 = (($81) + 1)|0;
  $ctr = $82;
 }
 $83 = $0;
 $dataptr = $83;
 $ctr = 0;
 while(1) {
  $84 = $ctr;
  $85 = ($84|0)<(4);
  if (!($85)) {
   break;
  }
  $86 = $dataptr;
  $87 = HEAP32[$86>>2]|0;
  $88 = $dataptr;
  $89 = (($88) + 224|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = (($87) + ($90))|0;
  $tmp0 = $91;
  $92 = $dataptr;
  $93 = (($92) + 32|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = $dataptr;
  $96 = (($95) + 192|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($94) + ($97))|0;
  $tmp1 = $98;
  $99 = $dataptr;
  $100 = (($99) + 64|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $dataptr;
  $103 = (($102) + 160|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (($101) + ($104))|0;
  $tmp2 = $105;
  $106 = $dataptr;
  $107 = (($106) + 96|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = $dataptr;
  $110 = (($109) + 128|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($108) + ($111))|0;
  $tmp3 = $112;
  $113 = $tmp0;
  $114 = $tmp3;
  $115 = (($113) + ($114))|0;
  $116 = (($115) + 2)|0;
  $tmp10 = $116;
  $117 = $tmp0;
  $118 = $tmp3;
  $119 = (($117) - ($118))|0;
  $tmp12 = $119;
  $120 = $tmp1;
  $121 = $tmp2;
  $122 = (($120) + ($121))|0;
  $tmp11 = $122;
  $123 = $tmp1;
  $124 = $tmp2;
  $125 = (($123) - ($124))|0;
  $tmp13 = $125;
  $126 = $dataptr;
  $127 = HEAP32[$126>>2]|0;
  $128 = $dataptr;
  $129 = (($128) + 224|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($127) - ($130))|0;
  $tmp0 = $131;
  $132 = $dataptr;
  $133 = (($132) + 32|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = $dataptr;
  $136 = (($135) + 192|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = (($134) - ($137))|0;
  $tmp1 = $138;
  $139 = $dataptr;
  $140 = (($139) + 64|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = $dataptr;
  $143 = (($142) + 160|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = (($141) - ($144))|0;
  $tmp2 = $145;
  $146 = $dataptr;
  $147 = (($146) + 96|0);
  $148 = HEAP32[$147>>2]|0;
  $149 = $dataptr;
  $150 = (($149) + 128|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = (($148) - ($151))|0;
  $tmp3 = $152;
  $153 = $tmp10;
  $154 = $tmp11;
  $155 = (($153) + ($154))|0;
  $156 = $155 >> 2;
  $157 = $dataptr;
  HEAP32[$157>>2] = $156;
  $158 = $tmp10;
  $159 = $tmp11;
  $160 = (($158) - ($159))|0;
  $161 = $160 >> 2;
  $162 = $dataptr;
  $163 = (($162) + 128|0);
  HEAP32[$163>>2] = $161;
  $164 = $tmp12;
  $165 = $tmp13;
  $166 = (($164) + ($165))|0;
  $167 = ($166*4433)|0;
  $z1 = $167;
  $168 = $z1;
  $169 = (($168) + 16384)|0;
  $z1 = $169;
  $170 = $z1;
  $171 = $tmp12;
  $172 = ($171*6270)|0;
  $173 = (($170) + ($172))|0;
  $174 = $173 >> 15;
  $175 = $dataptr;
  $176 = (($175) + 64|0);
  HEAP32[$176>>2] = $174;
  $177 = $z1;
  $178 = $tmp13;
  $179 = ($178*15137)|0;
  $180 = (($177) - ($179))|0;
  $181 = $180 >> 15;
  $182 = $dataptr;
  $183 = (($182) + 192|0);
  HEAP32[$183>>2] = $181;
  $184 = $tmp0;
  $185 = $tmp2;
  $186 = (($184) + ($185))|0;
  $tmp12 = $186;
  $187 = $tmp1;
  $188 = $tmp3;
  $189 = (($187) + ($188))|0;
  $tmp13 = $189;
  $190 = $tmp12;
  $191 = $tmp13;
  $192 = (($190) + ($191))|0;
  $193 = ($192*9633)|0;
  $z1 = $193;
  $194 = $z1;
  $195 = (($194) + 16384)|0;
  $z1 = $195;
  $196 = $tmp12;
  $197 = Math_imul($196, -3196)|0;
  $tmp12 = $197;
  $198 = $tmp13;
  $199 = Math_imul($198, -16069)|0;
  $tmp13 = $199;
  $200 = $z1;
  $201 = $tmp12;
  $202 = (($201) + ($200))|0;
  $tmp12 = $202;
  $203 = $z1;
  $204 = $tmp13;
  $205 = (($204) + ($203))|0;
  $tmp13 = $205;
  $206 = $tmp0;
  $207 = $tmp3;
  $208 = (($206) + ($207))|0;
  $209 = Math_imul($208, -7373)|0;
  $z1 = $209;
  $210 = $tmp0;
  $211 = ($210*12299)|0;
  $tmp0 = $211;
  $212 = $tmp3;
  $213 = ($212*2446)|0;
  $tmp3 = $213;
  $214 = $z1;
  $215 = $tmp12;
  $216 = (($214) + ($215))|0;
  $217 = $tmp0;
  $218 = (($217) + ($216))|0;
  $tmp0 = $218;
  $219 = $z1;
  $220 = $tmp13;
  $221 = (($219) + ($220))|0;
  $222 = $tmp3;
  $223 = (($222) + ($221))|0;
  $tmp3 = $223;
  $224 = $tmp1;
  $225 = $tmp2;
  $226 = (($224) + ($225))|0;
  $227 = Math_imul($226, -20995)|0;
  $z1 = $227;
  $228 = $tmp1;
  $229 = ($228*25172)|0;
  $tmp1 = $229;
  $230 = $tmp2;
  $231 = ($230*16819)|0;
  $tmp2 = $231;
  $232 = $z1;
  $233 = $tmp13;
  $234 = (($232) + ($233))|0;
  $235 = $tmp1;
  $236 = (($235) + ($234))|0;
  $tmp1 = $236;
  $237 = $z1;
  $238 = $tmp12;
  $239 = (($237) + ($238))|0;
  $240 = $tmp2;
  $241 = (($240) + ($239))|0;
  $tmp2 = $241;
  $242 = $tmp0;
  $243 = $242 >> 15;
  $244 = $dataptr;
  $245 = (($244) + 32|0);
  HEAP32[$245>>2] = $243;
  $246 = $tmp1;
  $247 = $246 >> 15;
  $248 = $dataptr;
  $249 = (($248) + 96|0);
  HEAP32[$249>>2] = $247;
  $250 = $tmp2;
  $251 = $250 >> 15;
  $252 = $dataptr;
  $253 = (($252) + 160|0);
  HEAP32[$253>>2] = $251;
  $254 = $tmp3;
  $255 = $254 >> 15;
  $256 = $dataptr;
  $257 = (($256) + 224|0);
  HEAP32[$257>>2] = $255;
  $258 = $dataptr;
  $259 = (($258) + 4|0);
  $dataptr = $259;
  $260 = $ctr;
  $261 = (($260) + 1)|0;
  $ctr = $261;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_3x6($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dataptr = 0, $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = ($5|0)<(6);
  if (!($6)) {
   break;
  }
  $7 = $ctr;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($10) + ($11)|0);
  $elemptr = $12;
  $13 = $elemptr;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $elemptr;
  $17 = (($16) + 2|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (($15) + ($19))|0;
  $tmp0 = $20;
  $21 = $elemptr;
  $22 = (($21) + 1|0);
  $23 = HEAP8[$22>>0]|0;
  $24 = $23&255;
  $tmp1 = $24;
  $25 = $elemptr;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = $elemptr;
  $29 = (($28) + 2|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (($27) - ($31))|0;
  $tmp2 = $32;
  $33 = $tmp0;
  $34 = $tmp1;
  $35 = (($33) + ($34))|0;
  $36 = (($35) - 384)|0;
  $37 = $36 << 3;
  $38 = $dataptr;
  HEAP32[$38>>2] = $37;
  $39 = $tmp0;
  $40 = $tmp1;
  $41 = (($39) - ($40))|0;
  $42 = $tmp1;
  $43 = (($41) - ($42))|0;
  $44 = ($43*5793)|0;
  $45 = (($44) + 512)|0;
  $46 = $45 >> 10;
  $47 = $dataptr;
  $48 = (($47) + 8|0);
  HEAP32[$48>>2] = $46;
  $49 = $tmp2;
  $50 = ($49*10033)|0;
  $51 = (($50) + 512)|0;
  $52 = $51 >> 10;
  $53 = $dataptr;
  $54 = (($53) + 4|0);
  HEAP32[$54>>2] = $52;
  $55 = $dataptr;
  $56 = (($55) + 32|0);
  $dataptr = $56;
  $57 = $ctr;
  $58 = (($57) + 1)|0;
  $ctr = $58;
 }
 $59 = $0;
 $dataptr = $59;
 $ctr = 0;
 while(1) {
  $60 = $ctr;
  $61 = ($60|0)<(3);
  if (!($61)) {
   break;
  }
  $62 = $dataptr;
  $63 = HEAP32[$62>>2]|0;
  $64 = $dataptr;
  $65 = (($64) + 160|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = (($63) + ($66))|0;
  $tmp0 = $67;
  $68 = $dataptr;
  $69 = (($68) + 32|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $dataptr;
  $72 = (($71) + 128|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($70) + ($73))|0;
  $tmp11 = $74;
  $75 = $dataptr;
  $76 = (($75) + 64|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = $dataptr;
  $79 = (($78) + 96|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = (($77) + ($80))|0;
  $tmp2 = $81;
  $82 = $tmp0;
  $83 = $tmp2;
  $84 = (($82) + ($83))|0;
  $tmp10 = $84;
  $85 = $tmp0;
  $86 = $tmp2;
  $87 = (($85) - ($86))|0;
  $tmp12 = $87;
  $88 = $dataptr;
  $89 = HEAP32[$88>>2]|0;
  $90 = $dataptr;
  $91 = (($90) + 160|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($89) - ($92))|0;
  $tmp0 = $93;
  $94 = $dataptr;
  $95 = (($94) + 32|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $dataptr;
  $98 = (($97) + 128|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($96) - ($99))|0;
  $tmp1 = $100;
  $101 = $dataptr;
  $102 = (($101) + 64|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $dataptr;
  $105 = (($104) + 96|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($103) - ($106))|0;
  $tmp2 = $107;
  $108 = $tmp10;
  $109 = $tmp11;
  $110 = (($108) + ($109))|0;
  $111 = ($110*14564)|0;
  $112 = (($111) + 16384)|0;
  $113 = $112 >> 15;
  $114 = $dataptr;
  HEAP32[$114>>2] = $113;
  $115 = $tmp12;
  $116 = ($115*17837)|0;
  $117 = (($116) + 16384)|0;
  $118 = $117 >> 15;
  $119 = $dataptr;
  $120 = (($119) + 64|0);
  HEAP32[$120>>2] = $118;
  $121 = $tmp10;
  $122 = $tmp11;
  $123 = (($121) - ($122))|0;
  $124 = $tmp11;
  $125 = (($123) - ($124))|0;
  $126 = ($125*10298)|0;
  $127 = (($126) + 16384)|0;
  $128 = $127 >> 15;
  $129 = $dataptr;
  $130 = (($129) + 128|0);
  HEAP32[$130>>2] = $128;
  $131 = $tmp0;
  $132 = $tmp2;
  $133 = (($131) + ($132))|0;
  $134 = ($133*5331)|0;
  $tmp10 = $134;
  $135 = $tmp10;
  $136 = $tmp0;
  $137 = $tmp1;
  $138 = (($136) + ($137))|0;
  $139 = ($138*14564)|0;
  $140 = (($135) + ($139))|0;
  $141 = (($140) + 16384)|0;
  $142 = $141 >> 15;
  $143 = $dataptr;
  $144 = (($143) + 32|0);
  HEAP32[$144>>2] = $142;
  $145 = $tmp0;
  $146 = $tmp1;
  $147 = (($145) - ($146))|0;
  $148 = $tmp2;
  $149 = (($147) - ($148))|0;
  $150 = ($149*14564)|0;
  $151 = (($150) + 16384)|0;
  $152 = $151 >> 15;
  $153 = $dataptr;
  $154 = (($153) + 96|0);
  HEAP32[$154>>2] = $152;
  $155 = $tmp10;
  $156 = $tmp2;
  $157 = $tmp1;
  $158 = (($156) - ($157))|0;
  $159 = ($158*14564)|0;
  $160 = (($155) + ($159))|0;
  $161 = (($160) + 16384)|0;
  $162 = $161 >> 15;
  $163 = $dataptr;
  $164 = (($163) + 160|0);
  HEAP32[$164>>2] = $162;
  $165 = $dataptr;
  $166 = (($165) + 4|0);
  $dataptr = $166;
  $167 = $ctr;
  $168 = (($167) + 1)|0;
  $ctr = $168;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_2x4($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $ctr = 0, $dataptr = 0;
 var $elemptr = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $0;
 $dataptr = $4;
 $ctr = 0;
 while(1) {
  $5 = $ctr;
  $6 = ($5|0)<(4);
  if (!($6)) {
   break;
  }
  $7 = $ctr;
  $8 = $1;
  $9 = (($8) + ($7<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $2;
  $12 = (($10) + ($11)|0);
  $elemptr = $12;
  $13 = $elemptr;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $tmp0 = $15;
  $16 = $elemptr;
  $17 = (($16) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $tmp1 = $19;
  $20 = $tmp0;
  $21 = $tmp1;
  $22 = (($20) + ($21))|0;
  $23 = (($22) - 256)|0;
  $24 = $23 << 3;
  $25 = $dataptr;
  HEAP32[$25>>2] = $24;
  $26 = $tmp0;
  $27 = $tmp1;
  $28 = (($26) - ($27))|0;
  $29 = $28 << 3;
  $30 = $dataptr;
  $31 = (($30) + 4|0);
  HEAP32[$31>>2] = $29;
  $32 = $dataptr;
  $33 = (($32) + 32|0);
  $dataptr = $33;
  $34 = $ctr;
  $35 = (($34) + 1)|0;
  $ctr = $35;
 }
 $36 = $0;
 $dataptr = $36;
 $ctr = 0;
 while(1) {
  $37 = $ctr;
  $38 = ($37|0)<(2);
  if (!($38)) {
   break;
  }
  $39 = $dataptr;
  $40 = HEAP32[$39>>2]|0;
  $41 = $dataptr;
  $42 = (($41) + 96|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($40) + ($43))|0;
  $tmp0 = $44;
  $45 = $dataptr;
  $46 = (($45) + 32|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $dataptr;
  $49 = (($48) + 64|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($47) + ($50))|0;
  $tmp1 = $51;
  $52 = $dataptr;
  $53 = HEAP32[$52>>2]|0;
  $54 = $dataptr;
  $55 = (($54) + 96|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($53) - ($56))|0;
  $tmp10 = $57;
  $58 = $dataptr;
  $59 = (($58) + 32|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $dataptr;
  $62 = (($61) + 64|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($60) - ($63))|0;
  $tmp11 = $64;
  $65 = $tmp0;
  $66 = $tmp1;
  $67 = (($65) + ($66))|0;
  $68 = $dataptr;
  HEAP32[$68>>2] = $67;
  $69 = $tmp0;
  $70 = $tmp1;
  $71 = (($69) - ($70))|0;
  $72 = $dataptr;
  $73 = (($72) + 64|0);
  HEAP32[$73>>2] = $71;
  $74 = $tmp10;
  $75 = $tmp11;
  $76 = (($74) + ($75))|0;
  $77 = ($76*4433)|0;
  $tmp0 = $77;
  $78 = $tmp0;
  $79 = (($78) + 4096)|0;
  $tmp0 = $79;
  $80 = $tmp0;
  $81 = $tmp10;
  $82 = ($81*6270)|0;
  $83 = (($80) + ($82))|0;
  $84 = $83 >> 13;
  $85 = $dataptr;
  $86 = (($85) + 32|0);
  HEAP32[$86>>2] = $84;
  $87 = $tmp0;
  $88 = $tmp11;
  $89 = ($88*15137)|0;
  $90 = (($87) - ($89))|0;
  $91 = $90 >> 13;
  $92 = $dataptr;
  $93 = (($92) + 96|0);
  HEAP32[$93>>2] = $91;
  $94 = $dataptr;
  $95 = (($94) + 4|0);
  $dataptr = $95;
  $96 = $ctr;
  $97 = (($96) + 1)|0;
  $ctr = $97;
 }
 STACKTOP = sp;return;
}
function _jpeg_fdct_1x2($data,$sample_data,$start_col) {
 $data = $data|0;
 $sample_data = $sample_data|0;
 $start_col = $start_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmp0 = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $data;
 $1 = $sample_data;
 $2 = $start_col;
 $3 = $0;
 _memset(($3|0),0,256)|0;
 $4 = $2;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4)|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $tmp0 = $9;
 $10 = $2;
 $11 = $1;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + ($10)|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $tmp1 = $16;
 $17 = $tmp0;
 $18 = $tmp1;
 $19 = (($17) + ($18))|0;
 $20 = (($19) - 256)|0;
 $21 = $20 << 5;
 $22 = $0;
 HEAP32[$22>>2] = $21;
 $23 = $tmp0;
 $24 = $tmp1;
 $25 = (($23) - ($24))|0;
 $26 = $25 << 5;
 $27 = $0;
 $28 = (($27) + 32|0);
 HEAP32[$28>>2] = $26;
 STACKTOP = sp;return;
}
function _jpeg_idct_float($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0;
 var $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0;
 var $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0, $142 = 0, $143 = 0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0.0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0, $166 = 0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0.0;
 var $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0.0, $203 = 0.0, $204 = 0.0, $205 = 0.0;
 var $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0.0, $214 = 0.0, $215 = 0.0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0, $221 = 0, $222 = 0.0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0.0, $239 = 0.0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0, $246 = 0, $247 = 0.0, $248 = 0.0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0.0, $276 = 0.0, $277 = 0, $278 = 0;
 var $279 = 0.0, $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0.0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0, $292 = 0, $293 = 0.0, $294 = 0.0, $295 = 0.0, $296 = 0.0;
 var $297 = 0.0, $298 = 0.0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0;
 var $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0.0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0;
 var $332 = 0, $333 = 0.0, $334 = 0, $335 = 0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0.0, $341 = 0.0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0.0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0;
 var $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0.0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0.0, $386 = 0.0;
 var $387 = 0.0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0.0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0;
 var $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0;
 var $73 = 0, $74 = 0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $ctr = 0, $dcval = 0.0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0.0, $tmp1 = 0.0, $tmp10 = 0.0, $tmp11 = 0.0, $tmp12 = 0.0;
 var $tmp13 = 0.0, $tmp2 = 0.0, $tmp3 = 0.0, $tmp4 = 0.0, $tmp5 = 0.0, $tmp6 = 0.0, $tmp7 = 0.0, $workspace = 0, $wsptr = 0, $z10 = 0.0, $z11 = 0.0, $z12 = 0.0, $z13 = 0.0, $z5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $workspace = sp + 8|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $range_limit = $7;
 $8 = $2;
 $inptr = $8;
 $9 = $1;
 $10 = (($9) + 84|0);
 $11 = HEAP32[$10>>2]|0;
 $quantptr = $11;
 $wsptr = $workspace;
 $ctr = 8;
 while(1) {
  $12 = $ctr;
  $13 = ($12|0)>(0);
  if (!($13)) {
   break;
  }
  $14 = $inptr;
  $15 = (($14) + 16|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = ($17|0)==(0);
  if ($18) {
   $19 = $inptr;
   $20 = (($19) + 32|0);
   $21 = HEAP16[$20>>1]|0;
   $22 = $21 << 16 >> 16;
   $23 = ($22|0)==(0);
   if ($23) {
    $24 = $inptr;
    $25 = (($24) + 48|0);
    $26 = HEAP16[$25>>1]|0;
    $27 = $26 << 16 >> 16;
    $28 = ($27|0)==(0);
    if ($28) {
     $29 = $inptr;
     $30 = (($29) + 64|0);
     $31 = HEAP16[$30>>1]|0;
     $32 = $31 << 16 >> 16;
     $33 = ($32|0)==(0);
     if ($33) {
      $34 = $inptr;
      $35 = (($34) + 80|0);
      $36 = HEAP16[$35>>1]|0;
      $37 = $36 << 16 >> 16;
      $38 = ($37|0)==(0);
      if ($38) {
       $39 = $inptr;
       $40 = (($39) + 96|0);
       $41 = HEAP16[$40>>1]|0;
       $42 = $41 << 16 >> 16;
       $43 = ($42|0)==(0);
       if ($43) {
        $44 = $inptr;
        $45 = (($44) + 112|0);
        $46 = HEAP16[$45>>1]|0;
        $47 = $46 << 16 >> 16;
        $48 = ($47|0)==(0);
        if ($48) {
         $49 = $inptr;
         $50 = HEAP16[$49>>1]|0;
         $51 = (+($50<<16>>16));
         $52 = $quantptr;
         $53 = +HEAPF32[$52>>2];
         $54 = $51 * $53;
         $dcval = $54;
         $55 = $dcval;
         $56 = $wsptr;
         HEAPF32[$56>>2] = $55;
         $57 = $dcval;
         $58 = $wsptr;
         $59 = (($58) + 32|0);
         HEAPF32[$59>>2] = $57;
         $60 = $dcval;
         $61 = $wsptr;
         $62 = (($61) + 64|0);
         HEAPF32[$62>>2] = $60;
         $63 = $dcval;
         $64 = $wsptr;
         $65 = (($64) + 96|0);
         HEAPF32[$65>>2] = $63;
         $66 = $dcval;
         $67 = $wsptr;
         $68 = (($67) + 128|0);
         HEAPF32[$68>>2] = $66;
         $69 = $dcval;
         $70 = $wsptr;
         $71 = (($70) + 160|0);
         HEAPF32[$71>>2] = $69;
         $72 = $dcval;
         $73 = $wsptr;
         $74 = (($73) + 192|0);
         HEAPF32[$74>>2] = $72;
         $75 = $dcval;
         $76 = $wsptr;
         $77 = (($76) + 224|0);
         HEAPF32[$77>>2] = $75;
         $78 = $inptr;
         $79 = (($78) + 2|0);
         $inptr = $79;
         $80 = $quantptr;
         $81 = (($80) + 4|0);
         $quantptr = $81;
         $82 = $wsptr;
         $83 = (($82) + 4|0);
         $wsptr = $83;
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $84 = $inptr;
   $85 = HEAP16[$84>>1]|0;
   $86 = (+($85<<16>>16));
   $87 = $quantptr;
   $88 = +HEAPF32[$87>>2];
   $89 = $86 * $88;
   $tmp0 = $89;
   $90 = $inptr;
   $91 = (($90) + 32|0);
   $92 = HEAP16[$91>>1]|0;
   $93 = (+($92<<16>>16));
   $94 = $quantptr;
   $95 = (($94) + 64|0);
   $96 = +HEAPF32[$95>>2];
   $97 = $93 * $96;
   $tmp1 = $97;
   $98 = $inptr;
   $99 = (($98) + 64|0);
   $100 = HEAP16[$99>>1]|0;
   $101 = (+($100<<16>>16));
   $102 = $quantptr;
   $103 = (($102) + 128|0);
   $104 = +HEAPF32[$103>>2];
   $105 = $101 * $104;
   $tmp2 = $105;
   $106 = $inptr;
   $107 = (($106) + 96|0);
   $108 = HEAP16[$107>>1]|0;
   $109 = (+($108<<16>>16));
   $110 = $quantptr;
   $111 = (($110) + 192|0);
   $112 = +HEAPF32[$111>>2];
   $113 = $109 * $112;
   $tmp3 = $113;
   $114 = $tmp0;
   $115 = $tmp2;
   $116 = $114 + $115;
   $tmp10 = $116;
   $117 = $tmp0;
   $118 = $tmp2;
   $119 = $117 - $118;
   $tmp11 = $119;
   $120 = $tmp1;
   $121 = $tmp3;
   $122 = $120 + $121;
   $tmp13 = $122;
   $123 = $tmp1;
   $124 = $tmp3;
   $125 = $123 - $124;
   $126 = $125 * 1.41421353816986083984;
   $127 = $tmp13;
   $128 = $126 - $127;
   $tmp12 = $128;
   $129 = $tmp10;
   $130 = $tmp13;
   $131 = $129 + $130;
   $tmp0 = $131;
   $132 = $tmp10;
   $133 = $tmp13;
   $134 = $132 - $133;
   $tmp3 = $134;
   $135 = $tmp11;
   $136 = $tmp12;
   $137 = $135 + $136;
   $tmp1 = $137;
   $138 = $tmp11;
   $139 = $tmp12;
   $140 = $138 - $139;
   $tmp2 = $140;
   $141 = $inptr;
   $142 = (($141) + 16|0);
   $143 = HEAP16[$142>>1]|0;
   $144 = (+($143<<16>>16));
   $145 = $quantptr;
   $146 = (($145) + 32|0);
   $147 = +HEAPF32[$146>>2];
   $148 = $144 * $147;
   $tmp4 = $148;
   $149 = $inptr;
   $150 = (($149) + 48|0);
   $151 = HEAP16[$150>>1]|0;
   $152 = (+($151<<16>>16));
   $153 = $quantptr;
   $154 = (($153) + 96|0);
   $155 = +HEAPF32[$154>>2];
   $156 = $152 * $155;
   $tmp5 = $156;
   $157 = $inptr;
   $158 = (($157) + 80|0);
   $159 = HEAP16[$158>>1]|0;
   $160 = (+($159<<16>>16));
   $161 = $quantptr;
   $162 = (($161) + 160|0);
   $163 = +HEAPF32[$162>>2];
   $164 = $160 * $163;
   $tmp6 = $164;
   $165 = $inptr;
   $166 = (($165) + 112|0);
   $167 = HEAP16[$166>>1]|0;
   $168 = (+($167<<16>>16));
   $169 = $quantptr;
   $170 = (($169) + 224|0);
   $171 = +HEAPF32[$170>>2];
   $172 = $168 * $171;
   $tmp7 = $172;
   $173 = $tmp6;
   $174 = $tmp5;
   $175 = $173 + $174;
   $z13 = $175;
   $176 = $tmp6;
   $177 = $tmp5;
   $178 = $176 - $177;
   $z10 = $178;
   $179 = $tmp4;
   $180 = $tmp7;
   $181 = $179 + $180;
   $z11 = $181;
   $182 = $tmp4;
   $183 = $tmp7;
   $184 = $182 - $183;
   $z12 = $184;
   $185 = $z11;
   $186 = $z13;
   $187 = $185 + $186;
   $tmp7 = $187;
   $188 = $z11;
   $189 = $z13;
   $190 = $188 - $189;
   $191 = $190 * 1.41421353816986083984;
   $tmp11 = $191;
   $192 = $z10;
   $193 = $z12;
   $194 = $192 + $193;
   $195 = $194 * 1.84775900840759277344;
   $z5 = $195;
   $196 = $z5;
   $197 = $z12;
   $198 = $197 * 1.08239221572875976563;
   $199 = $196 - $198;
   $tmp10 = $199;
   $200 = $z5;
   $201 = $z10;
   $202 = $201 * 2.61312603950500488281;
   $203 = $200 - $202;
   $tmp12 = $203;
   $204 = $tmp12;
   $205 = $tmp7;
   $206 = $204 - $205;
   $tmp6 = $206;
   $207 = $tmp11;
   $208 = $tmp6;
   $209 = $207 - $208;
   $tmp5 = $209;
   $210 = $tmp10;
   $211 = $tmp5;
   $212 = $210 - $211;
   $tmp4 = $212;
   $213 = $tmp0;
   $214 = $tmp7;
   $215 = $213 + $214;
   $216 = $wsptr;
   HEAPF32[$216>>2] = $215;
   $217 = $tmp0;
   $218 = $tmp7;
   $219 = $217 - $218;
   $220 = $wsptr;
   $221 = (($220) + 224|0);
   HEAPF32[$221>>2] = $219;
   $222 = $tmp1;
   $223 = $tmp6;
   $224 = $222 + $223;
   $225 = $wsptr;
   $226 = (($225) + 32|0);
   HEAPF32[$226>>2] = $224;
   $227 = $tmp1;
   $228 = $tmp6;
   $229 = $227 - $228;
   $230 = $wsptr;
   $231 = (($230) + 192|0);
   HEAPF32[$231>>2] = $229;
   $232 = $tmp2;
   $233 = $tmp5;
   $234 = $232 + $233;
   $235 = $wsptr;
   $236 = (($235) + 64|0);
   HEAPF32[$236>>2] = $234;
   $237 = $tmp2;
   $238 = $tmp5;
   $239 = $237 - $238;
   $240 = $wsptr;
   $241 = (($240) + 160|0);
   HEAPF32[$241>>2] = $239;
   $242 = $tmp3;
   $243 = $tmp4;
   $244 = $242 + $243;
   $245 = $wsptr;
   $246 = (($245) + 96|0);
   HEAPF32[$246>>2] = $244;
   $247 = $tmp3;
   $248 = $tmp4;
   $249 = $247 - $248;
   $250 = $wsptr;
   $251 = (($250) + 128|0);
   HEAPF32[$251>>2] = $249;
   $252 = $inptr;
   $253 = (($252) + 2|0);
   $inptr = $253;
   $254 = $quantptr;
   $255 = (($254) + 4|0);
   $quantptr = $255;
   $256 = $wsptr;
   $257 = (($256) + 4|0);
   $wsptr = $257;
  }
  $258 = $ctr;
  $259 = (($258) + -1)|0;
  $ctr = $259;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $260 = $ctr;
  $261 = ($260|0)<(8);
  if (!($261)) {
   break;
  }
  $262 = $ctr;
  $263 = $3;
  $264 = (($263) + ($262<<2)|0);
  $265 = HEAP32[$264>>2]|0;
  $266 = $4;
  $267 = (($265) + ($266)|0);
  $outptr = $267;
  $268 = $wsptr;
  $269 = +HEAPF32[$268>>2];
  $270 = $269 + 128.5;
  $z5 = $270;
  $271 = $z5;
  $272 = $wsptr;
  $273 = (($272) + 16|0);
  $274 = +HEAPF32[$273>>2];
  $275 = $271 + $274;
  $tmp10 = $275;
  $276 = $z5;
  $277 = $wsptr;
  $278 = (($277) + 16|0);
  $279 = +HEAPF32[$278>>2];
  $280 = $276 - $279;
  $tmp11 = $280;
  $281 = $wsptr;
  $282 = (($281) + 8|0);
  $283 = +HEAPF32[$282>>2];
  $284 = $wsptr;
  $285 = (($284) + 24|0);
  $286 = +HEAPF32[$285>>2];
  $287 = $283 + $286;
  $tmp13 = $287;
  $288 = $wsptr;
  $289 = (($288) + 8|0);
  $290 = +HEAPF32[$289>>2];
  $291 = $wsptr;
  $292 = (($291) + 24|0);
  $293 = +HEAPF32[$292>>2];
  $294 = $290 - $293;
  $295 = $294 * 1.41421353816986083984;
  $296 = $tmp13;
  $297 = $295 - $296;
  $tmp12 = $297;
  $298 = $tmp10;
  $299 = $tmp13;
  $300 = $298 + $299;
  $tmp0 = $300;
  $301 = $tmp10;
  $302 = $tmp13;
  $303 = $301 - $302;
  $tmp3 = $303;
  $304 = $tmp11;
  $305 = $tmp12;
  $306 = $304 + $305;
  $tmp1 = $306;
  $307 = $tmp11;
  $308 = $tmp12;
  $309 = $307 - $308;
  $tmp2 = $309;
  $310 = $wsptr;
  $311 = (($310) + 20|0);
  $312 = +HEAPF32[$311>>2];
  $313 = $wsptr;
  $314 = (($313) + 12|0);
  $315 = +HEAPF32[$314>>2];
  $316 = $312 + $315;
  $z13 = $316;
  $317 = $wsptr;
  $318 = (($317) + 20|0);
  $319 = +HEAPF32[$318>>2];
  $320 = $wsptr;
  $321 = (($320) + 12|0);
  $322 = +HEAPF32[$321>>2];
  $323 = $319 - $322;
  $z10 = $323;
  $324 = $wsptr;
  $325 = (($324) + 4|0);
  $326 = +HEAPF32[$325>>2];
  $327 = $wsptr;
  $328 = (($327) + 28|0);
  $329 = +HEAPF32[$328>>2];
  $330 = $326 + $329;
  $z11 = $330;
  $331 = $wsptr;
  $332 = (($331) + 4|0);
  $333 = +HEAPF32[$332>>2];
  $334 = $wsptr;
  $335 = (($334) + 28|0);
  $336 = +HEAPF32[$335>>2];
  $337 = $333 - $336;
  $z12 = $337;
  $338 = $z11;
  $339 = $z13;
  $340 = $338 + $339;
  $tmp7 = $340;
  $341 = $z11;
  $342 = $z13;
  $343 = $341 - $342;
  $344 = $343 * 1.41421353816986083984;
  $tmp11 = $344;
  $345 = $z10;
  $346 = $z12;
  $347 = $345 + $346;
  $348 = $347 * 1.84775900840759277344;
  $z5 = $348;
  $349 = $z5;
  $350 = $z12;
  $351 = $350 * 1.08239221572875976563;
  $352 = $349 - $351;
  $tmp10 = $352;
  $353 = $z5;
  $354 = $z10;
  $355 = $354 * 2.61312603950500488281;
  $356 = $353 - $355;
  $tmp12 = $356;
  $357 = $tmp12;
  $358 = $tmp7;
  $359 = $357 - $358;
  $tmp6 = $359;
  $360 = $tmp11;
  $361 = $tmp6;
  $362 = $360 - $361;
  $tmp5 = $362;
  $363 = $tmp10;
  $364 = $tmp5;
  $365 = $363 - $364;
  $tmp4 = $365;
  $366 = $tmp0;
  $367 = $tmp7;
  $368 = $366 + $367;
  $369 = (~~(($368)));
  $370 = $369 & 1023;
  $371 = $range_limit;
  $372 = (($371) + ($370)|0);
  $373 = HEAP8[$372>>0]|0;
  $374 = $outptr;
  HEAP8[$374>>0] = $373;
  $375 = $tmp0;
  $376 = $tmp7;
  $377 = $375 - $376;
  $378 = (~~(($377)));
  $379 = $378 & 1023;
  $380 = $range_limit;
  $381 = (($380) + ($379)|0);
  $382 = HEAP8[$381>>0]|0;
  $383 = $outptr;
  $384 = (($383) + 7|0);
  HEAP8[$384>>0] = $382;
  $385 = $tmp1;
  $386 = $tmp6;
  $387 = $385 + $386;
  $388 = (~~(($387)));
  $389 = $388 & 1023;
  $390 = $range_limit;
  $391 = (($390) + ($389)|0);
  $392 = HEAP8[$391>>0]|0;
  $393 = $outptr;
  $394 = (($393) + 1|0);
  HEAP8[$394>>0] = $392;
  $395 = $tmp1;
  $396 = $tmp6;
  $397 = $395 - $396;
  $398 = (~~(($397)));
  $399 = $398 & 1023;
  $400 = $range_limit;
  $401 = (($400) + ($399)|0);
  $402 = HEAP8[$401>>0]|0;
  $403 = $outptr;
  $404 = (($403) + 6|0);
  HEAP8[$404>>0] = $402;
  $405 = $tmp2;
  $406 = $tmp5;
  $407 = $405 + $406;
  $408 = (~~(($407)));
  $409 = $408 & 1023;
  $410 = $range_limit;
  $411 = (($410) + ($409)|0);
  $412 = HEAP8[$411>>0]|0;
  $413 = $outptr;
  $414 = (($413) + 2|0);
  HEAP8[$414>>0] = $412;
  $415 = $tmp2;
  $416 = $tmp5;
  $417 = $415 - $416;
  $418 = (~~(($417)));
  $419 = $418 & 1023;
  $420 = $range_limit;
  $421 = (($420) + ($419)|0);
  $422 = HEAP8[$421>>0]|0;
  $423 = $outptr;
  $424 = (($423) + 5|0);
  HEAP8[$424>>0] = $422;
  $425 = $tmp3;
  $426 = $tmp4;
  $427 = $425 + $426;
  $428 = (~~(($427)));
  $429 = $428 & 1023;
  $430 = $range_limit;
  $431 = (($430) + ($429)|0);
  $432 = HEAP8[$431>>0]|0;
  $433 = $outptr;
  $434 = (($433) + 3|0);
  HEAP8[$434>>0] = $432;
  $435 = $tmp3;
  $436 = $tmp4;
  $437 = $435 - $436;
  $438 = (~~(($437)));
  $439 = $438 & 1023;
  $440 = $range_limit;
  $441 = (($440) + ($439)|0);
  $442 = HEAP8[$441>>0]|0;
  $443 = $outptr;
  $444 = (($443) + 4|0);
  HEAP8[$444>>0] = $442;
  $445 = $wsptr;
  $446 = (($445) + 32|0);
  $wsptr = $446;
  $447 = $ctr;
  $448 = (($447) + 1)|0;
  $ctr = $448;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_ifast($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0;
 var $dcval = 0, $dcval1 = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, $tmp6 = 0, $tmp7 = 0, $workspace = 0, $wsptr = 0;
 var $z10 = 0, $z11 = 0, $z12 = 0, $z13 = 0, $z5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $workspace = sp + 8|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 8;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)>(0);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = (($15) + 16|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = $inptr;
   $21 = (($20) + 32|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = $22 << 16 >> 16;
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = $inptr;
    $26 = (($25) + 48|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27 << 16 >> 16;
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = $inptr;
     $31 = (($30) + 64|0);
     $32 = HEAP16[$31>>1]|0;
     $33 = $32 << 16 >> 16;
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = $inptr;
      $36 = (($35) + 80|0);
      $37 = HEAP16[$36>>1]|0;
      $38 = $37 << 16 >> 16;
      $39 = ($38|0)==(0);
      if ($39) {
       $40 = $inptr;
       $41 = (($40) + 96|0);
       $42 = HEAP16[$41>>1]|0;
       $43 = $42 << 16 >> 16;
       $44 = ($43|0)==(0);
       if ($44) {
        $45 = $inptr;
        $46 = (($45) + 112|0);
        $47 = HEAP16[$46>>1]|0;
        $48 = $47 << 16 >> 16;
        $49 = ($48|0)==(0);
        if ($49) {
         $50 = $inptr;
         $51 = HEAP16[$50>>1]|0;
         $52 = $51 << 16 >> 16;
         $53 = $quantptr;
         $54 = HEAP32[$53>>2]|0;
         $55 = Math_imul($52, $54)|0;
         $dcval = $55;
         $56 = $dcval;
         $57 = $wsptr;
         HEAP32[$57>>2] = $56;
         $58 = $dcval;
         $59 = $wsptr;
         $60 = (($59) + 32|0);
         HEAP32[$60>>2] = $58;
         $61 = $dcval;
         $62 = $wsptr;
         $63 = (($62) + 64|0);
         HEAP32[$63>>2] = $61;
         $64 = $dcval;
         $65 = $wsptr;
         $66 = (($65) + 96|0);
         HEAP32[$66>>2] = $64;
         $67 = $dcval;
         $68 = $wsptr;
         $69 = (($68) + 128|0);
         HEAP32[$69>>2] = $67;
         $70 = $dcval;
         $71 = $wsptr;
         $72 = (($71) + 160|0);
         HEAP32[$72>>2] = $70;
         $73 = $dcval;
         $74 = $wsptr;
         $75 = (($74) + 192|0);
         HEAP32[$75>>2] = $73;
         $76 = $dcval;
         $77 = $wsptr;
         $78 = (($77) + 224|0);
         HEAP32[$78>>2] = $76;
         $79 = $inptr;
         $80 = (($79) + 2|0);
         $inptr = $80;
         $81 = $quantptr;
         $82 = (($81) + 4|0);
         $quantptr = $82;
         $83 = $wsptr;
         $84 = (($83) + 4|0);
         $wsptr = $84;
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $85 = $inptr;
   $86 = HEAP16[$85>>1]|0;
   $87 = $86 << 16 >> 16;
   $88 = $quantptr;
   $89 = HEAP32[$88>>2]|0;
   $90 = Math_imul($87, $89)|0;
   $tmp0 = $90;
   $91 = $inptr;
   $92 = (($91) + 32|0);
   $93 = HEAP16[$92>>1]|0;
   $94 = $93 << 16 >> 16;
   $95 = $quantptr;
   $96 = (($95) + 64|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = Math_imul($94, $97)|0;
   $tmp1 = $98;
   $99 = $inptr;
   $100 = (($99) + 64|0);
   $101 = HEAP16[$100>>1]|0;
   $102 = $101 << 16 >> 16;
   $103 = $quantptr;
   $104 = (($103) + 128|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = Math_imul($102, $105)|0;
   $tmp2 = $106;
   $107 = $inptr;
   $108 = (($107) + 96|0);
   $109 = HEAP16[$108>>1]|0;
   $110 = $109 << 16 >> 16;
   $111 = $quantptr;
   $112 = (($111) + 192|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = Math_imul($110, $113)|0;
   $tmp3 = $114;
   $115 = $tmp0;
   $116 = $tmp2;
   $117 = (($115) + ($116))|0;
   $tmp10 = $117;
   $118 = $tmp0;
   $119 = $tmp2;
   $120 = (($118) - ($119))|0;
   $tmp11 = $120;
   $121 = $tmp1;
   $122 = $tmp3;
   $123 = (($121) + ($122))|0;
   $tmp13 = $123;
   $124 = $tmp1;
   $125 = $tmp3;
   $126 = (($124) - ($125))|0;
   $127 = ($126*362)|0;
   $128 = $127 >> 8;
   $129 = $tmp13;
   $130 = (($128) - ($129))|0;
   $tmp12 = $130;
   $131 = $tmp10;
   $132 = $tmp13;
   $133 = (($131) + ($132))|0;
   $tmp0 = $133;
   $134 = $tmp10;
   $135 = $tmp13;
   $136 = (($134) - ($135))|0;
   $tmp3 = $136;
   $137 = $tmp11;
   $138 = $tmp12;
   $139 = (($137) + ($138))|0;
   $tmp1 = $139;
   $140 = $tmp11;
   $141 = $tmp12;
   $142 = (($140) - ($141))|0;
   $tmp2 = $142;
   $143 = $inptr;
   $144 = (($143) + 16|0);
   $145 = HEAP16[$144>>1]|0;
   $146 = $145 << 16 >> 16;
   $147 = $quantptr;
   $148 = (($147) + 32|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = Math_imul($146, $149)|0;
   $tmp4 = $150;
   $151 = $inptr;
   $152 = (($151) + 48|0);
   $153 = HEAP16[$152>>1]|0;
   $154 = $153 << 16 >> 16;
   $155 = $quantptr;
   $156 = (($155) + 96|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = Math_imul($154, $157)|0;
   $tmp5 = $158;
   $159 = $inptr;
   $160 = (($159) + 80|0);
   $161 = HEAP16[$160>>1]|0;
   $162 = $161 << 16 >> 16;
   $163 = $quantptr;
   $164 = (($163) + 160|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = Math_imul($162, $165)|0;
   $tmp6 = $166;
   $167 = $inptr;
   $168 = (($167) + 112|0);
   $169 = HEAP16[$168>>1]|0;
   $170 = $169 << 16 >> 16;
   $171 = $quantptr;
   $172 = (($171) + 224|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = Math_imul($170, $173)|0;
   $tmp7 = $174;
   $175 = $tmp6;
   $176 = $tmp5;
   $177 = (($175) + ($176))|0;
   $z13 = $177;
   $178 = $tmp6;
   $179 = $tmp5;
   $180 = (($178) - ($179))|0;
   $z10 = $180;
   $181 = $tmp4;
   $182 = $tmp7;
   $183 = (($181) + ($182))|0;
   $z11 = $183;
   $184 = $tmp4;
   $185 = $tmp7;
   $186 = (($184) - ($185))|0;
   $z12 = $186;
   $187 = $z11;
   $188 = $z13;
   $189 = (($187) + ($188))|0;
   $tmp7 = $189;
   $190 = $z11;
   $191 = $z13;
   $192 = (($190) - ($191))|0;
   $193 = ($192*362)|0;
   $194 = $193 >> 8;
   $tmp11 = $194;
   $195 = $z10;
   $196 = $z12;
   $197 = (($195) + ($196))|0;
   $198 = ($197*473)|0;
   $199 = $198 >> 8;
   $z5 = $199;
   $200 = $z12;
   $201 = ($200*277)|0;
   $202 = $201 >> 8;
   $203 = $z5;
   $204 = (($202) - ($203))|0;
   $tmp10 = $204;
   $205 = $z10;
   $206 = Math_imul($205, -669)|0;
   $207 = $206 >> 8;
   $208 = $z5;
   $209 = (($207) + ($208))|0;
   $tmp12 = $209;
   $210 = $tmp12;
   $211 = $tmp7;
   $212 = (($210) - ($211))|0;
   $tmp6 = $212;
   $213 = $tmp11;
   $214 = $tmp6;
   $215 = (($213) - ($214))|0;
   $tmp5 = $215;
   $216 = $tmp10;
   $217 = $tmp5;
   $218 = (($216) + ($217))|0;
   $tmp4 = $218;
   $219 = $tmp0;
   $220 = $tmp7;
   $221 = (($219) + ($220))|0;
   $222 = $wsptr;
   HEAP32[$222>>2] = $221;
   $223 = $tmp0;
   $224 = $tmp7;
   $225 = (($223) - ($224))|0;
   $226 = $wsptr;
   $227 = (($226) + 224|0);
   HEAP32[$227>>2] = $225;
   $228 = $tmp1;
   $229 = $tmp6;
   $230 = (($228) + ($229))|0;
   $231 = $wsptr;
   $232 = (($231) + 32|0);
   HEAP32[$232>>2] = $230;
   $233 = $tmp1;
   $234 = $tmp6;
   $235 = (($233) - ($234))|0;
   $236 = $wsptr;
   $237 = (($236) + 192|0);
   HEAP32[$237>>2] = $235;
   $238 = $tmp2;
   $239 = $tmp5;
   $240 = (($238) + ($239))|0;
   $241 = $wsptr;
   $242 = (($241) + 64|0);
   HEAP32[$242>>2] = $240;
   $243 = $tmp2;
   $244 = $tmp5;
   $245 = (($243) - ($244))|0;
   $246 = $wsptr;
   $247 = (($246) + 160|0);
   HEAP32[$247>>2] = $245;
   $248 = $tmp3;
   $249 = $tmp4;
   $250 = (($248) + ($249))|0;
   $251 = $wsptr;
   $252 = (($251) + 128|0);
   HEAP32[$252>>2] = $250;
   $253 = $tmp3;
   $254 = $tmp4;
   $255 = (($253) - ($254))|0;
   $256 = $wsptr;
   $257 = (($256) + 96|0);
   HEAP32[$257>>2] = $255;
   $258 = $inptr;
   $259 = (($258) + 2|0);
   $inptr = $259;
   $260 = $quantptr;
   $261 = (($260) + 4|0);
   $quantptr = $261;
   $262 = $wsptr;
   $263 = (($262) + 4|0);
   $wsptr = $263;
  }
  $264 = $ctr;
  $265 = (($264) + -1)|0;
  $ctr = $265;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $266 = $ctr;
  $267 = ($266|0)<(8);
  if (!($267)) {
   break;
  }
  $268 = $ctr;
  $269 = $3;
  $270 = (($269) + ($268<<2)|0);
  $271 = HEAP32[$270>>2]|0;
  $272 = $4;
  $273 = (($271) + ($272)|0);
  $outptr = $273;
  $274 = $wsptr;
  $275 = (($274) + 4|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = ($276|0)==(0);
  if ($277) {
   $278 = $wsptr;
   $279 = (($278) + 8|0);
   $280 = HEAP32[$279>>2]|0;
   $281 = ($280|0)==(0);
   if ($281) {
    $282 = $wsptr;
    $283 = (($282) + 12|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = ($284|0)==(0);
    if ($285) {
     $286 = $wsptr;
     $287 = (($286) + 16|0);
     $288 = HEAP32[$287>>2]|0;
     $289 = ($288|0)==(0);
     if ($289) {
      $290 = $wsptr;
      $291 = (($290) + 20|0);
      $292 = HEAP32[$291>>2]|0;
      $293 = ($292|0)==(0);
      if ($293) {
       $294 = $wsptr;
       $295 = (($294) + 24|0);
       $296 = HEAP32[$295>>2]|0;
       $297 = ($296|0)==(0);
       if ($297) {
        $298 = $wsptr;
        $299 = (($298) + 28|0);
        $300 = HEAP32[$299>>2]|0;
        $301 = ($300|0)==(0);
        if ($301) {
         $302 = $wsptr;
         $303 = HEAP32[$302>>2]|0;
         $304 = $303 >> 5;
         $305 = $304 & 1023;
         $306 = $range_limit;
         $307 = (($306) + ($305)|0);
         $308 = HEAP8[$307>>0]|0;
         $dcval1 = $308;
         $309 = $dcval1;
         $310 = $outptr;
         HEAP8[$310>>0] = $309;
         $311 = $dcval1;
         $312 = $outptr;
         $313 = (($312) + 1|0);
         HEAP8[$313>>0] = $311;
         $314 = $dcval1;
         $315 = $outptr;
         $316 = (($315) + 2|0);
         HEAP8[$316>>0] = $314;
         $317 = $dcval1;
         $318 = $outptr;
         $319 = (($318) + 3|0);
         HEAP8[$319>>0] = $317;
         $320 = $dcval1;
         $321 = $outptr;
         $322 = (($321) + 4|0);
         HEAP8[$322>>0] = $320;
         $323 = $dcval1;
         $324 = $outptr;
         $325 = (($324) + 5|0);
         HEAP8[$325>>0] = $323;
         $326 = $dcval1;
         $327 = $outptr;
         $328 = (($327) + 6|0);
         HEAP8[$328>>0] = $326;
         $329 = $dcval1;
         $330 = $outptr;
         $331 = (($330) + 7|0);
         HEAP8[$331>>0] = $329;
         $332 = $wsptr;
         $333 = (($332) + 32|0);
         $wsptr = $333;
        } else {
         label = 23;
        }
       } else {
        label = 23;
       }
      } else {
       label = 23;
      }
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
  } else {
   label = 23;
  }
  if ((label|0) == 23) {
   label = 0;
   $334 = $wsptr;
   $335 = HEAP32[$334>>2]|0;
   $336 = $wsptr;
   $337 = (($336) + 16|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = (($335) + ($338))|0;
   $tmp10 = $339;
   $340 = $wsptr;
   $341 = HEAP32[$340>>2]|0;
   $342 = $wsptr;
   $343 = (($342) + 16|0);
   $344 = HEAP32[$343>>2]|0;
   $345 = (($341) - ($344))|0;
   $tmp11 = $345;
   $346 = $wsptr;
   $347 = (($346) + 8|0);
   $348 = HEAP32[$347>>2]|0;
   $349 = $wsptr;
   $350 = (($349) + 24|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = (($348) + ($351))|0;
   $tmp13 = $352;
   $353 = $wsptr;
   $354 = (($353) + 8|0);
   $355 = HEAP32[$354>>2]|0;
   $356 = $wsptr;
   $357 = (($356) + 24|0);
   $358 = HEAP32[$357>>2]|0;
   $359 = (($355) - ($358))|0;
   $360 = ($359*362)|0;
   $361 = $360 >> 8;
   $362 = $tmp13;
   $363 = (($361) - ($362))|0;
   $tmp12 = $363;
   $364 = $tmp10;
   $365 = $tmp13;
   $366 = (($364) + ($365))|0;
   $tmp0 = $366;
   $367 = $tmp10;
   $368 = $tmp13;
   $369 = (($367) - ($368))|0;
   $tmp3 = $369;
   $370 = $tmp11;
   $371 = $tmp12;
   $372 = (($370) + ($371))|0;
   $tmp1 = $372;
   $373 = $tmp11;
   $374 = $tmp12;
   $375 = (($373) - ($374))|0;
   $tmp2 = $375;
   $376 = $wsptr;
   $377 = (($376) + 20|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = $wsptr;
   $380 = (($379) + 12|0);
   $381 = HEAP32[$380>>2]|0;
   $382 = (($378) + ($381))|0;
   $z13 = $382;
   $383 = $wsptr;
   $384 = (($383) + 20|0);
   $385 = HEAP32[$384>>2]|0;
   $386 = $wsptr;
   $387 = (($386) + 12|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = (($385) - ($388))|0;
   $z10 = $389;
   $390 = $wsptr;
   $391 = (($390) + 4|0);
   $392 = HEAP32[$391>>2]|0;
   $393 = $wsptr;
   $394 = (($393) + 28|0);
   $395 = HEAP32[$394>>2]|0;
   $396 = (($392) + ($395))|0;
   $z11 = $396;
   $397 = $wsptr;
   $398 = (($397) + 4|0);
   $399 = HEAP32[$398>>2]|0;
   $400 = $wsptr;
   $401 = (($400) + 28|0);
   $402 = HEAP32[$401>>2]|0;
   $403 = (($399) - ($402))|0;
   $z12 = $403;
   $404 = $z11;
   $405 = $z13;
   $406 = (($404) + ($405))|0;
   $tmp7 = $406;
   $407 = $z11;
   $408 = $z13;
   $409 = (($407) - ($408))|0;
   $410 = ($409*362)|0;
   $411 = $410 >> 8;
   $tmp11 = $411;
   $412 = $z10;
   $413 = $z12;
   $414 = (($412) + ($413))|0;
   $415 = ($414*473)|0;
   $416 = $415 >> 8;
   $z5 = $416;
   $417 = $z12;
   $418 = ($417*277)|0;
   $419 = $418 >> 8;
   $420 = $z5;
   $421 = (($419) - ($420))|0;
   $tmp10 = $421;
   $422 = $z10;
   $423 = Math_imul($422, -669)|0;
   $424 = $423 >> 8;
   $425 = $z5;
   $426 = (($424) + ($425))|0;
   $tmp12 = $426;
   $427 = $tmp12;
   $428 = $tmp7;
   $429 = (($427) - ($428))|0;
   $tmp6 = $429;
   $430 = $tmp11;
   $431 = $tmp6;
   $432 = (($430) - ($431))|0;
   $tmp5 = $432;
   $433 = $tmp10;
   $434 = $tmp5;
   $435 = (($433) + ($434))|0;
   $tmp4 = $435;
   $436 = $tmp0;
   $437 = $tmp7;
   $438 = (($436) + ($437))|0;
   $439 = $438 >> 5;
   $440 = $439 & 1023;
   $441 = $range_limit;
   $442 = (($441) + ($440)|0);
   $443 = HEAP8[$442>>0]|0;
   $444 = $outptr;
   HEAP8[$444>>0] = $443;
   $445 = $tmp0;
   $446 = $tmp7;
   $447 = (($445) - ($446))|0;
   $448 = $447 >> 5;
   $449 = $448 & 1023;
   $450 = $range_limit;
   $451 = (($450) + ($449)|0);
   $452 = HEAP8[$451>>0]|0;
   $453 = $outptr;
   $454 = (($453) + 7|0);
   HEAP8[$454>>0] = $452;
   $455 = $tmp1;
   $456 = $tmp6;
   $457 = (($455) + ($456))|0;
   $458 = $457 >> 5;
   $459 = $458 & 1023;
   $460 = $range_limit;
   $461 = (($460) + ($459)|0);
   $462 = HEAP8[$461>>0]|0;
   $463 = $outptr;
   $464 = (($463) + 1|0);
   HEAP8[$464>>0] = $462;
   $465 = $tmp1;
   $466 = $tmp6;
   $467 = (($465) - ($466))|0;
   $468 = $467 >> 5;
   $469 = $468 & 1023;
   $470 = $range_limit;
   $471 = (($470) + ($469)|0);
   $472 = HEAP8[$471>>0]|0;
   $473 = $outptr;
   $474 = (($473) + 6|0);
   HEAP8[$474>>0] = $472;
   $475 = $tmp2;
   $476 = $tmp5;
   $477 = (($475) + ($476))|0;
   $478 = $477 >> 5;
   $479 = $478 & 1023;
   $480 = $range_limit;
   $481 = (($480) + ($479)|0);
   $482 = HEAP8[$481>>0]|0;
   $483 = $outptr;
   $484 = (($483) + 2|0);
   HEAP8[$484>>0] = $482;
   $485 = $tmp2;
   $486 = $tmp5;
   $487 = (($485) - ($486))|0;
   $488 = $487 >> 5;
   $489 = $488 & 1023;
   $490 = $range_limit;
   $491 = (($490) + ($489)|0);
   $492 = HEAP8[$491>>0]|0;
   $493 = $outptr;
   $494 = (($493) + 5|0);
   HEAP8[$494>>0] = $492;
   $495 = $tmp3;
   $496 = $tmp4;
   $497 = (($495) + ($496))|0;
   $498 = $497 >> 5;
   $499 = $498 & 1023;
   $500 = $range_limit;
   $501 = (($500) + ($499)|0);
   $502 = HEAP8[$501>>0]|0;
   $503 = $outptr;
   $504 = (($503) + 4|0);
   HEAP8[$504>>0] = $502;
   $505 = $tmp3;
   $506 = $tmp4;
   $507 = (($505) - ($506))|0;
   $508 = $507 >> 5;
   $509 = $508 & 1023;
   $510 = $range_limit;
   $511 = (($510) + ($509)|0);
   $512 = HEAP8[$511>>0]|0;
   $513 = $outptr;
   $514 = (($513) + 3|0);
   HEAP8[$514>>0] = $512;
   $515 = $wsptr;
   $516 = (($515) + 32|0);
   $wsptr = $516;
  }
  $517 = $ctr;
  $518 = (($517) + 1)|0;
  $ctr = $518;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_islow($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0;
 var $dcval = 0, $dcval1 = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $tmp3 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0;
 $workspace = sp + 8|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 8;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)>(0);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = (($15) + 16|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = $inptr;
   $21 = (($20) + 32|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = $22 << 16 >> 16;
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = $inptr;
    $26 = (($25) + 48|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27 << 16 >> 16;
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = $inptr;
     $31 = (($30) + 64|0);
     $32 = HEAP16[$31>>1]|0;
     $33 = $32 << 16 >> 16;
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = $inptr;
      $36 = (($35) + 80|0);
      $37 = HEAP16[$36>>1]|0;
      $38 = $37 << 16 >> 16;
      $39 = ($38|0)==(0);
      if ($39) {
       $40 = $inptr;
       $41 = (($40) + 96|0);
       $42 = HEAP16[$41>>1]|0;
       $43 = $42 << 16 >> 16;
       $44 = ($43|0)==(0);
       if ($44) {
        $45 = $inptr;
        $46 = (($45) + 112|0);
        $47 = HEAP16[$46>>1]|0;
        $48 = $47 << 16 >> 16;
        $49 = ($48|0)==(0);
        if ($49) {
         $50 = $inptr;
         $51 = HEAP16[$50>>1]|0;
         $52 = $51 << 16 >> 16;
         $53 = $quantptr;
         $54 = HEAP32[$53>>2]|0;
         $55 = Math_imul($52, $54)|0;
         $56 = $55 << 2;
         $dcval = $56;
         $57 = $dcval;
         $58 = $wsptr;
         HEAP32[$58>>2] = $57;
         $59 = $dcval;
         $60 = $wsptr;
         $61 = (($60) + 32|0);
         HEAP32[$61>>2] = $59;
         $62 = $dcval;
         $63 = $wsptr;
         $64 = (($63) + 64|0);
         HEAP32[$64>>2] = $62;
         $65 = $dcval;
         $66 = $wsptr;
         $67 = (($66) + 96|0);
         HEAP32[$67>>2] = $65;
         $68 = $dcval;
         $69 = $wsptr;
         $70 = (($69) + 128|0);
         HEAP32[$70>>2] = $68;
         $71 = $dcval;
         $72 = $wsptr;
         $73 = (($72) + 160|0);
         HEAP32[$73>>2] = $71;
         $74 = $dcval;
         $75 = $wsptr;
         $76 = (($75) + 192|0);
         HEAP32[$76>>2] = $74;
         $77 = $dcval;
         $78 = $wsptr;
         $79 = (($78) + 224|0);
         HEAP32[$79>>2] = $77;
         $80 = $inptr;
         $81 = (($80) + 2|0);
         $inptr = $81;
         $82 = $quantptr;
         $83 = (($82) + 4|0);
         $quantptr = $83;
         $84 = $wsptr;
         $85 = (($84) + 4|0);
         $wsptr = $85;
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $86 = $inptr;
   $87 = (($86) + 32|0);
   $88 = HEAP16[$87>>1]|0;
   $89 = $88 << 16 >> 16;
   $90 = $quantptr;
   $91 = (($90) + 64|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = Math_imul($89, $92)|0;
   $z2 = $93;
   $94 = $inptr;
   $95 = (($94) + 96|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96 << 16 >> 16;
   $98 = $quantptr;
   $99 = (($98) + 192|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = Math_imul($97, $100)|0;
   $z3 = $101;
   $102 = $z2;
   $103 = $z3;
   $104 = (($102) + ($103))|0;
   $105 = ($104*4433)|0;
   $z1 = $105;
   $106 = $z1;
   $107 = $z2;
   $108 = ($107*6270)|0;
   $109 = (($106) + ($108))|0;
   $tmp2 = $109;
   $110 = $z1;
   $111 = $z3;
   $112 = ($111*15137)|0;
   $113 = (($110) - ($112))|0;
   $tmp3 = $113;
   $114 = $inptr;
   $115 = HEAP16[$114>>1]|0;
   $116 = $115 << 16 >> 16;
   $117 = $quantptr;
   $118 = HEAP32[$117>>2]|0;
   $119 = Math_imul($116, $118)|0;
   $z2 = $119;
   $120 = $inptr;
   $121 = (($120) + 64|0);
   $122 = HEAP16[$121>>1]|0;
   $123 = $122 << 16 >> 16;
   $124 = $quantptr;
   $125 = (($124) + 128|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = Math_imul($123, $126)|0;
   $z3 = $127;
   $128 = $z2;
   $129 = $128 << 13;
   $z2 = $129;
   $130 = $z3;
   $131 = $130 << 13;
   $z3 = $131;
   $132 = $z2;
   $133 = (($132) + 1024)|0;
   $z2 = $133;
   $134 = $z2;
   $135 = $z3;
   $136 = (($134) + ($135))|0;
   $tmp0 = $136;
   $137 = $z2;
   $138 = $z3;
   $139 = (($137) - ($138))|0;
   $tmp1 = $139;
   $140 = $tmp0;
   $141 = $tmp2;
   $142 = (($140) + ($141))|0;
   $tmp10 = $142;
   $143 = $tmp0;
   $144 = $tmp2;
   $145 = (($143) - ($144))|0;
   $tmp13 = $145;
   $146 = $tmp1;
   $147 = $tmp3;
   $148 = (($146) + ($147))|0;
   $tmp11 = $148;
   $149 = $tmp1;
   $150 = $tmp3;
   $151 = (($149) - ($150))|0;
   $tmp12 = $151;
   $152 = $inptr;
   $153 = (($152) + 112|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = $154 << 16 >> 16;
   $156 = $quantptr;
   $157 = (($156) + 224|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = Math_imul($155, $158)|0;
   $tmp0 = $159;
   $160 = $inptr;
   $161 = (($160) + 80|0);
   $162 = HEAP16[$161>>1]|0;
   $163 = $162 << 16 >> 16;
   $164 = $quantptr;
   $165 = (($164) + 160|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = Math_imul($163, $166)|0;
   $tmp1 = $167;
   $168 = $inptr;
   $169 = (($168) + 48|0);
   $170 = HEAP16[$169>>1]|0;
   $171 = $170 << 16 >> 16;
   $172 = $quantptr;
   $173 = (($172) + 96|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = Math_imul($171, $174)|0;
   $tmp2 = $175;
   $176 = $inptr;
   $177 = (($176) + 16|0);
   $178 = HEAP16[$177>>1]|0;
   $179 = $178 << 16 >> 16;
   $180 = $quantptr;
   $181 = (($180) + 32|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = Math_imul($179, $182)|0;
   $tmp3 = $183;
   $184 = $tmp0;
   $185 = $tmp2;
   $186 = (($184) + ($185))|0;
   $z2 = $186;
   $187 = $tmp1;
   $188 = $tmp3;
   $189 = (($187) + ($188))|0;
   $z3 = $189;
   $190 = $z2;
   $191 = $z3;
   $192 = (($190) + ($191))|0;
   $193 = ($192*9633)|0;
   $z1 = $193;
   $194 = $z2;
   $195 = Math_imul($194, -16069)|0;
   $z2 = $195;
   $196 = $z3;
   $197 = Math_imul($196, -3196)|0;
   $z3 = $197;
   $198 = $z1;
   $199 = $z2;
   $200 = (($199) + ($198))|0;
   $z2 = $200;
   $201 = $z1;
   $202 = $z3;
   $203 = (($202) + ($201))|0;
   $z3 = $203;
   $204 = $tmp0;
   $205 = $tmp3;
   $206 = (($204) + ($205))|0;
   $207 = Math_imul($206, -7373)|0;
   $z1 = $207;
   $208 = $tmp0;
   $209 = ($208*2446)|0;
   $tmp0 = $209;
   $210 = $tmp3;
   $211 = ($210*12299)|0;
   $tmp3 = $211;
   $212 = $z1;
   $213 = $z2;
   $214 = (($212) + ($213))|0;
   $215 = $tmp0;
   $216 = (($215) + ($214))|0;
   $tmp0 = $216;
   $217 = $z1;
   $218 = $z3;
   $219 = (($217) + ($218))|0;
   $220 = $tmp3;
   $221 = (($220) + ($219))|0;
   $tmp3 = $221;
   $222 = $tmp1;
   $223 = $tmp2;
   $224 = (($222) + ($223))|0;
   $225 = Math_imul($224, -20995)|0;
   $z1 = $225;
   $226 = $tmp1;
   $227 = ($226*16819)|0;
   $tmp1 = $227;
   $228 = $tmp2;
   $229 = ($228*25172)|0;
   $tmp2 = $229;
   $230 = $z1;
   $231 = $z3;
   $232 = (($230) + ($231))|0;
   $233 = $tmp1;
   $234 = (($233) + ($232))|0;
   $tmp1 = $234;
   $235 = $z1;
   $236 = $z2;
   $237 = (($235) + ($236))|0;
   $238 = $tmp2;
   $239 = (($238) + ($237))|0;
   $tmp2 = $239;
   $240 = $tmp10;
   $241 = $tmp3;
   $242 = (($240) + ($241))|0;
   $243 = $242 >> 11;
   $244 = $wsptr;
   HEAP32[$244>>2] = $243;
   $245 = $tmp10;
   $246 = $tmp3;
   $247 = (($245) - ($246))|0;
   $248 = $247 >> 11;
   $249 = $wsptr;
   $250 = (($249) + 224|0);
   HEAP32[$250>>2] = $248;
   $251 = $tmp11;
   $252 = $tmp2;
   $253 = (($251) + ($252))|0;
   $254 = $253 >> 11;
   $255 = $wsptr;
   $256 = (($255) + 32|0);
   HEAP32[$256>>2] = $254;
   $257 = $tmp11;
   $258 = $tmp2;
   $259 = (($257) - ($258))|0;
   $260 = $259 >> 11;
   $261 = $wsptr;
   $262 = (($261) + 192|0);
   HEAP32[$262>>2] = $260;
   $263 = $tmp12;
   $264 = $tmp1;
   $265 = (($263) + ($264))|0;
   $266 = $265 >> 11;
   $267 = $wsptr;
   $268 = (($267) + 64|0);
   HEAP32[$268>>2] = $266;
   $269 = $tmp12;
   $270 = $tmp1;
   $271 = (($269) - ($270))|0;
   $272 = $271 >> 11;
   $273 = $wsptr;
   $274 = (($273) + 160|0);
   HEAP32[$274>>2] = $272;
   $275 = $tmp13;
   $276 = $tmp0;
   $277 = (($275) + ($276))|0;
   $278 = $277 >> 11;
   $279 = $wsptr;
   $280 = (($279) + 96|0);
   HEAP32[$280>>2] = $278;
   $281 = $tmp13;
   $282 = $tmp0;
   $283 = (($281) - ($282))|0;
   $284 = $283 >> 11;
   $285 = $wsptr;
   $286 = (($285) + 128|0);
   HEAP32[$286>>2] = $284;
   $287 = $inptr;
   $288 = (($287) + 2|0);
   $inptr = $288;
   $289 = $quantptr;
   $290 = (($289) + 4|0);
   $quantptr = $290;
   $291 = $wsptr;
   $292 = (($291) + 4|0);
   $wsptr = $292;
  }
  $293 = $ctr;
  $294 = (($293) + -1)|0;
  $ctr = $294;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $295 = $ctr;
  $296 = ($295|0)<(8);
  if (!($296)) {
   break;
  }
  $297 = $ctr;
  $298 = $3;
  $299 = (($298) + ($297<<2)|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = $4;
  $302 = (($300) + ($301)|0);
  $outptr = $302;
  $303 = $wsptr;
  $304 = (($303) + 4|0);
  $305 = HEAP32[$304>>2]|0;
  $306 = ($305|0)==(0);
  if ($306) {
   $307 = $wsptr;
   $308 = (($307) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = ($309|0)==(0);
   if ($310) {
    $311 = $wsptr;
    $312 = (($311) + 12|0);
    $313 = HEAP32[$312>>2]|0;
    $314 = ($313|0)==(0);
    if ($314) {
     $315 = $wsptr;
     $316 = (($315) + 16|0);
     $317 = HEAP32[$316>>2]|0;
     $318 = ($317|0)==(0);
     if ($318) {
      $319 = $wsptr;
      $320 = (($319) + 20|0);
      $321 = HEAP32[$320>>2]|0;
      $322 = ($321|0)==(0);
      if ($322) {
       $323 = $wsptr;
       $324 = (($323) + 24|0);
       $325 = HEAP32[$324>>2]|0;
       $326 = ($325|0)==(0);
       if ($326) {
        $327 = $wsptr;
        $328 = (($327) + 28|0);
        $329 = HEAP32[$328>>2]|0;
        $330 = ($329|0)==(0);
        if ($330) {
         $331 = $wsptr;
         $332 = HEAP32[$331>>2]|0;
         $333 = (($332) + 16)|0;
         $334 = $333 >> 5;
         $335 = $334 & 1023;
         $336 = $range_limit;
         $337 = (($336) + ($335)|0);
         $338 = HEAP8[$337>>0]|0;
         $dcval1 = $338;
         $339 = $dcval1;
         $340 = $outptr;
         HEAP8[$340>>0] = $339;
         $341 = $dcval1;
         $342 = $outptr;
         $343 = (($342) + 1|0);
         HEAP8[$343>>0] = $341;
         $344 = $dcval1;
         $345 = $outptr;
         $346 = (($345) + 2|0);
         HEAP8[$346>>0] = $344;
         $347 = $dcval1;
         $348 = $outptr;
         $349 = (($348) + 3|0);
         HEAP8[$349>>0] = $347;
         $350 = $dcval1;
         $351 = $outptr;
         $352 = (($351) + 4|0);
         HEAP8[$352>>0] = $350;
         $353 = $dcval1;
         $354 = $outptr;
         $355 = (($354) + 5|0);
         HEAP8[$355>>0] = $353;
         $356 = $dcval1;
         $357 = $outptr;
         $358 = (($357) + 6|0);
         HEAP8[$358>>0] = $356;
         $359 = $dcval1;
         $360 = $outptr;
         $361 = (($360) + 7|0);
         HEAP8[$361>>0] = $359;
         $362 = $wsptr;
         $363 = (($362) + 32|0);
         $wsptr = $363;
        } else {
         label = 23;
        }
       } else {
        label = 23;
       }
      } else {
       label = 23;
      }
     } else {
      label = 23;
     }
    } else {
     label = 23;
    }
   } else {
    label = 23;
   }
  } else {
   label = 23;
  }
  if ((label|0) == 23) {
   label = 0;
   $364 = $wsptr;
   $365 = (($364) + 8|0);
   $366 = HEAP32[$365>>2]|0;
   $z2 = $366;
   $367 = $wsptr;
   $368 = (($367) + 24|0);
   $369 = HEAP32[$368>>2]|0;
   $z3 = $369;
   $370 = $z2;
   $371 = $z3;
   $372 = (($370) + ($371))|0;
   $373 = ($372*4433)|0;
   $z1 = $373;
   $374 = $z1;
   $375 = $z2;
   $376 = ($375*6270)|0;
   $377 = (($374) + ($376))|0;
   $tmp2 = $377;
   $378 = $z1;
   $379 = $z3;
   $380 = ($379*15137)|0;
   $381 = (($378) - ($380))|0;
   $tmp3 = $381;
   $382 = $wsptr;
   $383 = HEAP32[$382>>2]|0;
   $384 = (($383) + 16)|0;
   $z2 = $384;
   $385 = $wsptr;
   $386 = (($385) + 16|0);
   $387 = HEAP32[$386>>2]|0;
   $z3 = $387;
   $388 = $z2;
   $389 = $z3;
   $390 = (($388) + ($389))|0;
   $391 = $390 << 13;
   $tmp0 = $391;
   $392 = $z2;
   $393 = $z3;
   $394 = (($392) - ($393))|0;
   $395 = $394 << 13;
   $tmp1 = $395;
   $396 = $tmp0;
   $397 = $tmp2;
   $398 = (($396) + ($397))|0;
   $tmp10 = $398;
   $399 = $tmp0;
   $400 = $tmp2;
   $401 = (($399) - ($400))|0;
   $tmp13 = $401;
   $402 = $tmp1;
   $403 = $tmp3;
   $404 = (($402) + ($403))|0;
   $tmp11 = $404;
   $405 = $tmp1;
   $406 = $tmp3;
   $407 = (($405) - ($406))|0;
   $tmp12 = $407;
   $408 = $wsptr;
   $409 = (($408) + 28|0);
   $410 = HEAP32[$409>>2]|0;
   $tmp0 = $410;
   $411 = $wsptr;
   $412 = (($411) + 20|0);
   $413 = HEAP32[$412>>2]|0;
   $tmp1 = $413;
   $414 = $wsptr;
   $415 = (($414) + 12|0);
   $416 = HEAP32[$415>>2]|0;
   $tmp2 = $416;
   $417 = $wsptr;
   $418 = (($417) + 4|0);
   $419 = HEAP32[$418>>2]|0;
   $tmp3 = $419;
   $420 = $tmp0;
   $421 = $tmp2;
   $422 = (($420) + ($421))|0;
   $z2 = $422;
   $423 = $tmp1;
   $424 = $tmp3;
   $425 = (($423) + ($424))|0;
   $z3 = $425;
   $426 = $z2;
   $427 = $z3;
   $428 = (($426) + ($427))|0;
   $429 = ($428*9633)|0;
   $z1 = $429;
   $430 = $z2;
   $431 = Math_imul($430, -16069)|0;
   $z2 = $431;
   $432 = $z3;
   $433 = Math_imul($432, -3196)|0;
   $z3 = $433;
   $434 = $z1;
   $435 = $z2;
   $436 = (($435) + ($434))|0;
   $z2 = $436;
   $437 = $z1;
   $438 = $z3;
   $439 = (($438) + ($437))|0;
   $z3 = $439;
   $440 = $tmp0;
   $441 = $tmp3;
   $442 = (($440) + ($441))|0;
   $443 = Math_imul($442, -7373)|0;
   $z1 = $443;
   $444 = $tmp0;
   $445 = ($444*2446)|0;
   $tmp0 = $445;
   $446 = $tmp3;
   $447 = ($446*12299)|0;
   $tmp3 = $447;
   $448 = $z1;
   $449 = $z2;
   $450 = (($448) + ($449))|0;
   $451 = $tmp0;
   $452 = (($451) + ($450))|0;
   $tmp0 = $452;
   $453 = $z1;
   $454 = $z3;
   $455 = (($453) + ($454))|0;
   $456 = $tmp3;
   $457 = (($456) + ($455))|0;
   $tmp3 = $457;
   $458 = $tmp1;
   $459 = $tmp2;
   $460 = (($458) + ($459))|0;
   $461 = Math_imul($460, -20995)|0;
   $z1 = $461;
   $462 = $tmp1;
   $463 = ($462*16819)|0;
   $tmp1 = $463;
   $464 = $tmp2;
   $465 = ($464*25172)|0;
   $tmp2 = $465;
   $466 = $z1;
   $467 = $z3;
   $468 = (($466) + ($467))|0;
   $469 = $tmp1;
   $470 = (($469) + ($468))|0;
   $tmp1 = $470;
   $471 = $z1;
   $472 = $z2;
   $473 = (($471) + ($472))|0;
   $474 = $tmp2;
   $475 = (($474) + ($473))|0;
   $tmp2 = $475;
   $476 = $tmp10;
   $477 = $tmp3;
   $478 = (($476) + ($477))|0;
   $479 = $478 >> 18;
   $480 = $479 & 1023;
   $481 = $range_limit;
   $482 = (($481) + ($480)|0);
   $483 = HEAP8[$482>>0]|0;
   $484 = $outptr;
   HEAP8[$484>>0] = $483;
   $485 = $tmp10;
   $486 = $tmp3;
   $487 = (($485) - ($486))|0;
   $488 = $487 >> 18;
   $489 = $488 & 1023;
   $490 = $range_limit;
   $491 = (($490) + ($489)|0);
   $492 = HEAP8[$491>>0]|0;
   $493 = $outptr;
   $494 = (($493) + 7|0);
   HEAP8[$494>>0] = $492;
   $495 = $tmp11;
   $496 = $tmp2;
   $497 = (($495) + ($496))|0;
   $498 = $497 >> 18;
   $499 = $498 & 1023;
   $500 = $range_limit;
   $501 = (($500) + ($499)|0);
   $502 = HEAP8[$501>>0]|0;
   $503 = $outptr;
   $504 = (($503) + 1|0);
   HEAP8[$504>>0] = $502;
   $505 = $tmp11;
   $506 = $tmp2;
   $507 = (($505) - ($506))|0;
   $508 = $507 >> 18;
   $509 = $508 & 1023;
   $510 = $range_limit;
   $511 = (($510) + ($509)|0);
   $512 = HEAP8[$511>>0]|0;
   $513 = $outptr;
   $514 = (($513) + 6|0);
   HEAP8[$514>>0] = $512;
   $515 = $tmp12;
   $516 = $tmp1;
   $517 = (($515) + ($516))|0;
   $518 = $517 >> 18;
   $519 = $518 & 1023;
   $520 = $range_limit;
   $521 = (($520) + ($519)|0);
   $522 = HEAP8[$521>>0]|0;
   $523 = $outptr;
   $524 = (($523) + 2|0);
   HEAP8[$524>>0] = $522;
   $525 = $tmp12;
   $526 = $tmp1;
   $527 = (($525) - ($526))|0;
   $528 = $527 >> 18;
   $529 = $528 & 1023;
   $530 = $range_limit;
   $531 = (($530) + ($529)|0);
   $532 = HEAP8[$531>>0]|0;
   $533 = $outptr;
   $534 = (($533) + 5|0);
   HEAP8[$534>>0] = $532;
   $535 = $tmp13;
   $536 = $tmp0;
   $537 = (($535) + ($536))|0;
   $538 = $537 >> 18;
   $539 = $538 & 1023;
   $540 = $range_limit;
   $541 = (($540) + ($539)|0);
   $542 = HEAP8[$541>>0]|0;
   $543 = $outptr;
   $544 = (($543) + 3|0);
   HEAP8[$544>>0] = $542;
   $545 = $tmp13;
   $546 = $tmp0;
   $547 = (($545) - ($546))|0;
   $548 = $547 >> 18;
   $549 = $548 & 1023;
   $550 = $range_limit;
   $551 = (($550) + ($549)|0);
   $552 = HEAP8[$551>>0]|0;
   $553 = $outptr;
   $554 = (($553) + 4|0);
   HEAP8[$554>>0] = $552;
   $555 = $wsptr;
   $556 = (($555) + 32|0);
   $wsptr = $556;
  }
  $557 = $ctr;
  $558 = (($557) + 1)|0;
  $ctr = $558;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_7x7($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0;
 var $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(7);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp13 = $20;
  $21 = $tmp13;
  $22 = $21 << 13;
  $tmp13 = $22;
  $23 = $tmp13;
  $24 = (($23) + 1024)|0;
  $tmp13 = $24;
  $25 = $inptr;
  $26 = (($25) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z1 = $32;
  $33 = $inptr;
  $34 = (($33) + 64|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $quantptr;
  $38 = (($37) + 128|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $z2 = $40;
  $41 = $inptr;
  $42 = (($41) + 96|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = $quantptr;
  $46 = (($45) + 192|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = Math_imul($44, $47)|0;
  $z3 = $48;
  $49 = $z2;
  $50 = $z3;
  $51 = (($49) - ($50))|0;
  $52 = ($51*7223)|0;
  $tmp10 = $52;
  $53 = $z1;
  $54 = $z2;
  $55 = (($53) - ($54))|0;
  $56 = ($55*2578)|0;
  $tmp12 = $56;
  $57 = $tmp10;
  $58 = $tmp12;
  $59 = (($57) + ($58))|0;
  $60 = $tmp13;
  $61 = (($59) + ($60))|0;
  $62 = $z2;
  $63 = ($62*15083)|0;
  $64 = (($61) - ($63))|0;
  $tmp11 = $64;
  $65 = $z1;
  $66 = $z3;
  $67 = (($65) + ($66))|0;
  $tmp0 = $67;
  $68 = $tmp0;
  $69 = $z2;
  $70 = (($69) - ($68))|0;
  $z2 = $70;
  $71 = $tmp0;
  $72 = ($71*10438)|0;
  $73 = $tmp13;
  $74 = (($72) + ($73))|0;
  $tmp0 = $74;
  $75 = $tmp0;
  $76 = $z3;
  $77 = ($76*637)|0;
  $78 = (($75) - ($77))|0;
  $79 = $tmp10;
  $80 = (($79) + ($78))|0;
  $tmp10 = $80;
  $81 = $tmp0;
  $82 = $z1;
  $83 = ($82*20239)|0;
  $84 = (($81) - ($83))|0;
  $85 = $tmp12;
  $86 = (($85) + ($84))|0;
  $tmp12 = $86;
  $87 = $z2;
  $88 = ($87*11585)|0;
  $89 = $tmp13;
  $90 = (($89) + ($88))|0;
  $tmp13 = $90;
  $91 = $inptr;
  $92 = (($91) + 16|0);
  $93 = HEAP16[$92>>1]|0;
  $94 = $93 << 16 >> 16;
  $95 = $quantptr;
  $96 = (($95) + 32|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = Math_imul($94, $97)|0;
  $z1 = $98;
  $99 = $inptr;
  $100 = (($99) + 48|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = $101 << 16 >> 16;
  $103 = $quantptr;
  $104 = (($103) + 96|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = Math_imul($102, $105)|0;
  $z2 = $106;
  $107 = $inptr;
  $108 = (($107) + 80|0);
  $109 = HEAP16[$108>>1]|0;
  $110 = $109 << 16 >> 16;
  $111 = $quantptr;
  $112 = (($111) + 160|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = Math_imul($110, $113)|0;
  $z3 = $114;
  $115 = $z1;
  $116 = $z2;
  $117 = (($115) + ($116))|0;
  $118 = ($117*7663)|0;
  $tmp1 = $118;
  $119 = $z1;
  $120 = $z2;
  $121 = (($119) - ($120))|0;
  $122 = ($121*1395)|0;
  $tmp2 = $122;
  $123 = $tmp1;
  $124 = $tmp2;
  $125 = (($123) - ($124))|0;
  $tmp0 = $125;
  $126 = $tmp2;
  $127 = $tmp1;
  $128 = (($127) + ($126))|0;
  $tmp1 = $128;
  $129 = $z2;
  $130 = $z3;
  $131 = (($129) + ($130))|0;
  $132 = Math_imul($131, -11295)|0;
  $tmp2 = $132;
  $133 = $tmp2;
  $134 = $tmp1;
  $135 = (($134) + ($133))|0;
  $tmp1 = $135;
  $136 = $z1;
  $137 = $z3;
  $138 = (($136) + ($137))|0;
  $139 = ($138*5027)|0;
  $z2 = $139;
  $140 = $z2;
  $141 = $tmp0;
  $142 = (($141) + ($140))|0;
  $tmp0 = $142;
  $143 = $z2;
  $144 = $z3;
  $145 = ($144*15326)|0;
  $146 = (($143) + ($145))|0;
  $147 = $tmp2;
  $148 = (($147) + ($146))|0;
  $tmp2 = $148;
  $149 = $tmp10;
  $150 = $tmp0;
  $151 = (($149) + ($150))|0;
  $152 = $151 >> 11;
  $153 = $wsptr;
  HEAP32[$153>>2] = $152;
  $154 = $tmp10;
  $155 = $tmp0;
  $156 = (($154) - ($155))|0;
  $157 = $156 >> 11;
  $158 = $wsptr;
  $159 = (($158) + 168|0);
  HEAP32[$159>>2] = $157;
  $160 = $tmp11;
  $161 = $tmp1;
  $162 = (($160) + ($161))|0;
  $163 = $162 >> 11;
  $164 = $wsptr;
  $165 = (($164) + 28|0);
  HEAP32[$165>>2] = $163;
  $166 = $tmp11;
  $167 = $tmp1;
  $168 = (($166) - ($167))|0;
  $169 = $168 >> 11;
  $170 = $wsptr;
  $171 = (($170) + 140|0);
  HEAP32[$171>>2] = $169;
  $172 = $tmp12;
  $173 = $tmp2;
  $174 = (($172) + ($173))|0;
  $175 = $174 >> 11;
  $176 = $wsptr;
  $177 = (($176) + 56|0);
  HEAP32[$177>>2] = $175;
  $178 = $tmp12;
  $179 = $tmp2;
  $180 = (($178) - ($179))|0;
  $181 = $180 >> 11;
  $182 = $wsptr;
  $183 = (($182) + 112|0);
  HEAP32[$183>>2] = $181;
  $184 = $tmp13;
  $185 = $184 >> 11;
  $186 = $wsptr;
  $187 = (($186) + 84|0);
  HEAP32[$187>>2] = $185;
  $188 = $ctr;
  $189 = (($188) + 1)|0;
  $ctr = $189;
  $190 = $inptr;
  $191 = (($190) + 2|0);
  $inptr = $191;
  $192 = $quantptr;
  $193 = (($192) + 4|0);
  $quantptr = $193;
  $194 = $wsptr;
  $195 = (($194) + 4|0);
  $wsptr = $195;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $196 = $ctr;
  $197 = ($196|0)<(7);
  if (!($197)) {
   break;
  }
  $198 = $ctr;
  $199 = $3;
  $200 = (($199) + ($198<<2)|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $4;
  $203 = (($201) + ($202)|0);
  $outptr = $203;
  $204 = $wsptr;
  $205 = HEAP32[$204>>2]|0;
  $206 = (($205) + 16)|0;
  $tmp13 = $206;
  $207 = $tmp13;
  $208 = $207 << 13;
  $tmp13 = $208;
  $209 = $wsptr;
  $210 = (($209) + 8|0);
  $211 = HEAP32[$210>>2]|0;
  $z1 = $211;
  $212 = $wsptr;
  $213 = (($212) + 16|0);
  $214 = HEAP32[$213>>2]|0;
  $z2 = $214;
  $215 = $wsptr;
  $216 = (($215) + 24|0);
  $217 = HEAP32[$216>>2]|0;
  $z3 = $217;
  $218 = $z2;
  $219 = $z3;
  $220 = (($218) - ($219))|0;
  $221 = ($220*7223)|0;
  $tmp10 = $221;
  $222 = $z1;
  $223 = $z2;
  $224 = (($222) - ($223))|0;
  $225 = ($224*2578)|0;
  $tmp12 = $225;
  $226 = $tmp10;
  $227 = $tmp12;
  $228 = (($226) + ($227))|0;
  $229 = $tmp13;
  $230 = (($228) + ($229))|0;
  $231 = $z2;
  $232 = ($231*15083)|0;
  $233 = (($230) - ($232))|0;
  $tmp11 = $233;
  $234 = $z1;
  $235 = $z3;
  $236 = (($234) + ($235))|0;
  $tmp0 = $236;
  $237 = $tmp0;
  $238 = $z2;
  $239 = (($238) - ($237))|0;
  $z2 = $239;
  $240 = $tmp0;
  $241 = ($240*10438)|0;
  $242 = $tmp13;
  $243 = (($241) + ($242))|0;
  $tmp0 = $243;
  $244 = $tmp0;
  $245 = $z3;
  $246 = ($245*637)|0;
  $247 = (($244) - ($246))|0;
  $248 = $tmp10;
  $249 = (($248) + ($247))|0;
  $tmp10 = $249;
  $250 = $tmp0;
  $251 = $z1;
  $252 = ($251*20239)|0;
  $253 = (($250) - ($252))|0;
  $254 = $tmp12;
  $255 = (($254) + ($253))|0;
  $tmp12 = $255;
  $256 = $z2;
  $257 = ($256*11585)|0;
  $258 = $tmp13;
  $259 = (($258) + ($257))|0;
  $tmp13 = $259;
  $260 = $wsptr;
  $261 = (($260) + 4|0);
  $262 = HEAP32[$261>>2]|0;
  $z1 = $262;
  $263 = $wsptr;
  $264 = (($263) + 12|0);
  $265 = HEAP32[$264>>2]|0;
  $z2 = $265;
  $266 = $wsptr;
  $267 = (($266) + 20|0);
  $268 = HEAP32[$267>>2]|0;
  $z3 = $268;
  $269 = $z1;
  $270 = $z2;
  $271 = (($269) + ($270))|0;
  $272 = ($271*7663)|0;
  $tmp1 = $272;
  $273 = $z1;
  $274 = $z2;
  $275 = (($273) - ($274))|0;
  $276 = ($275*1395)|0;
  $tmp2 = $276;
  $277 = $tmp1;
  $278 = $tmp2;
  $279 = (($277) - ($278))|0;
  $tmp0 = $279;
  $280 = $tmp2;
  $281 = $tmp1;
  $282 = (($281) + ($280))|0;
  $tmp1 = $282;
  $283 = $z2;
  $284 = $z3;
  $285 = (($283) + ($284))|0;
  $286 = Math_imul($285, -11295)|0;
  $tmp2 = $286;
  $287 = $tmp2;
  $288 = $tmp1;
  $289 = (($288) + ($287))|0;
  $tmp1 = $289;
  $290 = $z1;
  $291 = $z3;
  $292 = (($290) + ($291))|0;
  $293 = ($292*5027)|0;
  $z2 = $293;
  $294 = $z2;
  $295 = $tmp0;
  $296 = (($295) + ($294))|0;
  $tmp0 = $296;
  $297 = $z2;
  $298 = $z3;
  $299 = ($298*15326)|0;
  $300 = (($297) + ($299))|0;
  $301 = $tmp2;
  $302 = (($301) + ($300))|0;
  $tmp2 = $302;
  $303 = $tmp10;
  $304 = $tmp0;
  $305 = (($303) + ($304))|0;
  $306 = $305 >> 18;
  $307 = $306 & 1023;
  $308 = $range_limit;
  $309 = (($308) + ($307)|0);
  $310 = HEAP8[$309>>0]|0;
  $311 = $outptr;
  HEAP8[$311>>0] = $310;
  $312 = $tmp10;
  $313 = $tmp0;
  $314 = (($312) - ($313))|0;
  $315 = $314 >> 18;
  $316 = $315 & 1023;
  $317 = $range_limit;
  $318 = (($317) + ($316)|0);
  $319 = HEAP8[$318>>0]|0;
  $320 = $outptr;
  $321 = (($320) + 6|0);
  HEAP8[$321>>0] = $319;
  $322 = $tmp11;
  $323 = $tmp1;
  $324 = (($322) + ($323))|0;
  $325 = $324 >> 18;
  $326 = $325 & 1023;
  $327 = $range_limit;
  $328 = (($327) + ($326)|0);
  $329 = HEAP8[$328>>0]|0;
  $330 = $outptr;
  $331 = (($330) + 1|0);
  HEAP8[$331>>0] = $329;
  $332 = $tmp11;
  $333 = $tmp1;
  $334 = (($332) - ($333))|0;
  $335 = $334 >> 18;
  $336 = $335 & 1023;
  $337 = $range_limit;
  $338 = (($337) + ($336)|0);
  $339 = HEAP8[$338>>0]|0;
  $340 = $outptr;
  $341 = (($340) + 5|0);
  HEAP8[$341>>0] = $339;
  $342 = $tmp12;
  $343 = $tmp2;
  $344 = (($342) + ($343))|0;
  $345 = $344 >> 18;
  $346 = $345 & 1023;
  $347 = $range_limit;
  $348 = (($347) + ($346)|0);
  $349 = HEAP8[$348>>0]|0;
  $350 = $outptr;
  $351 = (($350) + 2|0);
  HEAP8[$351>>0] = $349;
  $352 = $tmp12;
  $353 = $tmp2;
  $354 = (($352) - ($353))|0;
  $355 = $354 >> 18;
  $356 = $355 & 1023;
  $357 = $range_limit;
  $358 = (($357) + ($356)|0);
  $359 = HEAP8[$358>>0]|0;
  $360 = $outptr;
  $361 = (($360) + 4|0);
  HEAP8[$361>>0] = $359;
  $362 = $tmp13;
  $363 = $362 >> 18;
  $364 = $363 & 1023;
  $365 = $range_limit;
  $366 = (($365) + ($364)|0);
  $367 = HEAP8[$366>>0]|0;
  $368 = $outptr;
  $369 = (($368) + 3|0);
  HEAP8[$369>>0] = $367;
  $370 = $wsptr;
  $371 = (($370) + 28|0);
  $wsptr = $371;
  $372 = $ctr;
  $373 = (($372) + 1)|0;
  $ctr = $373;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_6x6($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0;
 var $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp2 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(6);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp0 = $20;
  $21 = $tmp0;
  $22 = $21 << 13;
  $tmp0 = $22;
  $23 = $tmp0;
  $24 = (($23) + 1024)|0;
  $tmp0 = $24;
  $25 = $inptr;
  $26 = (($25) + 64|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $tmp2 = $32;
  $33 = $tmp2;
  $34 = ($33*5793)|0;
  $tmp10 = $34;
  $35 = $tmp0;
  $36 = $tmp10;
  $37 = (($35) + ($36))|0;
  $tmp1 = $37;
  $38 = $tmp0;
  $39 = $tmp10;
  $40 = (($38) - ($39))|0;
  $41 = $tmp10;
  $42 = (($40) - ($41))|0;
  $43 = $42 >> 11;
  $tmp11 = $43;
  $44 = $inptr;
  $45 = (($44) + 32|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = $quantptr;
  $49 = (($48) + 64|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = Math_imul($47, $50)|0;
  $tmp10 = $51;
  $52 = $tmp10;
  $53 = ($52*10033)|0;
  $tmp0 = $53;
  $54 = $tmp1;
  $55 = $tmp0;
  $56 = (($54) + ($55))|0;
  $tmp10 = $56;
  $57 = $tmp1;
  $58 = $tmp0;
  $59 = (($57) - ($58))|0;
  $tmp12 = $59;
  $60 = $inptr;
  $61 = (($60) + 16|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 << 16 >> 16;
  $64 = $quantptr;
  $65 = (($64) + 32|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = Math_imul($63, $66)|0;
  $z1 = $67;
  $68 = $inptr;
  $69 = (($68) + 48|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $70 << 16 >> 16;
  $72 = $quantptr;
  $73 = (($72) + 96|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = Math_imul($71, $74)|0;
  $z2 = $75;
  $76 = $inptr;
  $77 = (($76) + 80|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = $quantptr;
  $81 = (($80) + 160|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = Math_imul($79, $82)|0;
  $z3 = $83;
  $84 = $z1;
  $85 = $z3;
  $86 = (($84) + ($85))|0;
  $87 = ($86*2998)|0;
  $tmp1 = $87;
  $88 = $tmp1;
  $89 = $z1;
  $90 = $z2;
  $91 = (($89) + ($90))|0;
  $92 = $91 << 13;
  $93 = (($88) + ($92))|0;
  $tmp0 = $93;
  $94 = $tmp1;
  $95 = $z3;
  $96 = $z2;
  $97 = (($95) - ($96))|0;
  $98 = $97 << 13;
  $99 = (($94) + ($98))|0;
  $tmp2 = $99;
  $100 = $z1;
  $101 = $z2;
  $102 = (($100) - ($101))|0;
  $103 = $z3;
  $104 = (($102) - ($103))|0;
  $105 = $104 << 2;
  $tmp1 = $105;
  $106 = $tmp10;
  $107 = $tmp0;
  $108 = (($106) + ($107))|0;
  $109 = $108 >> 11;
  $110 = $wsptr;
  HEAP32[$110>>2] = $109;
  $111 = $tmp10;
  $112 = $tmp0;
  $113 = (($111) - ($112))|0;
  $114 = $113 >> 11;
  $115 = $wsptr;
  $116 = (($115) + 120|0);
  HEAP32[$116>>2] = $114;
  $117 = $tmp11;
  $118 = $tmp1;
  $119 = (($117) + ($118))|0;
  $120 = $wsptr;
  $121 = (($120) + 24|0);
  HEAP32[$121>>2] = $119;
  $122 = $tmp11;
  $123 = $tmp1;
  $124 = (($122) - ($123))|0;
  $125 = $wsptr;
  $126 = (($125) + 96|0);
  HEAP32[$126>>2] = $124;
  $127 = $tmp12;
  $128 = $tmp2;
  $129 = (($127) + ($128))|0;
  $130 = $129 >> 11;
  $131 = $wsptr;
  $132 = (($131) + 48|0);
  HEAP32[$132>>2] = $130;
  $133 = $tmp12;
  $134 = $tmp2;
  $135 = (($133) - ($134))|0;
  $136 = $135 >> 11;
  $137 = $wsptr;
  $138 = (($137) + 72|0);
  HEAP32[$138>>2] = $136;
  $139 = $ctr;
  $140 = (($139) + 1)|0;
  $ctr = $140;
  $141 = $inptr;
  $142 = (($141) + 2|0);
  $inptr = $142;
  $143 = $quantptr;
  $144 = (($143) + 4|0);
  $quantptr = $144;
  $145 = $wsptr;
  $146 = (($145) + 4|0);
  $wsptr = $146;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $147 = $ctr;
  $148 = ($147|0)<(6);
  if (!($148)) {
   break;
  }
  $149 = $ctr;
  $150 = $3;
  $151 = (($150) + ($149<<2)|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $4;
  $154 = (($152) + ($153)|0);
  $outptr = $154;
  $155 = $wsptr;
  $156 = HEAP32[$155>>2]|0;
  $157 = (($156) + 16)|0;
  $tmp0 = $157;
  $158 = $tmp0;
  $159 = $158 << 13;
  $tmp0 = $159;
  $160 = $wsptr;
  $161 = (($160) + 16|0);
  $162 = HEAP32[$161>>2]|0;
  $tmp2 = $162;
  $163 = $tmp2;
  $164 = ($163*5793)|0;
  $tmp10 = $164;
  $165 = $tmp0;
  $166 = $tmp10;
  $167 = (($165) + ($166))|0;
  $tmp1 = $167;
  $168 = $tmp0;
  $169 = $tmp10;
  $170 = (($168) - ($169))|0;
  $171 = $tmp10;
  $172 = (($170) - ($171))|0;
  $tmp11 = $172;
  $173 = $wsptr;
  $174 = (($173) + 8|0);
  $175 = HEAP32[$174>>2]|0;
  $tmp10 = $175;
  $176 = $tmp10;
  $177 = ($176*10033)|0;
  $tmp0 = $177;
  $178 = $tmp1;
  $179 = $tmp0;
  $180 = (($178) + ($179))|0;
  $tmp10 = $180;
  $181 = $tmp1;
  $182 = $tmp0;
  $183 = (($181) - ($182))|0;
  $tmp12 = $183;
  $184 = $wsptr;
  $185 = (($184) + 4|0);
  $186 = HEAP32[$185>>2]|0;
  $z1 = $186;
  $187 = $wsptr;
  $188 = (($187) + 12|0);
  $189 = HEAP32[$188>>2]|0;
  $z2 = $189;
  $190 = $wsptr;
  $191 = (($190) + 20|0);
  $192 = HEAP32[$191>>2]|0;
  $z3 = $192;
  $193 = $z1;
  $194 = $z3;
  $195 = (($193) + ($194))|0;
  $196 = ($195*2998)|0;
  $tmp1 = $196;
  $197 = $tmp1;
  $198 = $z1;
  $199 = $z2;
  $200 = (($198) + ($199))|0;
  $201 = $200 << 13;
  $202 = (($197) + ($201))|0;
  $tmp0 = $202;
  $203 = $tmp1;
  $204 = $z3;
  $205 = $z2;
  $206 = (($204) - ($205))|0;
  $207 = $206 << 13;
  $208 = (($203) + ($207))|0;
  $tmp2 = $208;
  $209 = $z1;
  $210 = $z2;
  $211 = (($209) - ($210))|0;
  $212 = $z3;
  $213 = (($211) - ($212))|0;
  $214 = $213 << 13;
  $tmp1 = $214;
  $215 = $tmp10;
  $216 = $tmp0;
  $217 = (($215) + ($216))|0;
  $218 = $217 >> 18;
  $219 = $218 & 1023;
  $220 = $range_limit;
  $221 = (($220) + ($219)|0);
  $222 = HEAP8[$221>>0]|0;
  $223 = $outptr;
  HEAP8[$223>>0] = $222;
  $224 = $tmp10;
  $225 = $tmp0;
  $226 = (($224) - ($225))|0;
  $227 = $226 >> 18;
  $228 = $227 & 1023;
  $229 = $range_limit;
  $230 = (($229) + ($228)|0);
  $231 = HEAP8[$230>>0]|0;
  $232 = $outptr;
  $233 = (($232) + 5|0);
  HEAP8[$233>>0] = $231;
  $234 = $tmp11;
  $235 = $tmp1;
  $236 = (($234) + ($235))|0;
  $237 = $236 >> 18;
  $238 = $237 & 1023;
  $239 = $range_limit;
  $240 = (($239) + ($238)|0);
  $241 = HEAP8[$240>>0]|0;
  $242 = $outptr;
  $243 = (($242) + 1|0);
  HEAP8[$243>>0] = $241;
  $244 = $tmp11;
  $245 = $tmp1;
  $246 = (($244) - ($245))|0;
  $247 = $246 >> 18;
  $248 = $247 & 1023;
  $249 = $range_limit;
  $250 = (($249) + ($248)|0);
  $251 = HEAP8[$250>>0]|0;
  $252 = $outptr;
  $253 = (($252) + 4|0);
  HEAP8[$253>>0] = $251;
  $254 = $tmp12;
  $255 = $tmp2;
  $256 = (($254) + ($255))|0;
  $257 = $256 >> 18;
  $258 = $257 & 1023;
  $259 = $range_limit;
  $260 = (($259) + ($258)|0);
  $261 = HEAP8[$260>>0]|0;
  $262 = $outptr;
  $263 = (($262) + 2|0);
  HEAP8[$263>>0] = $261;
  $264 = $tmp12;
  $265 = $tmp2;
  $266 = (($264) - ($265))|0;
  $267 = $266 >> 18;
  $268 = $267 & 1023;
  $269 = $range_limit;
  $270 = (($269) + ($268)|0);
  $271 = HEAP8[$270>>0]|0;
  $272 = $outptr;
  $273 = (($272) + 3|0);
  HEAP8[$273>>0] = $271;
  $274 = $wsptr;
  $275 = (($274) + 24|0);
  $wsptr = $275;
  $276 = $ctr;
  $277 = (($276) + 1)|0;
  $ctr = $277;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_5x5($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0;
 var $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(5);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp12 = $20;
  $21 = $tmp12;
  $22 = $21 << 13;
  $tmp12 = $22;
  $23 = $tmp12;
  $24 = (($23) + 1024)|0;
  $tmp12 = $24;
  $25 = $inptr;
  $26 = (($25) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $tmp0 = $32;
  $33 = $inptr;
  $34 = (($33) + 64|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $quantptr;
  $38 = (($37) + 128|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $tmp1 = $40;
  $41 = $tmp0;
  $42 = $tmp1;
  $43 = (($41) + ($42))|0;
  $44 = ($43*6476)|0;
  $z1 = $44;
  $45 = $tmp0;
  $46 = $tmp1;
  $47 = (($45) - ($46))|0;
  $48 = ($47*2896)|0;
  $z2 = $48;
  $49 = $tmp12;
  $50 = $z2;
  $51 = (($49) + ($50))|0;
  $z3 = $51;
  $52 = $z3;
  $53 = $z1;
  $54 = (($52) + ($53))|0;
  $tmp10 = $54;
  $55 = $z3;
  $56 = $z1;
  $57 = (($55) - ($56))|0;
  $tmp11 = $57;
  $58 = $z2;
  $59 = $58 << 2;
  $60 = $tmp12;
  $61 = (($60) - ($59))|0;
  $tmp12 = $61;
  $62 = $inptr;
  $63 = (($62) + 16|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = $quantptr;
  $67 = (($66) + 32|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = Math_imul($65, $68)|0;
  $z2 = $69;
  $70 = $inptr;
  $71 = (($70) + 48|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = $quantptr;
  $75 = (($74) + 96|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = Math_imul($73, $76)|0;
  $z3 = $77;
  $78 = $z2;
  $79 = $z3;
  $80 = (($78) + ($79))|0;
  $81 = ($80*6810)|0;
  $z1 = $81;
  $82 = $z1;
  $83 = $z2;
  $84 = ($83*4209)|0;
  $85 = (($82) + ($84))|0;
  $tmp0 = $85;
  $86 = $z1;
  $87 = $z3;
  $88 = ($87*17828)|0;
  $89 = (($86) - ($88))|0;
  $tmp1 = $89;
  $90 = $tmp10;
  $91 = $tmp0;
  $92 = (($90) + ($91))|0;
  $93 = $92 >> 11;
  $94 = $wsptr;
  HEAP32[$94>>2] = $93;
  $95 = $tmp10;
  $96 = $tmp0;
  $97 = (($95) - ($96))|0;
  $98 = $97 >> 11;
  $99 = $wsptr;
  $100 = (($99) + 80|0);
  HEAP32[$100>>2] = $98;
  $101 = $tmp11;
  $102 = $tmp1;
  $103 = (($101) + ($102))|0;
  $104 = $103 >> 11;
  $105 = $wsptr;
  $106 = (($105) + 20|0);
  HEAP32[$106>>2] = $104;
  $107 = $tmp11;
  $108 = $tmp1;
  $109 = (($107) - ($108))|0;
  $110 = $109 >> 11;
  $111 = $wsptr;
  $112 = (($111) + 60|0);
  HEAP32[$112>>2] = $110;
  $113 = $tmp12;
  $114 = $113 >> 11;
  $115 = $wsptr;
  $116 = (($115) + 40|0);
  HEAP32[$116>>2] = $114;
  $117 = $ctr;
  $118 = (($117) + 1)|0;
  $ctr = $118;
  $119 = $inptr;
  $120 = (($119) + 2|0);
  $inptr = $120;
  $121 = $quantptr;
  $122 = (($121) + 4|0);
  $quantptr = $122;
  $123 = $wsptr;
  $124 = (($123) + 4|0);
  $wsptr = $124;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $125 = $ctr;
  $126 = ($125|0)<(5);
  if (!($126)) {
   break;
  }
  $127 = $ctr;
  $128 = $3;
  $129 = (($128) + ($127<<2)|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $4;
  $132 = (($130) + ($131)|0);
  $outptr = $132;
  $133 = $wsptr;
  $134 = HEAP32[$133>>2]|0;
  $135 = (($134) + 16)|0;
  $tmp12 = $135;
  $136 = $tmp12;
  $137 = $136 << 13;
  $tmp12 = $137;
  $138 = $wsptr;
  $139 = (($138) + 8|0);
  $140 = HEAP32[$139>>2]|0;
  $tmp0 = $140;
  $141 = $wsptr;
  $142 = (($141) + 16|0);
  $143 = HEAP32[$142>>2]|0;
  $tmp1 = $143;
  $144 = $tmp0;
  $145 = $tmp1;
  $146 = (($144) + ($145))|0;
  $147 = ($146*6476)|0;
  $z1 = $147;
  $148 = $tmp0;
  $149 = $tmp1;
  $150 = (($148) - ($149))|0;
  $151 = ($150*2896)|0;
  $z2 = $151;
  $152 = $tmp12;
  $153 = $z2;
  $154 = (($152) + ($153))|0;
  $z3 = $154;
  $155 = $z3;
  $156 = $z1;
  $157 = (($155) + ($156))|0;
  $tmp10 = $157;
  $158 = $z3;
  $159 = $z1;
  $160 = (($158) - ($159))|0;
  $tmp11 = $160;
  $161 = $z2;
  $162 = $161 << 2;
  $163 = $tmp12;
  $164 = (($163) - ($162))|0;
  $tmp12 = $164;
  $165 = $wsptr;
  $166 = (($165) + 4|0);
  $167 = HEAP32[$166>>2]|0;
  $z2 = $167;
  $168 = $wsptr;
  $169 = (($168) + 12|0);
  $170 = HEAP32[$169>>2]|0;
  $z3 = $170;
  $171 = $z2;
  $172 = $z3;
  $173 = (($171) + ($172))|0;
  $174 = ($173*6810)|0;
  $z1 = $174;
  $175 = $z1;
  $176 = $z2;
  $177 = ($176*4209)|0;
  $178 = (($175) + ($177))|0;
  $tmp0 = $178;
  $179 = $z1;
  $180 = $z3;
  $181 = ($180*17828)|0;
  $182 = (($179) - ($181))|0;
  $tmp1 = $182;
  $183 = $tmp10;
  $184 = $tmp0;
  $185 = (($183) + ($184))|0;
  $186 = $185 >> 18;
  $187 = $186 & 1023;
  $188 = $range_limit;
  $189 = (($188) + ($187)|0);
  $190 = HEAP8[$189>>0]|0;
  $191 = $outptr;
  HEAP8[$191>>0] = $190;
  $192 = $tmp10;
  $193 = $tmp0;
  $194 = (($192) - ($193))|0;
  $195 = $194 >> 18;
  $196 = $195 & 1023;
  $197 = $range_limit;
  $198 = (($197) + ($196)|0);
  $199 = HEAP8[$198>>0]|0;
  $200 = $outptr;
  $201 = (($200) + 4|0);
  HEAP8[$201>>0] = $199;
  $202 = $tmp11;
  $203 = $tmp1;
  $204 = (($202) + ($203))|0;
  $205 = $204 >> 18;
  $206 = $205 & 1023;
  $207 = $range_limit;
  $208 = (($207) + ($206)|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = $outptr;
  $211 = (($210) + 1|0);
  HEAP8[$211>>0] = $209;
  $212 = $tmp11;
  $213 = $tmp1;
  $214 = (($212) - ($213))|0;
  $215 = $214 >> 18;
  $216 = $215 & 1023;
  $217 = $range_limit;
  $218 = (($217) + ($216)|0);
  $219 = HEAP8[$218>>0]|0;
  $220 = $outptr;
  $221 = (($220) + 3|0);
  HEAP8[$221>>0] = $219;
  $222 = $tmp12;
  $223 = $222 >> 18;
  $224 = $223 & 1023;
  $225 = $range_limit;
  $226 = (($225) + ($224)|0);
  $227 = HEAP8[$226>>0]|0;
  $228 = $outptr;
  $229 = (($228) + 2|0);
  HEAP8[$229>>0] = $227;
  $230 = $wsptr;
  $231 = (($230) + 20|0);
  $wsptr = $231;
  $232 = $ctr;
  $233 = (($232) + 1)|0;
  $ctr = $233;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_4x4($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0;
 var $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp10 = 0, $tmp12 = 0, $tmp2 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(4);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp0 = $20;
  $21 = $inptr;
  $22 = (($21) + 32|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = $quantptr;
  $26 = (($25) + 64|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = Math_imul($24, $27)|0;
  $tmp2 = $28;
  $29 = $tmp0;
  $30 = $tmp2;
  $31 = (($29) + ($30))|0;
  $32 = $31 << 2;
  $tmp10 = $32;
  $33 = $tmp0;
  $34 = $tmp2;
  $35 = (($33) - ($34))|0;
  $36 = $35 << 2;
  $tmp12 = $36;
  $37 = $inptr;
  $38 = (($37) + 16|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = $quantptr;
  $42 = (($41) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = Math_imul($40, $43)|0;
  $z2 = $44;
  $45 = $inptr;
  $46 = (($45) + 48|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = $quantptr;
  $50 = (($49) + 96|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($48, $51)|0;
  $z3 = $52;
  $53 = $z2;
  $54 = $z3;
  $55 = (($53) + ($54))|0;
  $56 = ($55*4433)|0;
  $z1 = $56;
  $57 = $z1;
  $58 = (($57) + 1024)|0;
  $z1 = $58;
  $59 = $z1;
  $60 = $z2;
  $61 = ($60*6270)|0;
  $62 = (($59) + ($61))|0;
  $63 = $62 >> 11;
  $tmp0 = $63;
  $64 = $z1;
  $65 = $z3;
  $66 = ($65*15137)|0;
  $67 = (($64) - ($66))|0;
  $68 = $67 >> 11;
  $tmp2 = $68;
  $69 = $tmp10;
  $70 = $tmp0;
  $71 = (($69) + ($70))|0;
  $72 = $wsptr;
  HEAP32[$72>>2] = $71;
  $73 = $tmp10;
  $74 = $tmp0;
  $75 = (($73) - ($74))|0;
  $76 = $wsptr;
  $77 = (($76) + 48|0);
  HEAP32[$77>>2] = $75;
  $78 = $tmp12;
  $79 = $tmp2;
  $80 = (($78) + ($79))|0;
  $81 = $wsptr;
  $82 = (($81) + 16|0);
  HEAP32[$82>>2] = $80;
  $83 = $tmp12;
  $84 = $tmp2;
  $85 = (($83) - ($84))|0;
  $86 = $wsptr;
  $87 = (($86) + 32|0);
  HEAP32[$87>>2] = $85;
  $88 = $ctr;
  $89 = (($88) + 1)|0;
  $ctr = $89;
  $90 = $inptr;
  $91 = (($90) + 2|0);
  $inptr = $91;
  $92 = $quantptr;
  $93 = (($92) + 4|0);
  $quantptr = $93;
  $94 = $wsptr;
  $95 = (($94) + 4|0);
  $wsptr = $95;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $96 = $ctr;
  $97 = ($96|0)<(4);
  if (!($97)) {
   break;
  }
  $98 = $ctr;
  $99 = $3;
  $100 = (($99) + ($98<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $4;
  $103 = (($101) + ($102)|0);
  $outptr = $103;
  $104 = $wsptr;
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 16)|0;
  $tmp0 = $106;
  $107 = $wsptr;
  $108 = (($107) + 8|0);
  $109 = HEAP32[$108>>2]|0;
  $tmp2 = $109;
  $110 = $tmp0;
  $111 = $tmp2;
  $112 = (($110) + ($111))|0;
  $113 = $112 << 13;
  $tmp10 = $113;
  $114 = $tmp0;
  $115 = $tmp2;
  $116 = (($114) - ($115))|0;
  $117 = $116 << 13;
  $tmp12 = $117;
  $118 = $wsptr;
  $119 = (($118) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  $z2 = $120;
  $121 = $wsptr;
  $122 = (($121) + 12|0);
  $123 = HEAP32[$122>>2]|0;
  $z3 = $123;
  $124 = $z2;
  $125 = $z3;
  $126 = (($124) + ($125))|0;
  $127 = ($126*4433)|0;
  $z1 = $127;
  $128 = $z1;
  $129 = $z2;
  $130 = ($129*6270)|0;
  $131 = (($128) + ($130))|0;
  $tmp0 = $131;
  $132 = $z1;
  $133 = $z3;
  $134 = ($133*15137)|0;
  $135 = (($132) - ($134))|0;
  $tmp2 = $135;
  $136 = $tmp10;
  $137 = $tmp0;
  $138 = (($136) + ($137))|0;
  $139 = $138 >> 18;
  $140 = $139 & 1023;
  $141 = $range_limit;
  $142 = (($141) + ($140)|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = $outptr;
  HEAP8[$144>>0] = $143;
  $145 = $tmp10;
  $146 = $tmp0;
  $147 = (($145) - ($146))|0;
  $148 = $147 >> 18;
  $149 = $148 & 1023;
  $150 = $range_limit;
  $151 = (($150) + ($149)|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $outptr;
  $154 = (($153) + 3|0);
  HEAP8[$154>>0] = $152;
  $155 = $tmp12;
  $156 = $tmp2;
  $157 = (($155) + ($156))|0;
  $158 = $157 >> 18;
  $159 = $158 & 1023;
  $160 = $range_limit;
  $161 = (($160) + ($159)|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = $outptr;
  $164 = (($163) + 1|0);
  HEAP8[$164>>0] = $162;
  $165 = $tmp12;
  $166 = $tmp2;
  $167 = (($165) - ($166))|0;
  $168 = $167 >> 18;
  $169 = $168 & 1023;
  $170 = $range_limit;
  $171 = (($170) + ($169)|0);
  $172 = HEAP8[$171>>0]|0;
  $173 = $outptr;
  $174 = (($173) + 2|0);
  HEAP8[$174>>0] = $172;
  $175 = $wsptr;
  $176 = (($175) + 16|0);
  $wsptr = $176;
  $177 = $ctr;
  $178 = (($177) + 1)|0;
  $ctr = $178;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_3x3($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0;
 var $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp10 = 0, $tmp12 = 0, $tmp2 = 0, $workspace = 0, $wsptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(3);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp0 = $20;
  $21 = $tmp0;
  $22 = $21 << 13;
  $tmp0 = $22;
  $23 = $tmp0;
  $24 = (($23) + 1024)|0;
  $tmp0 = $24;
  $25 = $inptr;
  $26 = (($25) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $tmp2 = $32;
  $33 = $tmp2;
  $34 = ($33*5793)|0;
  $tmp12 = $34;
  $35 = $tmp0;
  $36 = $tmp12;
  $37 = (($35) + ($36))|0;
  $tmp10 = $37;
  $38 = $tmp0;
  $39 = $tmp12;
  $40 = (($38) - ($39))|0;
  $41 = $tmp12;
  $42 = (($40) - ($41))|0;
  $tmp2 = $42;
  $43 = $inptr;
  $44 = (($43) + 16|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 << 16 >> 16;
  $47 = $quantptr;
  $48 = (($47) + 32|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = Math_imul($46, $49)|0;
  $tmp12 = $50;
  $51 = $tmp12;
  $52 = ($51*10033)|0;
  $tmp0 = $52;
  $53 = $tmp10;
  $54 = $tmp0;
  $55 = (($53) + ($54))|0;
  $56 = $55 >> 11;
  $57 = $wsptr;
  HEAP32[$57>>2] = $56;
  $58 = $tmp10;
  $59 = $tmp0;
  $60 = (($58) - ($59))|0;
  $61 = $60 >> 11;
  $62 = $wsptr;
  $63 = (($62) + 24|0);
  HEAP32[$63>>2] = $61;
  $64 = $tmp2;
  $65 = $64 >> 11;
  $66 = $wsptr;
  $67 = (($66) + 12|0);
  HEAP32[$67>>2] = $65;
  $68 = $ctr;
  $69 = (($68) + 1)|0;
  $ctr = $69;
  $70 = $inptr;
  $71 = (($70) + 2|0);
  $inptr = $71;
  $72 = $quantptr;
  $73 = (($72) + 4|0);
  $quantptr = $73;
  $74 = $wsptr;
  $75 = (($74) + 4|0);
  $wsptr = $75;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $76 = $ctr;
  $77 = ($76|0)<(3);
  if (!($77)) {
   break;
  }
  $78 = $ctr;
  $79 = $3;
  $80 = (($79) + ($78<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $4;
  $83 = (($81) + ($82)|0);
  $outptr = $83;
  $84 = $wsptr;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + 16)|0;
  $tmp0 = $86;
  $87 = $tmp0;
  $88 = $87 << 13;
  $tmp0 = $88;
  $89 = $wsptr;
  $90 = (($89) + 8|0);
  $91 = HEAP32[$90>>2]|0;
  $tmp2 = $91;
  $92 = $tmp2;
  $93 = ($92*5793)|0;
  $tmp12 = $93;
  $94 = $tmp0;
  $95 = $tmp12;
  $96 = (($94) + ($95))|0;
  $tmp10 = $96;
  $97 = $tmp0;
  $98 = $tmp12;
  $99 = (($97) - ($98))|0;
  $100 = $tmp12;
  $101 = (($99) - ($100))|0;
  $tmp2 = $101;
  $102 = $wsptr;
  $103 = (($102) + 4|0);
  $104 = HEAP32[$103>>2]|0;
  $tmp12 = $104;
  $105 = $tmp12;
  $106 = ($105*10033)|0;
  $tmp0 = $106;
  $107 = $tmp10;
  $108 = $tmp0;
  $109 = (($107) + ($108))|0;
  $110 = $109 >> 18;
  $111 = $110 & 1023;
  $112 = $range_limit;
  $113 = (($112) + ($111)|0);
  $114 = HEAP8[$113>>0]|0;
  $115 = $outptr;
  HEAP8[$115>>0] = $114;
  $116 = $tmp10;
  $117 = $tmp0;
  $118 = (($116) - ($117))|0;
  $119 = $118 >> 18;
  $120 = $119 & 1023;
  $121 = $range_limit;
  $122 = (($121) + ($120)|0);
  $123 = HEAP8[$122>>0]|0;
  $124 = $outptr;
  $125 = (($124) + 2|0);
  HEAP8[$125>>0] = $123;
  $126 = $tmp2;
  $127 = $126 >> 18;
  $128 = $127 & 1023;
  $129 = $range_limit;
  $130 = (($129) + ($128)|0);
  $131 = HEAP8[$130>>0]|0;
  $132 = $outptr;
  $133 = (($132) + 1|0);
  HEAP8[$133>>0] = $131;
  $134 = $wsptr;
  $135 = (($134) + 12|0);
  $wsptr = $135;
  $136 = $ctr;
  $137 = (($136) + 1)|0;
  $ctr = $137;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_2x2($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp2 = 0, $tmp3 = 0, $tmp4 = 0, $tmp5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $1;
 $10 = (($9) + 84|0);
 $11 = HEAP32[$10>>2]|0;
 $quantptr = $11;
 $12 = $2;
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = $quantptr;
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($14, $16)|0;
 $tmp4 = $17;
 $18 = $2;
 $19 = (($18) + 16|0);
 $20 = HEAP16[$19>>1]|0;
 $21 = $20 << 16 >> 16;
 $22 = $quantptr;
 $23 = (($22) + 32|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = Math_imul($21, $24)|0;
 $tmp5 = $25;
 $26 = $tmp4;
 $27 = (($26) + 4)|0;
 $tmp4 = $27;
 $28 = $tmp4;
 $29 = $tmp5;
 $30 = (($28) + ($29))|0;
 $tmp0 = $30;
 $31 = $tmp4;
 $32 = $tmp5;
 $33 = (($31) - ($32))|0;
 $tmp2 = $33;
 $34 = $2;
 $35 = (($34) + 2|0);
 $36 = HEAP16[$35>>1]|0;
 $37 = $36 << 16 >> 16;
 $38 = $quantptr;
 $39 = (($38) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = Math_imul($37, $40)|0;
 $tmp4 = $41;
 $42 = $2;
 $43 = (($42) + 18|0);
 $44 = HEAP16[$43>>1]|0;
 $45 = $44 << 16 >> 16;
 $46 = $quantptr;
 $47 = (($46) + 36|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = Math_imul($45, $48)|0;
 $tmp5 = $49;
 $50 = $tmp4;
 $51 = $tmp5;
 $52 = (($50) + ($51))|0;
 $tmp1 = $52;
 $53 = $tmp4;
 $54 = $tmp5;
 $55 = (($53) - ($54))|0;
 $tmp3 = $55;
 $56 = $3;
 $57 = HEAP32[$56>>2]|0;
 $58 = $4;
 $59 = (($57) + ($58)|0);
 $outptr = $59;
 $60 = $tmp0;
 $61 = $tmp1;
 $62 = (($60) + ($61))|0;
 $63 = $62 >> 3;
 $64 = $63 & 1023;
 $65 = $range_limit;
 $66 = (($65) + ($64)|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = $outptr;
 HEAP8[$68>>0] = $67;
 $69 = $tmp0;
 $70 = $tmp1;
 $71 = (($69) - ($70))|0;
 $72 = $71 >> 3;
 $73 = $72 & 1023;
 $74 = $range_limit;
 $75 = (($74) + ($73)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $outptr;
 $78 = (($77) + 1|0);
 HEAP8[$78>>0] = $76;
 $79 = $3;
 $80 = (($79) + 4|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $4;
 $83 = (($81) + ($82)|0);
 $outptr = $83;
 $84 = $tmp2;
 $85 = $tmp3;
 $86 = (($84) + ($85))|0;
 $87 = $86 >> 3;
 $88 = $87 & 1023;
 $89 = $range_limit;
 $90 = (($89) + ($88)|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $outptr;
 HEAP8[$92>>0] = $91;
 $93 = $tmp2;
 $94 = $tmp3;
 $95 = (($93) - ($94))|0;
 $96 = $95 >> 3;
 $97 = $96 & 1023;
 $98 = $range_limit;
 $99 = (($98) + ($97)|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = $outptr;
 $102 = (($101) + 1|0);
 HEAP8[$102>>0] = $100;
 STACKTOP = sp;return;
}
function _jpeg_idct_1x1($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dcval = 0, $quantptr = 0, $range_limit = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $1;
 $10 = (($9) + 84|0);
 $11 = HEAP32[$10>>2]|0;
 $quantptr = $11;
 $12 = $2;
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = $quantptr;
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($14, $16)|0;
 $dcval = $17;
 $18 = $dcval;
 $19 = (($18) + 4)|0;
 $20 = $19 >> 3;
 $dcval = $20;
 $21 = $dcval;
 $22 = $21 & 1023;
 $23 = $range_limit;
 $24 = (($23) + ($22)|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $4;
 $27 = $3;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + ($26)|0);
 HEAP8[$29>>0] = $25;
 STACKTOP = sp;return;
}
function _jpeg_idct_9x9($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp2 = 0, $tmp3 = 0, $workspace = 0;
 var $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp0 = $20;
  $21 = $tmp0;
  $22 = $21 << 13;
  $tmp0 = $22;
  $23 = $tmp0;
  $24 = (($23) + 1024)|0;
  $tmp0 = $24;
  $25 = $inptr;
  $26 = (($25) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z1 = $32;
  $33 = $inptr;
  $34 = (($33) + 64|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $quantptr;
  $38 = (($37) + 128|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $z2 = $40;
  $41 = $inptr;
  $42 = (($41) + 96|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = $quantptr;
  $46 = (($45) + 192|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = Math_imul($44, $47)|0;
  $z3 = $48;
  $49 = $z3;
  $50 = ($49*5793)|0;
  $tmp3 = $50;
  $51 = $tmp0;
  $52 = $tmp3;
  $53 = (($51) + ($52))|0;
  $tmp1 = $53;
  $54 = $tmp0;
  $55 = $tmp3;
  $56 = (($54) - ($55))|0;
  $57 = $tmp3;
  $58 = (($56) - ($57))|0;
  $tmp2 = $58;
  $59 = $z1;
  $60 = $z2;
  $61 = (($59) - ($60))|0;
  $62 = ($61*5793)|0;
  $tmp0 = $62;
  $63 = $tmp2;
  $64 = $tmp0;
  $65 = (($63) + ($64))|0;
  $tmp11 = $65;
  $66 = $tmp2;
  $67 = $tmp0;
  $68 = (($66) - ($67))|0;
  $69 = $tmp0;
  $70 = (($68) - ($69))|0;
  $tmp14 = $70;
  $71 = $z1;
  $72 = $z2;
  $73 = (($71) + ($72))|0;
  $74 = ($73*10887)|0;
  $tmp0 = $74;
  $75 = $z1;
  $76 = ($75*8875)|0;
  $tmp2 = $76;
  $77 = $z2;
  $78 = ($77*2012)|0;
  $tmp3 = $78;
  $79 = $tmp1;
  $80 = $tmp0;
  $81 = (($79) + ($80))|0;
  $82 = $tmp3;
  $83 = (($81) - ($82))|0;
  $tmp10 = $83;
  $84 = $tmp1;
  $85 = $tmp0;
  $86 = (($84) - ($85))|0;
  $87 = $tmp2;
  $88 = (($86) + ($87))|0;
  $tmp12 = $88;
  $89 = $tmp1;
  $90 = $tmp2;
  $91 = (($89) - ($90))|0;
  $92 = $tmp3;
  $93 = (($91) + ($92))|0;
  $tmp13 = $93;
  $94 = $inptr;
  $95 = (($94) + 16|0);
  $96 = HEAP16[$95>>1]|0;
  $97 = $96 << 16 >> 16;
  $98 = $quantptr;
  $99 = (($98) + 32|0);
  $100 = HEAP32[$99>>2]|0;
  $101 = Math_imul($97, $100)|0;
  $z1 = $101;
  $102 = $inptr;
  $103 = (($102) + 48|0);
  $104 = HEAP16[$103>>1]|0;
  $105 = $104 << 16 >> 16;
  $106 = $quantptr;
  $107 = (($106) + 96|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = Math_imul($105, $108)|0;
  $z2 = $109;
  $110 = $inptr;
  $111 = (($110) + 80|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112 << 16 >> 16;
  $114 = $quantptr;
  $115 = (($114) + 160|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = Math_imul($113, $116)|0;
  $z3 = $117;
  $118 = $inptr;
  $119 = (($118) + 112|0);
  $120 = HEAP16[$119>>1]|0;
  $121 = $120 << 16 >> 16;
  $122 = $quantptr;
  $123 = (($122) + 224|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = Math_imul($121, $124)|0;
  $z4 = $125;
  $126 = $z2;
  $127 = Math_imul($126, -10033)|0;
  $z2 = $127;
  $128 = $z1;
  $129 = $z3;
  $130 = (($128) + ($129))|0;
  $131 = ($130*7447)|0;
  $tmp2 = $131;
  $132 = $z1;
  $133 = $z4;
  $134 = (($132) + ($133))|0;
  $135 = ($134*3962)|0;
  $tmp3 = $135;
  $136 = $tmp2;
  $137 = $tmp3;
  $138 = (($136) + ($137))|0;
  $139 = $z2;
  $140 = (($138) - ($139))|0;
  $tmp0 = $140;
  $141 = $z3;
  $142 = $z4;
  $143 = (($141) - ($142))|0;
  $144 = ($143*11409)|0;
  $tmp1 = $144;
  $145 = $z2;
  $146 = $tmp1;
  $147 = (($145) - ($146))|0;
  $148 = $tmp2;
  $149 = (($148) + ($147))|0;
  $tmp2 = $149;
  $150 = $z2;
  $151 = $tmp1;
  $152 = (($150) + ($151))|0;
  $153 = $tmp3;
  $154 = (($153) + ($152))|0;
  $tmp3 = $154;
  $155 = $z1;
  $156 = $z3;
  $157 = (($155) - ($156))|0;
  $158 = $z4;
  $159 = (($157) - ($158))|0;
  $160 = ($159*10033)|0;
  $tmp1 = $160;
  $161 = $tmp10;
  $162 = $tmp0;
  $163 = (($161) + ($162))|0;
  $164 = $163 >> 11;
  $165 = $wsptr;
  HEAP32[$165>>2] = $164;
  $166 = $tmp10;
  $167 = $tmp0;
  $168 = (($166) - ($167))|0;
  $169 = $168 >> 11;
  $170 = $wsptr;
  $171 = (($170) + 256|0);
  HEAP32[$171>>2] = $169;
  $172 = $tmp11;
  $173 = $tmp1;
  $174 = (($172) + ($173))|0;
  $175 = $174 >> 11;
  $176 = $wsptr;
  $177 = (($176) + 32|0);
  HEAP32[$177>>2] = $175;
  $178 = $tmp11;
  $179 = $tmp1;
  $180 = (($178) - ($179))|0;
  $181 = $180 >> 11;
  $182 = $wsptr;
  $183 = (($182) + 224|0);
  HEAP32[$183>>2] = $181;
  $184 = $tmp12;
  $185 = $tmp2;
  $186 = (($184) + ($185))|0;
  $187 = $186 >> 11;
  $188 = $wsptr;
  $189 = (($188) + 64|0);
  HEAP32[$189>>2] = $187;
  $190 = $tmp12;
  $191 = $tmp2;
  $192 = (($190) - ($191))|0;
  $193 = $192 >> 11;
  $194 = $wsptr;
  $195 = (($194) + 192|0);
  HEAP32[$195>>2] = $193;
  $196 = $tmp13;
  $197 = $tmp3;
  $198 = (($196) + ($197))|0;
  $199 = $198 >> 11;
  $200 = $wsptr;
  $201 = (($200) + 96|0);
  HEAP32[$201>>2] = $199;
  $202 = $tmp13;
  $203 = $tmp3;
  $204 = (($202) - ($203))|0;
  $205 = $204 >> 11;
  $206 = $wsptr;
  $207 = (($206) + 160|0);
  HEAP32[$207>>2] = $205;
  $208 = $tmp14;
  $209 = $208 >> 11;
  $210 = $wsptr;
  $211 = (($210) + 128|0);
  HEAP32[$211>>2] = $209;
  $212 = $ctr;
  $213 = (($212) + 1)|0;
  $ctr = $213;
  $214 = $inptr;
  $215 = (($214) + 2|0);
  $inptr = $215;
  $216 = $quantptr;
  $217 = (($216) + 4|0);
  $quantptr = $217;
  $218 = $wsptr;
  $219 = (($218) + 4|0);
  $wsptr = $219;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $220 = $ctr;
  $221 = ($220|0)<(9);
  if (!($221)) {
   break;
  }
  $222 = $ctr;
  $223 = $3;
  $224 = (($223) + ($222<<2)|0);
  $225 = HEAP32[$224>>2]|0;
  $226 = $4;
  $227 = (($225) + ($226)|0);
  $outptr = $227;
  $228 = $wsptr;
  $229 = HEAP32[$228>>2]|0;
  $230 = (($229) + 16)|0;
  $tmp0 = $230;
  $231 = $tmp0;
  $232 = $231 << 13;
  $tmp0 = $232;
  $233 = $wsptr;
  $234 = (($233) + 8|0);
  $235 = HEAP32[$234>>2]|0;
  $z1 = $235;
  $236 = $wsptr;
  $237 = (($236) + 16|0);
  $238 = HEAP32[$237>>2]|0;
  $z2 = $238;
  $239 = $wsptr;
  $240 = (($239) + 24|0);
  $241 = HEAP32[$240>>2]|0;
  $z3 = $241;
  $242 = $z3;
  $243 = ($242*5793)|0;
  $tmp3 = $243;
  $244 = $tmp0;
  $245 = $tmp3;
  $246 = (($244) + ($245))|0;
  $tmp1 = $246;
  $247 = $tmp0;
  $248 = $tmp3;
  $249 = (($247) - ($248))|0;
  $250 = $tmp3;
  $251 = (($249) - ($250))|0;
  $tmp2 = $251;
  $252 = $z1;
  $253 = $z2;
  $254 = (($252) - ($253))|0;
  $255 = ($254*5793)|0;
  $tmp0 = $255;
  $256 = $tmp2;
  $257 = $tmp0;
  $258 = (($256) + ($257))|0;
  $tmp11 = $258;
  $259 = $tmp2;
  $260 = $tmp0;
  $261 = (($259) - ($260))|0;
  $262 = $tmp0;
  $263 = (($261) - ($262))|0;
  $tmp14 = $263;
  $264 = $z1;
  $265 = $z2;
  $266 = (($264) + ($265))|0;
  $267 = ($266*10887)|0;
  $tmp0 = $267;
  $268 = $z1;
  $269 = ($268*8875)|0;
  $tmp2 = $269;
  $270 = $z2;
  $271 = ($270*2012)|0;
  $tmp3 = $271;
  $272 = $tmp1;
  $273 = $tmp0;
  $274 = (($272) + ($273))|0;
  $275 = $tmp3;
  $276 = (($274) - ($275))|0;
  $tmp10 = $276;
  $277 = $tmp1;
  $278 = $tmp0;
  $279 = (($277) - ($278))|0;
  $280 = $tmp2;
  $281 = (($279) + ($280))|0;
  $tmp12 = $281;
  $282 = $tmp1;
  $283 = $tmp2;
  $284 = (($282) - ($283))|0;
  $285 = $tmp3;
  $286 = (($284) + ($285))|0;
  $tmp13 = $286;
  $287 = $wsptr;
  $288 = (($287) + 4|0);
  $289 = HEAP32[$288>>2]|0;
  $z1 = $289;
  $290 = $wsptr;
  $291 = (($290) + 12|0);
  $292 = HEAP32[$291>>2]|0;
  $z2 = $292;
  $293 = $wsptr;
  $294 = (($293) + 20|0);
  $295 = HEAP32[$294>>2]|0;
  $z3 = $295;
  $296 = $wsptr;
  $297 = (($296) + 28|0);
  $298 = HEAP32[$297>>2]|0;
  $z4 = $298;
  $299 = $z2;
  $300 = Math_imul($299, -10033)|0;
  $z2 = $300;
  $301 = $z1;
  $302 = $z3;
  $303 = (($301) + ($302))|0;
  $304 = ($303*7447)|0;
  $tmp2 = $304;
  $305 = $z1;
  $306 = $z4;
  $307 = (($305) + ($306))|0;
  $308 = ($307*3962)|0;
  $tmp3 = $308;
  $309 = $tmp2;
  $310 = $tmp3;
  $311 = (($309) + ($310))|0;
  $312 = $z2;
  $313 = (($311) - ($312))|0;
  $tmp0 = $313;
  $314 = $z3;
  $315 = $z4;
  $316 = (($314) - ($315))|0;
  $317 = ($316*11409)|0;
  $tmp1 = $317;
  $318 = $z2;
  $319 = $tmp1;
  $320 = (($318) - ($319))|0;
  $321 = $tmp2;
  $322 = (($321) + ($320))|0;
  $tmp2 = $322;
  $323 = $z2;
  $324 = $tmp1;
  $325 = (($323) + ($324))|0;
  $326 = $tmp3;
  $327 = (($326) + ($325))|0;
  $tmp3 = $327;
  $328 = $z1;
  $329 = $z3;
  $330 = (($328) - ($329))|0;
  $331 = $z4;
  $332 = (($330) - ($331))|0;
  $333 = ($332*10033)|0;
  $tmp1 = $333;
  $334 = $tmp10;
  $335 = $tmp0;
  $336 = (($334) + ($335))|0;
  $337 = $336 >> 18;
  $338 = $337 & 1023;
  $339 = $range_limit;
  $340 = (($339) + ($338)|0);
  $341 = HEAP8[$340>>0]|0;
  $342 = $outptr;
  HEAP8[$342>>0] = $341;
  $343 = $tmp10;
  $344 = $tmp0;
  $345 = (($343) - ($344))|0;
  $346 = $345 >> 18;
  $347 = $346 & 1023;
  $348 = $range_limit;
  $349 = (($348) + ($347)|0);
  $350 = HEAP8[$349>>0]|0;
  $351 = $outptr;
  $352 = (($351) + 8|0);
  HEAP8[$352>>0] = $350;
  $353 = $tmp11;
  $354 = $tmp1;
  $355 = (($353) + ($354))|0;
  $356 = $355 >> 18;
  $357 = $356 & 1023;
  $358 = $range_limit;
  $359 = (($358) + ($357)|0);
  $360 = HEAP8[$359>>0]|0;
  $361 = $outptr;
  $362 = (($361) + 1|0);
  HEAP8[$362>>0] = $360;
  $363 = $tmp11;
  $364 = $tmp1;
  $365 = (($363) - ($364))|0;
  $366 = $365 >> 18;
  $367 = $366 & 1023;
  $368 = $range_limit;
  $369 = (($368) + ($367)|0);
  $370 = HEAP8[$369>>0]|0;
  $371 = $outptr;
  $372 = (($371) + 7|0);
  HEAP8[$372>>0] = $370;
  $373 = $tmp12;
  $374 = $tmp2;
  $375 = (($373) + ($374))|0;
  $376 = $375 >> 18;
  $377 = $376 & 1023;
  $378 = $range_limit;
  $379 = (($378) + ($377)|0);
  $380 = HEAP8[$379>>0]|0;
  $381 = $outptr;
  $382 = (($381) + 2|0);
  HEAP8[$382>>0] = $380;
  $383 = $tmp12;
  $384 = $tmp2;
  $385 = (($383) - ($384))|0;
  $386 = $385 >> 18;
  $387 = $386 & 1023;
  $388 = $range_limit;
  $389 = (($388) + ($387)|0);
  $390 = HEAP8[$389>>0]|0;
  $391 = $outptr;
  $392 = (($391) + 6|0);
  HEAP8[$392>>0] = $390;
  $393 = $tmp13;
  $394 = $tmp3;
  $395 = (($393) + ($394))|0;
  $396 = $395 >> 18;
  $397 = $396 & 1023;
  $398 = $range_limit;
  $399 = (($398) + ($397)|0);
  $400 = HEAP8[$399>>0]|0;
  $401 = $outptr;
  $402 = (($401) + 3|0);
  HEAP8[$402>>0] = $400;
  $403 = $tmp13;
  $404 = $tmp3;
  $405 = (($403) - ($404))|0;
  $406 = $405 >> 18;
  $407 = $406 & 1023;
  $408 = $range_limit;
  $409 = (($408) + ($407)|0);
  $410 = HEAP8[$409>>0]|0;
  $411 = $outptr;
  $412 = (($411) + 5|0);
  HEAP8[$412>>0] = $410;
  $413 = $tmp14;
  $414 = $413 >> 18;
  $415 = $414 & 1023;
  $416 = $range_limit;
  $417 = (($416) + ($415)|0);
  $418 = HEAP8[$417>>0]|0;
  $419 = $outptr;
  $420 = (($419) + 4|0);
  HEAP8[$420>>0] = $418;
  $421 = $wsptr;
  $422 = (($421) + 32|0);
  $wsptr = $422;
  $423 = $ctr;
  $424 = (($423) + 1)|0;
  $ctr = $424;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_10x10($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0;
 var $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, $z5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $z3 = $20;
  $21 = $z3;
  $22 = $21 << 13;
  $z3 = $22;
  $23 = $z3;
  $24 = (($23) + 1024)|0;
  $z3 = $24;
  $25 = $inptr;
  $26 = (($25) + 64|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z4 = $32;
  $33 = $z4;
  $34 = ($33*9373)|0;
  $z1 = $34;
  $35 = $z4;
  $36 = ($35*3580)|0;
  $z2 = $36;
  $37 = $z3;
  $38 = $z1;
  $39 = (($37) + ($38))|0;
  $tmp10 = $39;
  $40 = $z3;
  $41 = $z2;
  $42 = (($40) - ($41))|0;
  $tmp11 = $42;
  $43 = $z3;
  $44 = $z1;
  $45 = $z2;
  $46 = (($44) - ($45))|0;
  $47 = $46 << 1;
  $48 = (($43) - ($47))|0;
  $49 = $48 >> 11;
  $tmp22 = $49;
  $50 = $inptr;
  $51 = (($50) + 32|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = $quantptr;
  $55 = (($54) + 64|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = Math_imul($53, $56)|0;
  $z2 = $57;
  $58 = $inptr;
  $59 = (($58) + 96|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = $quantptr;
  $63 = (($62) + 192|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = Math_imul($61, $64)|0;
  $z3 = $65;
  $66 = $z2;
  $67 = $z3;
  $68 = (($66) + ($67))|0;
  $69 = ($68*6810)|0;
  $z1 = $69;
  $70 = $z1;
  $71 = $z2;
  $72 = ($71*4209)|0;
  $73 = (($70) + ($72))|0;
  $tmp12 = $73;
  $74 = $z1;
  $75 = $z3;
  $76 = ($75*17828)|0;
  $77 = (($74) - ($76))|0;
  $tmp13 = $77;
  $78 = $tmp10;
  $79 = $tmp12;
  $80 = (($78) + ($79))|0;
  $tmp20 = $80;
  $81 = $tmp10;
  $82 = $tmp12;
  $83 = (($81) - ($82))|0;
  $tmp24 = $83;
  $84 = $tmp11;
  $85 = $tmp13;
  $86 = (($84) + ($85))|0;
  $tmp21 = $86;
  $87 = $tmp11;
  $88 = $tmp13;
  $89 = (($87) - ($88))|0;
  $tmp23 = $89;
  $90 = $inptr;
  $91 = (($90) + 16|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92 << 16 >> 16;
  $94 = $quantptr;
  $95 = (($94) + 32|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = Math_imul($93, $96)|0;
  $z1 = $97;
  $98 = $inptr;
  $99 = (($98) + 48|0);
  $100 = HEAP16[$99>>1]|0;
  $101 = $100 << 16 >> 16;
  $102 = $quantptr;
  $103 = (($102) + 96|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = Math_imul($101, $104)|0;
  $z2 = $105;
  $106 = $inptr;
  $107 = (($106) + 80|0);
  $108 = HEAP16[$107>>1]|0;
  $109 = $108 << 16 >> 16;
  $110 = $quantptr;
  $111 = (($110) + 160|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = Math_imul($109, $112)|0;
  $z3 = $113;
  $114 = $inptr;
  $115 = (($114) + 112|0);
  $116 = HEAP16[$115>>1]|0;
  $117 = $116 << 16 >> 16;
  $118 = $quantptr;
  $119 = (($118) + 224|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = Math_imul($117, $120)|0;
  $z4 = $121;
  $122 = $z2;
  $123 = $z4;
  $124 = (($122) + ($123))|0;
  $tmp11 = $124;
  $125 = $z2;
  $126 = $z4;
  $127 = (($125) - ($126))|0;
  $tmp13 = $127;
  $128 = $tmp13;
  $129 = ($128*2531)|0;
  $tmp12 = $129;
  $130 = $z3;
  $131 = $130 << 13;
  $z5 = $131;
  $132 = $tmp11;
  $133 = ($132*7791)|0;
  $z2 = $133;
  $134 = $z5;
  $135 = $tmp12;
  $136 = (($134) + ($135))|0;
  $z4 = $136;
  $137 = $z1;
  $138 = ($137*11443)|0;
  $139 = $z2;
  $140 = (($138) + ($139))|0;
  $141 = $z4;
  $142 = (($140) + ($141))|0;
  $tmp10 = $142;
  $143 = $z1;
  $144 = ($143*1812)|0;
  $145 = $z2;
  $146 = (($144) - ($145))|0;
  $147 = $z4;
  $148 = (($146) + ($147))|0;
  $tmp14 = $148;
  $149 = $tmp11;
  $150 = ($149*4815)|0;
  $z2 = $150;
  $151 = $z5;
  $152 = $tmp12;
  $153 = (($151) - ($152))|0;
  $154 = $tmp13;
  $155 = $154 << 12;
  $156 = (($153) - ($155))|0;
  $z4 = $156;
  $157 = $z1;
  $158 = $tmp13;
  $159 = (($157) - ($158))|0;
  $160 = $z3;
  $161 = (($159) - ($160))|0;
  $162 = $161 << 2;
  $tmp12 = $162;
  $163 = $z1;
  $164 = ($163*10323)|0;
  $165 = $z2;
  $166 = (($164) - ($165))|0;
  $167 = $z4;
  $168 = (($166) - ($167))|0;
  $tmp11 = $168;
  $169 = $z1;
  $170 = ($169*5260)|0;
  $171 = $z2;
  $172 = (($170) - ($171))|0;
  $173 = $z4;
  $174 = (($172) + ($173))|0;
  $tmp13 = $174;
  $175 = $tmp20;
  $176 = $tmp10;
  $177 = (($175) + ($176))|0;
  $178 = $177 >> 11;
  $179 = $wsptr;
  HEAP32[$179>>2] = $178;
  $180 = $tmp20;
  $181 = $tmp10;
  $182 = (($180) - ($181))|0;
  $183 = $182 >> 11;
  $184 = $wsptr;
  $185 = (($184) + 288|0);
  HEAP32[$185>>2] = $183;
  $186 = $tmp21;
  $187 = $tmp11;
  $188 = (($186) + ($187))|0;
  $189 = $188 >> 11;
  $190 = $wsptr;
  $191 = (($190) + 32|0);
  HEAP32[$191>>2] = $189;
  $192 = $tmp21;
  $193 = $tmp11;
  $194 = (($192) - ($193))|0;
  $195 = $194 >> 11;
  $196 = $wsptr;
  $197 = (($196) + 256|0);
  HEAP32[$197>>2] = $195;
  $198 = $tmp22;
  $199 = $tmp12;
  $200 = (($198) + ($199))|0;
  $201 = $wsptr;
  $202 = (($201) + 64|0);
  HEAP32[$202>>2] = $200;
  $203 = $tmp22;
  $204 = $tmp12;
  $205 = (($203) - ($204))|0;
  $206 = $wsptr;
  $207 = (($206) + 224|0);
  HEAP32[$207>>2] = $205;
  $208 = $tmp23;
  $209 = $tmp13;
  $210 = (($208) + ($209))|0;
  $211 = $210 >> 11;
  $212 = $wsptr;
  $213 = (($212) + 96|0);
  HEAP32[$213>>2] = $211;
  $214 = $tmp23;
  $215 = $tmp13;
  $216 = (($214) - ($215))|0;
  $217 = $216 >> 11;
  $218 = $wsptr;
  $219 = (($218) + 192|0);
  HEAP32[$219>>2] = $217;
  $220 = $tmp24;
  $221 = $tmp14;
  $222 = (($220) + ($221))|0;
  $223 = $222 >> 11;
  $224 = $wsptr;
  $225 = (($224) + 128|0);
  HEAP32[$225>>2] = $223;
  $226 = $tmp24;
  $227 = $tmp14;
  $228 = (($226) - ($227))|0;
  $229 = $228 >> 11;
  $230 = $wsptr;
  $231 = (($230) + 160|0);
  HEAP32[$231>>2] = $229;
  $232 = $ctr;
  $233 = (($232) + 1)|0;
  $ctr = $233;
  $234 = $inptr;
  $235 = (($234) + 2|0);
  $inptr = $235;
  $236 = $quantptr;
  $237 = (($236) + 4|0);
  $quantptr = $237;
  $238 = $wsptr;
  $239 = (($238) + 4|0);
  $wsptr = $239;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $240 = $ctr;
  $241 = ($240|0)<(10);
  if (!($241)) {
   break;
  }
  $242 = $ctr;
  $243 = $3;
  $244 = (($243) + ($242<<2)|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = $4;
  $247 = (($245) + ($246)|0);
  $outptr = $247;
  $248 = $wsptr;
  $249 = HEAP32[$248>>2]|0;
  $250 = (($249) + 16)|0;
  $z3 = $250;
  $251 = $z3;
  $252 = $251 << 13;
  $z3 = $252;
  $253 = $wsptr;
  $254 = (($253) + 16|0);
  $255 = HEAP32[$254>>2]|0;
  $z4 = $255;
  $256 = $z4;
  $257 = ($256*9373)|0;
  $z1 = $257;
  $258 = $z4;
  $259 = ($258*3580)|0;
  $z2 = $259;
  $260 = $z3;
  $261 = $z1;
  $262 = (($260) + ($261))|0;
  $tmp10 = $262;
  $263 = $z3;
  $264 = $z2;
  $265 = (($263) - ($264))|0;
  $tmp11 = $265;
  $266 = $z3;
  $267 = $z1;
  $268 = $z2;
  $269 = (($267) - ($268))|0;
  $270 = $269 << 1;
  $271 = (($266) - ($270))|0;
  $tmp22 = $271;
  $272 = $wsptr;
  $273 = (($272) + 8|0);
  $274 = HEAP32[$273>>2]|0;
  $z2 = $274;
  $275 = $wsptr;
  $276 = (($275) + 24|0);
  $277 = HEAP32[$276>>2]|0;
  $z3 = $277;
  $278 = $z2;
  $279 = $z3;
  $280 = (($278) + ($279))|0;
  $281 = ($280*6810)|0;
  $z1 = $281;
  $282 = $z1;
  $283 = $z2;
  $284 = ($283*4209)|0;
  $285 = (($282) + ($284))|0;
  $tmp12 = $285;
  $286 = $z1;
  $287 = $z3;
  $288 = ($287*17828)|0;
  $289 = (($286) - ($288))|0;
  $tmp13 = $289;
  $290 = $tmp10;
  $291 = $tmp12;
  $292 = (($290) + ($291))|0;
  $tmp20 = $292;
  $293 = $tmp10;
  $294 = $tmp12;
  $295 = (($293) - ($294))|0;
  $tmp24 = $295;
  $296 = $tmp11;
  $297 = $tmp13;
  $298 = (($296) + ($297))|0;
  $tmp21 = $298;
  $299 = $tmp11;
  $300 = $tmp13;
  $301 = (($299) - ($300))|0;
  $tmp23 = $301;
  $302 = $wsptr;
  $303 = (($302) + 4|0);
  $304 = HEAP32[$303>>2]|0;
  $z1 = $304;
  $305 = $wsptr;
  $306 = (($305) + 12|0);
  $307 = HEAP32[$306>>2]|0;
  $z2 = $307;
  $308 = $wsptr;
  $309 = (($308) + 20|0);
  $310 = HEAP32[$309>>2]|0;
  $z3 = $310;
  $311 = $z3;
  $312 = $311 << 13;
  $z3 = $312;
  $313 = $wsptr;
  $314 = (($313) + 28|0);
  $315 = HEAP32[$314>>2]|0;
  $z4 = $315;
  $316 = $z2;
  $317 = $z4;
  $318 = (($316) + ($317))|0;
  $tmp11 = $318;
  $319 = $z2;
  $320 = $z4;
  $321 = (($319) - ($320))|0;
  $tmp13 = $321;
  $322 = $tmp13;
  $323 = ($322*2531)|0;
  $tmp12 = $323;
  $324 = $tmp11;
  $325 = ($324*7791)|0;
  $z2 = $325;
  $326 = $z3;
  $327 = $tmp12;
  $328 = (($326) + ($327))|0;
  $z4 = $328;
  $329 = $z1;
  $330 = ($329*11443)|0;
  $331 = $z2;
  $332 = (($330) + ($331))|0;
  $333 = $z4;
  $334 = (($332) + ($333))|0;
  $tmp10 = $334;
  $335 = $z1;
  $336 = ($335*1812)|0;
  $337 = $z2;
  $338 = (($336) - ($337))|0;
  $339 = $z4;
  $340 = (($338) + ($339))|0;
  $tmp14 = $340;
  $341 = $tmp11;
  $342 = ($341*4815)|0;
  $z2 = $342;
  $343 = $z3;
  $344 = $tmp12;
  $345 = (($343) - ($344))|0;
  $346 = $tmp13;
  $347 = $346 << 12;
  $348 = (($345) - ($347))|0;
  $z4 = $348;
  $349 = $z1;
  $350 = $tmp13;
  $351 = (($349) - ($350))|0;
  $352 = $351 << 13;
  $353 = $z3;
  $354 = (($352) - ($353))|0;
  $tmp12 = $354;
  $355 = $z1;
  $356 = ($355*10323)|0;
  $357 = $z2;
  $358 = (($356) - ($357))|0;
  $359 = $z4;
  $360 = (($358) - ($359))|0;
  $tmp11 = $360;
  $361 = $z1;
  $362 = ($361*5260)|0;
  $363 = $z2;
  $364 = (($362) - ($363))|0;
  $365 = $z4;
  $366 = (($364) + ($365))|0;
  $tmp13 = $366;
  $367 = $tmp20;
  $368 = $tmp10;
  $369 = (($367) + ($368))|0;
  $370 = $369 >> 18;
  $371 = $370 & 1023;
  $372 = $range_limit;
  $373 = (($372) + ($371)|0);
  $374 = HEAP8[$373>>0]|0;
  $375 = $outptr;
  HEAP8[$375>>0] = $374;
  $376 = $tmp20;
  $377 = $tmp10;
  $378 = (($376) - ($377))|0;
  $379 = $378 >> 18;
  $380 = $379 & 1023;
  $381 = $range_limit;
  $382 = (($381) + ($380)|0);
  $383 = HEAP8[$382>>0]|0;
  $384 = $outptr;
  $385 = (($384) + 9|0);
  HEAP8[$385>>0] = $383;
  $386 = $tmp21;
  $387 = $tmp11;
  $388 = (($386) + ($387))|0;
  $389 = $388 >> 18;
  $390 = $389 & 1023;
  $391 = $range_limit;
  $392 = (($391) + ($390)|0);
  $393 = HEAP8[$392>>0]|0;
  $394 = $outptr;
  $395 = (($394) + 1|0);
  HEAP8[$395>>0] = $393;
  $396 = $tmp21;
  $397 = $tmp11;
  $398 = (($396) - ($397))|0;
  $399 = $398 >> 18;
  $400 = $399 & 1023;
  $401 = $range_limit;
  $402 = (($401) + ($400)|0);
  $403 = HEAP8[$402>>0]|0;
  $404 = $outptr;
  $405 = (($404) + 8|0);
  HEAP8[$405>>0] = $403;
  $406 = $tmp22;
  $407 = $tmp12;
  $408 = (($406) + ($407))|0;
  $409 = $408 >> 18;
  $410 = $409 & 1023;
  $411 = $range_limit;
  $412 = (($411) + ($410)|0);
  $413 = HEAP8[$412>>0]|0;
  $414 = $outptr;
  $415 = (($414) + 2|0);
  HEAP8[$415>>0] = $413;
  $416 = $tmp22;
  $417 = $tmp12;
  $418 = (($416) - ($417))|0;
  $419 = $418 >> 18;
  $420 = $419 & 1023;
  $421 = $range_limit;
  $422 = (($421) + ($420)|0);
  $423 = HEAP8[$422>>0]|0;
  $424 = $outptr;
  $425 = (($424) + 7|0);
  HEAP8[$425>>0] = $423;
  $426 = $tmp23;
  $427 = $tmp13;
  $428 = (($426) + ($427))|0;
  $429 = $428 >> 18;
  $430 = $429 & 1023;
  $431 = $range_limit;
  $432 = (($431) + ($430)|0);
  $433 = HEAP8[$432>>0]|0;
  $434 = $outptr;
  $435 = (($434) + 3|0);
  HEAP8[$435>>0] = $433;
  $436 = $tmp23;
  $437 = $tmp13;
  $438 = (($436) - ($437))|0;
  $439 = $438 >> 18;
  $440 = $439 & 1023;
  $441 = $range_limit;
  $442 = (($441) + ($440)|0);
  $443 = HEAP8[$442>>0]|0;
  $444 = $outptr;
  $445 = (($444) + 6|0);
  HEAP8[$445>>0] = $443;
  $446 = $tmp24;
  $447 = $tmp14;
  $448 = (($446) + ($447))|0;
  $449 = $448 >> 18;
  $450 = $449 & 1023;
  $451 = $range_limit;
  $452 = (($451) + ($450)|0);
  $453 = HEAP8[$452>>0]|0;
  $454 = $outptr;
  $455 = (($454) + 4|0);
  HEAP8[$455>>0] = $453;
  $456 = $tmp24;
  $457 = $tmp14;
  $458 = (($456) - ($457))|0;
  $459 = $458 >> 18;
  $460 = $459 & 1023;
  $461 = $range_limit;
  $462 = (($461) + ($460)|0);
  $463 = HEAP8[$462>>0]|0;
  $464 = $outptr;
  $465 = (($464) + 5|0);
  HEAP8[$465>>0] = $463;
  $466 = $wsptr;
  $467 = (($466) + 32|0);
  $wsptr = $467;
  $468 = $ctr;
  $469 = (($468) + 1)|0;
  $ctr = $469;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_11x11($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp10 = 0, $tmp11 = 0;
 var $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp10 = $20;
  $21 = $tmp10;
  $22 = $21 << 13;
  $tmp10 = $22;
  $23 = $tmp10;
  $24 = (($23) + 1024)|0;
  $tmp10 = $24;
  $25 = $inptr;
  $26 = (($25) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z1 = $32;
  $33 = $inptr;
  $34 = (($33) + 64|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $quantptr;
  $38 = (($37) + 128|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $z2 = $40;
  $41 = $inptr;
  $42 = (($41) + 96|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = $quantptr;
  $46 = (($45) + 192|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = Math_imul($44, $47)|0;
  $z3 = $48;
  $49 = $z2;
  $50 = $z3;
  $51 = (($49) - ($50))|0;
  $52 = ($51*20862)|0;
  $tmp20 = $52;
  $53 = $z2;
  $54 = $z1;
  $55 = (($53) - ($54))|0;
  $56 = ($55*3529)|0;
  $tmp23 = $56;
  $57 = $z1;
  $58 = $z3;
  $59 = (($57) + ($58))|0;
  $z4 = $59;
  $60 = $z4;
  $61 = Math_imul($60, -9467)|0;
  $tmp24 = $61;
  $62 = $z2;
  $63 = $z4;
  $64 = (($63) - ($62))|0;
  $z4 = $64;
  $65 = $tmp10;
  $66 = $z4;
  $67 = ($66*11116)|0;
  $68 = (($65) + ($67))|0;
  $tmp25 = $68;
  $69 = $tmp20;
  $70 = $tmp23;
  $71 = (($69) + ($70))|0;
  $72 = $tmp25;
  $73 = (($71) + ($72))|0;
  $74 = $z2;
  $75 = ($74*14924)|0;
  $76 = (($73) - ($75))|0;
  $tmp21 = $76;
  $77 = $tmp25;
  $78 = $z3;
  $79 = ($78*17333)|0;
  $80 = (($77) + ($79))|0;
  $81 = $tmp20;
  $82 = (($81) + ($80))|0;
  $tmp20 = $82;
  $83 = $tmp25;
  $84 = $z1;
  $85 = ($84*12399)|0;
  $86 = (($83) - ($85))|0;
  $87 = $tmp23;
  $88 = (($87) + ($86))|0;
  $tmp23 = $88;
  $89 = $tmp25;
  $90 = $tmp24;
  $91 = (($90) + ($89))|0;
  $tmp24 = $91;
  $92 = $tmp24;
  $93 = $z3;
  $94 = ($93*6461)|0;
  $95 = (($92) - ($94))|0;
  $tmp22 = $95;
  $96 = $z2;
  $97 = ($96*15929)|0;
  $98 = $z1;
  $99 = ($98*11395)|0;
  $100 = (($97) - ($99))|0;
  $101 = $tmp24;
  $102 = (($101) + ($100))|0;
  $tmp24 = $102;
  $103 = $tmp10;
  $104 = $z4;
  $105 = ($104*11585)|0;
  $106 = (($103) - ($105))|0;
  $tmp25 = $106;
  $107 = $inptr;
  $108 = (($107) + 16|0);
  $109 = HEAP16[$108>>1]|0;
  $110 = $109 << 16 >> 16;
  $111 = $quantptr;
  $112 = (($111) + 32|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = Math_imul($110, $113)|0;
  $z1 = $114;
  $115 = $inptr;
  $116 = (($115) + 48|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $117 << 16 >> 16;
  $119 = $quantptr;
  $120 = (($119) + 96|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = Math_imul($118, $121)|0;
  $z2 = $122;
  $123 = $inptr;
  $124 = (($123) + 80|0);
  $125 = HEAP16[$124>>1]|0;
  $126 = $125 << 16 >> 16;
  $127 = $quantptr;
  $128 = (($127) + 160|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = Math_imul($126, $129)|0;
  $z3 = $130;
  $131 = $inptr;
  $132 = (($131) + 112|0);
  $133 = HEAP16[$132>>1]|0;
  $134 = $133 << 16 >> 16;
  $135 = $quantptr;
  $136 = (($135) + 224|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = Math_imul($134, $137)|0;
  $z4 = $138;
  $139 = $z1;
  $140 = $z2;
  $141 = (($139) + ($140))|0;
  $tmp11 = $141;
  $142 = $tmp11;
  $143 = $z3;
  $144 = (($142) + ($143))|0;
  $145 = $z4;
  $146 = (($144) + ($145))|0;
  $147 = ($146*3264)|0;
  $tmp14 = $147;
  $148 = $tmp11;
  $149 = ($148*7274)|0;
  $tmp11 = $149;
  $150 = $z1;
  $151 = $z3;
  $152 = (($150) + ($151))|0;
  $153 = ($152*5492)|0;
  $tmp12 = $153;
  $154 = $tmp14;
  $155 = $z1;
  $156 = $z4;
  $157 = (($155) + ($156))|0;
  $158 = ($157*3000)|0;
  $159 = (($154) + ($158))|0;
  $tmp13 = $159;
  $160 = $tmp11;
  $161 = $tmp12;
  $162 = (($160) + ($161))|0;
  $163 = $tmp13;
  $164 = (($162) + ($163))|0;
  $165 = $z1;
  $166 = ($165*7562)|0;
  $167 = (($164) - ($166))|0;
  $tmp10 = $167;
  $168 = $tmp14;
  $169 = $z2;
  $170 = $z3;
  $171 = (($169) + ($170))|0;
  $172 = ($171*9527)|0;
  $173 = (($168) - ($172))|0;
  $z1 = $173;
  $174 = $z1;
  $175 = $z2;
  $176 = ($175*16984)|0;
  $177 = (($174) + ($176))|0;
  $178 = $tmp11;
  $179 = (($178) + ($177))|0;
  $tmp11 = $179;
  $180 = $z1;
  $181 = $z3;
  $182 = ($181*9766)|0;
  $183 = (($180) - ($182))|0;
  $184 = $tmp12;
  $185 = (($184) + ($183))|0;
  $tmp12 = $185;
  $186 = $z2;
  $187 = $z4;
  $188 = (($186) + ($187))|0;
  $189 = Math_imul($188, -14731)|0;
  $z1 = $189;
  $190 = $z1;
  $191 = $tmp11;
  $192 = (($191) + ($190))|0;
  $tmp11 = $192;
  $193 = $z1;
  $194 = $z4;
  $195 = ($194*17223)|0;
  $196 = (($193) + ($195))|0;
  $197 = $tmp13;
  $198 = (($197) + ($196))|0;
  $tmp13 = $198;
  $199 = $z2;
  $200 = Math_imul($199, -12019)|0;
  $201 = $z3;
  $202 = ($201*8203)|0;
  $203 = (($200) + ($202))|0;
  $204 = $z4;
  $205 = ($204*13802)|0;
  $206 = (($203) - ($205))|0;
  $207 = $tmp14;
  $208 = (($207) + ($206))|0;
  $tmp14 = $208;
  $209 = $tmp20;
  $210 = $tmp10;
  $211 = (($209) + ($210))|0;
  $212 = $211 >> 11;
  $213 = $wsptr;
  HEAP32[$213>>2] = $212;
  $214 = $tmp20;
  $215 = $tmp10;
  $216 = (($214) - ($215))|0;
  $217 = $216 >> 11;
  $218 = $wsptr;
  $219 = (($218) + 320|0);
  HEAP32[$219>>2] = $217;
  $220 = $tmp21;
  $221 = $tmp11;
  $222 = (($220) + ($221))|0;
  $223 = $222 >> 11;
  $224 = $wsptr;
  $225 = (($224) + 32|0);
  HEAP32[$225>>2] = $223;
  $226 = $tmp21;
  $227 = $tmp11;
  $228 = (($226) - ($227))|0;
  $229 = $228 >> 11;
  $230 = $wsptr;
  $231 = (($230) + 288|0);
  HEAP32[$231>>2] = $229;
  $232 = $tmp22;
  $233 = $tmp12;
  $234 = (($232) + ($233))|0;
  $235 = $234 >> 11;
  $236 = $wsptr;
  $237 = (($236) + 64|0);
  HEAP32[$237>>2] = $235;
  $238 = $tmp22;
  $239 = $tmp12;
  $240 = (($238) - ($239))|0;
  $241 = $240 >> 11;
  $242 = $wsptr;
  $243 = (($242) + 256|0);
  HEAP32[$243>>2] = $241;
  $244 = $tmp23;
  $245 = $tmp13;
  $246 = (($244) + ($245))|0;
  $247 = $246 >> 11;
  $248 = $wsptr;
  $249 = (($248) + 96|0);
  HEAP32[$249>>2] = $247;
  $250 = $tmp23;
  $251 = $tmp13;
  $252 = (($250) - ($251))|0;
  $253 = $252 >> 11;
  $254 = $wsptr;
  $255 = (($254) + 224|0);
  HEAP32[$255>>2] = $253;
  $256 = $tmp24;
  $257 = $tmp14;
  $258 = (($256) + ($257))|0;
  $259 = $258 >> 11;
  $260 = $wsptr;
  $261 = (($260) + 128|0);
  HEAP32[$261>>2] = $259;
  $262 = $tmp24;
  $263 = $tmp14;
  $264 = (($262) - ($263))|0;
  $265 = $264 >> 11;
  $266 = $wsptr;
  $267 = (($266) + 192|0);
  HEAP32[$267>>2] = $265;
  $268 = $tmp25;
  $269 = $268 >> 11;
  $270 = $wsptr;
  $271 = (($270) + 160|0);
  HEAP32[$271>>2] = $269;
  $272 = $ctr;
  $273 = (($272) + 1)|0;
  $ctr = $273;
  $274 = $inptr;
  $275 = (($274) + 2|0);
  $inptr = $275;
  $276 = $quantptr;
  $277 = (($276) + 4|0);
  $quantptr = $277;
  $278 = $wsptr;
  $279 = (($278) + 4|0);
  $wsptr = $279;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $280 = $ctr;
  $281 = ($280|0)<(11);
  if (!($281)) {
   break;
  }
  $282 = $ctr;
  $283 = $3;
  $284 = (($283) + ($282<<2)|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $4;
  $287 = (($285) + ($286)|0);
  $outptr = $287;
  $288 = $wsptr;
  $289 = HEAP32[$288>>2]|0;
  $290 = (($289) + 16)|0;
  $tmp10 = $290;
  $291 = $tmp10;
  $292 = $291 << 13;
  $tmp10 = $292;
  $293 = $wsptr;
  $294 = (($293) + 8|0);
  $295 = HEAP32[$294>>2]|0;
  $z1 = $295;
  $296 = $wsptr;
  $297 = (($296) + 16|0);
  $298 = HEAP32[$297>>2]|0;
  $z2 = $298;
  $299 = $wsptr;
  $300 = (($299) + 24|0);
  $301 = HEAP32[$300>>2]|0;
  $z3 = $301;
  $302 = $z2;
  $303 = $z3;
  $304 = (($302) - ($303))|0;
  $305 = ($304*20862)|0;
  $tmp20 = $305;
  $306 = $z2;
  $307 = $z1;
  $308 = (($306) - ($307))|0;
  $309 = ($308*3529)|0;
  $tmp23 = $309;
  $310 = $z1;
  $311 = $z3;
  $312 = (($310) + ($311))|0;
  $z4 = $312;
  $313 = $z4;
  $314 = Math_imul($313, -9467)|0;
  $tmp24 = $314;
  $315 = $z2;
  $316 = $z4;
  $317 = (($316) - ($315))|0;
  $z4 = $317;
  $318 = $tmp10;
  $319 = $z4;
  $320 = ($319*11116)|0;
  $321 = (($318) + ($320))|0;
  $tmp25 = $321;
  $322 = $tmp20;
  $323 = $tmp23;
  $324 = (($322) + ($323))|0;
  $325 = $tmp25;
  $326 = (($324) + ($325))|0;
  $327 = $z2;
  $328 = ($327*14924)|0;
  $329 = (($326) - ($328))|0;
  $tmp21 = $329;
  $330 = $tmp25;
  $331 = $z3;
  $332 = ($331*17333)|0;
  $333 = (($330) + ($332))|0;
  $334 = $tmp20;
  $335 = (($334) + ($333))|0;
  $tmp20 = $335;
  $336 = $tmp25;
  $337 = $z1;
  $338 = ($337*12399)|0;
  $339 = (($336) - ($338))|0;
  $340 = $tmp23;
  $341 = (($340) + ($339))|0;
  $tmp23 = $341;
  $342 = $tmp25;
  $343 = $tmp24;
  $344 = (($343) + ($342))|0;
  $tmp24 = $344;
  $345 = $tmp24;
  $346 = $z3;
  $347 = ($346*6461)|0;
  $348 = (($345) - ($347))|0;
  $tmp22 = $348;
  $349 = $z2;
  $350 = ($349*15929)|0;
  $351 = $z1;
  $352 = ($351*11395)|0;
  $353 = (($350) - ($352))|0;
  $354 = $tmp24;
  $355 = (($354) + ($353))|0;
  $tmp24 = $355;
  $356 = $tmp10;
  $357 = $z4;
  $358 = ($357*11585)|0;
  $359 = (($356) - ($358))|0;
  $tmp25 = $359;
  $360 = $wsptr;
  $361 = (($360) + 4|0);
  $362 = HEAP32[$361>>2]|0;
  $z1 = $362;
  $363 = $wsptr;
  $364 = (($363) + 12|0);
  $365 = HEAP32[$364>>2]|0;
  $z2 = $365;
  $366 = $wsptr;
  $367 = (($366) + 20|0);
  $368 = HEAP32[$367>>2]|0;
  $z3 = $368;
  $369 = $wsptr;
  $370 = (($369) + 28|0);
  $371 = HEAP32[$370>>2]|0;
  $z4 = $371;
  $372 = $z1;
  $373 = $z2;
  $374 = (($372) + ($373))|0;
  $tmp11 = $374;
  $375 = $tmp11;
  $376 = $z3;
  $377 = (($375) + ($376))|0;
  $378 = $z4;
  $379 = (($377) + ($378))|0;
  $380 = ($379*3264)|0;
  $tmp14 = $380;
  $381 = $tmp11;
  $382 = ($381*7274)|0;
  $tmp11 = $382;
  $383 = $z1;
  $384 = $z3;
  $385 = (($383) + ($384))|0;
  $386 = ($385*5492)|0;
  $tmp12 = $386;
  $387 = $tmp14;
  $388 = $z1;
  $389 = $z4;
  $390 = (($388) + ($389))|0;
  $391 = ($390*3000)|0;
  $392 = (($387) + ($391))|0;
  $tmp13 = $392;
  $393 = $tmp11;
  $394 = $tmp12;
  $395 = (($393) + ($394))|0;
  $396 = $tmp13;
  $397 = (($395) + ($396))|0;
  $398 = $z1;
  $399 = ($398*7562)|0;
  $400 = (($397) - ($399))|0;
  $tmp10 = $400;
  $401 = $tmp14;
  $402 = $z2;
  $403 = $z3;
  $404 = (($402) + ($403))|0;
  $405 = ($404*9527)|0;
  $406 = (($401) - ($405))|0;
  $z1 = $406;
  $407 = $z1;
  $408 = $z2;
  $409 = ($408*16984)|0;
  $410 = (($407) + ($409))|0;
  $411 = $tmp11;
  $412 = (($411) + ($410))|0;
  $tmp11 = $412;
  $413 = $z1;
  $414 = $z3;
  $415 = ($414*9766)|0;
  $416 = (($413) - ($415))|0;
  $417 = $tmp12;
  $418 = (($417) + ($416))|0;
  $tmp12 = $418;
  $419 = $z2;
  $420 = $z4;
  $421 = (($419) + ($420))|0;
  $422 = Math_imul($421, -14731)|0;
  $z1 = $422;
  $423 = $z1;
  $424 = $tmp11;
  $425 = (($424) + ($423))|0;
  $tmp11 = $425;
  $426 = $z1;
  $427 = $z4;
  $428 = ($427*17223)|0;
  $429 = (($426) + ($428))|0;
  $430 = $tmp13;
  $431 = (($430) + ($429))|0;
  $tmp13 = $431;
  $432 = $z2;
  $433 = Math_imul($432, -12019)|0;
  $434 = $z3;
  $435 = ($434*8203)|0;
  $436 = (($433) + ($435))|0;
  $437 = $z4;
  $438 = ($437*13802)|0;
  $439 = (($436) - ($438))|0;
  $440 = $tmp14;
  $441 = (($440) + ($439))|0;
  $tmp14 = $441;
  $442 = $tmp20;
  $443 = $tmp10;
  $444 = (($442) + ($443))|0;
  $445 = $444 >> 18;
  $446 = $445 & 1023;
  $447 = $range_limit;
  $448 = (($447) + ($446)|0);
  $449 = HEAP8[$448>>0]|0;
  $450 = $outptr;
  HEAP8[$450>>0] = $449;
  $451 = $tmp20;
  $452 = $tmp10;
  $453 = (($451) - ($452))|0;
  $454 = $453 >> 18;
  $455 = $454 & 1023;
  $456 = $range_limit;
  $457 = (($456) + ($455)|0);
  $458 = HEAP8[$457>>0]|0;
  $459 = $outptr;
  $460 = (($459) + 10|0);
  HEAP8[$460>>0] = $458;
  $461 = $tmp21;
  $462 = $tmp11;
  $463 = (($461) + ($462))|0;
  $464 = $463 >> 18;
  $465 = $464 & 1023;
  $466 = $range_limit;
  $467 = (($466) + ($465)|0);
  $468 = HEAP8[$467>>0]|0;
  $469 = $outptr;
  $470 = (($469) + 1|0);
  HEAP8[$470>>0] = $468;
  $471 = $tmp21;
  $472 = $tmp11;
  $473 = (($471) - ($472))|0;
  $474 = $473 >> 18;
  $475 = $474 & 1023;
  $476 = $range_limit;
  $477 = (($476) + ($475)|0);
  $478 = HEAP8[$477>>0]|0;
  $479 = $outptr;
  $480 = (($479) + 9|0);
  HEAP8[$480>>0] = $478;
  $481 = $tmp22;
  $482 = $tmp12;
  $483 = (($481) + ($482))|0;
  $484 = $483 >> 18;
  $485 = $484 & 1023;
  $486 = $range_limit;
  $487 = (($486) + ($485)|0);
  $488 = HEAP8[$487>>0]|0;
  $489 = $outptr;
  $490 = (($489) + 2|0);
  HEAP8[$490>>0] = $488;
  $491 = $tmp22;
  $492 = $tmp12;
  $493 = (($491) - ($492))|0;
  $494 = $493 >> 18;
  $495 = $494 & 1023;
  $496 = $range_limit;
  $497 = (($496) + ($495)|0);
  $498 = HEAP8[$497>>0]|0;
  $499 = $outptr;
  $500 = (($499) + 8|0);
  HEAP8[$500>>0] = $498;
  $501 = $tmp23;
  $502 = $tmp13;
  $503 = (($501) + ($502))|0;
  $504 = $503 >> 18;
  $505 = $504 & 1023;
  $506 = $range_limit;
  $507 = (($506) + ($505)|0);
  $508 = HEAP8[$507>>0]|0;
  $509 = $outptr;
  $510 = (($509) + 3|0);
  HEAP8[$510>>0] = $508;
  $511 = $tmp23;
  $512 = $tmp13;
  $513 = (($511) - ($512))|0;
  $514 = $513 >> 18;
  $515 = $514 & 1023;
  $516 = $range_limit;
  $517 = (($516) + ($515)|0);
  $518 = HEAP8[$517>>0]|0;
  $519 = $outptr;
  $520 = (($519) + 7|0);
  HEAP8[$520>>0] = $518;
  $521 = $tmp24;
  $522 = $tmp14;
  $523 = (($521) + ($522))|0;
  $524 = $523 >> 18;
  $525 = $524 & 1023;
  $526 = $range_limit;
  $527 = (($526) + ($525)|0);
  $528 = HEAP8[$527>>0]|0;
  $529 = $outptr;
  $530 = (($529) + 4|0);
  HEAP8[$530>>0] = $528;
  $531 = $tmp24;
  $532 = $tmp14;
  $533 = (($531) - ($532))|0;
  $534 = $533 >> 18;
  $535 = $534 & 1023;
  $536 = $range_limit;
  $537 = (($536) + ($535)|0);
  $538 = HEAP8[$537>>0]|0;
  $539 = $outptr;
  $540 = (($539) + 6|0);
  HEAP8[$540>>0] = $538;
  $541 = $tmp25;
  $542 = $541 >> 18;
  $543 = $542 & 1023;
  $544 = $range_limit;
  $545 = (($544) + ($543)|0);
  $546 = HEAP8[$545>>0]|0;
  $547 = $outptr;
  $548 = (($547) + 5|0);
  HEAP8[$548>>0] = $546;
  $549 = $wsptr;
  $550 = (($549) + 32|0);
  $wsptr = $550;
  $551 = $ctr;
  $552 = (($551) + 1)|0;
  $ctr = $552;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_12x12($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0;
 var $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0;
 var $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $z3 = $20;
  $21 = $z3;
  $22 = $21 << 13;
  $z3 = $22;
  $23 = $z3;
  $24 = (($23) + 1024)|0;
  $z3 = $24;
  $25 = $inptr;
  $26 = (($25) + 64|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z4 = $32;
  $33 = $z4;
  $34 = ($33*10033)|0;
  $z4 = $34;
  $35 = $z3;
  $36 = $z4;
  $37 = (($35) + ($36))|0;
  $tmp10 = $37;
  $38 = $z3;
  $39 = $z4;
  $40 = (($38) - ($39))|0;
  $tmp11 = $40;
  $41 = $inptr;
  $42 = (($41) + 32|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = $quantptr;
  $46 = (($45) + 64|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = Math_imul($44, $47)|0;
  $z1 = $48;
  $49 = $z1;
  $50 = ($49*11190)|0;
  $z4 = $50;
  $51 = $z1;
  $52 = $51 << 13;
  $z1 = $52;
  $53 = $inptr;
  $54 = (($53) + 96|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  $57 = $quantptr;
  $58 = (($57) + 192|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = Math_imul($56, $59)|0;
  $z2 = $60;
  $61 = $z2;
  $62 = $61 << 13;
  $z2 = $62;
  $63 = $z1;
  $64 = $z2;
  $65 = (($63) - ($64))|0;
  $tmp12 = $65;
  $66 = $z3;
  $67 = $tmp12;
  $68 = (($66) + ($67))|0;
  $tmp21 = $68;
  $69 = $z3;
  $70 = $tmp12;
  $71 = (($69) - ($70))|0;
  $tmp24 = $71;
  $72 = $z4;
  $73 = $z2;
  $74 = (($72) + ($73))|0;
  $tmp12 = $74;
  $75 = $tmp10;
  $76 = $tmp12;
  $77 = (($75) + ($76))|0;
  $tmp20 = $77;
  $78 = $tmp10;
  $79 = $tmp12;
  $80 = (($78) - ($79))|0;
  $tmp25 = $80;
  $81 = $z4;
  $82 = $z1;
  $83 = (($81) - ($82))|0;
  $84 = $z2;
  $85 = (($83) - ($84))|0;
  $tmp12 = $85;
  $86 = $tmp11;
  $87 = $tmp12;
  $88 = (($86) + ($87))|0;
  $tmp22 = $88;
  $89 = $tmp11;
  $90 = $tmp12;
  $91 = (($89) - ($90))|0;
  $tmp23 = $91;
  $92 = $inptr;
  $93 = (($92) + 16|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94 << 16 >> 16;
  $96 = $quantptr;
  $97 = (($96) + 32|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = Math_imul($95, $98)|0;
  $z1 = $99;
  $100 = $inptr;
  $101 = (($100) + 48|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = $quantptr;
  $105 = (($104) + 96|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = Math_imul($103, $106)|0;
  $z2 = $107;
  $108 = $inptr;
  $109 = (($108) + 80|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110 << 16 >> 16;
  $112 = $quantptr;
  $113 = (($112) + 160|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = Math_imul($111, $114)|0;
  $z3 = $115;
  $116 = $inptr;
  $117 = (($116) + 112|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118 << 16 >> 16;
  $120 = $quantptr;
  $121 = (($120) + 224|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = Math_imul($119, $122)|0;
  $z4 = $123;
  $124 = $z2;
  $125 = ($124*10703)|0;
  $tmp11 = $125;
  $126 = $z2;
  $127 = Math_imul($126, -4433)|0;
  $tmp14 = $127;
  $128 = $z1;
  $129 = $z3;
  $130 = (($128) + ($129))|0;
  $tmp10 = $130;
  $131 = $tmp10;
  $132 = $z4;
  $133 = (($131) + ($132))|0;
  $134 = ($133*7053)|0;
  $tmp15 = $134;
  $135 = $tmp15;
  $136 = $tmp10;
  $137 = ($136*2139)|0;
  $138 = (($135) + ($137))|0;
  $tmp12 = $138;
  $139 = $tmp12;
  $140 = $tmp11;
  $141 = (($139) + ($140))|0;
  $142 = $z1;
  $143 = ($142*2295)|0;
  $144 = (($141) + ($143))|0;
  $tmp10 = $144;
  $145 = $z3;
  $146 = $z4;
  $147 = (($145) + ($146))|0;
  $148 = Math_imul($147, -8565)|0;
  $tmp13 = $148;
  $149 = $tmp13;
  $150 = $tmp14;
  $151 = (($149) + ($150))|0;
  $152 = $z3;
  $153 = ($152*12112)|0;
  $154 = (($151) - ($153))|0;
  $155 = $tmp12;
  $156 = (($155) + ($154))|0;
  $tmp12 = $156;
  $157 = $tmp15;
  $158 = $tmp11;
  $159 = (($157) - ($158))|0;
  $160 = $z4;
  $161 = ($160*12998)|0;
  $162 = (($159) + ($161))|0;
  $163 = $tmp13;
  $164 = (($163) + ($162))|0;
  $tmp13 = $164;
  $165 = $tmp14;
  $166 = $z1;
  $167 = ($166*5540)|0;
  $168 = (($165) - ($167))|0;
  $169 = $z4;
  $170 = ($169*16244)|0;
  $171 = (($168) - ($170))|0;
  $172 = $tmp15;
  $173 = (($172) + ($171))|0;
  $tmp15 = $173;
  $174 = $z4;
  $175 = $z1;
  $176 = (($175) - ($174))|0;
  $z1 = $176;
  $177 = $z3;
  $178 = $z2;
  $179 = (($178) - ($177))|0;
  $z2 = $179;
  $180 = $z1;
  $181 = $z2;
  $182 = (($180) + ($181))|0;
  $183 = ($182*4433)|0;
  $z3 = $183;
  $184 = $z3;
  $185 = $z1;
  $186 = ($185*6270)|0;
  $187 = (($184) + ($186))|0;
  $tmp11 = $187;
  $188 = $z3;
  $189 = $z2;
  $190 = ($189*15137)|0;
  $191 = (($188) - ($190))|0;
  $tmp14 = $191;
  $192 = $tmp20;
  $193 = $tmp10;
  $194 = (($192) + ($193))|0;
  $195 = $194 >> 11;
  $196 = $wsptr;
  HEAP32[$196>>2] = $195;
  $197 = $tmp20;
  $198 = $tmp10;
  $199 = (($197) - ($198))|0;
  $200 = $199 >> 11;
  $201 = $wsptr;
  $202 = (($201) + 352|0);
  HEAP32[$202>>2] = $200;
  $203 = $tmp21;
  $204 = $tmp11;
  $205 = (($203) + ($204))|0;
  $206 = $205 >> 11;
  $207 = $wsptr;
  $208 = (($207) + 32|0);
  HEAP32[$208>>2] = $206;
  $209 = $tmp21;
  $210 = $tmp11;
  $211 = (($209) - ($210))|0;
  $212 = $211 >> 11;
  $213 = $wsptr;
  $214 = (($213) + 320|0);
  HEAP32[$214>>2] = $212;
  $215 = $tmp22;
  $216 = $tmp12;
  $217 = (($215) + ($216))|0;
  $218 = $217 >> 11;
  $219 = $wsptr;
  $220 = (($219) + 64|0);
  HEAP32[$220>>2] = $218;
  $221 = $tmp22;
  $222 = $tmp12;
  $223 = (($221) - ($222))|0;
  $224 = $223 >> 11;
  $225 = $wsptr;
  $226 = (($225) + 288|0);
  HEAP32[$226>>2] = $224;
  $227 = $tmp23;
  $228 = $tmp13;
  $229 = (($227) + ($228))|0;
  $230 = $229 >> 11;
  $231 = $wsptr;
  $232 = (($231) + 96|0);
  HEAP32[$232>>2] = $230;
  $233 = $tmp23;
  $234 = $tmp13;
  $235 = (($233) - ($234))|0;
  $236 = $235 >> 11;
  $237 = $wsptr;
  $238 = (($237) + 256|0);
  HEAP32[$238>>2] = $236;
  $239 = $tmp24;
  $240 = $tmp14;
  $241 = (($239) + ($240))|0;
  $242 = $241 >> 11;
  $243 = $wsptr;
  $244 = (($243) + 128|0);
  HEAP32[$244>>2] = $242;
  $245 = $tmp24;
  $246 = $tmp14;
  $247 = (($245) - ($246))|0;
  $248 = $247 >> 11;
  $249 = $wsptr;
  $250 = (($249) + 224|0);
  HEAP32[$250>>2] = $248;
  $251 = $tmp25;
  $252 = $tmp15;
  $253 = (($251) + ($252))|0;
  $254 = $253 >> 11;
  $255 = $wsptr;
  $256 = (($255) + 160|0);
  HEAP32[$256>>2] = $254;
  $257 = $tmp25;
  $258 = $tmp15;
  $259 = (($257) - ($258))|0;
  $260 = $259 >> 11;
  $261 = $wsptr;
  $262 = (($261) + 192|0);
  HEAP32[$262>>2] = $260;
  $263 = $ctr;
  $264 = (($263) + 1)|0;
  $ctr = $264;
  $265 = $inptr;
  $266 = (($265) + 2|0);
  $inptr = $266;
  $267 = $quantptr;
  $268 = (($267) + 4|0);
  $quantptr = $268;
  $269 = $wsptr;
  $270 = (($269) + 4|0);
  $wsptr = $270;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $271 = $ctr;
  $272 = ($271|0)<(12);
  if (!($272)) {
   break;
  }
  $273 = $ctr;
  $274 = $3;
  $275 = (($274) + ($273<<2)|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = $4;
  $278 = (($276) + ($277)|0);
  $outptr = $278;
  $279 = $wsptr;
  $280 = HEAP32[$279>>2]|0;
  $281 = (($280) + 16)|0;
  $z3 = $281;
  $282 = $z3;
  $283 = $282 << 13;
  $z3 = $283;
  $284 = $wsptr;
  $285 = (($284) + 16|0);
  $286 = HEAP32[$285>>2]|0;
  $z4 = $286;
  $287 = $z4;
  $288 = ($287*10033)|0;
  $z4 = $288;
  $289 = $z3;
  $290 = $z4;
  $291 = (($289) + ($290))|0;
  $tmp10 = $291;
  $292 = $z3;
  $293 = $z4;
  $294 = (($292) - ($293))|0;
  $tmp11 = $294;
  $295 = $wsptr;
  $296 = (($295) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $z1 = $297;
  $298 = $z1;
  $299 = ($298*11190)|0;
  $z4 = $299;
  $300 = $z1;
  $301 = $300 << 13;
  $z1 = $301;
  $302 = $wsptr;
  $303 = (($302) + 24|0);
  $304 = HEAP32[$303>>2]|0;
  $z2 = $304;
  $305 = $z2;
  $306 = $305 << 13;
  $z2 = $306;
  $307 = $z1;
  $308 = $z2;
  $309 = (($307) - ($308))|0;
  $tmp12 = $309;
  $310 = $z3;
  $311 = $tmp12;
  $312 = (($310) + ($311))|0;
  $tmp21 = $312;
  $313 = $z3;
  $314 = $tmp12;
  $315 = (($313) - ($314))|0;
  $tmp24 = $315;
  $316 = $z4;
  $317 = $z2;
  $318 = (($316) + ($317))|0;
  $tmp12 = $318;
  $319 = $tmp10;
  $320 = $tmp12;
  $321 = (($319) + ($320))|0;
  $tmp20 = $321;
  $322 = $tmp10;
  $323 = $tmp12;
  $324 = (($322) - ($323))|0;
  $tmp25 = $324;
  $325 = $z4;
  $326 = $z1;
  $327 = (($325) - ($326))|0;
  $328 = $z2;
  $329 = (($327) - ($328))|0;
  $tmp12 = $329;
  $330 = $tmp11;
  $331 = $tmp12;
  $332 = (($330) + ($331))|0;
  $tmp22 = $332;
  $333 = $tmp11;
  $334 = $tmp12;
  $335 = (($333) - ($334))|0;
  $tmp23 = $335;
  $336 = $wsptr;
  $337 = (($336) + 4|0);
  $338 = HEAP32[$337>>2]|0;
  $z1 = $338;
  $339 = $wsptr;
  $340 = (($339) + 12|0);
  $341 = HEAP32[$340>>2]|0;
  $z2 = $341;
  $342 = $wsptr;
  $343 = (($342) + 20|0);
  $344 = HEAP32[$343>>2]|0;
  $z3 = $344;
  $345 = $wsptr;
  $346 = (($345) + 28|0);
  $347 = HEAP32[$346>>2]|0;
  $z4 = $347;
  $348 = $z2;
  $349 = ($348*10703)|0;
  $tmp11 = $349;
  $350 = $z2;
  $351 = Math_imul($350, -4433)|0;
  $tmp14 = $351;
  $352 = $z1;
  $353 = $z3;
  $354 = (($352) + ($353))|0;
  $tmp10 = $354;
  $355 = $tmp10;
  $356 = $z4;
  $357 = (($355) + ($356))|0;
  $358 = ($357*7053)|0;
  $tmp15 = $358;
  $359 = $tmp15;
  $360 = $tmp10;
  $361 = ($360*2139)|0;
  $362 = (($359) + ($361))|0;
  $tmp12 = $362;
  $363 = $tmp12;
  $364 = $tmp11;
  $365 = (($363) + ($364))|0;
  $366 = $z1;
  $367 = ($366*2295)|0;
  $368 = (($365) + ($367))|0;
  $tmp10 = $368;
  $369 = $z3;
  $370 = $z4;
  $371 = (($369) + ($370))|0;
  $372 = Math_imul($371, -8565)|0;
  $tmp13 = $372;
  $373 = $tmp13;
  $374 = $tmp14;
  $375 = (($373) + ($374))|0;
  $376 = $z3;
  $377 = ($376*12112)|0;
  $378 = (($375) - ($377))|0;
  $379 = $tmp12;
  $380 = (($379) + ($378))|0;
  $tmp12 = $380;
  $381 = $tmp15;
  $382 = $tmp11;
  $383 = (($381) - ($382))|0;
  $384 = $z4;
  $385 = ($384*12998)|0;
  $386 = (($383) + ($385))|0;
  $387 = $tmp13;
  $388 = (($387) + ($386))|0;
  $tmp13 = $388;
  $389 = $tmp14;
  $390 = $z1;
  $391 = ($390*5540)|0;
  $392 = (($389) - ($391))|0;
  $393 = $z4;
  $394 = ($393*16244)|0;
  $395 = (($392) - ($394))|0;
  $396 = $tmp15;
  $397 = (($396) + ($395))|0;
  $tmp15 = $397;
  $398 = $z4;
  $399 = $z1;
  $400 = (($399) - ($398))|0;
  $z1 = $400;
  $401 = $z3;
  $402 = $z2;
  $403 = (($402) - ($401))|0;
  $z2 = $403;
  $404 = $z1;
  $405 = $z2;
  $406 = (($404) + ($405))|0;
  $407 = ($406*4433)|0;
  $z3 = $407;
  $408 = $z3;
  $409 = $z1;
  $410 = ($409*6270)|0;
  $411 = (($408) + ($410))|0;
  $tmp11 = $411;
  $412 = $z3;
  $413 = $z2;
  $414 = ($413*15137)|0;
  $415 = (($412) - ($414))|0;
  $tmp14 = $415;
  $416 = $tmp20;
  $417 = $tmp10;
  $418 = (($416) + ($417))|0;
  $419 = $418 >> 18;
  $420 = $419 & 1023;
  $421 = $range_limit;
  $422 = (($421) + ($420)|0);
  $423 = HEAP8[$422>>0]|0;
  $424 = $outptr;
  HEAP8[$424>>0] = $423;
  $425 = $tmp20;
  $426 = $tmp10;
  $427 = (($425) - ($426))|0;
  $428 = $427 >> 18;
  $429 = $428 & 1023;
  $430 = $range_limit;
  $431 = (($430) + ($429)|0);
  $432 = HEAP8[$431>>0]|0;
  $433 = $outptr;
  $434 = (($433) + 11|0);
  HEAP8[$434>>0] = $432;
  $435 = $tmp21;
  $436 = $tmp11;
  $437 = (($435) + ($436))|0;
  $438 = $437 >> 18;
  $439 = $438 & 1023;
  $440 = $range_limit;
  $441 = (($440) + ($439)|0);
  $442 = HEAP8[$441>>0]|0;
  $443 = $outptr;
  $444 = (($443) + 1|0);
  HEAP8[$444>>0] = $442;
  $445 = $tmp21;
  $446 = $tmp11;
  $447 = (($445) - ($446))|0;
  $448 = $447 >> 18;
  $449 = $448 & 1023;
  $450 = $range_limit;
  $451 = (($450) + ($449)|0);
  $452 = HEAP8[$451>>0]|0;
  $453 = $outptr;
  $454 = (($453) + 10|0);
  HEAP8[$454>>0] = $452;
  $455 = $tmp22;
  $456 = $tmp12;
  $457 = (($455) + ($456))|0;
  $458 = $457 >> 18;
  $459 = $458 & 1023;
  $460 = $range_limit;
  $461 = (($460) + ($459)|0);
  $462 = HEAP8[$461>>0]|0;
  $463 = $outptr;
  $464 = (($463) + 2|0);
  HEAP8[$464>>0] = $462;
  $465 = $tmp22;
  $466 = $tmp12;
  $467 = (($465) - ($466))|0;
  $468 = $467 >> 18;
  $469 = $468 & 1023;
  $470 = $range_limit;
  $471 = (($470) + ($469)|0);
  $472 = HEAP8[$471>>0]|0;
  $473 = $outptr;
  $474 = (($473) + 9|0);
  HEAP8[$474>>0] = $472;
  $475 = $tmp23;
  $476 = $tmp13;
  $477 = (($475) + ($476))|0;
  $478 = $477 >> 18;
  $479 = $478 & 1023;
  $480 = $range_limit;
  $481 = (($480) + ($479)|0);
  $482 = HEAP8[$481>>0]|0;
  $483 = $outptr;
  $484 = (($483) + 3|0);
  HEAP8[$484>>0] = $482;
  $485 = $tmp23;
  $486 = $tmp13;
  $487 = (($485) - ($486))|0;
  $488 = $487 >> 18;
  $489 = $488 & 1023;
  $490 = $range_limit;
  $491 = (($490) + ($489)|0);
  $492 = HEAP8[$491>>0]|0;
  $493 = $outptr;
  $494 = (($493) + 8|0);
  HEAP8[$494>>0] = $492;
  $495 = $tmp24;
  $496 = $tmp14;
  $497 = (($495) + ($496))|0;
  $498 = $497 >> 18;
  $499 = $498 & 1023;
  $500 = $range_limit;
  $501 = (($500) + ($499)|0);
  $502 = HEAP8[$501>>0]|0;
  $503 = $outptr;
  $504 = (($503) + 4|0);
  HEAP8[$504>>0] = $502;
  $505 = $tmp24;
  $506 = $tmp14;
  $507 = (($505) - ($506))|0;
  $508 = $507 >> 18;
  $509 = $508 & 1023;
  $510 = $range_limit;
  $511 = (($510) + ($509)|0);
  $512 = HEAP8[$511>>0]|0;
  $513 = $outptr;
  $514 = (($513) + 7|0);
  HEAP8[$514>>0] = $512;
  $515 = $tmp25;
  $516 = $tmp15;
  $517 = (($515) + ($516))|0;
  $518 = $517 >> 18;
  $519 = $518 & 1023;
  $520 = $range_limit;
  $521 = (($520) + ($519)|0);
  $522 = HEAP8[$521>>0]|0;
  $523 = $outptr;
  $524 = (($523) + 5|0);
  HEAP8[$524>>0] = $522;
  $525 = $tmp25;
  $526 = $tmp15;
  $527 = (($525) - ($526))|0;
  $528 = $527 >> 18;
  $529 = $528 & 1023;
  $530 = $range_limit;
  $531 = (($530) + ($529)|0);
  $532 = HEAP8[$531>>0]|0;
  $533 = $outptr;
  $534 = (($533) + 6|0);
  HEAP8[$534>>0] = $532;
  $535 = $wsptr;
  $536 = (($535) + 32|0);
  $wsptr = $536;
  $537 = $ctr;
  $538 = (($537) + 1)|0;
  $ctr = $538;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_13x13($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0;
 var $tmp14 = 0, $tmp15 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $tmp26 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $z1 = $20;
  $21 = $z1;
  $22 = $21 << 13;
  $z1 = $22;
  $23 = $z1;
  $24 = (($23) + 1024)|0;
  $z1 = $24;
  $25 = $inptr;
  $26 = (($25) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z2 = $32;
  $33 = $inptr;
  $34 = (($33) + 64|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $quantptr;
  $38 = (($37) + 128|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $z3 = $40;
  $41 = $inptr;
  $42 = (($41) + 96|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = $quantptr;
  $46 = (($45) + 192|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = Math_imul($44, $47)|0;
  $z4 = $48;
  $49 = $z3;
  $50 = $z4;
  $51 = (($49) + ($50))|0;
  $tmp10 = $51;
  $52 = $z3;
  $53 = $z4;
  $54 = (($52) - ($53))|0;
  $tmp11 = $54;
  $55 = $tmp10;
  $56 = ($55*9465)|0;
  $tmp12 = $56;
  $57 = $tmp11;
  $58 = ($57*793)|0;
  $59 = $z1;
  $60 = (($58) + ($59))|0;
  $tmp13 = $60;
  $61 = $z2;
  $62 = ($61*11249)|0;
  $63 = $tmp12;
  $64 = (($62) + ($63))|0;
  $65 = $tmp13;
  $66 = (($64) + ($65))|0;
  $tmp20 = $66;
  $67 = $z2;
  $68 = ($67*4108)|0;
  $69 = $tmp12;
  $70 = (($68) - ($69))|0;
  $71 = $tmp13;
  $72 = (($70) + ($71))|0;
  $tmp22 = $72;
  $73 = $tmp10;
  $74 = ($73*2592)|0;
  $tmp12 = $74;
  $75 = $tmp11;
  $76 = ($75*3989)|0;
  $77 = $z1;
  $78 = (($76) + ($77))|0;
  $tmp13 = $78;
  $79 = $z2;
  $80 = ($79*8672)|0;
  $81 = $tmp12;
  $82 = (($80) - ($81))|0;
  $83 = $tmp13;
  $84 = (($82) + ($83))|0;
  $tmp21 = $84;
  $85 = $z2;
  $86 = Math_imul($85, -10258)|0;
  $87 = $tmp12;
  $88 = (($86) + ($87))|0;
  $89 = $tmp13;
  $90 = (($88) + ($89))|0;
  $tmp25 = $90;
  $91 = $tmp10;
  $92 = ($91*3570)|0;
  $tmp12 = $92;
  $93 = $tmp11;
  $94 = ($93*7678)|0;
  $95 = $z1;
  $96 = (($94) - ($95))|0;
  $tmp13 = $96;
  $97 = $z2;
  $98 = Math_imul($97, -1396)|0;
  $99 = $tmp12;
  $100 = (($98) - ($99))|0;
  $101 = $tmp13;
  $102 = (($100) - ($101))|0;
  $tmp23 = $102;
  $103 = $z2;
  $104 = Math_imul($103, -6581)|0;
  $105 = $tmp12;
  $106 = (($104) + ($105))|0;
  $107 = $tmp13;
  $108 = (($106) - ($107))|0;
  $tmp24 = $108;
  $109 = $tmp11;
  $110 = $z2;
  $111 = (($109) - ($110))|0;
  $112 = ($111*11585)|0;
  $113 = $z1;
  $114 = (($112) + ($113))|0;
  $tmp26 = $114;
  $115 = $inptr;
  $116 = (($115) + 16|0);
  $117 = HEAP16[$116>>1]|0;
  $118 = $117 << 16 >> 16;
  $119 = $quantptr;
  $120 = (($119) + 32|0);
  $121 = HEAP32[$120>>2]|0;
  $122 = Math_imul($118, $121)|0;
  $z1 = $122;
  $123 = $inptr;
  $124 = (($123) + 48|0);
  $125 = HEAP16[$124>>1]|0;
  $126 = $125 << 16 >> 16;
  $127 = $quantptr;
  $128 = (($127) + 96|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = Math_imul($126, $129)|0;
  $z2 = $130;
  $131 = $inptr;
  $132 = (($131) + 80|0);
  $133 = HEAP16[$132>>1]|0;
  $134 = $133 << 16 >> 16;
  $135 = $quantptr;
  $136 = (($135) + 160|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = Math_imul($134, $137)|0;
  $z3 = $138;
  $139 = $inptr;
  $140 = (($139) + 112|0);
  $141 = HEAP16[$140>>1]|0;
  $142 = $141 << 16 >> 16;
  $143 = $quantptr;
  $144 = (($143) + 224|0);
  $145 = HEAP32[$144>>2]|0;
  $146 = Math_imul($142, $145)|0;
  $z4 = $146;
  $147 = $z1;
  $148 = $z2;
  $149 = (($147) + ($148))|0;
  $150 = ($149*10832)|0;
  $tmp11 = $150;
  $151 = $z1;
  $152 = $z3;
  $153 = (($151) + ($152))|0;
  $154 = ($153*9534)|0;
  $tmp12 = $154;
  $155 = $z1;
  $156 = $z4;
  $157 = (($155) + ($156))|0;
  $tmp15 = $157;
  $158 = $tmp15;
  $159 = ($158*7682)|0;
  $tmp13 = $159;
  $160 = $tmp11;
  $161 = $tmp12;
  $162 = (($160) + ($161))|0;
  $163 = $tmp13;
  $164 = (($162) + ($163))|0;
  $165 = $z1;
  $166 = ($165*16549)|0;
  $167 = (($164) - ($166))|0;
  $tmp10 = $167;
  $168 = $z2;
  $169 = $z3;
  $170 = (($168) + ($169))|0;
  $171 = Math_imul($170, -2773)|0;
  $tmp14 = $171;
  $172 = $tmp14;
  $173 = $z2;
  $174 = ($173*6859)|0;
  $175 = (($172) + ($174))|0;
  $176 = $tmp11;
  $177 = (($176) + ($175))|0;
  $tmp11 = $177;
  $178 = $tmp14;
  $179 = $z3;
  $180 = ($179*12879)|0;
  $181 = (($178) - ($180))|0;
  $182 = $tmp12;
  $183 = (($182) + ($181))|0;
  $tmp12 = $183;
  $184 = $z2;
  $185 = $z4;
  $186 = (($184) + ($185))|0;
  $187 = Math_imul($186, -9534)|0;
  $tmp14 = $187;
  $188 = $tmp14;
  $189 = $tmp11;
  $190 = (($189) + ($188))|0;
  $tmp11 = $190;
  $191 = $tmp14;
  $192 = $z4;
  $193 = ($192*18068)|0;
  $194 = (($191) + ($193))|0;
  $195 = $tmp13;
  $196 = (($195) + ($194))|0;
  $tmp13 = $196;
  $197 = $z3;
  $198 = $z4;
  $199 = (($197) + ($198))|0;
  $200 = Math_imul($199, -5384)|0;
  $tmp14 = $200;
  $201 = $tmp14;
  $202 = $tmp12;
  $203 = (($202) + ($201))|0;
  $tmp12 = $203;
  $204 = $tmp14;
  $205 = $tmp13;
  $206 = (($205) + ($204))|0;
  $tmp13 = $206;
  $207 = $tmp15;
  $208 = ($207*2773)|0;
  $tmp15 = $208;
  $209 = $tmp15;
  $210 = $z1;
  $211 = ($210*2611)|0;
  $212 = (($209) + ($211))|0;
  $213 = $z2;
  $214 = ($213*3818)|0;
  $215 = (($212) - ($214))|0;
  $tmp14 = $215;
  $216 = $z3;
  $217 = $z2;
  $218 = (($216) - ($217))|0;
  $219 = ($218*7682)|0;
  $z1 = $219;
  $220 = $z1;
  $221 = $tmp14;
  $222 = (($221) + ($220))|0;
  $tmp14 = $222;
  $223 = $z1;
  $224 = $z3;
  $225 = ($224*3150)|0;
  $226 = (($223) + ($225))|0;
  $227 = $z4;
  $228 = ($227*14273)|0;
  $229 = (($226) - ($228))|0;
  $230 = $tmp15;
  $231 = (($230) + ($229))|0;
  $tmp15 = $231;
  $232 = $tmp20;
  $233 = $tmp10;
  $234 = (($232) + ($233))|0;
  $235 = $234 >> 11;
  $236 = $wsptr;
  HEAP32[$236>>2] = $235;
  $237 = $tmp20;
  $238 = $tmp10;
  $239 = (($237) - ($238))|0;
  $240 = $239 >> 11;
  $241 = $wsptr;
  $242 = (($241) + 384|0);
  HEAP32[$242>>2] = $240;
  $243 = $tmp21;
  $244 = $tmp11;
  $245 = (($243) + ($244))|0;
  $246 = $245 >> 11;
  $247 = $wsptr;
  $248 = (($247) + 32|0);
  HEAP32[$248>>2] = $246;
  $249 = $tmp21;
  $250 = $tmp11;
  $251 = (($249) - ($250))|0;
  $252 = $251 >> 11;
  $253 = $wsptr;
  $254 = (($253) + 352|0);
  HEAP32[$254>>2] = $252;
  $255 = $tmp22;
  $256 = $tmp12;
  $257 = (($255) + ($256))|0;
  $258 = $257 >> 11;
  $259 = $wsptr;
  $260 = (($259) + 64|0);
  HEAP32[$260>>2] = $258;
  $261 = $tmp22;
  $262 = $tmp12;
  $263 = (($261) - ($262))|0;
  $264 = $263 >> 11;
  $265 = $wsptr;
  $266 = (($265) + 320|0);
  HEAP32[$266>>2] = $264;
  $267 = $tmp23;
  $268 = $tmp13;
  $269 = (($267) + ($268))|0;
  $270 = $269 >> 11;
  $271 = $wsptr;
  $272 = (($271) + 96|0);
  HEAP32[$272>>2] = $270;
  $273 = $tmp23;
  $274 = $tmp13;
  $275 = (($273) - ($274))|0;
  $276 = $275 >> 11;
  $277 = $wsptr;
  $278 = (($277) + 288|0);
  HEAP32[$278>>2] = $276;
  $279 = $tmp24;
  $280 = $tmp14;
  $281 = (($279) + ($280))|0;
  $282 = $281 >> 11;
  $283 = $wsptr;
  $284 = (($283) + 128|0);
  HEAP32[$284>>2] = $282;
  $285 = $tmp24;
  $286 = $tmp14;
  $287 = (($285) - ($286))|0;
  $288 = $287 >> 11;
  $289 = $wsptr;
  $290 = (($289) + 256|0);
  HEAP32[$290>>2] = $288;
  $291 = $tmp25;
  $292 = $tmp15;
  $293 = (($291) + ($292))|0;
  $294 = $293 >> 11;
  $295 = $wsptr;
  $296 = (($295) + 160|0);
  HEAP32[$296>>2] = $294;
  $297 = $tmp25;
  $298 = $tmp15;
  $299 = (($297) - ($298))|0;
  $300 = $299 >> 11;
  $301 = $wsptr;
  $302 = (($301) + 224|0);
  HEAP32[$302>>2] = $300;
  $303 = $tmp26;
  $304 = $303 >> 11;
  $305 = $wsptr;
  $306 = (($305) + 192|0);
  HEAP32[$306>>2] = $304;
  $307 = $ctr;
  $308 = (($307) + 1)|0;
  $ctr = $308;
  $309 = $inptr;
  $310 = (($309) + 2|0);
  $inptr = $310;
  $311 = $quantptr;
  $312 = (($311) + 4|0);
  $quantptr = $312;
  $313 = $wsptr;
  $314 = (($313) + 4|0);
  $wsptr = $314;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $315 = $ctr;
  $316 = ($315|0)<(13);
  if (!($316)) {
   break;
  }
  $317 = $ctr;
  $318 = $3;
  $319 = (($318) + ($317<<2)|0);
  $320 = HEAP32[$319>>2]|0;
  $321 = $4;
  $322 = (($320) + ($321)|0);
  $outptr = $322;
  $323 = $wsptr;
  $324 = HEAP32[$323>>2]|0;
  $325 = (($324) + 16)|0;
  $z1 = $325;
  $326 = $z1;
  $327 = $326 << 13;
  $z1 = $327;
  $328 = $wsptr;
  $329 = (($328) + 8|0);
  $330 = HEAP32[$329>>2]|0;
  $z2 = $330;
  $331 = $wsptr;
  $332 = (($331) + 16|0);
  $333 = HEAP32[$332>>2]|0;
  $z3 = $333;
  $334 = $wsptr;
  $335 = (($334) + 24|0);
  $336 = HEAP32[$335>>2]|0;
  $z4 = $336;
  $337 = $z3;
  $338 = $z4;
  $339 = (($337) + ($338))|0;
  $tmp10 = $339;
  $340 = $z3;
  $341 = $z4;
  $342 = (($340) - ($341))|0;
  $tmp11 = $342;
  $343 = $tmp10;
  $344 = ($343*9465)|0;
  $tmp12 = $344;
  $345 = $tmp11;
  $346 = ($345*793)|0;
  $347 = $z1;
  $348 = (($346) + ($347))|0;
  $tmp13 = $348;
  $349 = $z2;
  $350 = ($349*11249)|0;
  $351 = $tmp12;
  $352 = (($350) + ($351))|0;
  $353 = $tmp13;
  $354 = (($352) + ($353))|0;
  $tmp20 = $354;
  $355 = $z2;
  $356 = ($355*4108)|0;
  $357 = $tmp12;
  $358 = (($356) - ($357))|0;
  $359 = $tmp13;
  $360 = (($358) + ($359))|0;
  $tmp22 = $360;
  $361 = $tmp10;
  $362 = ($361*2592)|0;
  $tmp12 = $362;
  $363 = $tmp11;
  $364 = ($363*3989)|0;
  $365 = $z1;
  $366 = (($364) + ($365))|0;
  $tmp13 = $366;
  $367 = $z2;
  $368 = ($367*8672)|0;
  $369 = $tmp12;
  $370 = (($368) - ($369))|0;
  $371 = $tmp13;
  $372 = (($370) + ($371))|0;
  $tmp21 = $372;
  $373 = $z2;
  $374 = Math_imul($373, -10258)|0;
  $375 = $tmp12;
  $376 = (($374) + ($375))|0;
  $377 = $tmp13;
  $378 = (($376) + ($377))|0;
  $tmp25 = $378;
  $379 = $tmp10;
  $380 = ($379*3570)|0;
  $tmp12 = $380;
  $381 = $tmp11;
  $382 = ($381*7678)|0;
  $383 = $z1;
  $384 = (($382) - ($383))|0;
  $tmp13 = $384;
  $385 = $z2;
  $386 = Math_imul($385, -1396)|0;
  $387 = $tmp12;
  $388 = (($386) - ($387))|0;
  $389 = $tmp13;
  $390 = (($388) - ($389))|0;
  $tmp23 = $390;
  $391 = $z2;
  $392 = Math_imul($391, -6581)|0;
  $393 = $tmp12;
  $394 = (($392) + ($393))|0;
  $395 = $tmp13;
  $396 = (($394) - ($395))|0;
  $tmp24 = $396;
  $397 = $tmp11;
  $398 = $z2;
  $399 = (($397) - ($398))|0;
  $400 = ($399*11585)|0;
  $401 = $z1;
  $402 = (($400) + ($401))|0;
  $tmp26 = $402;
  $403 = $wsptr;
  $404 = (($403) + 4|0);
  $405 = HEAP32[$404>>2]|0;
  $z1 = $405;
  $406 = $wsptr;
  $407 = (($406) + 12|0);
  $408 = HEAP32[$407>>2]|0;
  $z2 = $408;
  $409 = $wsptr;
  $410 = (($409) + 20|0);
  $411 = HEAP32[$410>>2]|0;
  $z3 = $411;
  $412 = $wsptr;
  $413 = (($412) + 28|0);
  $414 = HEAP32[$413>>2]|0;
  $z4 = $414;
  $415 = $z1;
  $416 = $z2;
  $417 = (($415) + ($416))|0;
  $418 = ($417*10832)|0;
  $tmp11 = $418;
  $419 = $z1;
  $420 = $z3;
  $421 = (($419) + ($420))|0;
  $422 = ($421*9534)|0;
  $tmp12 = $422;
  $423 = $z1;
  $424 = $z4;
  $425 = (($423) + ($424))|0;
  $tmp15 = $425;
  $426 = $tmp15;
  $427 = ($426*7682)|0;
  $tmp13 = $427;
  $428 = $tmp11;
  $429 = $tmp12;
  $430 = (($428) + ($429))|0;
  $431 = $tmp13;
  $432 = (($430) + ($431))|0;
  $433 = $z1;
  $434 = ($433*16549)|0;
  $435 = (($432) - ($434))|0;
  $tmp10 = $435;
  $436 = $z2;
  $437 = $z3;
  $438 = (($436) + ($437))|0;
  $439 = Math_imul($438, -2773)|0;
  $tmp14 = $439;
  $440 = $tmp14;
  $441 = $z2;
  $442 = ($441*6859)|0;
  $443 = (($440) + ($442))|0;
  $444 = $tmp11;
  $445 = (($444) + ($443))|0;
  $tmp11 = $445;
  $446 = $tmp14;
  $447 = $z3;
  $448 = ($447*12879)|0;
  $449 = (($446) - ($448))|0;
  $450 = $tmp12;
  $451 = (($450) + ($449))|0;
  $tmp12 = $451;
  $452 = $z2;
  $453 = $z4;
  $454 = (($452) + ($453))|0;
  $455 = Math_imul($454, -9534)|0;
  $tmp14 = $455;
  $456 = $tmp14;
  $457 = $tmp11;
  $458 = (($457) + ($456))|0;
  $tmp11 = $458;
  $459 = $tmp14;
  $460 = $z4;
  $461 = ($460*18068)|0;
  $462 = (($459) + ($461))|0;
  $463 = $tmp13;
  $464 = (($463) + ($462))|0;
  $tmp13 = $464;
  $465 = $z3;
  $466 = $z4;
  $467 = (($465) + ($466))|0;
  $468 = Math_imul($467, -5384)|0;
  $tmp14 = $468;
  $469 = $tmp14;
  $470 = $tmp12;
  $471 = (($470) + ($469))|0;
  $tmp12 = $471;
  $472 = $tmp14;
  $473 = $tmp13;
  $474 = (($473) + ($472))|0;
  $tmp13 = $474;
  $475 = $tmp15;
  $476 = ($475*2773)|0;
  $tmp15 = $476;
  $477 = $tmp15;
  $478 = $z1;
  $479 = ($478*2611)|0;
  $480 = (($477) + ($479))|0;
  $481 = $z2;
  $482 = ($481*3818)|0;
  $483 = (($480) - ($482))|0;
  $tmp14 = $483;
  $484 = $z3;
  $485 = $z2;
  $486 = (($484) - ($485))|0;
  $487 = ($486*7682)|0;
  $z1 = $487;
  $488 = $z1;
  $489 = $tmp14;
  $490 = (($489) + ($488))|0;
  $tmp14 = $490;
  $491 = $z1;
  $492 = $z3;
  $493 = ($492*3150)|0;
  $494 = (($491) + ($493))|0;
  $495 = $z4;
  $496 = ($495*14273)|0;
  $497 = (($494) - ($496))|0;
  $498 = $tmp15;
  $499 = (($498) + ($497))|0;
  $tmp15 = $499;
  $500 = $tmp20;
  $501 = $tmp10;
  $502 = (($500) + ($501))|0;
  $503 = $502 >> 18;
  $504 = $503 & 1023;
  $505 = $range_limit;
  $506 = (($505) + ($504)|0);
  $507 = HEAP8[$506>>0]|0;
  $508 = $outptr;
  HEAP8[$508>>0] = $507;
  $509 = $tmp20;
  $510 = $tmp10;
  $511 = (($509) - ($510))|0;
  $512 = $511 >> 18;
  $513 = $512 & 1023;
  $514 = $range_limit;
  $515 = (($514) + ($513)|0);
  $516 = HEAP8[$515>>0]|0;
  $517 = $outptr;
  $518 = (($517) + 12|0);
  HEAP8[$518>>0] = $516;
  $519 = $tmp21;
  $520 = $tmp11;
  $521 = (($519) + ($520))|0;
  $522 = $521 >> 18;
  $523 = $522 & 1023;
  $524 = $range_limit;
  $525 = (($524) + ($523)|0);
  $526 = HEAP8[$525>>0]|0;
  $527 = $outptr;
  $528 = (($527) + 1|0);
  HEAP8[$528>>0] = $526;
  $529 = $tmp21;
  $530 = $tmp11;
  $531 = (($529) - ($530))|0;
  $532 = $531 >> 18;
  $533 = $532 & 1023;
  $534 = $range_limit;
  $535 = (($534) + ($533)|0);
  $536 = HEAP8[$535>>0]|0;
  $537 = $outptr;
  $538 = (($537) + 11|0);
  HEAP8[$538>>0] = $536;
  $539 = $tmp22;
  $540 = $tmp12;
  $541 = (($539) + ($540))|0;
  $542 = $541 >> 18;
  $543 = $542 & 1023;
  $544 = $range_limit;
  $545 = (($544) + ($543)|0);
  $546 = HEAP8[$545>>0]|0;
  $547 = $outptr;
  $548 = (($547) + 2|0);
  HEAP8[$548>>0] = $546;
  $549 = $tmp22;
  $550 = $tmp12;
  $551 = (($549) - ($550))|0;
  $552 = $551 >> 18;
  $553 = $552 & 1023;
  $554 = $range_limit;
  $555 = (($554) + ($553)|0);
  $556 = HEAP8[$555>>0]|0;
  $557 = $outptr;
  $558 = (($557) + 10|0);
  HEAP8[$558>>0] = $556;
  $559 = $tmp23;
  $560 = $tmp13;
  $561 = (($559) + ($560))|0;
  $562 = $561 >> 18;
  $563 = $562 & 1023;
  $564 = $range_limit;
  $565 = (($564) + ($563)|0);
  $566 = HEAP8[$565>>0]|0;
  $567 = $outptr;
  $568 = (($567) + 3|0);
  HEAP8[$568>>0] = $566;
  $569 = $tmp23;
  $570 = $tmp13;
  $571 = (($569) - ($570))|0;
  $572 = $571 >> 18;
  $573 = $572 & 1023;
  $574 = $range_limit;
  $575 = (($574) + ($573)|0);
  $576 = HEAP8[$575>>0]|0;
  $577 = $outptr;
  $578 = (($577) + 9|0);
  HEAP8[$578>>0] = $576;
  $579 = $tmp24;
  $580 = $tmp14;
  $581 = (($579) + ($580))|0;
  $582 = $581 >> 18;
  $583 = $582 & 1023;
  $584 = $range_limit;
  $585 = (($584) + ($583)|0);
  $586 = HEAP8[$585>>0]|0;
  $587 = $outptr;
  $588 = (($587) + 4|0);
  HEAP8[$588>>0] = $586;
  $589 = $tmp24;
  $590 = $tmp14;
  $591 = (($589) - ($590))|0;
  $592 = $591 >> 18;
  $593 = $592 & 1023;
  $594 = $range_limit;
  $595 = (($594) + ($593)|0);
  $596 = HEAP8[$595>>0]|0;
  $597 = $outptr;
  $598 = (($597) + 8|0);
  HEAP8[$598>>0] = $596;
  $599 = $tmp25;
  $600 = $tmp15;
  $601 = (($599) + ($600))|0;
  $602 = $601 >> 18;
  $603 = $602 & 1023;
  $604 = $range_limit;
  $605 = (($604) + ($603)|0);
  $606 = HEAP8[$605>>0]|0;
  $607 = $outptr;
  $608 = (($607) + 5|0);
  HEAP8[$608>>0] = $606;
  $609 = $tmp25;
  $610 = $tmp15;
  $611 = (($609) - ($610))|0;
  $612 = $611 >> 18;
  $613 = $612 & 1023;
  $614 = $range_limit;
  $615 = (($614) + ($613)|0);
  $616 = HEAP8[$615>>0]|0;
  $617 = $outptr;
  $618 = (($617) + 7|0);
  HEAP8[$618>>0] = $616;
  $619 = $tmp26;
  $620 = $619 >> 18;
  $621 = $620 & 1023;
  $622 = $range_limit;
  $623 = (($622) + ($621)|0);
  $624 = HEAP8[$623>>0]|0;
  $625 = $outptr;
  $626 = (($625) + 6|0);
  HEAP8[$626>>0] = $624;
  $627 = $wsptr;
  $628 = (($627) + 32|0);
  $wsptr = $628;
  $629 = $ctr;
  $630 = (($629) + 1)|0;
  $ctr = $630;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_14x14($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0;
 var $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp16 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $tmp26 = 0, $workspace = 0, $wsptr = 0;
 var $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $z1 = $20;
  $21 = $z1;
  $22 = $21 << 13;
  $z1 = $22;
  $23 = $z1;
  $24 = (($23) + 1024)|0;
  $z1 = $24;
  $25 = $inptr;
  $26 = (($25) + 64|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z4 = $32;
  $33 = $z4;
  $34 = ($33*10438)|0;
  $z2 = $34;
  $35 = $z4;
  $36 = ($35*2578)|0;
  $z3 = $36;
  $37 = $z4;
  $38 = ($37*7223)|0;
  $z4 = $38;
  $39 = $z1;
  $40 = $z2;
  $41 = (($39) + ($40))|0;
  $tmp10 = $41;
  $42 = $z1;
  $43 = $z3;
  $44 = (($42) + ($43))|0;
  $tmp11 = $44;
  $45 = $z1;
  $46 = $z4;
  $47 = (($45) - ($46))|0;
  $tmp12 = $47;
  $48 = $z1;
  $49 = $z2;
  $50 = $z3;
  $51 = (($49) + ($50))|0;
  $52 = $z4;
  $53 = (($51) - ($52))|0;
  $54 = $53 << 1;
  $55 = (($48) - ($54))|0;
  $56 = $55 >> 11;
  $tmp23 = $56;
  $57 = $inptr;
  $58 = (($57) + 32|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = $quantptr;
  $62 = (($61) + 64|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = Math_imul($60, $63)|0;
  $z1 = $64;
  $65 = $inptr;
  $66 = (($65) + 96|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67 << 16 >> 16;
  $69 = $quantptr;
  $70 = (($69) + 192|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = Math_imul($68, $71)|0;
  $z2 = $72;
  $73 = $z1;
  $74 = $z2;
  $75 = (($73) + ($74))|0;
  $76 = ($75*9058)|0;
  $z3 = $76;
  $77 = $z3;
  $78 = $z1;
  $79 = ($78*2237)|0;
  $80 = (($77) + ($79))|0;
  $tmp13 = $80;
  $81 = $z3;
  $82 = $z2;
  $83 = ($82*14084)|0;
  $84 = (($81) - ($83))|0;
  $tmp14 = $84;
  $85 = $z1;
  $86 = ($85*5027)|0;
  $87 = $z2;
  $88 = ($87*11295)|0;
  $89 = (($86) - ($88))|0;
  $tmp15 = $89;
  $90 = $tmp10;
  $91 = $tmp13;
  $92 = (($90) + ($91))|0;
  $tmp20 = $92;
  $93 = $tmp10;
  $94 = $tmp13;
  $95 = (($93) - ($94))|0;
  $tmp26 = $95;
  $96 = $tmp11;
  $97 = $tmp14;
  $98 = (($96) + ($97))|0;
  $tmp21 = $98;
  $99 = $tmp11;
  $100 = $tmp14;
  $101 = (($99) - ($100))|0;
  $tmp25 = $101;
  $102 = $tmp12;
  $103 = $tmp15;
  $104 = (($102) + ($103))|0;
  $tmp22 = $104;
  $105 = $tmp12;
  $106 = $tmp15;
  $107 = (($105) - ($106))|0;
  $tmp24 = $107;
  $108 = $inptr;
  $109 = (($108) + 16|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110 << 16 >> 16;
  $112 = $quantptr;
  $113 = (($112) + 32|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = Math_imul($111, $114)|0;
  $z1 = $115;
  $116 = $inptr;
  $117 = (($116) + 48|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118 << 16 >> 16;
  $120 = $quantptr;
  $121 = (($120) + 96|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = Math_imul($119, $122)|0;
  $z2 = $123;
  $124 = $inptr;
  $125 = (($124) + 80|0);
  $126 = HEAP16[$125>>1]|0;
  $127 = $126 << 16 >> 16;
  $128 = $quantptr;
  $129 = (($128) + 160|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = Math_imul($127, $130)|0;
  $z3 = $131;
  $132 = $inptr;
  $133 = (($132) + 112|0);
  $134 = HEAP16[$133>>1]|0;
  $135 = $134 << 16 >> 16;
  $136 = $quantptr;
  $137 = (($136) + 224|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = Math_imul($135, $138)|0;
  $z4 = $139;
  $140 = $z4;
  $141 = $140 << 13;
  $tmp13 = $141;
  $142 = $z1;
  $143 = $z3;
  $144 = (($142) + ($143))|0;
  $tmp14 = $144;
  $145 = $z1;
  $146 = $z2;
  $147 = (($145) + ($146))|0;
  $148 = ($147*10935)|0;
  $tmp11 = $148;
  $149 = $tmp14;
  $150 = ($149*9810)|0;
  $tmp12 = $150;
  $151 = $tmp11;
  $152 = $tmp12;
  $153 = (($151) + ($152))|0;
  $154 = $tmp13;
  $155 = (($153) + ($154))|0;
  $156 = $z1;
  $157 = ($156*9232)|0;
  $158 = (($155) - ($157))|0;
  $tmp10 = $158;
  $159 = $tmp14;
  $160 = ($159*6164)|0;
  $tmp14 = $160;
  $161 = $tmp14;
  $162 = $z1;
  $163 = ($162*8693)|0;
  $164 = (($161) - ($163))|0;
  $tmp16 = $164;
  $165 = $z2;
  $166 = $z1;
  $167 = (($166) - ($165))|0;
  $z1 = $167;
  $168 = $z1;
  $169 = ($168*3826)|0;
  $170 = $tmp13;
  $171 = (($169) - ($170))|0;
  $tmp15 = $171;
  $172 = $tmp15;
  $173 = $tmp16;
  $174 = (($173) + ($172))|0;
  $tmp16 = $174;
  $175 = $z4;
  $176 = $z1;
  $177 = (($176) + ($175))|0;
  $z1 = $177;
  $178 = $z2;
  $179 = $z3;
  $180 = (($178) + ($179))|0;
  $181 = Math_imul($180, -1297)|0;
  $182 = $tmp13;
  $183 = (($181) - ($182))|0;
  $z4 = $183;
  $184 = $z4;
  $185 = $z2;
  $186 = ($185*3474)|0;
  $187 = (($184) - ($186))|0;
  $188 = $tmp11;
  $189 = (($188) + ($187))|0;
  $tmp11 = $189;
  $190 = $z4;
  $191 = $z3;
  $192 = ($191*19447)|0;
  $193 = (($190) - ($192))|0;
  $194 = $tmp12;
  $195 = (($194) + ($193))|0;
  $tmp12 = $195;
  $196 = $z3;
  $197 = $z2;
  $198 = (($196) - ($197))|0;
  $199 = ($198*11512)|0;
  $z4 = $199;
  $200 = $z4;
  $201 = $tmp13;
  $202 = (($200) + ($201))|0;
  $203 = $z3;
  $204 = ($203*13850)|0;
  $205 = (($202) - ($204))|0;
  $206 = $tmp14;
  $207 = (($206) + ($205))|0;
  $tmp14 = $207;
  $208 = $z4;
  $209 = $z2;
  $210 = ($209*5529)|0;
  $211 = (($208) + ($210))|0;
  $212 = $tmp15;
  $213 = (($212) + ($211))|0;
  $tmp15 = $213;
  $214 = $z1;
  $215 = $z3;
  $216 = (($214) - ($215))|0;
  $217 = $216 << 2;
  $tmp13 = $217;
  $218 = $tmp20;
  $219 = $tmp10;
  $220 = (($218) + ($219))|0;
  $221 = $220 >> 11;
  $222 = $wsptr;
  HEAP32[$222>>2] = $221;
  $223 = $tmp20;
  $224 = $tmp10;
  $225 = (($223) - ($224))|0;
  $226 = $225 >> 11;
  $227 = $wsptr;
  $228 = (($227) + 416|0);
  HEAP32[$228>>2] = $226;
  $229 = $tmp21;
  $230 = $tmp11;
  $231 = (($229) + ($230))|0;
  $232 = $231 >> 11;
  $233 = $wsptr;
  $234 = (($233) + 32|0);
  HEAP32[$234>>2] = $232;
  $235 = $tmp21;
  $236 = $tmp11;
  $237 = (($235) - ($236))|0;
  $238 = $237 >> 11;
  $239 = $wsptr;
  $240 = (($239) + 384|0);
  HEAP32[$240>>2] = $238;
  $241 = $tmp22;
  $242 = $tmp12;
  $243 = (($241) + ($242))|0;
  $244 = $243 >> 11;
  $245 = $wsptr;
  $246 = (($245) + 64|0);
  HEAP32[$246>>2] = $244;
  $247 = $tmp22;
  $248 = $tmp12;
  $249 = (($247) - ($248))|0;
  $250 = $249 >> 11;
  $251 = $wsptr;
  $252 = (($251) + 352|0);
  HEAP32[$252>>2] = $250;
  $253 = $tmp23;
  $254 = $tmp13;
  $255 = (($253) + ($254))|0;
  $256 = $wsptr;
  $257 = (($256) + 96|0);
  HEAP32[$257>>2] = $255;
  $258 = $tmp23;
  $259 = $tmp13;
  $260 = (($258) - ($259))|0;
  $261 = $wsptr;
  $262 = (($261) + 320|0);
  HEAP32[$262>>2] = $260;
  $263 = $tmp24;
  $264 = $tmp14;
  $265 = (($263) + ($264))|0;
  $266 = $265 >> 11;
  $267 = $wsptr;
  $268 = (($267) + 128|0);
  HEAP32[$268>>2] = $266;
  $269 = $tmp24;
  $270 = $tmp14;
  $271 = (($269) - ($270))|0;
  $272 = $271 >> 11;
  $273 = $wsptr;
  $274 = (($273) + 288|0);
  HEAP32[$274>>2] = $272;
  $275 = $tmp25;
  $276 = $tmp15;
  $277 = (($275) + ($276))|0;
  $278 = $277 >> 11;
  $279 = $wsptr;
  $280 = (($279) + 160|0);
  HEAP32[$280>>2] = $278;
  $281 = $tmp25;
  $282 = $tmp15;
  $283 = (($281) - ($282))|0;
  $284 = $283 >> 11;
  $285 = $wsptr;
  $286 = (($285) + 256|0);
  HEAP32[$286>>2] = $284;
  $287 = $tmp26;
  $288 = $tmp16;
  $289 = (($287) + ($288))|0;
  $290 = $289 >> 11;
  $291 = $wsptr;
  $292 = (($291) + 192|0);
  HEAP32[$292>>2] = $290;
  $293 = $tmp26;
  $294 = $tmp16;
  $295 = (($293) - ($294))|0;
  $296 = $295 >> 11;
  $297 = $wsptr;
  $298 = (($297) + 224|0);
  HEAP32[$298>>2] = $296;
  $299 = $ctr;
  $300 = (($299) + 1)|0;
  $ctr = $300;
  $301 = $inptr;
  $302 = (($301) + 2|0);
  $inptr = $302;
  $303 = $quantptr;
  $304 = (($303) + 4|0);
  $quantptr = $304;
  $305 = $wsptr;
  $306 = (($305) + 4|0);
  $wsptr = $306;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $307 = $ctr;
  $308 = ($307|0)<(14);
  if (!($308)) {
   break;
  }
  $309 = $ctr;
  $310 = $3;
  $311 = (($310) + ($309<<2)|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = $4;
  $314 = (($312) + ($313)|0);
  $outptr = $314;
  $315 = $wsptr;
  $316 = HEAP32[$315>>2]|0;
  $317 = (($316) + 16)|0;
  $z1 = $317;
  $318 = $z1;
  $319 = $318 << 13;
  $z1 = $319;
  $320 = $wsptr;
  $321 = (($320) + 16|0);
  $322 = HEAP32[$321>>2]|0;
  $z4 = $322;
  $323 = $z4;
  $324 = ($323*10438)|0;
  $z2 = $324;
  $325 = $z4;
  $326 = ($325*2578)|0;
  $z3 = $326;
  $327 = $z4;
  $328 = ($327*7223)|0;
  $z4 = $328;
  $329 = $z1;
  $330 = $z2;
  $331 = (($329) + ($330))|0;
  $tmp10 = $331;
  $332 = $z1;
  $333 = $z3;
  $334 = (($332) + ($333))|0;
  $tmp11 = $334;
  $335 = $z1;
  $336 = $z4;
  $337 = (($335) - ($336))|0;
  $tmp12 = $337;
  $338 = $z1;
  $339 = $z2;
  $340 = $z3;
  $341 = (($339) + ($340))|0;
  $342 = $z4;
  $343 = (($341) - ($342))|0;
  $344 = $343 << 1;
  $345 = (($338) - ($344))|0;
  $tmp23 = $345;
  $346 = $wsptr;
  $347 = (($346) + 8|0);
  $348 = HEAP32[$347>>2]|0;
  $z1 = $348;
  $349 = $wsptr;
  $350 = (($349) + 24|0);
  $351 = HEAP32[$350>>2]|0;
  $z2 = $351;
  $352 = $z1;
  $353 = $z2;
  $354 = (($352) + ($353))|0;
  $355 = ($354*9058)|0;
  $z3 = $355;
  $356 = $z3;
  $357 = $z1;
  $358 = ($357*2237)|0;
  $359 = (($356) + ($358))|0;
  $tmp13 = $359;
  $360 = $z3;
  $361 = $z2;
  $362 = ($361*14084)|0;
  $363 = (($360) - ($362))|0;
  $tmp14 = $363;
  $364 = $z1;
  $365 = ($364*5027)|0;
  $366 = $z2;
  $367 = ($366*11295)|0;
  $368 = (($365) - ($367))|0;
  $tmp15 = $368;
  $369 = $tmp10;
  $370 = $tmp13;
  $371 = (($369) + ($370))|0;
  $tmp20 = $371;
  $372 = $tmp10;
  $373 = $tmp13;
  $374 = (($372) - ($373))|0;
  $tmp26 = $374;
  $375 = $tmp11;
  $376 = $tmp14;
  $377 = (($375) + ($376))|0;
  $tmp21 = $377;
  $378 = $tmp11;
  $379 = $tmp14;
  $380 = (($378) - ($379))|0;
  $tmp25 = $380;
  $381 = $tmp12;
  $382 = $tmp15;
  $383 = (($381) + ($382))|0;
  $tmp22 = $383;
  $384 = $tmp12;
  $385 = $tmp15;
  $386 = (($384) - ($385))|0;
  $tmp24 = $386;
  $387 = $wsptr;
  $388 = (($387) + 4|0);
  $389 = HEAP32[$388>>2]|0;
  $z1 = $389;
  $390 = $wsptr;
  $391 = (($390) + 12|0);
  $392 = HEAP32[$391>>2]|0;
  $z2 = $392;
  $393 = $wsptr;
  $394 = (($393) + 20|0);
  $395 = HEAP32[$394>>2]|0;
  $z3 = $395;
  $396 = $wsptr;
  $397 = (($396) + 28|0);
  $398 = HEAP32[$397>>2]|0;
  $z4 = $398;
  $399 = $z4;
  $400 = $399 << 13;
  $z4 = $400;
  $401 = $z1;
  $402 = $z3;
  $403 = (($401) + ($402))|0;
  $tmp14 = $403;
  $404 = $z1;
  $405 = $z2;
  $406 = (($404) + ($405))|0;
  $407 = ($406*10935)|0;
  $tmp11 = $407;
  $408 = $tmp14;
  $409 = ($408*9810)|0;
  $tmp12 = $409;
  $410 = $tmp11;
  $411 = $tmp12;
  $412 = (($410) + ($411))|0;
  $413 = $z4;
  $414 = (($412) + ($413))|0;
  $415 = $z1;
  $416 = ($415*9232)|0;
  $417 = (($414) - ($416))|0;
  $tmp10 = $417;
  $418 = $tmp14;
  $419 = ($418*6164)|0;
  $tmp14 = $419;
  $420 = $tmp14;
  $421 = $z1;
  $422 = ($421*8693)|0;
  $423 = (($420) - ($422))|0;
  $tmp16 = $423;
  $424 = $z2;
  $425 = $z1;
  $426 = (($425) - ($424))|0;
  $z1 = $426;
  $427 = $z1;
  $428 = ($427*3826)|0;
  $429 = $z4;
  $430 = (($428) - ($429))|0;
  $tmp15 = $430;
  $431 = $tmp15;
  $432 = $tmp16;
  $433 = (($432) + ($431))|0;
  $tmp16 = $433;
  $434 = $z2;
  $435 = $z3;
  $436 = (($434) + ($435))|0;
  $437 = Math_imul($436, -1297)|0;
  $438 = $z4;
  $439 = (($437) - ($438))|0;
  $tmp13 = $439;
  $440 = $tmp13;
  $441 = $z2;
  $442 = ($441*3474)|0;
  $443 = (($440) - ($442))|0;
  $444 = $tmp11;
  $445 = (($444) + ($443))|0;
  $tmp11 = $445;
  $446 = $tmp13;
  $447 = $z3;
  $448 = ($447*19447)|0;
  $449 = (($446) - ($448))|0;
  $450 = $tmp12;
  $451 = (($450) + ($449))|0;
  $tmp12 = $451;
  $452 = $z3;
  $453 = $z2;
  $454 = (($452) - ($453))|0;
  $455 = ($454*11512)|0;
  $tmp13 = $455;
  $456 = $tmp13;
  $457 = $z4;
  $458 = (($456) + ($457))|0;
  $459 = $z3;
  $460 = ($459*13850)|0;
  $461 = (($458) - ($460))|0;
  $462 = $tmp14;
  $463 = (($462) + ($461))|0;
  $tmp14 = $463;
  $464 = $tmp13;
  $465 = $z2;
  $466 = ($465*5529)|0;
  $467 = (($464) + ($466))|0;
  $468 = $tmp15;
  $469 = (($468) + ($467))|0;
  $tmp15 = $469;
  $470 = $z1;
  $471 = $z3;
  $472 = (($470) - ($471))|0;
  $473 = $472 << 13;
  $474 = $z4;
  $475 = (($473) + ($474))|0;
  $tmp13 = $475;
  $476 = $tmp20;
  $477 = $tmp10;
  $478 = (($476) + ($477))|0;
  $479 = $478 >> 18;
  $480 = $479 & 1023;
  $481 = $range_limit;
  $482 = (($481) + ($480)|0);
  $483 = HEAP8[$482>>0]|0;
  $484 = $outptr;
  HEAP8[$484>>0] = $483;
  $485 = $tmp20;
  $486 = $tmp10;
  $487 = (($485) - ($486))|0;
  $488 = $487 >> 18;
  $489 = $488 & 1023;
  $490 = $range_limit;
  $491 = (($490) + ($489)|0);
  $492 = HEAP8[$491>>0]|0;
  $493 = $outptr;
  $494 = (($493) + 13|0);
  HEAP8[$494>>0] = $492;
  $495 = $tmp21;
  $496 = $tmp11;
  $497 = (($495) + ($496))|0;
  $498 = $497 >> 18;
  $499 = $498 & 1023;
  $500 = $range_limit;
  $501 = (($500) + ($499)|0);
  $502 = HEAP8[$501>>0]|0;
  $503 = $outptr;
  $504 = (($503) + 1|0);
  HEAP8[$504>>0] = $502;
  $505 = $tmp21;
  $506 = $tmp11;
  $507 = (($505) - ($506))|0;
  $508 = $507 >> 18;
  $509 = $508 & 1023;
  $510 = $range_limit;
  $511 = (($510) + ($509)|0);
  $512 = HEAP8[$511>>0]|0;
  $513 = $outptr;
  $514 = (($513) + 12|0);
  HEAP8[$514>>0] = $512;
  $515 = $tmp22;
  $516 = $tmp12;
  $517 = (($515) + ($516))|0;
  $518 = $517 >> 18;
  $519 = $518 & 1023;
  $520 = $range_limit;
  $521 = (($520) + ($519)|0);
  $522 = HEAP8[$521>>0]|0;
  $523 = $outptr;
  $524 = (($523) + 2|0);
  HEAP8[$524>>0] = $522;
  $525 = $tmp22;
  $526 = $tmp12;
  $527 = (($525) - ($526))|0;
  $528 = $527 >> 18;
  $529 = $528 & 1023;
  $530 = $range_limit;
  $531 = (($530) + ($529)|0);
  $532 = HEAP8[$531>>0]|0;
  $533 = $outptr;
  $534 = (($533) + 11|0);
  HEAP8[$534>>0] = $532;
  $535 = $tmp23;
  $536 = $tmp13;
  $537 = (($535) + ($536))|0;
  $538 = $537 >> 18;
  $539 = $538 & 1023;
  $540 = $range_limit;
  $541 = (($540) + ($539)|0);
  $542 = HEAP8[$541>>0]|0;
  $543 = $outptr;
  $544 = (($543) + 3|0);
  HEAP8[$544>>0] = $542;
  $545 = $tmp23;
  $546 = $tmp13;
  $547 = (($545) - ($546))|0;
  $548 = $547 >> 18;
  $549 = $548 & 1023;
  $550 = $range_limit;
  $551 = (($550) + ($549)|0);
  $552 = HEAP8[$551>>0]|0;
  $553 = $outptr;
  $554 = (($553) + 10|0);
  HEAP8[$554>>0] = $552;
  $555 = $tmp24;
  $556 = $tmp14;
  $557 = (($555) + ($556))|0;
  $558 = $557 >> 18;
  $559 = $558 & 1023;
  $560 = $range_limit;
  $561 = (($560) + ($559)|0);
  $562 = HEAP8[$561>>0]|0;
  $563 = $outptr;
  $564 = (($563) + 4|0);
  HEAP8[$564>>0] = $562;
  $565 = $tmp24;
  $566 = $tmp14;
  $567 = (($565) - ($566))|0;
  $568 = $567 >> 18;
  $569 = $568 & 1023;
  $570 = $range_limit;
  $571 = (($570) + ($569)|0);
  $572 = HEAP8[$571>>0]|0;
  $573 = $outptr;
  $574 = (($573) + 9|0);
  HEAP8[$574>>0] = $572;
  $575 = $tmp25;
  $576 = $tmp15;
  $577 = (($575) + ($576))|0;
  $578 = $577 >> 18;
  $579 = $578 & 1023;
  $580 = $range_limit;
  $581 = (($580) + ($579)|0);
  $582 = HEAP8[$581>>0]|0;
  $583 = $outptr;
  $584 = (($583) + 5|0);
  HEAP8[$584>>0] = $582;
  $585 = $tmp25;
  $586 = $tmp15;
  $587 = (($585) - ($586))|0;
  $588 = $587 >> 18;
  $589 = $588 & 1023;
  $590 = $range_limit;
  $591 = (($590) + ($589)|0);
  $592 = HEAP8[$591>>0]|0;
  $593 = $outptr;
  $594 = (($593) + 8|0);
  HEAP8[$594>>0] = $592;
  $595 = $tmp26;
  $596 = $tmp16;
  $597 = (($595) + ($596))|0;
  $598 = $597 >> 18;
  $599 = $598 & 1023;
  $600 = $range_limit;
  $601 = (($600) + ($599)|0);
  $602 = HEAP8[$601>>0]|0;
  $603 = $outptr;
  $604 = (($603) + 6|0);
  HEAP8[$604>>0] = $602;
  $605 = $tmp26;
  $606 = $tmp16;
  $607 = (($605) - ($606))|0;
  $608 = $607 >> 18;
  $609 = $608 & 1023;
  $610 = $range_limit;
  $611 = (($610) + ($609)|0);
  $612 = HEAP8[$611>>0]|0;
  $613 = $outptr;
  $614 = (($613) + 7|0);
  HEAP8[$614>>0] = $612;
  $615 = $wsptr;
  $616 = (($615) + 32|0);
  $wsptr = $616;
  $617 = $ctr;
  $618 = (($617) + 1)|0;
  $ctr = $618;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_15x15($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0;
 var $tmp14 = 0, $tmp15 = 0, $tmp16 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $tmp26 = 0, $tmp27 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $z1 = $20;
  $21 = $z1;
  $22 = $21 << 13;
  $z1 = $22;
  $23 = $z1;
  $24 = (($23) + 1024)|0;
  $z1 = $24;
  $25 = $inptr;
  $26 = (($25) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z2 = $32;
  $33 = $inptr;
  $34 = (($33) + 64|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $quantptr;
  $38 = (($37) + 128|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $z3 = $40;
  $41 = $inptr;
  $42 = (($41) + 96|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = $quantptr;
  $46 = (($45) + 192|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = Math_imul($44, $47)|0;
  $z4 = $48;
  $49 = $z4;
  $50 = ($49*3580)|0;
  $tmp10 = $50;
  $51 = $z4;
  $52 = ($51*9373)|0;
  $tmp11 = $52;
  $53 = $z1;
  $54 = $tmp10;
  $55 = (($53) - ($54))|0;
  $tmp12 = $55;
  $56 = $z1;
  $57 = $tmp11;
  $58 = (($56) + ($57))|0;
  $tmp13 = $58;
  $59 = $tmp11;
  $60 = $tmp10;
  $61 = (($59) - ($60))|0;
  $62 = $61 << 1;
  $63 = $z1;
  $64 = (($63) - ($62))|0;
  $z1 = $64;
  $65 = $z2;
  $66 = $z3;
  $67 = (($65) - ($66))|0;
  $z4 = $67;
  $68 = $z2;
  $69 = $z3;
  $70 = (($69) + ($68))|0;
  $z3 = $70;
  $71 = $z3;
  $72 = ($71*10958)|0;
  $tmp10 = $72;
  $73 = $z4;
  $74 = ($73*374)|0;
  $tmp11 = $74;
  $75 = $z2;
  $76 = ($75*11795)|0;
  $z2 = $76;
  $77 = $tmp13;
  $78 = $tmp10;
  $79 = (($77) + ($78))|0;
  $80 = $tmp11;
  $81 = (($79) + ($80))|0;
  $tmp20 = $81;
  $82 = $tmp12;
  $83 = $tmp10;
  $84 = (($82) - ($83))|0;
  $85 = $tmp11;
  $86 = (($84) + ($85))|0;
  $87 = $z2;
  $88 = (($86) + ($87))|0;
  $tmp23 = $88;
  $89 = $z3;
  $90 = ($89*4482)|0;
  $tmp10 = $90;
  $91 = $z4;
  $92 = ($91*3271)|0;
  $tmp11 = $92;
  $93 = $tmp13;
  $94 = $tmp10;
  $95 = (($93) - ($94))|0;
  $96 = $tmp11;
  $97 = (($95) - ($96))|0;
  $tmp25 = $97;
  $98 = $tmp12;
  $99 = $tmp10;
  $100 = (($98) + ($99))|0;
  $101 = $tmp11;
  $102 = (($100) - ($101))|0;
  $103 = $z2;
  $104 = (($102) - ($103))|0;
  $tmp26 = $104;
  $105 = $z3;
  $106 = ($105*6476)|0;
  $tmp10 = $106;
  $107 = $z4;
  $108 = ($107*2896)|0;
  $tmp11 = $108;
  $109 = $tmp12;
  $110 = $tmp10;
  $111 = (($109) + ($110))|0;
  $112 = $tmp11;
  $113 = (($111) + ($112))|0;
  $tmp21 = $113;
  $114 = $tmp13;
  $115 = $tmp10;
  $116 = (($114) - ($115))|0;
  $117 = $tmp11;
  $118 = (($116) + ($117))|0;
  $tmp24 = $118;
  $119 = $tmp11;
  $120 = $tmp11;
  $121 = (($120) + ($119))|0;
  $tmp11 = $121;
  $122 = $z1;
  $123 = $tmp11;
  $124 = (($122) + ($123))|0;
  $tmp22 = $124;
  $125 = $z1;
  $126 = $tmp11;
  $127 = (($125) - ($126))|0;
  $128 = $tmp11;
  $129 = (($127) - ($128))|0;
  $tmp27 = $129;
  $130 = $inptr;
  $131 = (($130) + 16|0);
  $132 = HEAP16[$131>>1]|0;
  $133 = $132 << 16 >> 16;
  $134 = $quantptr;
  $135 = (($134) + 32|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = Math_imul($133, $136)|0;
  $z1 = $137;
  $138 = $inptr;
  $139 = (($138) + 48|0);
  $140 = HEAP16[$139>>1]|0;
  $141 = $140 << 16 >> 16;
  $142 = $quantptr;
  $143 = (($142) + 96|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = Math_imul($141, $144)|0;
  $z2 = $145;
  $146 = $inptr;
  $147 = (($146) + 80|0);
  $148 = HEAP16[$147>>1]|0;
  $149 = $148 << 16 >> 16;
  $150 = $quantptr;
  $151 = (($150) + 160|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = Math_imul($149, $152)|0;
  $z4 = $153;
  $154 = $z4;
  $155 = ($154*10033)|0;
  $z3 = $155;
  $156 = $inptr;
  $157 = (($156) + 112|0);
  $158 = HEAP16[$157>>1]|0;
  $159 = $158 << 16 >> 16;
  $160 = $quantptr;
  $161 = (($160) + 224|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = Math_imul($159, $162)|0;
  $z4 = $163;
  $164 = $z2;
  $165 = $z4;
  $166 = (($164) - ($165))|0;
  $tmp13 = $166;
  $167 = $z1;
  $168 = $tmp13;
  $169 = (($167) + ($168))|0;
  $170 = ($169*6810)|0;
  $tmp15 = $170;
  $171 = $tmp15;
  $172 = $z1;
  $173 = ($172*4209)|0;
  $174 = (($171) + ($173))|0;
  $tmp11 = $174;
  $175 = $tmp15;
  $176 = $tmp13;
  $177 = ($176*17828)|0;
  $178 = (($175) - ($177))|0;
  $tmp14 = $178;
  $179 = $z2;
  $180 = Math_imul($179, -6810)|0;
  $tmp13 = $180;
  $181 = $z2;
  $182 = Math_imul($181, -11018)|0;
  $tmp15 = $182;
  $183 = $z1;
  $184 = $z4;
  $185 = (($183) - ($184))|0;
  $z2 = $185;
  $186 = $z3;
  $187 = $z2;
  $188 = ($187*11522)|0;
  $189 = (($186) + ($188))|0;
  $tmp12 = $189;
  $190 = $tmp12;
  $191 = $z4;
  $192 = ($191*20131)|0;
  $193 = (($190) + ($192))|0;
  $194 = $tmp15;
  $195 = (($193) - ($194))|0;
  $tmp10 = $195;
  $196 = $tmp12;
  $197 = $z1;
  $198 = ($197*9113)|0;
  $199 = (($196) - ($198))|0;
  $200 = $tmp13;
  $201 = (($199) + ($200))|0;
  $tmp16 = $201;
  $202 = $z2;
  $203 = ($202*10033)|0;
  $204 = $z3;
  $205 = (($203) - ($204))|0;
  $tmp12 = $205;
  $206 = $z1;
  $207 = $z4;
  $208 = (($206) + ($207))|0;
  $209 = ($208*4712)|0;
  $z2 = $209;
  $210 = $z2;
  $211 = $z1;
  $212 = ($211*3897)|0;
  $213 = (($210) + ($212))|0;
  $214 = $z3;
  $215 = (($213) - ($214))|0;
  $216 = $tmp13;
  $217 = (($216) + ($215))|0;
  $tmp13 = $217;
  $218 = $z2;
  $219 = $z4;
  $220 = ($219*7121)|0;
  $221 = (($218) - ($220))|0;
  $222 = $z3;
  $223 = (($221) + ($222))|0;
  $224 = $tmp15;
  $225 = (($224) + ($223))|0;
  $tmp15 = $225;
  $226 = $tmp20;
  $227 = $tmp10;
  $228 = (($226) + ($227))|0;
  $229 = $228 >> 11;
  $230 = $wsptr;
  HEAP32[$230>>2] = $229;
  $231 = $tmp20;
  $232 = $tmp10;
  $233 = (($231) - ($232))|0;
  $234 = $233 >> 11;
  $235 = $wsptr;
  $236 = (($235) + 448|0);
  HEAP32[$236>>2] = $234;
  $237 = $tmp21;
  $238 = $tmp11;
  $239 = (($237) + ($238))|0;
  $240 = $239 >> 11;
  $241 = $wsptr;
  $242 = (($241) + 32|0);
  HEAP32[$242>>2] = $240;
  $243 = $tmp21;
  $244 = $tmp11;
  $245 = (($243) - ($244))|0;
  $246 = $245 >> 11;
  $247 = $wsptr;
  $248 = (($247) + 416|0);
  HEAP32[$248>>2] = $246;
  $249 = $tmp22;
  $250 = $tmp12;
  $251 = (($249) + ($250))|0;
  $252 = $251 >> 11;
  $253 = $wsptr;
  $254 = (($253) + 64|0);
  HEAP32[$254>>2] = $252;
  $255 = $tmp22;
  $256 = $tmp12;
  $257 = (($255) - ($256))|0;
  $258 = $257 >> 11;
  $259 = $wsptr;
  $260 = (($259) + 384|0);
  HEAP32[$260>>2] = $258;
  $261 = $tmp23;
  $262 = $tmp13;
  $263 = (($261) + ($262))|0;
  $264 = $263 >> 11;
  $265 = $wsptr;
  $266 = (($265) + 96|0);
  HEAP32[$266>>2] = $264;
  $267 = $tmp23;
  $268 = $tmp13;
  $269 = (($267) - ($268))|0;
  $270 = $269 >> 11;
  $271 = $wsptr;
  $272 = (($271) + 352|0);
  HEAP32[$272>>2] = $270;
  $273 = $tmp24;
  $274 = $tmp14;
  $275 = (($273) + ($274))|0;
  $276 = $275 >> 11;
  $277 = $wsptr;
  $278 = (($277) + 128|0);
  HEAP32[$278>>2] = $276;
  $279 = $tmp24;
  $280 = $tmp14;
  $281 = (($279) - ($280))|0;
  $282 = $281 >> 11;
  $283 = $wsptr;
  $284 = (($283) + 320|0);
  HEAP32[$284>>2] = $282;
  $285 = $tmp25;
  $286 = $tmp15;
  $287 = (($285) + ($286))|0;
  $288 = $287 >> 11;
  $289 = $wsptr;
  $290 = (($289) + 160|0);
  HEAP32[$290>>2] = $288;
  $291 = $tmp25;
  $292 = $tmp15;
  $293 = (($291) - ($292))|0;
  $294 = $293 >> 11;
  $295 = $wsptr;
  $296 = (($295) + 288|0);
  HEAP32[$296>>2] = $294;
  $297 = $tmp26;
  $298 = $tmp16;
  $299 = (($297) + ($298))|0;
  $300 = $299 >> 11;
  $301 = $wsptr;
  $302 = (($301) + 192|0);
  HEAP32[$302>>2] = $300;
  $303 = $tmp26;
  $304 = $tmp16;
  $305 = (($303) - ($304))|0;
  $306 = $305 >> 11;
  $307 = $wsptr;
  $308 = (($307) + 256|0);
  HEAP32[$308>>2] = $306;
  $309 = $tmp27;
  $310 = $309 >> 11;
  $311 = $wsptr;
  $312 = (($311) + 224|0);
  HEAP32[$312>>2] = $310;
  $313 = $ctr;
  $314 = (($313) + 1)|0;
  $ctr = $314;
  $315 = $inptr;
  $316 = (($315) + 2|0);
  $inptr = $316;
  $317 = $quantptr;
  $318 = (($317) + 4|0);
  $quantptr = $318;
  $319 = $wsptr;
  $320 = (($319) + 4|0);
  $wsptr = $320;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $321 = $ctr;
  $322 = ($321|0)<(15);
  if (!($322)) {
   break;
  }
  $323 = $ctr;
  $324 = $3;
  $325 = (($324) + ($323<<2)|0);
  $326 = HEAP32[$325>>2]|0;
  $327 = $4;
  $328 = (($326) + ($327)|0);
  $outptr = $328;
  $329 = $wsptr;
  $330 = HEAP32[$329>>2]|0;
  $331 = (($330) + 16)|0;
  $z1 = $331;
  $332 = $z1;
  $333 = $332 << 13;
  $z1 = $333;
  $334 = $wsptr;
  $335 = (($334) + 8|0);
  $336 = HEAP32[$335>>2]|0;
  $z2 = $336;
  $337 = $wsptr;
  $338 = (($337) + 16|0);
  $339 = HEAP32[$338>>2]|0;
  $z3 = $339;
  $340 = $wsptr;
  $341 = (($340) + 24|0);
  $342 = HEAP32[$341>>2]|0;
  $z4 = $342;
  $343 = $z4;
  $344 = ($343*3580)|0;
  $tmp10 = $344;
  $345 = $z4;
  $346 = ($345*9373)|0;
  $tmp11 = $346;
  $347 = $z1;
  $348 = $tmp10;
  $349 = (($347) - ($348))|0;
  $tmp12 = $349;
  $350 = $z1;
  $351 = $tmp11;
  $352 = (($350) + ($351))|0;
  $tmp13 = $352;
  $353 = $tmp11;
  $354 = $tmp10;
  $355 = (($353) - ($354))|0;
  $356 = $355 << 1;
  $357 = $z1;
  $358 = (($357) - ($356))|0;
  $z1 = $358;
  $359 = $z2;
  $360 = $z3;
  $361 = (($359) - ($360))|0;
  $z4 = $361;
  $362 = $z2;
  $363 = $z3;
  $364 = (($363) + ($362))|0;
  $z3 = $364;
  $365 = $z3;
  $366 = ($365*10958)|0;
  $tmp10 = $366;
  $367 = $z4;
  $368 = ($367*374)|0;
  $tmp11 = $368;
  $369 = $z2;
  $370 = ($369*11795)|0;
  $z2 = $370;
  $371 = $tmp13;
  $372 = $tmp10;
  $373 = (($371) + ($372))|0;
  $374 = $tmp11;
  $375 = (($373) + ($374))|0;
  $tmp20 = $375;
  $376 = $tmp12;
  $377 = $tmp10;
  $378 = (($376) - ($377))|0;
  $379 = $tmp11;
  $380 = (($378) + ($379))|0;
  $381 = $z2;
  $382 = (($380) + ($381))|0;
  $tmp23 = $382;
  $383 = $z3;
  $384 = ($383*4482)|0;
  $tmp10 = $384;
  $385 = $z4;
  $386 = ($385*3271)|0;
  $tmp11 = $386;
  $387 = $tmp13;
  $388 = $tmp10;
  $389 = (($387) - ($388))|0;
  $390 = $tmp11;
  $391 = (($389) - ($390))|0;
  $tmp25 = $391;
  $392 = $tmp12;
  $393 = $tmp10;
  $394 = (($392) + ($393))|0;
  $395 = $tmp11;
  $396 = (($394) - ($395))|0;
  $397 = $z2;
  $398 = (($396) - ($397))|0;
  $tmp26 = $398;
  $399 = $z3;
  $400 = ($399*6476)|0;
  $tmp10 = $400;
  $401 = $z4;
  $402 = ($401*2896)|0;
  $tmp11 = $402;
  $403 = $tmp12;
  $404 = $tmp10;
  $405 = (($403) + ($404))|0;
  $406 = $tmp11;
  $407 = (($405) + ($406))|0;
  $tmp21 = $407;
  $408 = $tmp13;
  $409 = $tmp10;
  $410 = (($408) - ($409))|0;
  $411 = $tmp11;
  $412 = (($410) + ($411))|0;
  $tmp24 = $412;
  $413 = $tmp11;
  $414 = $tmp11;
  $415 = (($414) + ($413))|0;
  $tmp11 = $415;
  $416 = $z1;
  $417 = $tmp11;
  $418 = (($416) + ($417))|0;
  $tmp22 = $418;
  $419 = $z1;
  $420 = $tmp11;
  $421 = (($419) - ($420))|0;
  $422 = $tmp11;
  $423 = (($421) - ($422))|0;
  $tmp27 = $423;
  $424 = $wsptr;
  $425 = (($424) + 4|0);
  $426 = HEAP32[$425>>2]|0;
  $z1 = $426;
  $427 = $wsptr;
  $428 = (($427) + 12|0);
  $429 = HEAP32[$428>>2]|0;
  $z2 = $429;
  $430 = $wsptr;
  $431 = (($430) + 20|0);
  $432 = HEAP32[$431>>2]|0;
  $z4 = $432;
  $433 = $z4;
  $434 = ($433*10033)|0;
  $z3 = $434;
  $435 = $wsptr;
  $436 = (($435) + 28|0);
  $437 = HEAP32[$436>>2]|0;
  $z4 = $437;
  $438 = $z2;
  $439 = $z4;
  $440 = (($438) - ($439))|0;
  $tmp13 = $440;
  $441 = $z1;
  $442 = $tmp13;
  $443 = (($441) + ($442))|0;
  $444 = ($443*6810)|0;
  $tmp15 = $444;
  $445 = $tmp15;
  $446 = $z1;
  $447 = ($446*4209)|0;
  $448 = (($445) + ($447))|0;
  $tmp11 = $448;
  $449 = $tmp15;
  $450 = $tmp13;
  $451 = ($450*17828)|0;
  $452 = (($449) - ($451))|0;
  $tmp14 = $452;
  $453 = $z2;
  $454 = Math_imul($453, -6810)|0;
  $tmp13 = $454;
  $455 = $z2;
  $456 = Math_imul($455, -11018)|0;
  $tmp15 = $456;
  $457 = $z1;
  $458 = $z4;
  $459 = (($457) - ($458))|0;
  $z2 = $459;
  $460 = $z3;
  $461 = $z2;
  $462 = ($461*11522)|0;
  $463 = (($460) + ($462))|0;
  $tmp12 = $463;
  $464 = $tmp12;
  $465 = $z4;
  $466 = ($465*20131)|0;
  $467 = (($464) + ($466))|0;
  $468 = $tmp15;
  $469 = (($467) - ($468))|0;
  $tmp10 = $469;
  $470 = $tmp12;
  $471 = $z1;
  $472 = ($471*9113)|0;
  $473 = (($470) - ($472))|0;
  $474 = $tmp13;
  $475 = (($473) + ($474))|0;
  $tmp16 = $475;
  $476 = $z2;
  $477 = ($476*10033)|0;
  $478 = $z3;
  $479 = (($477) - ($478))|0;
  $tmp12 = $479;
  $480 = $z1;
  $481 = $z4;
  $482 = (($480) + ($481))|0;
  $483 = ($482*4712)|0;
  $z2 = $483;
  $484 = $z2;
  $485 = $z1;
  $486 = ($485*3897)|0;
  $487 = (($484) + ($486))|0;
  $488 = $z3;
  $489 = (($487) - ($488))|0;
  $490 = $tmp13;
  $491 = (($490) + ($489))|0;
  $tmp13 = $491;
  $492 = $z2;
  $493 = $z4;
  $494 = ($493*7121)|0;
  $495 = (($492) - ($494))|0;
  $496 = $z3;
  $497 = (($495) + ($496))|0;
  $498 = $tmp15;
  $499 = (($498) + ($497))|0;
  $tmp15 = $499;
  $500 = $tmp20;
  $501 = $tmp10;
  $502 = (($500) + ($501))|0;
  $503 = $502 >> 18;
  $504 = $503 & 1023;
  $505 = $range_limit;
  $506 = (($505) + ($504)|0);
  $507 = HEAP8[$506>>0]|0;
  $508 = $outptr;
  HEAP8[$508>>0] = $507;
  $509 = $tmp20;
  $510 = $tmp10;
  $511 = (($509) - ($510))|0;
  $512 = $511 >> 18;
  $513 = $512 & 1023;
  $514 = $range_limit;
  $515 = (($514) + ($513)|0);
  $516 = HEAP8[$515>>0]|0;
  $517 = $outptr;
  $518 = (($517) + 14|0);
  HEAP8[$518>>0] = $516;
  $519 = $tmp21;
  $520 = $tmp11;
  $521 = (($519) + ($520))|0;
  $522 = $521 >> 18;
  $523 = $522 & 1023;
  $524 = $range_limit;
  $525 = (($524) + ($523)|0);
  $526 = HEAP8[$525>>0]|0;
  $527 = $outptr;
  $528 = (($527) + 1|0);
  HEAP8[$528>>0] = $526;
  $529 = $tmp21;
  $530 = $tmp11;
  $531 = (($529) - ($530))|0;
  $532 = $531 >> 18;
  $533 = $532 & 1023;
  $534 = $range_limit;
  $535 = (($534) + ($533)|0);
  $536 = HEAP8[$535>>0]|0;
  $537 = $outptr;
  $538 = (($537) + 13|0);
  HEAP8[$538>>0] = $536;
  $539 = $tmp22;
  $540 = $tmp12;
  $541 = (($539) + ($540))|0;
  $542 = $541 >> 18;
  $543 = $542 & 1023;
  $544 = $range_limit;
  $545 = (($544) + ($543)|0);
  $546 = HEAP8[$545>>0]|0;
  $547 = $outptr;
  $548 = (($547) + 2|0);
  HEAP8[$548>>0] = $546;
  $549 = $tmp22;
  $550 = $tmp12;
  $551 = (($549) - ($550))|0;
  $552 = $551 >> 18;
  $553 = $552 & 1023;
  $554 = $range_limit;
  $555 = (($554) + ($553)|0);
  $556 = HEAP8[$555>>0]|0;
  $557 = $outptr;
  $558 = (($557) + 12|0);
  HEAP8[$558>>0] = $556;
  $559 = $tmp23;
  $560 = $tmp13;
  $561 = (($559) + ($560))|0;
  $562 = $561 >> 18;
  $563 = $562 & 1023;
  $564 = $range_limit;
  $565 = (($564) + ($563)|0);
  $566 = HEAP8[$565>>0]|0;
  $567 = $outptr;
  $568 = (($567) + 3|0);
  HEAP8[$568>>0] = $566;
  $569 = $tmp23;
  $570 = $tmp13;
  $571 = (($569) - ($570))|0;
  $572 = $571 >> 18;
  $573 = $572 & 1023;
  $574 = $range_limit;
  $575 = (($574) + ($573)|0);
  $576 = HEAP8[$575>>0]|0;
  $577 = $outptr;
  $578 = (($577) + 11|0);
  HEAP8[$578>>0] = $576;
  $579 = $tmp24;
  $580 = $tmp14;
  $581 = (($579) + ($580))|0;
  $582 = $581 >> 18;
  $583 = $582 & 1023;
  $584 = $range_limit;
  $585 = (($584) + ($583)|0);
  $586 = HEAP8[$585>>0]|0;
  $587 = $outptr;
  $588 = (($587) + 4|0);
  HEAP8[$588>>0] = $586;
  $589 = $tmp24;
  $590 = $tmp14;
  $591 = (($589) - ($590))|0;
  $592 = $591 >> 18;
  $593 = $592 & 1023;
  $594 = $range_limit;
  $595 = (($594) + ($593)|0);
  $596 = HEAP8[$595>>0]|0;
  $597 = $outptr;
  $598 = (($597) + 10|0);
  HEAP8[$598>>0] = $596;
  $599 = $tmp25;
  $600 = $tmp15;
  $601 = (($599) + ($600))|0;
  $602 = $601 >> 18;
  $603 = $602 & 1023;
  $604 = $range_limit;
  $605 = (($604) + ($603)|0);
  $606 = HEAP8[$605>>0]|0;
  $607 = $outptr;
  $608 = (($607) + 5|0);
  HEAP8[$608>>0] = $606;
  $609 = $tmp25;
  $610 = $tmp15;
  $611 = (($609) - ($610))|0;
  $612 = $611 >> 18;
  $613 = $612 & 1023;
  $614 = $range_limit;
  $615 = (($614) + ($613)|0);
  $616 = HEAP8[$615>>0]|0;
  $617 = $outptr;
  $618 = (($617) + 9|0);
  HEAP8[$618>>0] = $616;
  $619 = $tmp26;
  $620 = $tmp16;
  $621 = (($619) + ($620))|0;
  $622 = $621 >> 18;
  $623 = $622 & 1023;
  $624 = $range_limit;
  $625 = (($624) + ($623)|0);
  $626 = HEAP8[$625>>0]|0;
  $627 = $outptr;
  $628 = (($627) + 6|0);
  HEAP8[$628>>0] = $626;
  $629 = $tmp26;
  $630 = $tmp16;
  $631 = (($629) - ($630))|0;
  $632 = $631 >> 18;
  $633 = $632 & 1023;
  $634 = $range_limit;
  $635 = (($634) + ($633)|0);
  $636 = HEAP8[$635>>0]|0;
  $637 = $outptr;
  $638 = (($637) + 8|0);
  HEAP8[$638>>0] = $636;
  $639 = $tmp27;
  $640 = $639 >> 18;
  $641 = $640 & 1023;
  $642 = $range_limit;
  $643 = (($642) + ($641)|0);
  $644 = HEAP8[$643>>0]|0;
  $645 = $outptr;
  $646 = (($645) + 7|0);
  HEAP8[$646>>0] = $644;
  $647 = $wsptr;
  $648 = (($647) + 32|0);
  $wsptr = $648;
  $649 = $ctr;
  $650 = (($649) + 1)|0;
  $ctr = $650;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_16x16($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0;
 var $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $tmp26 = 0, $tmp27 = 0, $tmp3 = 0;
 var $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp0 = $20;
  $21 = $tmp0;
  $22 = $21 << 13;
  $tmp0 = $22;
  $23 = $tmp0;
  $24 = (($23) + 1024)|0;
  $tmp0 = $24;
  $25 = $inptr;
  $26 = (($25) + 64|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z1 = $32;
  $33 = $z1;
  $34 = ($33*10703)|0;
  $tmp1 = $34;
  $35 = $z1;
  $36 = ($35*4433)|0;
  $tmp2 = $36;
  $37 = $tmp0;
  $38 = $tmp1;
  $39 = (($37) + ($38))|0;
  $tmp10 = $39;
  $40 = $tmp0;
  $41 = $tmp1;
  $42 = (($40) - ($41))|0;
  $tmp11 = $42;
  $43 = $tmp0;
  $44 = $tmp2;
  $45 = (($43) + ($44))|0;
  $tmp12 = $45;
  $46 = $tmp0;
  $47 = $tmp2;
  $48 = (($46) - ($47))|0;
  $tmp13 = $48;
  $49 = $inptr;
  $50 = (($49) + 32|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = $quantptr;
  $54 = (($53) + 64|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = Math_imul($52, $55)|0;
  $z1 = $56;
  $57 = $inptr;
  $58 = (($57) + 96|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = $quantptr;
  $62 = (($61) + 192|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = Math_imul($60, $63)|0;
  $z2 = $64;
  $65 = $z1;
  $66 = $z2;
  $67 = (($65) - ($66))|0;
  $z3 = $67;
  $68 = $z3;
  $69 = ($68*2260)|0;
  $z4 = $69;
  $70 = $z3;
  $71 = ($70*11363)|0;
  $z3 = $71;
  $72 = $z3;
  $73 = $z2;
  $74 = ($73*20995)|0;
  $75 = (($72) + ($74))|0;
  $tmp0 = $75;
  $76 = $z4;
  $77 = $z1;
  $78 = ($77*7373)|0;
  $79 = (($76) + ($78))|0;
  $tmp1 = $79;
  $80 = $z3;
  $81 = $z1;
  $82 = ($81*4926)|0;
  $83 = (($80) - ($82))|0;
  $tmp2 = $83;
  $84 = $z4;
  $85 = $z2;
  $86 = ($85*4176)|0;
  $87 = (($84) - ($86))|0;
  $tmp3 = $87;
  $88 = $tmp10;
  $89 = $tmp0;
  $90 = (($88) + ($89))|0;
  $tmp20 = $90;
  $91 = $tmp10;
  $92 = $tmp0;
  $93 = (($91) - ($92))|0;
  $tmp27 = $93;
  $94 = $tmp12;
  $95 = $tmp1;
  $96 = (($94) + ($95))|0;
  $tmp21 = $96;
  $97 = $tmp12;
  $98 = $tmp1;
  $99 = (($97) - ($98))|0;
  $tmp26 = $99;
  $100 = $tmp13;
  $101 = $tmp2;
  $102 = (($100) + ($101))|0;
  $tmp22 = $102;
  $103 = $tmp13;
  $104 = $tmp2;
  $105 = (($103) - ($104))|0;
  $tmp25 = $105;
  $106 = $tmp11;
  $107 = $tmp3;
  $108 = (($106) + ($107))|0;
  $tmp23 = $108;
  $109 = $tmp11;
  $110 = $tmp3;
  $111 = (($109) - ($110))|0;
  $tmp24 = $111;
  $112 = $inptr;
  $113 = (($112) + 16|0);
  $114 = HEAP16[$113>>1]|0;
  $115 = $114 << 16 >> 16;
  $116 = $quantptr;
  $117 = (($116) + 32|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = Math_imul($115, $118)|0;
  $z1 = $119;
  $120 = $inptr;
  $121 = (($120) + 48|0);
  $122 = HEAP16[$121>>1]|0;
  $123 = $122 << 16 >> 16;
  $124 = $quantptr;
  $125 = (($124) + 96|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = Math_imul($123, $126)|0;
  $z2 = $127;
  $128 = $inptr;
  $129 = (($128) + 80|0);
  $130 = HEAP16[$129>>1]|0;
  $131 = $130 << 16 >> 16;
  $132 = $quantptr;
  $133 = (($132) + 160|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = Math_imul($131, $134)|0;
  $z3 = $135;
  $136 = $inptr;
  $137 = (($136) + 112|0);
  $138 = HEAP16[$137>>1]|0;
  $139 = $138 << 16 >> 16;
  $140 = $quantptr;
  $141 = (($140) + 224|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = Math_imul($139, $142)|0;
  $z4 = $143;
  $144 = $z1;
  $145 = $z3;
  $146 = (($144) + ($145))|0;
  $tmp11 = $146;
  $147 = $z1;
  $148 = $z2;
  $149 = (($147) + ($148))|0;
  $150 = ($149*11086)|0;
  $tmp1 = $150;
  $151 = $tmp11;
  $152 = ($151*10217)|0;
  $tmp2 = $152;
  $153 = $z1;
  $154 = $z4;
  $155 = (($153) + ($154))|0;
  $156 = ($155*8956)|0;
  $tmp3 = $156;
  $157 = $z1;
  $158 = $z4;
  $159 = (($157) - ($158))|0;
  $160 = ($159*7350)|0;
  $tmp10 = $160;
  $161 = $tmp11;
  $162 = ($161*5461)|0;
  $tmp11 = $162;
  $163 = $z1;
  $164 = $z2;
  $165 = (($163) - ($164))|0;
  $166 = ($165*3363)|0;
  $tmp12 = $166;
  $167 = $tmp1;
  $168 = $tmp2;
  $169 = (($167) + ($168))|0;
  $170 = $tmp3;
  $171 = (($169) + ($170))|0;
  $172 = $z1;
  $173 = ($172*18730)|0;
  $174 = (($171) - ($173))|0;
  $tmp0 = $174;
  $175 = $tmp10;
  $176 = $tmp11;
  $177 = (($175) + ($176))|0;
  $178 = $tmp12;
  $179 = (($177) + ($178))|0;
  $180 = $z1;
  $181 = ($180*15038)|0;
  $182 = (($179) - ($181))|0;
  $tmp13 = $182;
  $183 = $z2;
  $184 = $z3;
  $185 = (($183) + ($184))|0;
  $186 = ($185*1136)|0;
  $z1 = $186;
  $187 = $z1;
  $188 = $z2;
  $189 = ($188*589)|0;
  $190 = (($187) + ($189))|0;
  $191 = $tmp1;
  $192 = (($191) + ($190))|0;
  $tmp1 = $192;
  $193 = $z1;
  $194 = $z3;
  $195 = ($194*9222)|0;
  $196 = (($193) - ($195))|0;
  $197 = $tmp2;
  $198 = (($197) + ($196))|0;
  $tmp2 = $198;
  $199 = $z3;
  $200 = $z2;
  $201 = (($199) - ($200))|0;
  $202 = ($201*11529)|0;
  $z1 = $202;
  $203 = $z1;
  $204 = $z3;
  $205 = ($204*6278)|0;
  $206 = (($203) - ($205))|0;
  $207 = $tmp11;
  $208 = (($207) + ($206))|0;
  $tmp11 = $208;
  $209 = $z1;
  $210 = $z2;
  $211 = ($210*16154)|0;
  $212 = (($209) + ($211))|0;
  $213 = $tmp12;
  $214 = (($213) + ($212))|0;
  $tmp12 = $214;
  $215 = $z4;
  $216 = $z2;
  $217 = (($216) + ($215))|0;
  $z2 = $217;
  $218 = $z2;
  $219 = Math_imul($218, -5461)|0;
  $z1 = $219;
  $220 = $z1;
  $221 = $tmp1;
  $222 = (($221) + ($220))|0;
  $tmp1 = $222;
  $223 = $z1;
  $224 = $z4;
  $225 = ($224*8728)|0;
  $226 = (($223) + ($225))|0;
  $227 = $tmp3;
  $228 = (($227) + ($226))|0;
  $tmp3 = $228;
  $229 = $z2;
  $230 = Math_imul($229, -10217)|0;
  $z2 = $230;
  $231 = $z2;
  $232 = $z4;
  $233 = ($232*25733)|0;
  $234 = (($231) + ($233))|0;
  $235 = $tmp10;
  $236 = (($235) + ($234))|0;
  $tmp10 = $236;
  $237 = $z2;
  $238 = $tmp12;
  $239 = (($238) + ($237))|0;
  $tmp12 = $239;
  $240 = $z3;
  $241 = $z4;
  $242 = (($240) + ($241))|0;
  $243 = Math_imul($242, -11086)|0;
  $z2 = $243;
  $244 = $z2;
  $245 = $tmp2;
  $246 = (($245) + ($244))|0;
  $tmp2 = $246;
  $247 = $z2;
  $248 = $tmp3;
  $249 = (($248) + ($247))|0;
  $tmp3 = $249;
  $250 = $z4;
  $251 = $z3;
  $252 = (($250) - ($251))|0;
  $253 = ($252*3363)|0;
  $z2 = $253;
  $254 = $z2;
  $255 = $tmp10;
  $256 = (($255) + ($254))|0;
  $tmp10 = $256;
  $257 = $z2;
  $258 = $tmp11;
  $259 = (($258) + ($257))|0;
  $tmp11 = $259;
  $260 = $tmp20;
  $261 = $tmp0;
  $262 = (($260) + ($261))|0;
  $263 = $262 >> 11;
  $264 = $wsptr;
  HEAP32[$264>>2] = $263;
  $265 = $tmp20;
  $266 = $tmp0;
  $267 = (($265) - ($266))|0;
  $268 = $267 >> 11;
  $269 = $wsptr;
  $270 = (($269) + 480|0);
  HEAP32[$270>>2] = $268;
  $271 = $tmp21;
  $272 = $tmp1;
  $273 = (($271) + ($272))|0;
  $274 = $273 >> 11;
  $275 = $wsptr;
  $276 = (($275) + 32|0);
  HEAP32[$276>>2] = $274;
  $277 = $tmp21;
  $278 = $tmp1;
  $279 = (($277) - ($278))|0;
  $280 = $279 >> 11;
  $281 = $wsptr;
  $282 = (($281) + 448|0);
  HEAP32[$282>>2] = $280;
  $283 = $tmp22;
  $284 = $tmp2;
  $285 = (($283) + ($284))|0;
  $286 = $285 >> 11;
  $287 = $wsptr;
  $288 = (($287) + 64|0);
  HEAP32[$288>>2] = $286;
  $289 = $tmp22;
  $290 = $tmp2;
  $291 = (($289) - ($290))|0;
  $292 = $291 >> 11;
  $293 = $wsptr;
  $294 = (($293) + 416|0);
  HEAP32[$294>>2] = $292;
  $295 = $tmp23;
  $296 = $tmp3;
  $297 = (($295) + ($296))|0;
  $298 = $297 >> 11;
  $299 = $wsptr;
  $300 = (($299) + 96|0);
  HEAP32[$300>>2] = $298;
  $301 = $tmp23;
  $302 = $tmp3;
  $303 = (($301) - ($302))|0;
  $304 = $303 >> 11;
  $305 = $wsptr;
  $306 = (($305) + 384|0);
  HEAP32[$306>>2] = $304;
  $307 = $tmp24;
  $308 = $tmp10;
  $309 = (($307) + ($308))|0;
  $310 = $309 >> 11;
  $311 = $wsptr;
  $312 = (($311) + 128|0);
  HEAP32[$312>>2] = $310;
  $313 = $tmp24;
  $314 = $tmp10;
  $315 = (($313) - ($314))|0;
  $316 = $315 >> 11;
  $317 = $wsptr;
  $318 = (($317) + 352|0);
  HEAP32[$318>>2] = $316;
  $319 = $tmp25;
  $320 = $tmp11;
  $321 = (($319) + ($320))|0;
  $322 = $321 >> 11;
  $323 = $wsptr;
  $324 = (($323) + 160|0);
  HEAP32[$324>>2] = $322;
  $325 = $tmp25;
  $326 = $tmp11;
  $327 = (($325) - ($326))|0;
  $328 = $327 >> 11;
  $329 = $wsptr;
  $330 = (($329) + 320|0);
  HEAP32[$330>>2] = $328;
  $331 = $tmp26;
  $332 = $tmp12;
  $333 = (($331) + ($332))|0;
  $334 = $333 >> 11;
  $335 = $wsptr;
  $336 = (($335) + 192|0);
  HEAP32[$336>>2] = $334;
  $337 = $tmp26;
  $338 = $tmp12;
  $339 = (($337) - ($338))|0;
  $340 = $339 >> 11;
  $341 = $wsptr;
  $342 = (($341) + 288|0);
  HEAP32[$342>>2] = $340;
  $343 = $tmp27;
  $344 = $tmp13;
  $345 = (($343) + ($344))|0;
  $346 = $345 >> 11;
  $347 = $wsptr;
  $348 = (($347) + 224|0);
  HEAP32[$348>>2] = $346;
  $349 = $tmp27;
  $350 = $tmp13;
  $351 = (($349) - ($350))|0;
  $352 = $351 >> 11;
  $353 = $wsptr;
  $354 = (($353) + 256|0);
  HEAP32[$354>>2] = $352;
  $355 = $ctr;
  $356 = (($355) + 1)|0;
  $ctr = $356;
  $357 = $inptr;
  $358 = (($357) + 2|0);
  $inptr = $358;
  $359 = $quantptr;
  $360 = (($359) + 4|0);
  $quantptr = $360;
  $361 = $wsptr;
  $362 = (($361) + 4|0);
  $wsptr = $362;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $363 = $ctr;
  $364 = ($363|0)<(16);
  if (!($364)) {
   break;
  }
  $365 = $ctr;
  $366 = $3;
  $367 = (($366) + ($365<<2)|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = $4;
  $370 = (($368) + ($369)|0);
  $outptr = $370;
  $371 = $wsptr;
  $372 = HEAP32[$371>>2]|0;
  $373 = (($372) + 16)|0;
  $tmp0 = $373;
  $374 = $tmp0;
  $375 = $374 << 13;
  $tmp0 = $375;
  $376 = $wsptr;
  $377 = (($376) + 16|0);
  $378 = HEAP32[$377>>2]|0;
  $z1 = $378;
  $379 = $z1;
  $380 = ($379*10703)|0;
  $tmp1 = $380;
  $381 = $z1;
  $382 = ($381*4433)|0;
  $tmp2 = $382;
  $383 = $tmp0;
  $384 = $tmp1;
  $385 = (($383) + ($384))|0;
  $tmp10 = $385;
  $386 = $tmp0;
  $387 = $tmp1;
  $388 = (($386) - ($387))|0;
  $tmp11 = $388;
  $389 = $tmp0;
  $390 = $tmp2;
  $391 = (($389) + ($390))|0;
  $tmp12 = $391;
  $392 = $tmp0;
  $393 = $tmp2;
  $394 = (($392) - ($393))|0;
  $tmp13 = $394;
  $395 = $wsptr;
  $396 = (($395) + 8|0);
  $397 = HEAP32[$396>>2]|0;
  $z1 = $397;
  $398 = $wsptr;
  $399 = (($398) + 24|0);
  $400 = HEAP32[$399>>2]|0;
  $z2 = $400;
  $401 = $z1;
  $402 = $z2;
  $403 = (($401) - ($402))|0;
  $z3 = $403;
  $404 = $z3;
  $405 = ($404*2260)|0;
  $z4 = $405;
  $406 = $z3;
  $407 = ($406*11363)|0;
  $z3 = $407;
  $408 = $z3;
  $409 = $z2;
  $410 = ($409*20995)|0;
  $411 = (($408) + ($410))|0;
  $tmp0 = $411;
  $412 = $z4;
  $413 = $z1;
  $414 = ($413*7373)|0;
  $415 = (($412) + ($414))|0;
  $tmp1 = $415;
  $416 = $z3;
  $417 = $z1;
  $418 = ($417*4926)|0;
  $419 = (($416) - ($418))|0;
  $tmp2 = $419;
  $420 = $z4;
  $421 = $z2;
  $422 = ($421*4176)|0;
  $423 = (($420) - ($422))|0;
  $tmp3 = $423;
  $424 = $tmp10;
  $425 = $tmp0;
  $426 = (($424) + ($425))|0;
  $tmp20 = $426;
  $427 = $tmp10;
  $428 = $tmp0;
  $429 = (($427) - ($428))|0;
  $tmp27 = $429;
  $430 = $tmp12;
  $431 = $tmp1;
  $432 = (($430) + ($431))|0;
  $tmp21 = $432;
  $433 = $tmp12;
  $434 = $tmp1;
  $435 = (($433) - ($434))|0;
  $tmp26 = $435;
  $436 = $tmp13;
  $437 = $tmp2;
  $438 = (($436) + ($437))|0;
  $tmp22 = $438;
  $439 = $tmp13;
  $440 = $tmp2;
  $441 = (($439) - ($440))|0;
  $tmp25 = $441;
  $442 = $tmp11;
  $443 = $tmp3;
  $444 = (($442) + ($443))|0;
  $tmp23 = $444;
  $445 = $tmp11;
  $446 = $tmp3;
  $447 = (($445) - ($446))|0;
  $tmp24 = $447;
  $448 = $wsptr;
  $449 = (($448) + 4|0);
  $450 = HEAP32[$449>>2]|0;
  $z1 = $450;
  $451 = $wsptr;
  $452 = (($451) + 12|0);
  $453 = HEAP32[$452>>2]|0;
  $z2 = $453;
  $454 = $wsptr;
  $455 = (($454) + 20|0);
  $456 = HEAP32[$455>>2]|0;
  $z3 = $456;
  $457 = $wsptr;
  $458 = (($457) + 28|0);
  $459 = HEAP32[$458>>2]|0;
  $z4 = $459;
  $460 = $z1;
  $461 = $z3;
  $462 = (($460) + ($461))|0;
  $tmp11 = $462;
  $463 = $z1;
  $464 = $z2;
  $465 = (($463) + ($464))|0;
  $466 = ($465*11086)|0;
  $tmp1 = $466;
  $467 = $tmp11;
  $468 = ($467*10217)|0;
  $tmp2 = $468;
  $469 = $z1;
  $470 = $z4;
  $471 = (($469) + ($470))|0;
  $472 = ($471*8956)|0;
  $tmp3 = $472;
  $473 = $z1;
  $474 = $z4;
  $475 = (($473) - ($474))|0;
  $476 = ($475*7350)|0;
  $tmp10 = $476;
  $477 = $tmp11;
  $478 = ($477*5461)|0;
  $tmp11 = $478;
  $479 = $z1;
  $480 = $z2;
  $481 = (($479) - ($480))|0;
  $482 = ($481*3363)|0;
  $tmp12 = $482;
  $483 = $tmp1;
  $484 = $tmp2;
  $485 = (($483) + ($484))|0;
  $486 = $tmp3;
  $487 = (($485) + ($486))|0;
  $488 = $z1;
  $489 = ($488*18730)|0;
  $490 = (($487) - ($489))|0;
  $tmp0 = $490;
  $491 = $tmp10;
  $492 = $tmp11;
  $493 = (($491) + ($492))|0;
  $494 = $tmp12;
  $495 = (($493) + ($494))|0;
  $496 = $z1;
  $497 = ($496*15038)|0;
  $498 = (($495) - ($497))|0;
  $tmp13 = $498;
  $499 = $z2;
  $500 = $z3;
  $501 = (($499) + ($500))|0;
  $502 = ($501*1136)|0;
  $z1 = $502;
  $503 = $z1;
  $504 = $z2;
  $505 = ($504*589)|0;
  $506 = (($503) + ($505))|0;
  $507 = $tmp1;
  $508 = (($507) + ($506))|0;
  $tmp1 = $508;
  $509 = $z1;
  $510 = $z3;
  $511 = ($510*9222)|0;
  $512 = (($509) - ($511))|0;
  $513 = $tmp2;
  $514 = (($513) + ($512))|0;
  $tmp2 = $514;
  $515 = $z3;
  $516 = $z2;
  $517 = (($515) - ($516))|0;
  $518 = ($517*11529)|0;
  $z1 = $518;
  $519 = $z1;
  $520 = $z3;
  $521 = ($520*6278)|0;
  $522 = (($519) - ($521))|0;
  $523 = $tmp11;
  $524 = (($523) + ($522))|0;
  $tmp11 = $524;
  $525 = $z1;
  $526 = $z2;
  $527 = ($526*16154)|0;
  $528 = (($525) + ($527))|0;
  $529 = $tmp12;
  $530 = (($529) + ($528))|0;
  $tmp12 = $530;
  $531 = $z4;
  $532 = $z2;
  $533 = (($532) + ($531))|0;
  $z2 = $533;
  $534 = $z2;
  $535 = Math_imul($534, -5461)|0;
  $z1 = $535;
  $536 = $z1;
  $537 = $tmp1;
  $538 = (($537) + ($536))|0;
  $tmp1 = $538;
  $539 = $z1;
  $540 = $z4;
  $541 = ($540*8728)|0;
  $542 = (($539) + ($541))|0;
  $543 = $tmp3;
  $544 = (($543) + ($542))|0;
  $tmp3 = $544;
  $545 = $z2;
  $546 = Math_imul($545, -10217)|0;
  $z2 = $546;
  $547 = $z2;
  $548 = $z4;
  $549 = ($548*25733)|0;
  $550 = (($547) + ($549))|0;
  $551 = $tmp10;
  $552 = (($551) + ($550))|0;
  $tmp10 = $552;
  $553 = $z2;
  $554 = $tmp12;
  $555 = (($554) + ($553))|0;
  $tmp12 = $555;
  $556 = $z3;
  $557 = $z4;
  $558 = (($556) + ($557))|0;
  $559 = Math_imul($558, -11086)|0;
  $z2 = $559;
  $560 = $z2;
  $561 = $tmp2;
  $562 = (($561) + ($560))|0;
  $tmp2 = $562;
  $563 = $z2;
  $564 = $tmp3;
  $565 = (($564) + ($563))|0;
  $tmp3 = $565;
  $566 = $z4;
  $567 = $z3;
  $568 = (($566) - ($567))|0;
  $569 = ($568*3363)|0;
  $z2 = $569;
  $570 = $z2;
  $571 = $tmp10;
  $572 = (($571) + ($570))|0;
  $tmp10 = $572;
  $573 = $z2;
  $574 = $tmp11;
  $575 = (($574) + ($573))|0;
  $tmp11 = $575;
  $576 = $tmp20;
  $577 = $tmp0;
  $578 = (($576) + ($577))|0;
  $579 = $578 >> 18;
  $580 = $579 & 1023;
  $581 = $range_limit;
  $582 = (($581) + ($580)|0);
  $583 = HEAP8[$582>>0]|0;
  $584 = $outptr;
  HEAP8[$584>>0] = $583;
  $585 = $tmp20;
  $586 = $tmp0;
  $587 = (($585) - ($586))|0;
  $588 = $587 >> 18;
  $589 = $588 & 1023;
  $590 = $range_limit;
  $591 = (($590) + ($589)|0);
  $592 = HEAP8[$591>>0]|0;
  $593 = $outptr;
  $594 = (($593) + 15|0);
  HEAP8[$594>>0] = $592;
  $595 = $tmp21;
  $596 = $tmp1;
  $597 = (($595) + ($596))|0;
  $598 = $597 >> 18;
  $599 = $598 & 1023;
  $600 = $range_limit;
  $601 = (($600) + ($599)|0);
  $602 = HEAP8[$601>>0]|0;
  $603 = $outptr;
  $604 = (($603) + 1|0);
  HEAP8[$604>>0] = $602;
  $605 = $tmp21;
  $606 = $tmp1;
  $607 = (($605) - ($606))|0;
  $608 = $607 >> 18;
  $609 = $608 & 1023;
  $610 = $range_limit;
  $611 = (($610) + ($609)|0);
  $612 = HEAP8[$611>>0]|0;
  $613 = $outptr;
  $614 = (($613) + 14|0);
  HEAP8[$614>>0] = $612;
  $615 = $tmp22;
  $616 = $tmp2;
  $617 = (($615) + ($616))|0;
  $618 = $617 >> 18;
  $619 = $618 & 1023;
  $620 = $range_limit;
  $621 = (($620) + ($619)|0);
  $622 = HEAP8[$621>>0]|0;
  $623 = $outptr;
  $624 = (($623) + 2|0);
  HEAP8[$624>>0] = $622;
  $625 = $tmp22;
  $626 = $tmp2;
  $627 = (($625) - ($626))|0;
  $628 = $627 >> 18;
  $629 = $628 & 1023;
  $630 = $range_limit;
  $631 = (($630) + ($629)|0);
  $632 = HEAP8[$631>>0]|0;
  $633 = $outptr;
  $634 = (($633) + 13|0);
  HEAP8[$634>>0] = $632;
  $635 = $tmp23;
  $636 = $tmp3;
  $637 = (($635) + ($636))|0;
  $638 = $637 >> 18;
  $639 = $638 & 1023;
  $640 = $range_limit;
  $641 = (($640) + ($639)|0);
  $642 = HEAP8[$641>>0]|0;
  $643 = $outptr;
  $644 = (($643) + 3|0);
  HEAP8[$644>>0] = $642;
  $645 = $tmp23;
  $646 = $tmp3;
  $647 = (($645) - ($646))|0;
  $648 = $647 >> 18;
  $649 = $648 & 1023;
  $650 = $range_limit;
  $651 = (($650) + ($649)|0);
  $652 = HEAP8[$651>>0]|0;
  $653 = $outptr;
  $654 = (($653) + 12|0);
  HEAP8[$654>>0] = $652;
  $655 = $tmp24;
  $656 = $tmp10;
  $657 = (($655) + ($656))|0;
  $658 = $657 >> 18;
  $659 = $658 & 1023;
  $660 = $range_limit;
  $661 = (($660) + ($659)|0);
  $662 = HEAP8[$661>>0]|0;
  $663 = $outptr;
  $664 = (($663) + 4|0);
  HEAP8[$664>>0] = $662;
  $665 = $tmp24;
  $666 = $tmp10;
  $667 = (($665) - ($666))|0;
  $668 = $667 >> 18;
  $669 = $668 & 1023;
  $670 = $range_limit;
  $671 = (($670) + ($669)|0);
  $672 = HEAP8[$671>>0]|0;
  $673 = $outptr;
  $674 = (($673) + 11|0);
  HEAP8[$674>>0] = $672;
  $675 = $tmp25;
  $676 = $tmp11;
  $677 = (($675) + ($676))|0;
  $678 = $677 >> 18;
  $679 = $678 & 1023;
  $680 = $range_limit;
  $681 = (($680) + ($679)|0);
  $682 = HEAP8[$681>>0]|0;
  $683 = $outptr;
  $684 = (($683) + 5|0);
  HEAP8[$684>>0] = $682;
  $685 = $tmp25;
  $686 = $tmp11;
  $687 = (($685) - ($686))|0;
  $688 = $687 >> 18;
  $689 = $688 & 1023;
  $690 = $range_limit;
  $691 = (($690) + ($689)|0);
  $692 = HEAP8[$691>>0]|0;
  $693 = $outptr;
  $694 = (($693) + 10|0);
  HEAP8[$694>>0] = $692;
  $695 = $tmp26;
  $696 = $tmp12;
  $697 = (($695) + ($696))|0;
  $698 = $697 >> 18;
  $699 = $698 & 1023;
  $700 = $range_limit;
  $701 = (($700) + ($699)|0);
  $702 = HEAP8[$701>>0]|0;
  $703 = $outptr;
  $704 = (($703) + 6|0);
  HEAP8[$704>>0] = $702;
  $705 = $tmp26;
  $706 = $tmp12;
  $707 = (($705) - ($706))|0;
  $708 = $707 >> 18;
  $709 = $708 & 1023;
  $710 = $range_limit;
  $711 = (($710) + ($709)|0);
  $712 = HEAP8[$711>>0]|0;
  $713 = $outptr;
  $714 = (($713) + 9|0);
  HEAP8[$714>>0] = $712;
  $715 = $tmp27;
  $716 = $tmp13;
  $717 = (($715) + ($716))|0;
  $718 = $717 >> 18;
  $719 = $718 & 1023;
  $720 = $range_limit;
  $721 = (($720) + ($719)|0);
  $722 = HEAP8[$721>>0]|0;
  $723 = $outptr;
  $724 = (($723) + 7|0);
  HEAP8[$724>>0] = $722;
  $725 = $tmp27;
  $726 = $tmp13;
  $727 = (($725) - ($726))|0;
  $728 = $727 >> 18;
  $729 = $728 & 1023;
  $730 = $range_limit;
  $731 = (($730) + ($729)|0);
  $732 = HEAP8[$731>>0]|0;
  $733 = $outptr;
  $734 = (($733) + 8|0);
  HEAP8[$734>>0] = $732;
  $735 = $wsptr;
  $736 = (($735) + 32|0);
  $wsptr = $736;
  $737 = $ctr;
  $738 = (($737) + 1)|0;
  $ctr = $738;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_16x8($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dcval = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0;
 var $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $tmp26 = 0, $tmp27 = 0, $tmp3 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0;
 $workspace = sp + 8|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 8;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)>(0);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = (($15) + 16|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = $inptr;
   $21 = (($20) + 32|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = $22 << 16 >> 16;
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = $inptr;
    $26 = (($25) + 48|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27 << 16 >> 16;
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = $inptr;
     $31 = (($30) + 64|0);
     $32 = HEAP16[$31>>1]|0;
     $33 = $32 << 16 >> 16;
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = $inptr;
      $36 = (($35) + 80|0);
      $37 = HEAP16[$36>>1]|0;
      $38 = $37 << 16 >> 16;
      $39 = ($38|0)==(0);
      if ($39) {
       $40 = $inptr;
       $41 = (($40) + 96|0);
       $42 = HEAP16[$41>>1]|0;
       $43 = $42 << 16 >> 16;
       $44 = ($43|0)==(0);
       if ($44) {
        $45 = $inptr;
        $46 = (($45) + 112|0);
        $47 = HEAP16[$46>>1]|0;
        $48 = $47 << 16 >> 16;
        $49 = ($48|0)==(0);
        if ($49) {
         $50 = $inptr;
         $51 = HEAP16[$50>>1]|0;
         $52 = $51 << 16 >> 16;
         $53 = $quantptr;
         $54 = HEAP32[$53>>2]|0;
         $55 = Math_imul($52, $54)|0;
         $56 = $55 << 2;
         $dcval = $56;
         $57 = $dcval;
         $58 = $wsptr;
         HEAP32[$58>>2] = $57;
         $59 = $dcval;
         $60 = $wsptr;
         $61 = (($60) + 32|0);
         HEAP32[$61>>2] = $59;
         $62 = $dcval;
         $63 = $wsptr;
         $64 = (($63) + 64|0);
         HEAP32[$64>>2] = $62;
         $65 = $dcval;
         $66 = $wsptr;
         $67 = (($66) + 96|0);
         HEAP32[$67>>2] = $65;
         $68 = $dcval;
         $69 = $wsptr;
         $70 = (($69) + 128|0);
         HEAP32[$70>>2] = $68;
         $71 = $dcval;
         $72 = $wsptr;
         $73 = (($72) + 160|0);
         HEAP32[$73>>2] = $71;
         $74 = $dcval;
         $75 = $wsptr;
         $76 = (($75) + 192|0);
         HEAP32[$76>>2] = $74;
         $77 = $dcval;
         $78 = $wsptr;
         $79 = (($78) + 224|0);
         HEAP32[$79>>2] = $77;
         $80 = $inptr;
         $81 = (($80) + 2|0);
         $inptr = $81;
         $82 = $quantptr;
         $83 = (($82) + 4|0);
         $quantptr = $83;
         $84 = $wsptr;
         $85 = (($84) + 4|0);
         $wsptr = $85;
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $86 = $inptr;
   $87 = (($86) + 32|0);
   $88 = HEAP16[$87>>1]|0;
   $89 = $88 << 16 >> 16;
   $90 = $quantptr;
   $91 = (($90) + 64|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = Math_imul($89, $92)|0;
   $z2 = $93;
   $94 = $inptr;
   $95 = (($94) + 96|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96 << 16 >> 16;
   $98 = $quantptr;
   $99 = (($98) + 192|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = Math_imul($97, $100)|0;
   $z3 = $101;
   $102 = $z2;
   $103 = $z3;
   $104 = (($102) + ($103))|0;
   $105 = ($104*4433)|0;
   $z1 = $105;
   $106 = $z1;
   $107 = $z2;
   $108 = ($107*6270)|0;
   $109 = (($106) + ($108))|0;
   $tmp2 = $109;
   $110 = $z1;
   $111 = $z3;
   $112 = ($111*15137)|0;
   $113 = (($110) - ($112))|0;
   $tmp3 = $113;
   $114 = $inptr;
   $115 = HEAP16[$114>>1]|0;
   $116 = $115 << 16 >> 16;
   $117 = $quantptr;
   $118 = HEAP32[$117>>2]|0;
   $119 = Math_imul($116, $118)|0;
   $z2 = $119;
   $120 = $inptr;
   $121 = (($120) + 64|0);
   $122 = HEAP16[$121>>1]|0;
   $123 = $122 << 16 >> 16;
   $124 = $quantptr;
   $125 = (($124) + 128|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = Math_imul($123, $126)|0;
   $z3 = $127;
   $128 = $z2;
   $129 = $128 << 13;
   $z2 = $129;
   $130 = $z3;
   $131 = $130 << 13;
   $z3 = $131;
   $132 = $z2;
   $133 = (($132) + 1024)|0;
   $z2 = $133;
   $134 = $z2;
   $135 = $z3;
   $136 = (($134) + ($135))|0;
   $tmp0 = $136;
   $137 = $z2;
   $138 = $z3;
   $139 = (($137) - ($138))|0;
   $tmp1 = $139;
   $140 = $tmp0;
   $141 = $tmp2;
   $142 = (($140) + ($141))|0;
   $tmp10 = $142;
   $143 = $tmp0;
   $144 = $tmp2;
   $145 = (($143) - ($144))|0;
   $tmp13 = $145;
   $146 = $tmp1;
   $147 = $tmp3;
   $148 = (($146) + ($147))|0;
   $tmp11 = $148;
   $149 = $tmp1;
   $150 = $tmp3;
   $151 = (($149) - ($150))|0;
   $tmp12 = $151;
   $152 = $inptr;
   $153 = (($152) + 112|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = $154 << 16 >> 16;
   $156 = $quantptr;
   $157 = (($156) + 224|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = Math_imul($155, $158)|0;
   $tmp0 = $159;
   $160 = $inptr;
   $161 = (($160) + 80|0);
   $162 = HEAP16[$161>>1]|0;
   $163 = $162 << 16 >> 16;
   $164 = $quantptr;
   $165 = (($164) + 160|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = Math_imul($163, $166)|0;
   $tmp1 = $167;
   $168 = $inptr;
   $169 = (($168) + 48|0);
   $170 = HEAP16[$169>>1]|0;
   $171 = $170 << 16 >> 16;
   $172 = $quantptr;
   $173 = (($172) + 96|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = Math_imul($171, $174)|0;
   $tmp2 = $175;
   $176 = $inptr;
   $177 = (($176) + 16|0);
   $178 = HEAP16[$177>>1]|0;
   $179 = $178 << 16 >> 16;
   $180 = $quantptr;
   $181 = (($180) + 32|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = Math_imul($179, $182)|0;
   $tmp3 = $183;
   $184 = $tmp0;
   $185 = $tmp2;
   $186 = (($184) + ($185))|0;
   $z2 = $186;
   $187 = $tmp1;
   $188 = $tmp3;
   $189 = (($187) + ($188))|0;
   $z3 = $189;
   $190 = $z2;
   $191 = $z3;
   $192 = (($190) + ($191))|0;
   $193 = ($192*9633)|0;
   $z1 = $193;
   $194 = $z2;
   $195 = Math_imul($194, -16069)|0;
   $z2 = $195;
   $196 = $z3;
   $197 = Math_imul($196, -3196)|0;
   $z3 = $197;
   $198 = $z1;
   $199 = $z2;
   $200 = (($199) + ($198))|0;
   $z2 = $200;
   $201 = $z1;
   $202 = $z3;
   $203 = (($202) + ($201))|0;
   $z3 = $203;
   $204 = $tmp0;
   $205 = $tmp3;
   $206 = (($204) + ($205))|0;
   $207 = Math_imul($206, -7373)|0;
   $z1 = $207;
   $208 = $tmp0;
   $209 = ($208*2446)|0;
   $tmp0 = $209;
   $210 = $tmp3;
   $211 = ($210*12299)|0;
   $tmp3 = $211;
   $212 = $z1;
   $213 = $z2;
   $214 = (($212) + ($213))|0;
   $215 = $tmp0;
   $216 = (($215) + ($214))|0;
   $tmp0 = $216;
   $217 = $z1;
   $218 = $z3;
   $219 = (($217) + ($218))|0;
   $220 = $tmp3;
   $221 = (($220) + ($219))|0;
   $tmp3 = $221;
   $222 = $tmp1;
   $223 = $tmp2;
   $224 = (($222) + ($223))|0;
   $225 = Math_imul($224, -20995)|0;
   $z1 = $225;
   $226 = $tmp1;
   $227 = ($226*16819)|0;
   $tmp1 = $227;
   $228 = $tmp2;
   $229 = ($228*25172)|0;
   $tmp2 = $229;
   $230 = $z1;
   $231 = $z3;
   $232 = (($230) + ($231))|0;
   $233 = $tmp1;
   $234 = (($233) + ($232))|0;
   $tmp1 = $234;
   $235 = $z1;
   $236 = $z2;
   $237 = (($235) + ($236))|0;
   $238 = $tmp2;
   $239 = (($238) + ($237))|0;
   $tmp2 = $239;
   $240 = $tmp10;
   $241 = $tmp3;
   $242 = (($240) + ($241))|0;
   $243 = $242 >> 11;
   $244 = $wsptr;
   HEAP32[$244>>2] = $243;
   $245 = $tmp10;
   $246 = $tmp3;
   $247 = (($245) - ($246))|0;
   $248 = $247 >> 11;
   $249 = $wsptr;
   $250 = (($249) + 224|0);
   HEAP32[$250>>2] = $248;
   $251 = $tmp11;
   $252 = $tmp2;
   $253 = (($251) + ($252))|0;
   $254 = $253 >> 11;
   $255 = $wsptr;
   $256 = (($255) + 32|0);
   HEAP32[$256>>2] = $254;
   $257 = $tmp11;
   $258 = $tmp2;
   $259 = (($257) - ($258))|0;
   $260 = $259 >> 11;
   $261 = $wsptr;
   $262 = (($261) + 192|0);
   HEAP32[$262>>2] = $260;
   $263 = $tmp12;
   $264 = $tmp1;
   $265 = (($263) + ($264))|0;
   $266 = $265 >> 11;
   $267 = $wsptr;
   $268 = (($267) + 64|0);
   HEAP32[$268>>2] = $266;
   $269 = $tmp12;
   $270 = $tmp1;
   $271 = (($269) - ($270))|0;
   $272 = $271 >> 11;
   $273 = $wsptr;
   $274 = (($273) + 160|0);
   HEAP32[$274>>2] = $272;
   $275 = $tmp13;
   $276 = $tmp0;
   $277 = (($275) + ($276))|0;
   $278 = $277 >> 11;
   $279 = $wsptr;
   $280 = (($279) + 96|0);
   HEAP32[$280>>2] = $278;
   $281 = $tmp13;
   $282 = $tmp0;
   $283 = (($281) - ($282))|0;
   $284 = $283 >> 11;
   $285 = $wsptr;
   $286 = (($285) + 128|0);
   HEAP32[$286>>2] = $284;
   $287 = $inptr;
   $288 = (($287) + 2|0);
   $inptr = $288;
   $289 = $quantptr;
   $290 = (($289) + 4|0);
   $quantptr = $290;
   $291 = $wsptr;
   $292 = (($291) + 4|0);
   $wsptr = $292;
  }
  $293 = $ctr;
  $294 = (($293) + -1)|0;
  $ctr = $294;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $295 = $ctr;
  $296 = ($295|0)<(8);
  if (!($296)) {
   break;
  }
  $297 = $ctr;
  $298 = $3;
  $299 = (($298) + ($297<<2)|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = $4;
  $302 = (($300) + ($301)|0);
  $outptr = $302;
  $303 = $wsptr;
  $304 = HEAP32[$303>>2]|0;
  $305 = (($304) + 16)|0;
  $tmp0 = $305;
  $306 = $tmp0;
  $307 = $306 << 13;
  $tmp0 = $307;
  $308 = $wsptr;
  $309 = (($308) + 16|0);
  $310 = HEAP32[$309>>2]|0;
  $z1 = $310;
  $311 = $z1;
  $312 = ($311*10703)|0;
  $tmp1 = $312;
  $313 = $z1;
  $314 = ($313*4433)|0;
  $tmp2 = $314;
  $315 = $tmp0;
  $316 = $tmp1;
  $317 = (($315) + ($316))|0;
  $tmp10 = $317;
  $318 = $tmp0;
  $319 = $tmp1;
  $320 = (($318) - ($319))|0;
  $tmp11 = $320;
  $321 = $tmp0;
  $322 = $tmp2;
  $323 = (($321) + ($322))|0;
  $tmp12 = $323;
  $324 = $tmp0;
  $325 = $tmp2;
  $326 = (($324) - ($325))|0;
  $tmp13 = $326;
  $327 = $wsptr;
  $328 = (($327) + 8|0);
  $329 = HEAP32[$328>>2]|0;
  $z1 = $329;
  $330 = $wsptr;
  $331 = (($330) + 24|0);
  $332 = HEAP32[$331>>2]|0;
  $z2 = $332;
  $333 = $z1;
  $334 = $z2;
  $335 = (($333) - ($334))|0;
  $z3 = $335;
  $336 = $z3;
  $337 = ($336*2260)|0;
  $z4 = $337;
  $338 = $z3;
  $339 = ($338*11363)|0;
  $z3 = $339;
  $340 = $z3;
  $341 = $z2;
  $342 = ($341*20995)|0;
  $343 = (($340) + ($342))|0;
  $tmp0 = $343;
  $344 = $z4;
  $345 = $z1;
  $346 = ($345*7373)|0;
  $347 = (($344) + ($346))|0;
  $tmp1 = $347;
  $348 = $z3;
  $349 = $z1;
  $350 = ($349*4926)|0;
  $351 = (($348) - ($350))|0;
  $tmp2 = $351;
  $352 = $z4;
  $353 = $z2;
  $354 = ($353*4176)|0;
  $355 = (($352) - ($354))|0;
  $tmp3 = $355;
  $356 = $tmp10;
  $357 = $tmp0;
  $358 = (($356) + ($357))|0;
  $tmp20 = $358;
  $359 = $tmp10;
  $360 = $tmp0;
  $361 = (($359) - ($360))|0;
  $tmp27 = $361;
  $362 = $tmp12;
  $363 = $tmp1;
  $364 = (($362) + ($363))|0;
  $tmp21 = $364;
  $365 = $tmp12;
  $366 = $tmp1;
  $367 = (($365) - ($366))|0;
  $tmp26 = $367;
  $368 = $tmp13;
  $369 = $tmp2;
  $370 = (($368) + ($369))|0;
  $tmp22 = $370;
  $371 = $tmp13;
  $372 = $tmp2;
  $373 = (($371) - ($372))|0;
  $tmp25 = $373;
  $374 = $tmp11;
  $375 = $tmp3;
  $376 = (($374) + ($375))|0;
  $tmp23 = $376;
  $377 = $tmp11;
  $378 = $tmp3;
  $379 = (($377) - ($378))|0;
  $tmp24 = $379;
  $380 = $wsptr;
  $381 = (($380) + 4|0);
  $382 = HEAP32[$381>>2]|0;
  $z1 = $382;
  $383 = $wsptr;
  $384 = (($383) + 12|0);
  $385 = HEAP32[$384>>2]|0;
  $z2 = $385;
  $386 = $wsptr;
  $387 = (($386) + 20|0);
  $388 = HEAP32[$387>>2]|0;
  $z3 = $388;
  $389 = $wsptr;
  $390 = (($389) + 28|0);
  $391 = HEAP32[$390>>2]|0;
  $z4 = $391;
  $392 = $z1;
  $393 = $z3;
  $394 = (($392) + ($393))|0;
  $tmp11 = $394;
  $395 = $z1;
  $396 = $z2;
  $397 = (($395) + ($396))|0;
  $398 = ($397*11086)|0;
  $tmp1 = $398;
  $399 = $tmp11;
  $400 = ($399*10217)|0;
  $tmp2 = $400;
  $401 = $z1;
  $402 = $z4;
  $403 = (($401) + ($402))|0;
  $404 = ($403*8956)|0;
  $tmp3 = $404;
  $405 = $z1;
  $406 = $z4;
  $407 = (($405) - ($406))|0;
  $408 = ($407*7350)|0;
  $tmp10 = $408;
  $409 = $tmp11;
  $410 = ($409*5461)|0;
  $tmp11 = $410;
  $411 = $z1;
  $412 = $z2;
  $413 = (($411) - ($412))|0;
  $414 = ($413*3363)|0;
  $tmp12 = $414;
  $415 = $tmp1;
  $416 = $tmp2;
  $417 = (($415) + ($416))|0;
  $418 = $tmp3;
  $419 = (($417) + ($418))|0;
  $420 = $z1;
  $421 = ($420*18730)|0;
  $422 = (($419) - ($421))|0;
  $tmp0 = $422;
  $423 = $tmp10;
  $424 = $tmp11;
  $425 = (($423) + ($424))|0;
  $426 = $tmp12;
  $427 = (($425) + ($426))|0;
  $428 = $z1;
  $429 = ($428*15038)|0;
  $430 = (($427) - ($429))|0;
  $tmp13 = $430;
  $431 = $z2;
  $432 = $z3;
  $433 = (($431) + ($432))|0;
  $434 = ($433*1136)|0;
  $z1 = $434;
  $435 = $z1;
  $436 = $z2;
  $437 = ($436*589)|0;
  $438 = (($435) + ($437))|0;
  $439 = $tmp1;
  $440 = (($439) + ($438))|0;
  $tmp1 = $440;
  $441 = $z1;
  $442 = $z3;
  $443 = ($442*9222)|0;
  $444 = (($441) - ($443))|0;
  $445 = $tmp2;
  $446 = (($445) + ($444))|0;
  $tmp2 = $446;
  $447 = $z3;
  $448 = $z2;
  $449 = (($447) - ($448))|0;
  $450 = ($449*11529)|0;
  $z1 = $450;
  $451 = $z1;
  $452 = $z3;
  $453 = ($452*6278)|0;
  $454 = (($451) - ($453))|0;
  $455 = $tmp11;
  $456 = (($455) + ($454))|0;
  $tmp11 = $456;
  $457 = $z1;
  $458 = $z2;
  $459 = ($458*16154)|0;
  $460 = (($457) + ($459))|0;
  $461 = $tmp12;
  $462 = (($461) + ($460))|0;
  $tmp12 = $462;
  $463 = $z4;
  $464 = $z2;
  $465 = (($464) + ($463))|0;
  $z2 = $465;
  $466 = $z2;
  $467 = Math_imul($466, -5461)|0;
  $z1 = $467;
  $468 = $z1;
  $469 = $tmp1;
  $470 = (($469) + ($468))|0;
  $tmp1 = $470;
  $471 = $z1;
  $472 = $z4;
  $473 = ($472*8728)|0;
  $474 = (($471) + ($473))|0;
  $475 = $tmp3;
  $476 = (($475) + ($474))|0;
  $tmp3 = $476;
  $477 = $z2;
  $478 = Math_imul($477, -10217)|0;
  $z2 = $478;
  $479 = $z2;
  $480 = $z4;
  $481 = ($480*25733)|0;
  $482 = (($479) + ($481))|0;
  $483 = $tmp10;
  $484 = (($483) + ($482))|0;
  $tmp10 = $484;
  $485 = $z2;
  $486 = $tmp12;
  $487 = (($486) + ($485))|0;
  $tmp12 = $487;
  $488 = $z3;
  $489 = $z4;
  $490 = (($488) + ($489))|0;
  $491 = Math_imul($490, -11086)|0;
  $z2 = $491;
  $492 = $z2;
  $493 = $tmp2;
  $494 = (($493) + ($492))|0;
  $tmp2 = $494;
  $495 = $z2;
  $496 = $tmp3;
  $497 = (($496) + ($495))|0;
  $tmp3 = $497;
  $498 = $z4;
  $499 = $z3;
  $500 = (($498) - ($499))|0;
  $501 = ($500*3363)|0;
  $z2 = $501;
  $502 = $z2;
  $503 = $tmp10;
  $504 = (($503) + ($502))|0;
  $tmp10 = $504;
  $505 = $z2;
  $506 = $tmp11;
  $507 = (($506) + ($505))|0;
  $tmp11 = $507;
  $508 = $tmp20;
  $509 = $tmp0;
  $510 = (($508) + ($509))|0;
  $511 = $510 >> 18;
  $512 = $511 & 1023;
  $513 = $range_limit;
  $514 = (($513) + ($512)|0);
  $515 = HEAP8[$514>>0]|0;
  $516 = $outptr;
  HEAP8[$516>>0] = $515;
  $517 = $tmp20;
  $518 = $tmp0;
  $519 = (($517) - ($518))|0;
  $520 = $519 >> 18;
  $521 = $520 & 1023;
  $522 = $range_limit;
  $523 = (($522) + ($521)|0);
  $524 = HEAP8[$523>>0]|0;
  $525 = $outptr;
  $526 = (($525) + 15|0);
  HEAP8[$526>>0] = $524;
  $527 = $tmp21;
  $528 = $tmp1;
  $529 = (($527) + ($528))|0;
  $530 = $529 >> 18;
  $531 = $530 & 1023;
  $532 = $range_limit;
  $533 = (($532) + ($531)|0);
  $534 = HEAP8[$533>>0]|0;
  $535 = $outptr;
  $536 = (($535) + 1|0);
  HEAP8[$536>>0] = $534;
  $537 = $tmp21;
  $538 = $tmp1;
  $539 = (($537) - ($538))|0;
  $540 = $539 >> 18;
  $541 = $540 & 1023;
  $542 = $range_limit;
  $543 = (($542) + ($541)|0);
  $544 = HEAP8[$543>>0]|0;
  $545 = $outptr;
  $546 = (($545) + 14|0);
  HEAP8[$546>>0] = $544;
  $547 = $tmp22;
  $548 = $tmp2;
  $549 = (($547) + ($548))|0;
  $550 = $549 >> 18;
  $551 = $550 & 1023;
  $552 = $range_limit;
  $553 = (($552) + ($551)|0);
  $554 = HEAP8[$553>>0]|0;
  $555 = $outptr;
  $556 = (($555) + 2|0);
  HEAP8[$556>>0] = $554;
  $557 = $tmp22;
  $558 = $tmp2;
  $559 = (($557) - ($558))|0;
  $560 = $559 >> 18;
  $561 = $560 & 1023;
  $562 = $range_limit;
  $563 = (($562) + ($561)|0);
  $564 = HEAP8[$563>>0]|0;
  $565 = $outptr;
  $566 = (($565) + 13|0);
  HEAP8[$566>>0] = $564;
  $567 = $tmp23;
  $568 = $tmp3;
  $569 = (($567) + ($568))|0;
  $570 = $569 >> 18;
  $571 = $570 & 1023;
  $572 = $range_limit;
  $573 = (($572) + ($571)|0);
  $574 = HEAP8[$573>>0]|0;
  $575 = $outptr;
  $576 = (($575) + 3|0);
  HEAP8[$576>>0] = $574;
  $577 = $tmp23;
  $578 = $tmp3;
  $579 = (($577) - ($578))|0;
  $580 = $579 >> 18;
  $581 = $580 & 1023;
  $582 = $range_limit;
  $583 = (($582) + ($581)|0);
  $584 = HEAP8[$583>>0]|0;
  $585 = $outptr;
  $586 = (($585) + 12|0);
  HEAP8[$586>>0] = $584;
  $587 = $tmp24;
  $588 = $tmp10;
  $589 = (($587) + ($588))|0;
  $590 = $589 >> 18;
  $591 = $590 & 1023;
  $592 = $range_limit;
  $593 = (($592) + ($591)|0);
  $594 = HEAP8[$593>>0]|0;
  $595 = $outptr;
  $596 = (($595) + 4|0);
  HEAP8[$596>>0] = $594;
  $597 = $tmp24;
  $598 = $tmp10;
  $599 = (($597) - ($598))|0;
  $600 = $599 >> 18;
  $601 = $600 & 1023;
  $602 = $range_limit;
  $603 = (($602) + ($601)|0);
  $604 = HEAP8[$603>>0]|0;
  $605 = $outptr;
  $606 = (($605) + 11|0);
  HEAP8[$606>>0] = $604;
  $607 = $tmp25;
  $608 = $tmp11;
  $609 = (($607) + ($608))|0;
  $610 = $609 >> 18;
  $611 = $610 & 1023;
  $612 = $range_limit;
  $613 = (($612) + ($611)|0);
  $614 = HEAP8[$613>>0]|0;
  $615 = $outptr;
  $616 = (($615) + 5|0);
  HEAP8[$616>>0] = $614;
  $617 = $tmp25;
  $618 = $tmp11;
  $619 = (($617) - ($618))|0;
  $620 = $619 >> 18;
  $621 = $620 & 1023;
  $622 = $range_limit;
  $623 = (($622) + ($621)|0);
  $624 = HEAP8[$623>>0]|0;
  $625 = $outptr;
  $626 = (($625) + 10|0);
  HEAP8[$626>>0] = $624;
  $627 = $tmp26;
  $628 = $tmp12;
  $629 = (($627) + ($628))|0;
  $630 = $629 >> 18;
  $631 = $630 & 1023;
  $632 = $range_limit;
  $633 = (($632) + ($631)|0);
  $634 = HEAP8[$633>>0]|0;
  $635 = $outptr;
  $636 = (($635) + 6|0);
  HEAP8[$636>>0] = $634;
  $637 = $tmp26;
  $638 = $tmp12;
  $639 = (($637) - ($638))|0;
  $640 = $639 >> 18;
  $641 = $640 & 1023;
  $642 = $range_limit;
  $643 = (($642) + ($641)|0);
  $644 = HEAP8[$643>>0]|0;
  $645 = $outptr;
  $646 = (($645) + 9|0);
  HEAP8[$646>>0] = $644;
  $647 = $tmp27;
  $648 = $tmp13;
  $649 = (($647) + ($648))|0;
  $650 = $649 >> 18;
  $651 = $650 & 1023;
  $652 = $range_limit;
  $653 = (($652) + ($651)|0);
  $654 = HEAP8[$653>>0]|0;
  $655 = $outptr;
  $656 = (($655) + 7|0);
  HEAP8[$656>>0] = $654;
  $657 = $tmp27;
  $658 = $tmp13;
  $659 = (($657) - ($658))|0;
  $660 = $659 >> 18;
  $661 = $660 & 1023;
  $662 = $range_limit;
  $663 = (($662) + ($661)|0);
  $664 = HEAP8[$663>>0]|0;
  $665 = $outptr;
  $666 = (($665) + 8|0);
  HEAP8[$666>>0] = $664;
  $667 = $wsptr;
  $668 = (($667) + 32|0);
  $wsptr = $668;
  $669 = $ctr;
  $670 = (($669) + 1)|0;
  $ctr = $670;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_14x7($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp16 = 0;
 var $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $tmp26 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp23 = $20;
  $21 = $tmp23;
  $22 = $21 << 13;
  $tmp23 = $22;
  $23 = $tmp23;
  $24 = (($23) + 1024)|0;
  $tmp23 = $24;
  $25 = $inptr;
  $26 = (($25) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z1 = $32;
  $33 = $inptr;
  $34 = (($33) + 64|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $quantptr;
  $38 = (($37) + 128|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $z2 = $40;
  $41 = $inptr;
  $42 = (($41) + 96|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = $quantptr;
  $46 = (($45) + 192|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = Math_imul($44, $47)|0;
  $z3 = $48;
  $49 = $z2;
  $50 = $z3;
  $51 = (($49) - ($50))|0;
  $52 = ($51*7223)|0;
  $tmp20 = $52;
  $53 = $z1;
  $54 = $z2;
  $55 = (($53) - ($54))|0;
  $56 = ($55*2578)|0;
  $tmp22 = $56;
  $57 = $tmp20;
  $58 = $tmp22;
  $59 = (($57) + ($58))|0;
  $60 = $tmp23;
  $61 = (($59) + ($60))|0;
  $62 = $z2;
  $63 = ($62*15083)|0;
  $64 = (($61) - ($63))|0;
  $tmp21 = $64;
  $65 = $z1;
  $66 = $z3;
  $67 = (($65) + ($66))|0;
  $tmp10 = $67;
  $68 = $tmp10;
  $69 = $z2;
  $70 = (($69) - ($68))|0;
  $z2 = $70;
  $71 = $tmp10;
  $72 = ($71*10438)|0;
  $73 = $tmp23;
  $74 = (($72) + ($73))|0;
  $tmp10 = $74;
  $75 = $tmp10;
  $76 = $z3;
  $77 = ($76*637)|0;
  $78 = (($75) - ($77))|0;
  $79 = $tmp20;
  $80 = (($79) + ($78))|0;
  $tmp20 = $80;
  $81 = $tmp10;
  $82 = $z1;
  $83 = ($82*20239)|0;
  $84 = (($81) - ($83))|0;
  $85 = $tmp22;
  $86 = (($85) + ($84))|0;
  $tmp22 = $86;
  $87 = $z2;
  $88 = ($87*11585)|0;
  $89 = $tmp23;
  $90 = (($89) + ($88))|0;
  $tmp23 = $90;
  $91 = $inptr;
  $92 = (($91) + 16|0);
  $93 = HEAP16[$92>>1]|0;
  $94 = $93 << 16 >> 16;
  $95 = $quantptr;
  $96 = (($95) + 32|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = Math_imul($94, $97)|0;
  $z1 = $98;
  $99 = $inptr;
  $100 = (($99) + 48|0);
  $101 = HEAP16[$100>>1]|0;
  $102 = $101 << 16 >> 16;
  $103 = $quantptr;
  $104 = (($103) + 96|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = Math_imul($102, $105)|0;
  $z2 = $106;
  $107 = $inptr;
  $108 = (($107) + 80|0);
  $109 = HEAP16[$108>>1]|0;
  $110 = $109 << 16 >> 16;
  $111 = $quantptr;
  $112 = (($111) + 160|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = Math_imul($110, $113)|0;
  $z3 = $114;
  $115 = $z1;
  $116 = $z2;
  $117 = (($115) + ($116))|0;
  $118 = ($117*7663)|0;
  $tmp11 = $118;
  $119 = $z1;
  $120 = $z2;
  $121 = (($119) - ($120))|0;
  $122 = ($121*1395)|0;
  $tmp12 = $122;
  $123 = $tmp11;
  $124 = $tmp12;
  $125 = (($123) - ($124))|0;
  $tmp10 = $125;
  $126 = $tmp12;
  $127 = $tmp11;
  $128 = (($127) + ($126))|0;
  $tmp11 = $128;
  $129 = $z2;
  $130 = $z3;
  $131 = (($129) + ($130))|0;
  $132 = Math_imul($131, -11295)|0;
  $tmp12 = $132;
  $133 = $tmp12;
  $134 = $tmp11;
  $135 = (($134) + ($133))|0;
  $tmp11 = $135;
  $136 = $z1;
  $137 = $z3;
  $138 = (($136) + ($137))|0;
  $139 = ($138*5027)|0;
  $z2 = $139;
  $140 = $z2;
  $141 = $tmp10;
  $142 = (($141) + ($140))|0;
  $tmp10 = $142;
  $143 = $z2;
  $144 = $z3;
  $145 = ($144*15326)|0;
  $146 = (($143) + ($145))|0;
  $147 = $tmp12;
  $148 = (($147) + ($146))|0;
  $tmp12 = $148;
  $149 = $tmp20;
  $150 = $tmp10;
  $151 = (($149) + ($150))|0;
  $152 = $151 >> 11;
  $153 = $wsptr;
  HEAP32[$153>>2] = $152;
  $154 = $tmp20;
  $155 = $tmp10;
  $156 = (($154) - ($155))|0;
  $157 = $156 >> 11;
  $158 = $wsptr;
  $159 = (($158) + 192|0);
  HEAP32[$159>>2] = $157;
  $160 = $tmp21;
  $161 = $tmp11;
  $162 = (($160) + ($161))|0;
  $163 = $162 >> 11;
  $164 = $wsptr;
  $165 = (($164) + 32|0);
  HEAP32[$165>>2] = $163;
  $166 = $tmp21;
  $167 = $tmp11;
  $168 = (($166) - ($167))|0;
  $169 = $168 >> 11;
  $170 = $wsptr;
  $171 = (($170) + 160|0);
  HEAP32[$171>>2] = $169;
  $172 = $tmp22;
  $173 = $tmp12;
  $174 = (($172) + ($173))|0;
  $175 = $174 >> 11;
  $176 = $wsptr;
  $177 = (($176) + 64|0);
  HEAP32[$177>>2] = $175;
  $178 = $tmp22;
  $179 = $tmp12;
  $180 = (($178) - ($179))|0;
  $181 = $180 >> 11;
  $182 = $wsptr;
  $183 = (($182) + 128|0);
  HEAP32[$183>>2] = $181;
  $184 = $tmp23;
  $185 = $184 >> 11;
  $186 = $wsptr;
  $187 = (($186) + 96|0);
  HEAP32[$187>>2] = $185;
  $188 = $ctr;
  $189 = (($188) + 1)|0;
  $ctr = $189;
  $190 = $inptr;
  $191 = (($190) + 2|0);
  $inptr = $191;
  $192 = $quantptr;
  $193 = (($192) + 4|0);
  $quantptr = $193;
  $194 = $wsptr;
  $195 = (($194) + 4|0);
  $wsptr = $195;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $196 = $ctr;
  $197 = ($196|0)<(7);
  if (!($197)) {
   break;
  }
  $198 = $ctr;
  $199 = $3;
  $200 = (($199) + ($198<<2)|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = $4;
  $203 = (($201) + ($202)|0);
  $outptr = $203;
  $204 = $wsptr;
  $205 = HEAP32[$204>>2]|0;
  $206 = (($205) + 16)|0;
  $z1 = $206;
  $207 = $z1;
  $208 = $207 << 13;
  $z1 = $208;
  $209 = $wsptr;
  $210 = (($209) + 16|0);
  $211 = HEAP32[$210>>2]|0;
  $z4 = $211;
  $212 = $z4;
  $213 = ($212*10438)|0;
  $z2 = $213;
  $214 = $z4;
  $215 = ($214*2578)|0;
  $z3 = $215;
  $216 = $z4;
  $217 = ($216*7223)|0;
  $z4 = $217;
  $218 = $z1;
  $219 = $z2;
  $220 = (($218) + ($219))|0;
  $tmp10 = $220;
  $221 = $z1;
  $222 = $z3;
  $223 = (($221) + ($222))|0;
  $tmp11 = $223;
  $224 = $z1;
  $225 = $z4;
  $226 = (($224) - ($225))|0;
  $tmp12 = $226;
  $227 = $z1;
  $228 = $z2;
  $229 = $z3;
  $230 = (($228) + ($229))|0;
  $231 = $z4;
  $232 = (($230) - ($231))|0;
  $233 = $232 << 1;
  $234 = (($227) - ($233))|0;
  $tmp23 = $234;
  $235 = $wsptr;
  $236 = (($235) + 8|0);
  $237 = HEAP32[$236>>2]|0;
  $z1 = $237;
  $238 = $wsptr;
  $239 = (($238) + 24|0);
  $240 = HEAP32[$239>>2]|0;
  $z2 = $240;
  $241 = $z1;
  $242 = $z2;
  $243 = (($241) + ($242))|0;
  $244 = ($243*9058)|0;
  $z3 = $244;
  $245 = $z3;
  $246 = $z1;
  $247 = ($246*2237)|0;
  $248 = (($245) + ($247))|0;
  $tmp13 = $248;
  $249 = $z3;
  $250 = $z2;
  $251 = ($250*14084)|0;
  $252 = (($249) - ($251))|0;
  $tmp14 = $252;
  $253 = $z1;
  $254 = ($253*5027)|0;
  $255 = $z2;
  $256 = ($255*11295)|0;
  $257 = (($254) - ($256))|0;
  $tmp15 = $257;
  $258 = $tmp10;
  $259 = $tmp13;
  $260 = (($258) + ($259))|0;
  $tmp20 = $260;
  $261 = $tmp10;
  $262 = $tmp13;
  $263 = (($261) - ($262))|0;
  $tmp26 = $263;
  $264 = $tmp11;
  $265 = $tmp14;
  $266 = (($264) + ($265))|0;
  $tmp21 = $266;
  $267 = $tmp11;
  $268 = $tmp14;
  $269 = (($267) - ($268))|0;
  $tmp25 = $269;
  $270 = $tmp12;
  $271 = $tmp15;
  $272 = (($270) + ($271))|0;
  $tmp22 = $272;
  $273 = $tmp12;
  $274 = $tmp15;
  $275 = (($273) - ($274))|0;
  $tmp24 = $275;
  $276 = $wsptr;
  $277 = (($276) + 4|0);
  $278 = HEAP32[$277>>2]|0;
  $z1 = $278;
  $279 = $wsptr;
  $280 = (($279) + 12|0);
  $281 = HEAP32[$280>>2]|0;
  $z2 = $281;
  $282 = $wsptr;
  $283 = (($282) + 20|0);
  $284 = HEAP32[$283>>2]|0;
  $z3 = $284;
  $285 = $wsptr;
  $286 = (($285) + 28|0);
  $287 = HEAP32[$286>>2]|0;
  $z4 = $287;
  $288 = $z4;
  $289 = $288 << 13;
  $z4 = $289;
  $290 = $z1;
  $291 = $z3;
  $292 = (($290) + ($291))|0;
  $tmp14 = $292;
  $293 = $z1;
  $294 = $z2;
  $295 = (($293) + ($294))|0;
  $296 = ($295*10935)|0;
  $tmp11 = $296;
  $297 = $tmp14;
  $298 = ($297*9810)|0;
  $tmp12 = $298;
  $299 = $tmp11;
  $300 = $tmp12;
  $301 = (($299) + ($300))|0;
  $302 = $z4;
  $303 = (($301) + ($302))|0;
  $304 = $z1;
  $305 = ($304*9232)|0;
  $306 = (($303) - ($305))|0;
  $tmp10 = $306;
  $307 = $tmp14;
  $308 = ($307*6164)|0;
  $tmp14 = $308;
  $309 = $tmp14;
  $310 = $z1;
  $311 = ($310*8693)|0;
  $312 = (($309) - ($311))|0;
  $tmp16 = $312;
  $313 = $z2;
  $314 = $z1;
  $315 = (($314) - ($313))|0;
  $z1 = $315;
  $316 = $z1;
  $317 = ($316*3826)|0;
  $318 = $z4;
  $319 = (($317) - ($318))|0;
  $tmp15 = $319;
  $320 = $tmp15;
  $321 = $tmp16;
  $322 = (($321) + ($320))|0;
  $tmp16 = $322;
  $323 = $z2;
  $324 = $z3;
  $325 = (($323) + ($324))|0;
  $326 = Math_imul($325, -1297)|0;
  $327 = $z4;
  $328 = (($326) - ($327))|0;
  $tmp13 = $328;
  $329 = $tmp13;
  $330 = $z2;
  $331 = ($330*3474)|0;
  $332 = (($329) - ($331))|0;
  $333 = $tmp11;
  $334 = (($333) + ($332))|0;
  $tmp11 = $334;
  $335 = $tmp13;
  $336 = $z3;
  $337 = ($336*19447)|0;
  $338 = (($335) - ($337))|0;
  $339 = $tmp12;
  $340 = (($339) + ($338))|0;
  $tmp12 = $340;
  $341 = $z3;
  $342 = $z2;
  $343 = (($341) - ($342))|0;
  $344 = ($343*11512)|0;
  $tmp13 = $344;
  $345 = $tmp13;
  $346 = $z4;
  $347 = (($345) + ($346))|0;
  $348 = $z3;
  $349 = ($348*13850)|0;
  $350 = (($347) - ($349))|0;
  $351 = $tmp14;
  $352 = (($351) + ($350))|0;
  $tmp14 = $352;
  $353 = $tmp13;
  $354 = $z2;
  $355 = ($354*5529)|0;
  $356 = (($353) + ($355))|0;
  $357 = $tmp15;
  $358 = (($357) + ($356))|0;
  $tmp15 = $358;
  $359 = $z1;
  $360 = $z3;
  $361 = (($359) - ($360))|0;
  $362 = $361 << 13;
  $363 = $z4;
  $364 = (($362) + ($363))|0;
  $tmp13 = $364;
  $365 = $tmp20;
  $366 = $tmp10;
  $367 = (($365) + ($366))|0;
  $368 = $367 >> 18;
  $369 = $368 & 1023;
  $370 = $range_limit;
  $371 = (($370) + ($369)|0);
  $372 = HEAP8[$371>>0]|0;
  $373 = $outptr;
  HEAP8[$373>>0] = $372;
  $374 = $tmp20;
  $375 = $tmp10;
  $376 = (($374) - ($375))|0;
  $377 = $376 >> 18;
  $378 = $377 & 1023;
  $379 = $range_limit;
  $380 = (($379) + ($378)|0);
  $381 = HEAP8[$380>>0]|0;
  $382 = $outptr;
  $383 = (($382) + 13|0);
  HEAP8[$383>>0] = $381;
  $384 = $tmp21;
  $385 = $tmp11;
  $386 = (($384) + ($385))|0;
  $387 = $386 >> 18;
  $388 = $387 & 1023;
  $389 = $range_limit;
  $390 = (($389) + ($388)|0);
  $391 = HEAP8[$390>>0]|0;
  $392 = $outptr;
  $393 = (($392) + 1|0);
  HEAP8[$393>>0] = $391;
  $394 = $tmp21;
  $395 = $tmp11;
  $396 = (($394) - ($395))|0;
  $397 = $396 >> 18;
  $398 = $397 & 1023;
  $399 = $range_limit;
  $400 = (($399) + ($398)|0);
  $401 = HEAP8[$400>>0]|0;
  $402 = $outptr;
  $403 = (($402) + 12|0);
  HEAP8[$403>>0] = $401;
  $404 = $tmp22;
  $405 = $tmp12;
  $406 = (($404) + ($405))|0;
  $407 = $406 >> 18;
  $408 = $407 & 1023;
  $409 = $range_limit;
  $410 = (($409) + ($408)|0);
  $411 = HEAP8[$410>>0]|0;
  $412 = $outptr;
  $413 = (($412) + 2|0);
  HEAP8[$413>>0] = $411;
  $414 = $tmp22;
  $415 = $tmp12;
  $416 = (($414) - ($415))|0;
  $417 = $416 >> 18;
  $418 = $417 & 1023;
  $419 = $range_limit;
  $420 = (($419) + ($418)|0);
  $421 = HEAP8[$420>>0]|0;
  $422 = $outptr;
  $423 = (($422) + 11|0);
  HEAP8[$423>>0] = $421;
  $424 = $tmp23;
  $425 = $tmp13;
  $426 = (($424) + ($425))|0;
  $427 = $426 >> 18;
  $428 = $427 & 1023;
  $429 = $range_limit;
  $430 = (($429) + ($428)|0);
  $431 = HEAP8[$430>>0]|0;
  $432 = $outptr;
  $433 = (($432) + 3|0);
  HEAP8[$433>>0] = $431;
  $434 = $tmp23;
  $435 = $tmp13;
  $436 = (($434) - ($435))|0;
  $437 = $436 >> 18;
  $438 = $437 & 1023;
  $439 = $range_limit;
  $440 = (($439) + ($438)|0);
  $441 = HEAP8[$440>>0]|0;
  $442 = $outptr;
  $443 = (($442) + 10|0);
  HEAP8[$443>>0] = $441;
  $444 = $tmp24;
  $445 = $tmp14;
  $446 = (($444) + ($445))|0;
  $447 = $446 >> 18;
  $448 = $447 & 1023;
  $449 = $range_limit;
  $450 = (($449) + ($448)|0);
  $451 = HEAP8[$450>>0]|0;
  $452 = $outptr;
  $453 = (($452) + 4|0);
  HEAP8[$453>>0] = $451;
  $454 = $tmp24;
  $455 = $tmp14;
  $456 = (($454) - ($455))|0;
  $457 = $456 >> 18;
  $458 = $457 & 1023;
  $459 = $range_limit;
  $460 = (($459) + ($458)|0);
  $461 = HEAP8[$460>>0]|0;
  $462 = $outptr;
  $463 = (($462) + 9|0);
  HEAP8[$463>>0] = $461;
  $464 = $tmp25;
  $465 = $tmp15;
  $466 = (($464) + ($465))|0;
  $467 = $466 >> 18;
  $468 = $467 & 1023;
  $469 = $range_limit;
  $470 = (($469) + ($468)|0);
  $471 = HEAP8[$470>>0]|0;
  $472 = $outptr;
  $473 = (($472) + 5|0);
  HEAP8[$473>>0] = $471;
  $474 = $tmp25;
  $475 = $tmp15;
  $476 = (($474) - ($475))|0;
  $477 = $476 >> 18;
  $478 = $477 & 1023;
  $479 = $range_limit;
  $480 = (($479) + ($478)|0);
  $481 = HEAP8[$480>>0]|0;
  $482 = $outptr;
  $483 = (($482) + 8|0);
  HEAP8[$483>>0] = $481;
  $484 = $tmp26;
  $485 = $tmp16;
  $486 = (($484) + ($485))|0;
  $487 = $486 >> 18;
  $488 = $487 & 1023;
  $489 = $range_limit;
  $490 = (($489) + ($488)|0);
  $491 = HEAP8[$490>>0]|0;
  $492 = $outptr;
  $493 = (($492) + 6|0);
  HEAP8[$493>>0] = $491;
  $494 = $tmp26;
  $495 = $tmp16;
  $496 = (($494) - ($495))|0;
  $497 = $496 >> 18;
  $498 = $497 & 1023;
  $499 = $range_limit;
  $500 = (($499) + ($498)|0);
  $501 = HEAP8[$500>>0]|0;
  $502 = $outptr;
  $503 = (($502) + 7|0);
  HEAP8[$503>>0] = $501;
  $504 = $wsptr;
  $505 = (($504) + 32|0);
  $wsptr = $505;
  $506 = $ctr;
  $507 = (($506) + 1)|0;
  $ctr = $507;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_12x6($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0;
 var $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp10 = $20;
  $21 = $tmp10;
  $22 = $21 << 13;
  $tmp10 = $22;
  $23 = $tmp10;
  $24 = (($23) + 1024)|0;
  $tmp10 = $24;
  $25 = $inptr;
  $26 = (($25) + 64|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $tmp12 = $32;
  $33 = $tmp12;
  $34 = ($33*5793)|0;
  $tmp20 = $34;
  $35 = $tmp10;
  $36 = $tmp20;
  $37 = (($35) + ($36))|0;
  $tmp11 = $37;
  $38 = $tmp10;
  $39 = $tmp20;
  $40 = (($38) - ($39))|0;
  $41 = $tmp20;
  $42 = (($40) - ($41))|0;
  $43 = $42 >> 11;
  $tmp21 = $43;
  $44 = $inptr;
  $45 = (($44) + 32|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = $quantptr;
  $49 = (($48) + 64|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = Math_imul($47, $50)|0;
  $tmp20 = $51;
  $52 = $tmp20;
  $53 = ($52*10033)|0;
  $tmp10 = $53;
  $54 = $tmp11;
  $55 = $tmp10;
  $56 = (($54) + ($55))|0;
  $tmp20 = $56;
  $57 = $tmp11;
  $58 = $tmp10;
  $59 = (($57) - ($58))|0;
  $tmp22 = $59;
  $60 = $inptr;
  $61 = (($60) + 16|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 << 16 >> 16;
  $64 = $quantptr;
  $65 = (($64) + 32|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = Math_imul($63, $66)|0;
  $z1 = $67;
  $68 = $inptr;
  $69 = (($68) + 48|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $70 << 16 >> 16;
  $72 = $quantptr;
  $73 = (($72) + 96|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = Math_imul($71, $74)|0;
  $z2 = $75;
  $76 = $inptr;
  $77 = (($76) + 80|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = $quantptr;
  $81 = (($80) + 160|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = Math_imul($79, $82)|0;
  $z3 = $83;
  $84 = $z1;
  $85 = $z3;
  $86 = (($84) + ($85))|0;
  $87 = ($86*2998)|0;
  $tmp11 = $87;
  $88 = $tmp11;
  $89 = $z1;
  $90 = $z2;
  $91 = (($89) + ($90))|0;
  $92 = $91 << 13;
  $93 = (($88) + ($92))|0;
  $tmp10 = $93;
  $94 = $tmp11;
  $95 = $z3;
  $96 = $z2;
  $97 = (($95) - ($96))|0;
  $98 = $97 << 13;
  $99 = (($94) + ($98))|0;
  $tmp12 = $99;
  $100 = $z1;
  $101 = $z2;
  $102 = (($100) - ($101))|0;
  $103 = $z3;
  $104 = (($102) - ($103))|0;
  $105 = $104 << 2;
  $tmp11 = $105;
  $106 = $tmp20;
  $107 = $tmp10;
  $108 = (($106) + ($107))|0;
  $109 = $108 >> 11;
  $110 = $wsptr;
  HEAP32[$110>>2] = $109;
  $111 = $tmp20;
  $112 = $tmp10;
  $113 = (($111) - ($112))|0;
  $114 = $113 >> 11;
  $115 = $wsptr;
  $116 = (($115) + 160|0);
  HEAP32[$116>>2] = $114;
  $117 = $tmp21;
  $118 = $tmp11;
  $119 = (($117) + ($118))|0;
  $120 = $wsptr;
  $121 = (($120) + 32|0);
  HEAP32[$121>>2] = $119;
  $122 = $tmp21;
  $123 = $tmp11;
  $124 = (($122) - ($123))|0;
  $125 = $wsptr;
  $126 = (($125) + 128|0);
  HEAP32[$126>>2] = $124;
  $127 = $tmp22;
  $128 = $tmp12;
  $129 = (($127) + ($128))|0;
  $130 = $129 >> 11;
  $131 = $wsptr;
  $132 = (($131) + 64|0);
  HEAP32[$132>>2] = $130;
  $133 = $tmp22;
  $134 = $tmp12;
  $135 = (($133) - ($134))|0;
  $136 = $135 >> 11;
  $137 = $wsptr;
  $138 = (($137) + 96|0);
  HEAP32[$138>>2] = $136;
  $139 = $ctr;
  $140 = (($139) + 1)|0;
  $ctr = $140;
  $141 = $inptr;
  $142 = (($141) + 2|0);
  $inptr = $142;
  $143 = $quantptr;
  $144 = (($143) + 4|0);
  $quantptr = $144;
  $145 = $wsptr;
  $146 = (($145) + 4|0);
  $wsptr = $146;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $147 = $ctr;
  $148 = ($147|0)<(6);
  if (!($148)) {
   break;
  }
  $149 = $ctr;
  $150 = $3;
  $151 = (($150) + ($149<<2)|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $4;
  $154 = (($152) + ($153)|0);
  $outptr = $154;
  $155 = $wsptr;
  $156 = HEAP32[$155>>2]|0;
  $157 = (($156) + 16)|0;
  $z3 = $157;
  $158 = $z3;
  $159 = $158 << 13;
  $z3 = $159;
  $160 = $wsptr;
  $161 = (($160) + 16|0);
  $162 = HEAP32[$161>>2]|0;
  $z4 = $162;
  $163 = $z4;
  $164 = ($163*10033)|0;
  $z4 = $164;
  $165 = $z3;
  $166 = $z4;
  $167 = (($165) + ($166))|0;
  $tmp10 = $167;
  $168 = $z3;
  $169 = $z4;
  $170 = (($168) - ($169))|0;
  $tmp11 = $170;
  $171 = $wsptr;
  $172 = (($171) + 8|0);
  $173 = HEAP32[$172>>2]|0;
  $z1 = $173;
  $174 = $z1;
  $175 = ($174*11190)|0;
  $z4 = $175;
  $176 = $z1;
  $177 = $176 << 13;
  $z1 = $177;
  $178 = $wsptr;
  $179 = (($178) + 24|0);
  $180 = HEAP32[$179>>2]|0;
  $z2 = $180;
  $181 = $z2;
  $182 = $181 << 13;
  $z2 = $182;
  $183 = $z1;
  $184 = $z2;
  $185 = (($183) - ($184))|0;
  $tmp12 = $185;
  $186 = $z3;
  $187 = $tmp12;
  $188 = (($186) + ($187))|0;
  $tmp21 = $188;
  $189 = $z3;
  $190 = $tmp12;
  $191 = (($189) - ($190))|0;
  $tmp24 = $191;
  $192 = $z4;
  $193 = $z2;
  $194 = (($192) + ($193))|0;
  $tmp12 = $194;
  $195 = $tmp10;
  $196 = $tmp12;
  $197 = (($195) + ($196))|0;
  $tmp20 = $197;
  $198 = $tmp10;
  $199 = $tmp12;
  $200 = (($198) - ($199))|0;
  $tmp25 = $200;
  $201 = $z4;
  $202 = $z1;
  $203 = (($201) - ($202))|0;
  $204 = $z2;
  $205 = (($203) - ($204))|0;
  $tmp12 = $205;
  $206 = $tmp11;
  $207 = $tmp12;
  $208 = (($206) + ($207))|0;
  $tmp22 = $208;
  $209 = $tmp11;
  $210 = $tmp12;
  $211 = (($209) - ($210))|0;
  $tmp23 = $211;
  $212 = $wsptr;
  $213 = (($212) + 4|0);
  $214 = HEAP32[$213>>2]|0;
  $z1 = $214;
  $215 = $wsptr;
  $216 = (($215) + 12|0);
  $217 = HEAP32[$216>>2]|0;
  $z2 = $217;
  $218 = $wsptr;
  $219 = (($218) + 20|0);
  $220 = HEAP32[$219>>2]|0;
  $z3 = $220;
  $221 = $wsptr;
  $222 = (($221) + 28|0);
  $223 = HEAP32[$222>>2]|0;
  $z4 = $223;
  $224 = $z2;
  $225 = ($224*10703)|0;
  $tmp11 = $225;
  $226 = $z2;
  $227 = Math_imul($226, -4433)|0;
  $tmp14 = $227;
  $228 = $z1;
  $229 = $z3;
  $230 = (($228) + ($229))|0;
  $tmp10 = $230;
  $231 = $tmp10;
  $232 = $z4;
  $233 = (($231) + ($232))|0;
  $234 = ($233*7053)|0;
  $tmp15 = $234;
  $235 = $tmp15;
  $236 = $tmp10;
  $237 = ($236*2139)|0;
  $238 = (($235) + ($237))|0;
  $tmp12 = $238;
  $239 = $tmp12;
  $240 = $tmp11;
  $241 = (($239) + ($240))|0;
  $242 = $z1;
  $243 = ($242*2295)|0;
  $244 = (($241) + ($243))|0;
  $tmp10 = $244;
  $245 = $z3;
  $246 = $z4;
  $247 = (($245) + ($246))|0;
  $248 = Math_imul($247, -8565)|0;
  $tmp13 = $248;
  $249 = $tmp13;
  $250 = $tmp14;
  $251 = (($249) + ($250))|0;
  $252 = $z3;
  $253 = ($252*12112)|0;
  $254 = (($251) - ($253))|0;
  $255 = $tmp12;
  $256 = (($255) + ($254))|0;
  $tmp12 = $256;
  $257 = $tmp15;
  $258 = $tmp11;
  $259 = (($257) - ($258))|0;
  $260 = $z4;
  $261 = ($260*12998)|0;
  $262 = (($259) + ($261))|0;
  $263 = $tmp13;
  $264 = (($263) + ($262))|0;
  $tmp13 = $264;
  $265 = $tmp14;
  $266 = $z1;
  $267 = ($266*5540)|0;
  $268 = (($265) - ($267))|0;
  $269 = $z4;
  $270 = ($269*16244)|0;
  $271 = (($268) - ($270))|0;
  $272 = $tmp15;
  $273 = (($272) + ($271))|0;
  $tmp15 = $273;
  $274 = $z4;
  $275 = $z1;
  $276 = (($275) - ($274))|0;
  $z1 = $276;
  $277 = $z3;
  $278 = $z2;
  $279 = (($278) - ($277))|0;
  $z2 = $279;
  $280 = $z1;
  $281 = $z2;
  $282 = (($280) + ($281))|0;
  $283 = ($282*4433)|0;
  $z3 = $283;
  $284 = $z3;
  $285 = $z1;
  $286 = ($285*6270)|0;
  $287 = (($284) + ($286))|0;
  $tmp11 = $287;
  $288 = $z3;
  $289 = $z2;
  $290 = ($289*15137)|0;
  $291 = (($288) - ($290))|0;
  $tmp14 = $291;
  $292 = $tmp20;
  $293 = $tmp10;
  $294 = (($292) + ($293))|0;
  $295 = $294 >> 18;
  $296 = $295 & 1023;
  $297 = $range_limit;
  $298 = (($297) + ($296)|0);
  $299 = HEAP8[$298>>0]|0;
  $300 = $outptr;
  HEAP8[$300>>0] = $299;
  $301 = $tmp20;
  $302 = $tmp10;
  $303 = (($301) - ($302))|0;
  $304 = $303 >> 18;
  $305 = $304 & 1023;
  $306 = $range_limit;
  $307 = (($306) + ($305)|0);
  $308 = HEAP8[$307>>0]|0;
  $309 = $outptr;
  $310 = (($309) + 11|0);
  HEAP8[$310>>0] = $308;
  $311 = $tmp21;
  $312 = $tmp11;
  $313 = (($311) + ($312))|0;
  $314 = $313 >> 18;
  $315 = $314 & 1023;
  $316 = $range_limit;
  $317 = (($316) + ($315)|0);
  $318 = HEAP8[$317>>0]|0;
  $319 = $outptr;
  $320 = (($319) + 1|0);
  HEAP8[$320>>0] = $318;
  $321 = $tmp21;
  $322 = $tmp11;
  $323 = (($321) - ($322))|0;
  $324 = $323 >> 18;
  $325 = $324 & 1023;
  $326 = $range_limit;
  $327 = (($326) + ($325)|0);
  $328 = HEAP8[$327>>0]|0;
  $329 = $outptr;
  $330 = (($329) + 10|0);
  HEAP8[$330>>0] = $328;
  $331 = $tmp22;
  $332 = $tmp12;
  $333 = (($331) + ($332))|0;
  $334 = $333 >> 18;
  $335 = $334 & 1023;
  $336 = $range_limit;
  $337 = (($336) + ($335)|0);
  $338 = HEAP8[$337>>0]|0;
  $339 = $outptr;
  $340 = (($339) + 2|0);
  HEAP8[$340>>0] = $338;
  $341 = $tmp22;
  $342 = $tmp12;
  $343 = (($341) - ($342))|0;
  $344 = $343 >> 18;
  $345 = $344 & 1023;
  $346 = $range_limit;
  $347 = (($346) + ($345)|0);
  $348 = HEAP8[$347>>0]|0;
  $349 = $outptr;
  $350 = (($349) + 9|0);
  HEAP8[$350>>0] = $348;
  $351 = $tmp23;
  $352 = $tmp13;
  $353 = (($351) + ($352))|0;
  $354 = $353 >> 18;
  $355 = $354 & 1023;
  $356 = $range_limit;
  $357 = (($356) + ($355)|0);
  $358 = HEAP8[$357>>0]|0;
  $359 = $outptr;
  $360 = (($359) + 3|0);
  HEAP8[$360>>0] = $358;
  $361 = $tmp23;
  $362 = $tmp13;
  $363 = (($361) - ($362))|0;
  $364 = $363 >> 18;
  $365 = $364 & 1023;
  $366 = $range_limit;
  $367 = (($366) + ($365)|0);
  $368 = HEAP8[$367>>0]|0;
  $369 = $outptr;
  $370 = (($369) + 8|0);
  HEAP8[$370>>0] = $368;
  $371 = $tmp24;
  $372 = $tmp14;
  $373 = (($371) + ($372))|0;
  $374 = $373 >> 18;
  $375 = $374 & 1023;
  $376 = $range_limit;
  $377 = (($376) + ($375)|0);
  $378 = HEAP8[$377>>0]|0;
  $379 = $outptr;
  $380 = (($379) + 4|0);
  HEAP8[$380>>0] = $378;
  $381 = $tmp24;
  $382 = $tmp14;
  $383 = (($381) - ($382))|0;
  $384 = $383 >> 18;
  $385 = $384 & 1023;
  $386 = $range_limit;
  $387 = (($386) + ($385)|0);
  $388 = HEAP8[$387>>0]|0;
  $389 = $outptr;
  $390 = (($389) + 7|0);
  HEAP8[$390>>0] = $388;
  $391 = $tmp25;
  $392 = $tmp15;
  $393 = (($391) + ($392))|0;
  $394 = $393 >> 18;
  $395 = $394 & 1023;
  $396 = $range_limit;
  $397 = (($396) + ($395)|0);
  $398 = HEAP8[$397>>0]|0;
  $399 = $outptr;
  $400 = (($399) + 5|0);
  HEAP8[$400>>0] = $398;
  $401 = $tmp25;
  $402 = $tmp15;
  $403 = (($401) - ($402))|0;
  $404 = $403 >> 18;
  $405 = $404 & 1023;
  $406 = $range_limit;
  $407 = (($406) + ($405)|0);
  $408 = HEAP8[$407>>0]|0;
  $409 = $outptr;
  $410 = (($409) + 6|0);
  HEAP8[$410>>0] = $408;
  $411 = $wsptr;
  $412 = (($411) + 32|0);
  $wsptr = $412;
  $413 = $ctr;
  $414 = (($413) + 1)|0;
  $ctr = $414;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_10x5($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0;
 var $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp12 = $20;
  $21 = $tmp12;
  $22 = $21 << 13;
  $tmp12 = $22;
  $23 = $tmp12;
  $24 = (($23) + 1024)|0;
  $tmp12 = $24;
  $25 = $inptr;
  $26 = (($25) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $tmp13 = $32;
  $33 = $inptr;
  $34 = (($33) + 64|0);
  $35 = HEAP16[$34>>1]|0;
  $36 = $35 << 16 >> 16;
  $37 = $quantptr;
  $38 = (($37) + 128|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = Math_imul($36, $39)|0;
  $tmp14 = $40;
  $41 = $tmp13;
  $42 = $tmp14;
  $43 = (($41) + ($42))|0;
  $44 = ($43*6476)|0;
  $z1 = $44;
  $45 = $tmp13;
  $46 = $tmp14;
  $47 = (($45) - ($46))|0;
  $48 = ($47*2896)|0;
  $z2 = $48;
  $49 = $tmp12;
  $50 = $z2;
  $51 = (($49) + ($50))|0;
  $z3 = $51;
  $52 = $z3;
  $53 = $z1;
  $54 = (($52) + ($53))|0;
  $tmp10 = $54;
  $55 = $z3;
  $56 = $z1;
  $57 = (($55) - ($56))|0;
  $tmp11 = $57;
  $58 = $z2;
  $59 = $58 << 2;
  $60 = $tmp12;
  $61 = (($60) - ($59))|0;
  $tmp12 = $61;
  $62 = $inptr;
  $63 = (($62) + 16|0);
  $64 = HEAP16[$63>>1]|0;
  $65 = $64 << 16 >> 16;
  $66 = $quantptr;
  $67 = (($66) + 32|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = Math_imul($65, $68)|0;
  $z2 = $69;
  $70 = $inptr;
  $71 = (($70) + 48|0);
  $72 = HEAP16[$71>>1]|0;
  $73 = $72 << 16 >> 16;
  $74 = $quantptr;
  $75 = (($74) + 96|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = Math_imul($73, $76)|0;
  $z3 = $77;
  $78 = $z2;
  $79 = $z3;
  $80 = (($78) + ($79))|0;
  $81 = ($80*6810)|0;
  $z1 = $81;
  $82 = $z1;
  $83 = $z2;
  $84 = ($83*4209)|0;
  $85 = (($82) + ($84))|0;
  $tmp13 = $85;
  $86 = $z1;
  $87 = $z3;
  $88 = ($87*17828)|0;
  $89 = (($86) - ($88))|0;
  $tmp14 = $89;
  $90 = $tmp10;
  $91 = $tmp13;
  $92 = (($90) + ($91))|0;
  $93 = $92 >> 11;
  $94 = $wsptr;
  HEAP32[$94>>2] = $93;
  $95 = $tmp10;
  $96 = $tmp13;
  $97 = (($95) - ($96))|0;
  $98 = $97 >> 11;
  $99 = $wsptr;
  $100 = (($99) + 128|0);
  HEAP32[$100>>2] = $98;
  $101 = $tmp11;
  $102 = $tmp14;
  $103 = (($101) + ($102))|0;
  $104 = $103 >> 11;
  $105 = $wsptr;
  $106 = (($105) + 32|0);
  HEAP32[$106>>2] = $104;
  $107 = $tmp11;
  $108 = $tmp14;
  $109 = (($107) - ($108))|0;
  $110 = $109 >> 11;
  $111 = $wsptr;
  $112 = (($111) + 96|0);
  HEAP32[$112>>2] = $110;
  $113 = $tmp12;
  $114 = $113 >> 11;
  $115 = $wsptr;
  $116 = (($115) + 64|0);
  HEAP32[$116>>2] = $114;
  $117 = $ctr;
  $118 = (($117) + 1)|0;
  $ctr = $118;
  $119 = $inptr;
  $120 = (($119) + 2|0);
  $inptr = $120;
  $121 = $quantptr;
  $122 = (($121) + 4|0);
  $quantptr = $122;
  $123 = $wsptr;
  $124 = (($123) + 4|0);
  $wsptr = $124;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $125 = $ctr;
  $126 = ($125|0)<(5);
  if (!($126)) {
   break;
  }
  $127 = $ctr;
  $128 = $3;
  $129 = (($128) + ($127<<2)|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = $4;
  $132 = (($130) + ($131)|0);
  $outptr = $132;
  $133 = $wsptr;
  $134 = HEAP32[$133>>2]|0;
  $135 = (($134) + 16)|0;
  $z3 = $135;
  $136 = $z3;
  $137 = $136 << 13;
  $z3 = $137;
  $138 = $wsptr;
  $139 = (($138) + 16|0);
  $140 = HEAP32[$139>>2]|0;
  $z4 = $140;
  $141 = $z4;
  $142 = ($141*9373)|0;
  $z1 = $142;
  $143 = $z4;
  $144 = ($143*3580)|0;
  $z2 = $144;
  $145 = $z3;
  $146 = $z1;
  $147 = (($145) + ($146))|0;
  $tmp10 = $147;
  $148 = $z3;
  $149 = $z2;
  $150 = (($148) - ($149))|0;
  $tmp11 = $150;
  $151 = $z3;
  $152 = $z1;
  $153 = $z2;
  $154 = (($152) - ($153))|0;
  $155 = $154 << 1;
  $156 = (($151) - ($155))|0;
  $tmp22 = $156;
  $157 = $wsptr;
  $158 = (($157) + 8|0);
  $159 = HEAP32[$158>>2]|0;
  $z2 = $159;
  $160 = $wsptr;
  $161 = (($160) + 24|0);
  $162 = HEAP32[$161>>2]|0;
  $z3 = $162;
  $163 = $z2;
  $164 = $z3;
  $165 = (($163) + ($164))|0;
  $166 = ($165*6810)|0;
  $z1 = $166;
  $167 = $z1;
  $168 = $z2;
  $169 = ($168*4209)|0;
  $170 = (($167) + ($169))|0;
  $tmp12 = $170;
  $171 = $z1;
  $172 = $z3;
  $173 = ($172*17828)|0;
  $174 = (($171) - ($173))|0;
  $tmp13 = $174;
  $175 = $tmp10;
  $176 = $tmp12;
  $177 = (($175) + ($176))|0;
  $tmp20 = $177;
  $178 = $tmp10;
  $179 = $tmp12;
  $180 = (($178) - ($179))|0;
  $tmp24 = $180;
  $181 = $tmp11;
  $182 = $tmp13;
  $183 = (($181) + ($182))|0;
  $tmp21 = $183;
  $184 = $tmp11;
  $185 = $tmp13;
  $186 = (($184) - ($185))|0;
  $tmp23 = $186;
  $187 = $wsptr;
  $188 = (($187) + 4|0);
  $189 = HEAP32[$188>>2]|0;
  $z1 = $189;
  $190 = $wsptr;
  $191 = (($190) + 12|0);
  $192 = HEAP32[$191>>2]|0;
  $z2 = $192;
  $193 = $wsptr;
  $194 = (($193) + 20|0);
  $195 = HEAP32[$194>>2]|0;
  $z3 = $195;
  $196 = $z3;
  $197 = $196 << 13;
  $z3 = $197;
  $198 = $wsptr;
  $199 = (($198) + 28|0);
  $200 = HEAP32[$199>>2]|0;
  $z4 = $200;
  $201 = $z2;
  $202 = $z4;
  $203 = (($201) + ($202))|0;
  $tmp11 = $203;
  $204 = $z2;
  $205 = $z4;
  $206 = (($204) - ($205))|0;
  $tmp13 = $206;
  $207 = $tmp13;
  $208 = ($207*2531)|0;
  $tmp12 = $208;
  $209 = $tmp11;
  $210 = ($209*7791)|0;
  $z2 = $210;
  $211 = $z3;
  $212 = $tmp12;
  $213 = (($211) + ($212))|0;
  $z4 = $213;
  $214 = $z1;
  $215 = ($214*11443)|0;
  $216 = $z2;
  $217 = (($215) + ($216))|0;
  $218 = $z4;
  $219 = (($217) + ($218))|0;
  $tmp10 = $219;
  $220 = $z1;
  $221 = ($220*1812)|0;
  $222 = $z2;
  $223 = (($221) - ($222))|0;
  $224 = $z4;
  $225 = (($223) + ($224))|0;
  $tmp14 = $225;
  $226 = $tmp11;
  $227 = ($226*4815)|0;
  $z2 = $227;
  $228 = $z3;
  $229 = $tmp12;
  $230 = (($228) - ($229))|0;
  $231 = $tmp13;
  $232 = $231 << 12;
  $233 = (($230) - ($232))|0;
  $z4 = $233;
  $234 = $z1;
  $235 = $tmp13;
  $236 = (($234) - ($235))|0;
  $237 = $236 << 13;
  $238 = $z3;
  $239 = (($237) - ($238))|0;
  $tmp12 = $239;
  $240 = $z1;
  $241 = ($240*10323)|0;
  $242 = $z2;
  $243 = (($241) - ($242))|0;
  $244 = $z4;
  $245 = (($243) - ($244))|0;
  $tmp11 = $245;
  $246 = $z1;
  $247 = ($246*5260)|0;
  $248 = $z2;
  $249 = (($247) - ($248))|0;
  $250 = $z4;
  $251 = (($249) + ($250))|0;
  $tmp13 = $251;
  $252 = $tmp20;
  $253 = $tmp10;
  $254 = (($252) + ($253))|0;
  $255 = $254 >> 18;
  $256 = $255 & 1023;
  $257 = $range_limit;
  $258 = (($257) + ($256)|0);
  $259 = HEAP8[$258>>0]|0;
  $260 = $outptr;
  HEAP8[$260>>0] = $259;
  $261 = $tmp20;
  $262 = $tmp10;
  $263 = (($261) - ($262))|0;
  $264 = $263 >> 18;
  $265 = $264 & 1023;
  $266 = $range_limit;
  $267 = (($266) + ($265)|0);
  $268 = HEAP8[$267>>0]|0;
  $269 = $outptr;
  $270 = (($269) + 9|0);
  HEAP8[$270>>0] = $268;
  $271 = $tmp21;
  $272 = $tmp11;
  $273 = (($271) + ($272))|0;
  $274 = $273 >> 18;
  $275 = $274 & 1023;
  $276 = $range_limit;
  $277 = (($276) + ($275)|0);
  $278 = HEAP8[$277>>0]|0;
  $279 = $outptr;
  $280 = (($279) + 1|0);
  HEAP8[$280>>0] = $278;
  $281 = $tmp21;
  $282 = $tmp11;
  $283 = (($281) - ($282))|0;
  $284 = $283 >> 18;
  $285 = $284 & 1023;
  $286 = $range_limit;
  $287 = (($286) + ($285)|0);
  $288 = HEAP8[$287>>0]|0;
  $289 = $outptr;
  $290 = (($289) + 8|0);
  HEAP8[$290>>0] = $288;
  $291 = $tmp22;
  $292 = $tmp12;
  $293 = (($291) + ($292))|0;
  $294 = $293 >> 18;
  $295 = $294 & 1023;
  $296 = $range_limit;
  $297 = (($296) + ($295)|0);
  $298 = HEAP8[$297>>0]|0;
  $299 = $outptr;
  $300 = (($299) + 2|0);
  HEAP8[$300>>0] = $298;
  $301 = $tmp22;
  $302 = $tmp12;
  $303 = (($301) - ($302))|0;
  $304 = $303 >> 18;
  $305 = $304 & 1023;
  $306 = $range_limit;
  $307 = (($306) + ($305)|0);
  $308 = HEAP8[$307>>0]|0;
  $309 = $outptr;
  $310 = (($309) + 7|0);
  HEAP8[$310>>0] = $308;
  $311 = $tmp23;
  $312 = $tmp13;
  $313 = (($311) + ($312))|0;
  $314 = $313 >> 18;
  $315 = $314 & 1023;
  $316 = $range_limit;
  $317 = (($316) + ($315)|0);
  $318 = HEAP8[$317>>0]|0;
  $319 = $outptr;
  $320 = (($319) + 3|0);
  HEAP8[$320>>0] = $318;
  $321 = $tmp23;
  $322 = $tmp13;
  $323 = (($321) - ($322))|0;
  $324 = $323 >> 18;
  $325 = $324 & 1023;
  $326 = $range_limit;
  $327 = (($326) + ($325)|0);
  $328 = HEAP8[$327>>0]|0;
  $329 = $outptr;
  $330 = (($329) + 6|0);
  HEAP8[$330>>0] = $328;
  $331 = $tmp24;
  $332 = $tmp14;
  $333 = (($331) + ($332))|0;
  $334 = $333 >> 18;
  $335 = $334 & 1023;
  $336 = $range_limit;
  $337 = (($336) + ($335)|0);
  $338 = HEAP8[$337>>0]|0;
  $339 = $outptr;
  $340 = (($339) + 4|0);
  HEAP8[$340>>0] = $338;
  $341 = $tmp24;
  $342 = $tmp14;
  $343 = (($341) - ($342))|0;
  $344 = $343 >> 18;
  $345 = $344 & 1023;
  $346 = $range_limit;
  $347 = (($346) + ($345)|0);
  $348 = HEAP8[$347>>0]|0;
  $349 = $outptr;
  $350 = (($349) + 5|0);
  HEAP8[$350>>0] = $348;
  $351 = $wsptr;
  $352 = (($351) + 32|0);
  $wsptr = $352;
  $353 = $ctr;
  $354 = (($353) + 1)|0;
  $ctr = $354;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_8x4($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0;
 var $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $tmp3 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp0 = $20;
  $21 = $inptr;
  $22 = (($21) + 32|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = $quantptr;
  $26 = (($25) + 64|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = Math_imul($24, $27)|0;
  $tmp2 = $28;
  $29 = $tmp0;
  $30 = $tmp2;
  $31 = (($29) + ($30))|0;
  $32 = $31 << 2;
  $tmp10 = $32;
  $33 = $tmp0;
  $34 = $tmp2;
  $35 = (($33) - ($34))|0;
  $36 = $35 << 2;
  $tmp12 = $36;
  $37 = $inptr;
  $38 = (($37) + 16|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = $quantptr;
  $42 = (($41) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = Math_imul($40, $43)|0;
  $z2 = $44;
  $45 = $inptr;
  $46 = (($45) + 48|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = $quantptr;
  $50 = (($49) + 96|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($48, $51)|0;
  $z3 = $52;
  $53 = $z2;
  $54 = $z3;
  $55 = (($53) + ($54))|0;
  $56 = ($55*4433)|0;
  $z1 = $56;
  $57 = $z1;
  $58 = (($57) + 1024)|0;
  $z1 = $58;
  $59 = $z1;
  $60 = $z2;
  $61 = ($60*6270)|0;
  $62 = (($59) + ($61))|0;
  $63 = $62 >> 11;
  $tmp0 = $63;
  $64 = $z1;
  $65 = $z3;
  $66 = ($65*15137)|0;
  $67 = (($64) - ($66))|0;
  $68 = $67 >> 11;
  $tmp2 = $68;
  $69 = $tmp10;
  $70 = $tmp0;
  $71 = (($69) + ($70))|0;
  $72 = $wsptr;
  HEAP32[$72>>2] = $71;
  $73 = $tmp10;
  $74 = $tmp0;
  $75 = (($73) - ($74))|0;
  $76 = $wsptr;
  $77 = (($76) + 96|0);
  HEAP32[$77>>2] = $75;
  $78 = $tmp12;
  $79 = $tmp2;
  $80 = (($78) + ($79))|0;
  $81 = $wsptr;
  $82 = (($81) + 32|0);
  HEAP32[$82>>2] = $80;
  $83 = $tmp12;
  $84 = $tmp2;
  $85 = (($83) - ($84))|0;
  $86 = $wsptr;
  $87 = (($86) + 64|0);
  HEAP32[$87>>2] = $85;
  $88 = $ctr;
  $89 = (($88) + 1)|0;
  $ctr = $89;
  $90 = $inptr;
  $91 = (($90) + 2|0);
  $inptr = $91;
  $92 = $quantptr;
  $93 = (($92) + 4|0);
  $quantptr = $93;
  $94 = $wsptr;
  $95 = (($94) + 4|0);
  $wsptr = $95;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $96 = $ctr;
  $97 = ($96|0)<(4);
  if (!($97)) {
   break;
  }
  $98 = $ctr;
  $99 = $3;
  $100 = (($99) + ($98<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = $4;
  $103 = (($101) + ($102)|0);
  $outptr = $103;
  $104 = $wsptr;
  $105 = (($104) + 8|0);
  $106 = HEAP32[$105>>2]|0;
  $z2 = $106;
  $107 = $wsptr;
  $108 = (($107) + 24|0);
  $109 = HEAP32[$108>>2]|0;
  $z3 = $109;
  $110 = $z2;
  $111 = $z3;
  $112 = (($110) + ($111))|0;
  $113 = ($112*4433)|0;
  $z1 = $113;
  $114 = $z1;
  $115 = $z2;
  $116 = ($115*6270)|0;
  $117 = (($114) + ($116))|0;
  $tmp2 = $117;
  $118 = $z1;
  $119 = $z3;
  $120 = ($119*15137)|0;
  $121 = (($118) - ($120))|0;
  $tmp3 = $121;
  $122 = $wsptr;
  $123 = HEAP32[$122>>2]|0;
  $124 = (($123) + 16)|0;
  $z2 = $124;
  $125 = $wsptr;
  $126 = (($125) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $z3 = $127;
  $128 = $z2;
  $129 = $z3;
  $130 = (($128) + ($129))|0;
  $131 = $130 << 13;
  $tmp0 = $131;
  $132 = $z2;
  $133 = $z3;
  $134 = (($132) - ($133))|0;
  $135 = $134 << 13;
  $tmp1 = $135;
  $136 = $tmp0;
  $137 = $tmp2;
  $138 = (($136) + ($137))|0;
  $tmp10 = $138;
  $139 = $tmp0;
  $140 = $tmp2;
  $141 = (($139) - ($140))|0;
  $tmp13 = $141;
  $142 = $tmp1;
  $143 = $tmp3;
  $144 = (($142) + ($143))|0;
  $tmp11 = $144;
  $145 = $tmp1;
  $146 = $tmp3;
  $147 = (($145) - ($146))|0;
  $tmp12 = $147;
  $148 = $wsptr;
  $149 = (($148) + 28|0);
  $150 = HEAP32[$149>>2]|0;
  $tmp0 = $150;
  $151 = $wsptr;
  $152 = (($151) + 20|0);
  $153 = HEAP32[$152>>2]|0;
  $tmp1 = $153;
  $154 = $wsptr;
  $155 = (($154) + 12|0);
  $156 = HEAP32[$155>>2]|0;
  $tmp2 = $156;
  $157 = $wsptr;
  $158 = (($157) + 4|0);
  $159 = HEAP32[$158>>2]|0;
  $tmp3 = $159;
  $160 = $tmp0;
  $161 = $tmp2;
  $162 = (($160) + ($161))|0;
  $z2 = $162;
  $163 = $tmp1;
  $164 = $tmp3;
  $165 = (($163) + ($164))|0;
  $z3 = $165;
  $166 = $z2;
  $167 = $z3;
  $168 = (($166) + ($167))|0;
  $169 = ($168*9633)|0;
  $z1 = $169;
  $170 = $z2;
  $171 = Math_imul($170, -16069)|0;
  $z2 = $171;
  $172 = $z3;
  $173 = Math_imul($172, -3196)|0;
  $z3 = $173;
  $174 = $z1;
  $175 = $z2;
  $176 = (($175) + ($174))|0;
  $z2 = $176;
  $177 = $z1;
  $178 = $z3;
  $179 = (($178) + ($177))|0;
  $z3 = $179;
  $180 = $tmp0;
  $181 = $tmp3;
  $182 = (($180) + ($181))|0;
  $183 = Math_imul($182, -7373)|0;
  $z1 = $183;
  $184 = $tmp0;
  $185 = ($184*2446)|0;
  $tmp0 = $185;
  $186 = $tmp3;
  $187 = ($186*12299)|0;
  $tmp3 = $187;
  $188 = $z1;
  $189 = $z2;
  $190 = (($188) + ($189))|0;
  $191 = $tmp0;
  $192 = (($191) + ($190))|0;
  $tmp0 = $192;
  $193 = $z1;
  $194 = $z3;
  $195 = (($193) + ($194))|0;
  $196 = $tmp3;
  $197 = (($196) + ($195))|0;
  $tmp3 = $197;
  $198 = $tmp1;
  $199 = $tmp2;
  $200 = (($198) + ($199))|0;
  $201 = Math_imul($200, -20995)|0;
  $z1 = $201;
  $202 = $tmp1;
  $203 = ($202*16819)|0;
  $tmp1 = $203;
  $204 = $tmp2;
  $205 = ($204*25172)|0;
  $tmp2 = $205;
  $206 = $z1;
  $207 = $z3;
  $208 = (($206) + ($207))|0;
  $209 = $tmp1;
  $210 = (($209) + ($208))|0;
  $tmp1 = $210;
  $211 = $z1;
  $212 = $z2;
  $213 = (($211) + ($212))|0;
  $214 = $tmp2;
  $215 = (($214) + ($213))|0;
  $tmp2 = $215;
  $216 = $tmp10;
  $217 = $tmp3;
  $218 = (($216) + ($217))|0;
  $219 = $218 >> 18;
  $220 = $219 & 1023;
  $221 = $range_limit;
  $222 = (($221) + ($220)|0);
  $223 = HEAP8[$222>>0]|0;
  $224 = $outptr;
  HEAP8[$224>>0] = $223;
  $225 = $tmp10;
  $226 = $tmp3;
  $227 = (($225) - ($226))|0;
  $228 = $227 >> 18;
  $229 = $228 & 1023;
  $230 = $range_limit;
  $231 = (($230) + ($229)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $outptr;
  $234 = (($233) + 7|0);
  HEAP8[$234>>0] = $232;
  $235 = $tmp11;
  $236 = $tmp2;
  $237 = (($235) + ($236))|0;
  $238 = $237 >> 18;
  $239 = $238 & 1023;
  $240 = $range_limit;
  $241 = (($240) + ($239)|0);
  $242 = HEAP8[$241>>0]|0;
  $243 = $outptr;
  $244 = (($243) + 1|0);
  HEAP8[$244>>0] = $242;
  $245 = $tmp11;
  $246 = $tmp2;
  $247 = (($245) - ($246))|0;
  $248 = $247 >> 18;
  $249 = $248 & 1023;
  $250 = $range_limit;
  $251 = (($250) + ($249)|0);
  $252 = HEAP8[$251>>0]|0;
  $253 = $outptr;
  $254 = (($253) + 6|0);
  HEAP8[$254>>0] = $252;
  $255 = $tmp12;
  $256 = $tmp1;
  $257 = (($255) + ($256))|0;
  $258 = $257 >> 18;
  $259 = $258 & 1023;
  $260 = $range_limit;
  $261 = (($260) + ($259)|0);
  $262 = HEAP8[$261>>0]|0;
  $263 = $outptr;
  $264 = (($263) + 2|0);
  HEAP8[$264>>0] = $262;
  $265 = $tmp12;
  $266 = $tmp1;
  $267 = (($265) - ($266))|0;
  $268 = $267 >> 18;
  $269 = $268 & 1023;
  $270 = $range_limit;
  $271 = (($270) + ($269)|0);
  $272 = HEAP8[$271>>0]|0;
  $273 = $outptr;
  $274 = (($273) + 5|0);
  HEAP8[$274>>0] = $272;
  $275 = $tmp13;
  $276 = $tmp0;
  $277 = (($275) + ($276))|0;
  $278 = $277 >> 18;
  $279 = $278 & 1023;
  $280 = $range_limit;
  $281 = (($280) + ($279)|0);
  $282 = HEAP8[$281>>0]|0;
  $283 = $outptr;
  $284 = (($283) + 3|0);
  HEAP8[$284>>0] = $282;
  $285 = $tmp13;
  $286 = $tmp0;
  $287 = (($285) - ($286))|0;
  $288 = $287 >> 18;
  $289 = $288 & 1023;
  $290 = $range_limit;
  $291 = (($290) + ($289)|0);
  $292 = HEAP8[$291>>0]|0;
  $293 = $outptr;
  $294 = (($293) + 4|0);
  HEAP8[$294>>0] = $292;
  $295 = $wsptr;
  $296 = (($295) + 32|0);
  $wsptr = $296;
  $297 = $ctr;
  $298 = (($297) + 1)|0;
  $ctr = $298;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_6x3($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp2 = 0, $workspace = 0, $wsptr = 0;
 var $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(6);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp0 = $20;
  $21 = $tmp0;
  $22 = $21 << 13;
  $tmp0 = $22;
  $23 = $tmp0;
  $24 = (($23) + 1024)|0;
  $tmp0 = $24;
  $25 = $inptr;
  $26 = (($25) + 32|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 64|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $tmp2 = $32;
  $33 = $tmp2;
  $34 = ($33*5793)|0;
  $tmp12 = $34;
  $35 = $tmp0;
  $36 = $tmp12;
  $37 = (($35) + ($36))|0;
  $tmp10 = $37;
  $38 = $tmp0;
  $39 = $tmp12;
  $40 = (($38) - ($39))|0;
  $41 = $tmp12;
  $42 = (($40) - ($41))|0;
  $tmp2 = $42;
  $43 = $inptr;
  $44 = (($43) + 16|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 << 16 >> 16;
  $47 = $quantptr;
  $48 = (($47) + 32|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = Math_imul($46, $49)|0;
  $tmp12 = $50;
  $51 = $tmp12;
  $52 = ($51*10033)|0;
  $tmp0 = $52;
  $53 = $tmp10;
  $54 = $tmp0;
  $55 = (($53) + ($54))|0;
  $56 = $55 >> 11;
  $57 = $wsptr;
  HEAP32[$57>>2] = $56;
  $58 = $tmp10;
  $59 = $tmp0;
  $60 = (($58) - ($59))|0;
  $61 = $60 >> 11;
  $62 = $wsptr;
  $63 = (($62) + 48|0);
  HEAP32[$63>>2] = $61;
  $64 = $tmp2;
  $65 = $64 >> 11;
  $66 = $wsptr;
  $67 = (($66) + 24|0);
  HEAP32[$67>>2] = $65;
  $68 = $ctr;
  $69 = (($68) + 1)|0;
  $ctr = $69;
  $70 = $inptr;
  $71 = (($70) + 2|0);
  $inptr = $71;
  $72 = $quantptr;
  $73 = (($72) + 4|0);
  $quantptr = $73;
  $74 = $wsptr;
  $75 = (($74) + 4|0);
  $wsptr = $75;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $76 = $ctr;
  $77 = ($76|0)<(3);
  if (!($77)) {
   break;
  }
  $78 = $ctr;
  $79 = $3;
  $80 = (($79) + ($78<<2)|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = $4;
  $83 = (($81) + ($82)|0);
  $outptr = $83;
  $84 = $wsptr;
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + 16)|0;
  $tmp0 = $86;
  $87 = $tmp0;
  $88 = $87 << 13;
  $tmp0 = $88;
  $89 = $wsptr;
  $90 = (($89) + 16|0);
  $91 = HEAP32[$90>>2]|0;
  $tmp2 = $91;
  $92 = $tmp2;
  $93 = ($92*5793)|0;
  $tmp10 = $93;
  $94 = $tmp0;
  $95 = $tmp10;
  $96 = (($94) + ($95))|0;
  $tmp1 = $96;
  $97 = $tmp0;
  $98 = $tmp10;
  $99 = (($97) - ($98))|0;
  $100 = $tmp10;
  $101 = (($99) - ($100))|0;
  $tmp11 = $101;
  $102 = $wsptr;
  $103 = (($102) + 8|0);
  $104 = HEAP32[$103>>2]|0;
  $tmp10 = $104;
  $105 = $tmp10;
  $106 = ($105*10033)|0;
  $tmp0 = $106;
  $107 = $tmp1;
  $108 = $tmp0;
  $109 = (($107) + ($108))|0;
  $tmp10 = $109;
  $110 = $tmp1;
  $111 = $tmp0;
  $112 = (($110) - ($111))|0;
  $tmp12 = $112;
  $113 = $wsptr;
  $114 = (($113) + 4|0);
  $115 = HEAP32[$114>>2]|0;
  $z1 = $115;
  $116 = $wsptr;
  $117 = (($116) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $z2 = $118;
  $119 = $wsptr;
  $120 = (($119) + 20|0);
  $121 = HEAP32[$120>>2]|0;
  $z3 = $121;
  $122 = $z1;
  $123 = $z3;
  $124 = (($122) + ($123))|0;
  $125 = ($124*2998)|0;
  $tmp1 = $125;
  $126 = $tmp1;
  $127 = $z1;
  $128 = $z2;
  $129 = (($127) + ($128))|0;
  $130 = $129 << 13;
  $131 = (($126) + ($130))|0;
  $tmp0 = $131;
  $132 = $tmp1;
  $133 = $z3;
  $134 = $z2;
  $135 = (($133) - ($134))|0;
  $136 = $135 << 13;
  $137 = (($132) + ($136))|0;
  $tmp2 = $137;
  $138 = $z1;
  $139 = $z2;
  $140 = (($138) - ($139))|0;
  $141 = $z3;
  $142 = (($140) - ($141))|0;
  $143 = $142 << 13;
  $tmp1 = $143;
  $144 = $tmp10;
  $145 = $tmp0;
  $146 = (($144) + ($145))|0;
  $147 = $146 >> 18;
  $148 = $147 & 1023;
  $149 = $range_limit;
  $150 = (($149) + ($148)|0);
  $151 = HEAP8[$150>>0]|0;
  $152 = $outptr;
  HEAP8[$152>>0] = $151;
  $153 = $tmp10;
  $154 = $tmp0;
  $155 = (($153) - ($154))|0;
  $156 = $155 >> 18;
  $157 = $156 & 1023;
  $158 = $range_limit;
  $159 = (($158) + ($157)|0);
  $160 = HEAP8[$159>>0]|0;
  $161 = $outptr;
  $162 = (($161) + 5|0);
  HEAP8[$162>>0] = $160;
  $163 = $tmp11;
  $164 = $tmp1;
  $165 = (($163) + ($164))|0;
  $166 = $165 >> 18;
  $167 = $166 & 1023;
  $168 = $range_limit;
  $169 = (($168) + ($167)|0);
  $170 = HEAP8[$169>>0]|0;
  $171 = $outptr;
  $172 = (($171) + 1|0);
  HEAP8[$172>>0] = $170;
  $173 = $tmp11;
  $174 = $tmp1;
  $175 = (($173) - ($174))|0;
  $176 = $175 >> 18;
  $177 = $176 & 1023;
  $178 = $range_limit;
  $179 = (($178) + ($177)|0);
  $180 = HEAP8[$179>>0]|0;
  $181 = $outptr;
  $182 = (($181) + 4|0);
  HEAP8[$182>>0] = $180;
  $183 = $tmp12;
  $184 = $tmp2;
  $185 = (($183) + ($184))|0;
  $186 = $185 >> 18;
  $187 = $186 & 1023;
  $188 = $range_limit;
  $189 = (($188) + ($187)|0);
  $190 = HEAP8[$189>>0]|0;
  $191 = $outptr;
  $192 = (($191) + 2|0);
  HEAP8[$192>>0] = $190;
  $193 = $tmp12;
  $194 = $tmp2;
  $195 = (($193) - ($194))|0;
  $196 = $195 >> 18;
  $197 = $196 & 1023;
  $198 = $range_limit;
  $199 = (($198) + ($197)|0);
  $200 = HEAP8[$199>>0]|0;
  $201 = $outptr;
  $202 = (($201) + 3|0);
  HEAP8[$202>>0] = $200;
  $203 = $wsptr;
  $204 = (($203) + 24|0);
  $wsptr = $204;
  $205 = $ctr;
  $206 = (($205) + 1)|0;
  $ctr = $206;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_4x2($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp10 = 0, $tmp12 = 0, $tmp2 = 0, $workspace = 0, $wsptr = 0;
 var $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(4);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp10 = $20;
  $21 = $inptr;
  $22 = (($21) + 16|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = $quantptr;
  $26 = (($25) + 32|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = Math_imul($24, $27)|0;
  $tmp0 = $28;
  $29 = $tmp10;
  $30 = $tmp0;
  $31 = (($29) + ($30))|0;
  $32 = $wsptr;
  HEAP32[$32>>2] = $31;
  $33 = $tmp10;
  $34 = $tmp0;
  $35 = (($33) - ($34))|0;
  $36 = $wsptr;
  $37 = (($36) + 16|0);
  HEAP32[$37>>2] = $35;
  $38 = $ctr;
  $39 = (($38) + 1)|0;
  $ctr = $39;
  $40 = $inptr;
  $41 = (($40) + 2|0);
  $inptr = $41;
  $42 = $quantptr;
  $43 = (($42) + 4|0);
  $quantptr = $43;
  $44 = $wsptr;
  $45 = (($44) + 4|0);
  $wsptr = $45;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $46 = $ctr;
  $47 = ($46|0)<(2);
  if (!($47)) {
   break;
  }
  $48 = $ctr;
  $49 = $3;
  $50 = (($49) + ($48<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $4;
  $53 = (($51) + ($52)|0);
  $outptr = $53;
  $54 = $wsptr;
  $55 = HEAP32[$54>>2]|0;
  $56 = (($55) + 4)|0;
  $tmp0 = $56;
  $57 = $wsptr;
  $58 = (($57) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $tmp2 = $59;
  $60 = $tmp0;
  $61 = $tmp2;
  $62 = (($60) + ($61))|0;
  $63 = $62 << 13;
  $tmp10 = $63;
  $64 = $tmp0;
  $65 = $tmp2;
  $66 = (($64) - ($65))|0;
  $67 = $66 << 13;
  $tmp12 = $67;
  $68 = $wsptr;
  $69 = (($68) + 4|0);
  $70 = HEAP32[$69>>2]|0;
  $z2 = $70;
  $71 = $wsptr;
  $72 = (($71) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $z3 = $73;
  $74 = $z2;
  $75 = $z3;
  $76 = (($74) + ($75))|0;
  $77 = ($76*4433)|0;
  $z1 = $77;
  $78 = $z1;
  $79 = $z2;
  $80 = ($79*6270)|0;
  $81 = (($78) + ($80))|0;
  $tmp0 = $81;
  $82 = $z1;
  $83 = $z3;
  $84 = ($83*15137)|0;
  $85 = (($82) - ($84))|0;
  $tmp2 = $85;
  $86 = $tmp10;
  $87 = $tmp0;
  $88 = (($86) + ($87))|0;
  $89 = $88 >> 16;
  $90 = $89 & 1023;
  $91 = $range_limit;
  $92 = (($91) + ($90)|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $outptr;
  HEAP8[$94>>0] = $93;
  $95 = $tmp10;
  $96 = $tmp0;
  $97 = (($95) - ($96))|0;
  $98 = $97 >> 16;
  $99 = $98 & 1023;
  $100 = $range_limit;
  $101 = (($100) + ($99)|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $outptr;
  $104 = (($103) + 3|0);
  HEAP8[$104>>0] = $102;
  $105 = $tmp12;
  $106 = $tmp2;
  $107 = (($105) + ($106))|0;
  $108 = $107 >> 16;
  $109 = $108 & 1023;
  $110 = $range_limit;
  $111 = (($110) + ($109)|0);
  $112 = HEAP8[$111>>0]|0;
  $113 = $outptr;
  $114 = (($113) + 1|0);
  HEAP8[$114>>0] = $112;
  $115 = $tmp12;
  $116 = $tmp2;
  $117 = (($115) - ($116))|0;
  $118 = $117 >> 16;
  $119 = $118 & 1023;
  $120 = $range_limit;
  $121 = (($120) + ($119)|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $outptr;
  $124 = (($123) + 2|0);
  HEAP8[$124>>0] = $122;
  $125 = $wsptr;
  $126 = (($125) + 16|0);
  $wsptr = $126;
  $127 = $ctr;
  $128 = (($127) + 1)|0;
  $ctr = $128;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_2x1($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $1;
 $10 = (($9) + 84|0);
 $11 = HEAP32[$10>>2]|0;
 $quantptr = $11;
 $12 = $3;
 $13 = HEAP32[$12>>2]|0;
 $14 = $4;
 $15 = (($13) + ($14)|0);
 $outptr = $15;
 $16 = $2;
 $17 = HEAP16[$16>>1]|0;
 $18 = $17 << 16 >> 16;
 $19 = $quantptr;
 $20 = HEAP32[$19>>2]|0;
 $21 = Math_imul($18, $20)|0;
 $tmp0 = $21;
 $22 = $tmp0;
 $23 = (($22) + 4)|0;
 $tmp0 = $23;
 $24 = $2;
 $25 = (($24) + 2|0);
 $26 = HEAP16[$25>>1]|0;
 $27 = $26 << 16 >> 16;
 $28 = $quantptr;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = Math_imul($27, $30)|0;
 $tmp1 = $31;
 $32 = $tmp0;
 $33 = $tmp1;
 $34 = (($32) + ($33))|0;
 $35 = $34 >> 3;
 $36 = $35 & 1023;
 $37 = $range_limit;
 $38 = (($37) + ($36)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $outptr;
 HEAP8[$40>>0] = $39;
 $41 = $tmp0;
 $42 = $tmp1;
 $43 = (($41) - ($42))|0;
 $44 = $43 >> 3;
 $45 = $44 & 1023;
 $46 = $range_limit;
 $47 = (($46) + ($45)|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $outptr;
 $50 = (($49) + 1|0);
 HEAP8[$50>>0] = $48;
 STACKTOP = sp;return;
}
function _jpeg_idct_8x16($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $tmp20 = 0, $tmp21 = 0;
 var $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $tmp26 = 0, $tmp27 = 0, $tmp3 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp0 = $20;
  $21 = $tmp0;
  $22 = $21 << 13;
  $tmp0 = $22;
  $23 = $tmp0;
  $24 = (($23) + 1024)|0;
  $tmp0 = $24;
  $25 = $inptr;
  $26 = (($25) + 64|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z1 = $32;
  $33 = $z1;
  $34 = ($33*10703)|0;
  $tmp1 = $34;
  $35 = $z1;
  $36 = ($35*4433)|0;
  $tmp2 = $36;
  $37 = $tmp0;
  $38 = $tmp1;
  $39 = (($37) + ($38))|0;
  $tmp10 = $39;
  $40 = $tmp0;
  $41 = $tmp1;
  $42 = (($40) - ($41))|0;
  $tmp11 = $42;
  $43 = $tmp0;
  $44 = $tmp2;
  $45 = (($43) + ($44))|0;
  $tmp12 = $45;
  $46 = $tmp0;
  $47 = $tmp2;
  $48 = (($46) - ($47))|0;
  $tmp13 = $48;
  $49 = $inptr;
  $50 = (($49) + 32|0);
  $51 = HEAP16[$50>>1]|0;
  $52 = $51 << 16 >> 16;
  $53 = $quantptr;
  $54 = (($53) + 64|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = Math_imul($52, $55)|0;
  $z1 = $56;
  $57 = $inptr;
  $58 = (($57) + 96|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = $quantptr;
  $62 = (($61) + 192|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = Math_imul($60, $63)|0;
  $z2 = $64;
  $65 = $z1;
  $66 = $z2;
  $67 = (($65) - ($66))|0;
  $z3 = $67;
  $68 = $z3;
  $69 = ($68*2260)|0;
  $z4 = $69;
  $70 = $z3;
  $71 = ($70*11363)|0;
  $z3 = $71;
  $72 = $z3;
  $73 = $z2;
  $74 = ($73*20995)|0;
  $75 = (($72) + ($74))|0;
  $tmp0 = $75;
  $76 = $z4;
  $77 = $z1;
  $78 = ($77*7373)|0;
  $79 = (($76) + ($78))|0;
  $tmp1 = $79;
  $80 = $z3;
  $81 = $z1;
  $82 = ($81*4926)|0;
  $83 = (($80) - ($82))|0;
  $tmp2 = $83;
  $84 = $z4;
  $85 = $z2;
  $86 = ($85*4176)|0;
  $87 = (($84) - ($86))|0;
  $tmp3 = $87;
  $88 = $tmp10;
  $89 = $tmp0;
  $90 = (($88) + ($89))|0;
  $tmp20 = $90;
  $91 = $tmp10;
  $92 = $tmp0;
  $93 = (($91) - ($92))|0;
  $tmp27 = $93;
  $94 = $tmp12;
  $95 = $tmp1;
  $96 = (($94) + ($95))|0;
  $tmp21 = $96;
  $97 = $tmp12;
  $98 = $tmp1;
  $99 = (($97) - ($98))|0;
  $tmp26 = $99;
  $100 = $tmp13;
  $101 = $tmp2;
  $102 = (($100) + ($101))|0;
  $tmp22 = $102;
  $103 = $tmp13;
  $104 = $tmp2;
  $105 = (($103) - ($104))|0;
  $tmp25 = $105;
  $106 = $tmp11;
  $107 = $tmp3;
  $108 = (($106) + ($107))|0;
  $tmp23 = $108;
  $109 = $tmp11;
  $110 = $tmp3;
  $111 = (($109) - ($110))|0;
  $tmp24 = $111;
  $112 = $inptr;
  $113 = (($112) + 16|0);
  $114 = HEAP16[$113>>1]|0;
  $115 = $114 << 16 >> 16;
  $116 = $quantptr;
  $117 = (($116) + 32|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = Math_imul($115, $118)|0;
  $z1 = $119;
  $120 = $inptr;
  $121 = (($120) + 48|0);
  $122 = HEAP16[$121>>1]|0;
  $123 = $122 << 16 >> 16;
  $124 = $quantptr;
  $125 = (($124) + 96|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = Math_imul($123, $126)|0;
  $z2 = $127;
  $128 = $inptr;
  $129 = (($128) + 80|0);
  $130 = HEAP16[$129>>1]|0;
  $131 = $130 << 16 >> 16;
  $132 = $quantptr;
  $133 = (($132) + 160|0);
  $134 = HEAP32[$133>>2]|0;
  $135 = Math_imul($131, $134)|0;
  $z3 = $135;
  $136 = $inptr;
  $137 = (($136) + 112|0);
  $138 = HEAP16[$137>>1]|0;
  $139 = $138 << 16 >> 16;
  $140 = $quantptr;
  $141 = (($140) + 224|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = Math_imul($139, $142)|0;
  $z4 = $143;
  $144 = $z1;
  $145 = $z3;
  $146 = (($144) + ($145))|0;
  $tmp11 = $146;
  $147 = $z1;
  $148 = $z2;
  $149 = (($147) + ($148))|0;
  $150 = ($149*11086)|0;
  $tmp1 = $150;
  $151 = $tmp11;
  $152 = ($151*10217)|0;
  $tmp2 = $152;
  $153 = $z1;
  $154 = $z4;
  $155 = (($153) + ($154))|0;
  $156 = ($155*8956)|0;
  $tmp3 = $156;
  $157 = $z1;
  $158 = $z4;
  $159 = (($157) - ($158))|0;
  $160 = ($159*7350)|0;
  $tmp10 = $160;
  $161 = $tmp11;
  $162 = ($161*5461)|0;
  $tmp11 = $162;
  $163 = $z1;
  $164 = $z2;
  $165 = (($163) - ($164))|0;
  $166 = ($165*3363)|0;
  $tmp12 = $166;
  $167 = $tmp1;
  $168 = $tmp2;
  $169 = (($167) + ($168))|0;
  $170 = $tmp3;
  $171 = (($169) + ($170))|0;
  $172 = $z1;
  $173 = ($172*18730)|0;
  $174 = (($171) - ($173))|0;
  $tmp0 = $174;
  $175 = $tmp10;
  $176 = $tmp11;
  $177 = (($175) + ($176))|0;
  $178 = $tmp12;
  $179 = (($177) + ($178))|0;
  $180 = $z1;
  $181 = ($180*15038)|0;
  $182 = (($179) - ($181))|0;
  $tmp13 = $182;
  $183 = $z2;
  $184 = $z3;
  $185 = (($183) + ($184))|0;
  $186 = ($185*1136)|0;
  $z1 = $186;
  $187 = $z1;
  $188 = $z2;
  $189 = ($188*589)|0;
  $190 = (($187) + ($189))|0;
  $191 = $tmp1;
  $192 = (($191) + ($190))|0;
  $tmp1 = $192;
  $193 = $z1;
  $194 = $z3;
  $195 = ($194*9222)|0;
  $196 = (($193) - ($195))|0;
  $197 = $tmp2;
  $198 = (($197) + ($196))|0;
  $tmp2 = $198;
  $199 = $z3;
  $200 = $z2;
  $201 = (($199) - ($200))|0;
  $202 = ($201*11529)|0;
  $z1 = $202;
  $203 = $z1;
  $204 = $z3;
  $205 = ($204*6278)|0;
  $206 = (($203) - ($205))|0;
  $207 = $tmp11;
  $208 = (($207) + ($206))|0;
  $tmp11 = $208;
  $209 = $z1;
  $210 = $z2;
  $211 = ($210*16154)|0;
  $212 = (($209) + ($211))|0;
  $213 = $tmp12;
  $214 = (($213) + ($212))|0;
  $tmp12 = $214;
  $215 = $z4;
  $216 = $z2;
  $217 = (($216) + ($215))|0;
  $z2 = $217;
  $218 = $z2;
  $219 = Math_imul($218, -5461)|0;
  $z1 = $219;
  $220 = $z1;
  $221 = $tmp1;
  $222 = (($221) + ($220))|0;
  $tmp1 = $222;
  $223 = $z1;
  $224 = $z4;
  $225 = ($224*8728)|0;
  $226 = (($223) + ($225))|0;
  $227 = $tmp3;
  $228 = (($227) + ($226))|0;
  $tmp3 = $228;
  $229 = $z2;
  $230 = Math_imul($229, -10217)|0;
  $z2 = $230;
  $231 = $z2;
  $232 = $z4;
  $233 = ($232*25733)|0;
  $234 = (($231) + ($233))|0;
  $235 = $tmp10;
  $236 = (($235) + ($234))|0;
  $tmp10 = $236;
  $237 = $z2;
  $238 = $tmp12;
  $239 = (($238) + ($237))|0;
  $tmp12 = $239;
  $240 = $z3;
  $241 = $z4;
  $242 = (($240) + ($241))|0;
  $243 = Math_imul($242, -11086)|0;
  $z2 = $243;
  $244 = $z2;
  $245 = $tmp2;
  $246 = (($245) + ($244))|0;
  $tmp2 = $246;
  $247 = $z2;
  $248 = $tmp3;
  $249 = (($248) + ($247))|0;
  $tmp3 = $249;
  $250 = $z4;
  $251 = $z3;
  $252 = (($250) - ($251))|0;
  $253 = ($252*3363)|0;
  $z2 = $253;
  $254 = $z2;
  $255 = $tmp10;
  $256 = (($255) + ($254))|0;
  $tmp10 = $256;
  $257 = $z2;
  $258 = $tmp11;
  $259 = (($258) + ($257))|0;
  $tmp11 = $259;
  $260 = $tmp20;
  $261 = $tmp0;
  $262 = (($260) + ($261))|0;
  $263 = $262 >> 11;
  $264 = $wsptr;
  HEAP32[$264>>2] = $263;
  $265 = $tmp20;
  $266 = $tmp0;
  $267 = (($265) - ($266))|0;
  $268 = $267 >> 11;
  $269 = $wsptr;
  $270 = (($269) + 480|0);
  HEAP32[$270>>2] = $268;
  $271 = $tmp21;
  $272 = $tmp1;
  $273 = (($271) + ($272))|0;
  $274 = $273 >> 11;
  $275 = $wsptr;
  $276 = (($275) + 32|0);
  HEAP32[$276>>2] = $274;
  $277 = $tmp21;
  $278 = $tmp1;
  $279 = (($277) - ($278))|0;
  $280 = $279 >> 11;
  $281 = $wsptr;
  $282 = (($281) + 448|0);
  HEAP32[$282>>2] = $280;
  $283 = $tmp22;
  $284 = $tmp2;
  $285 = (($283) + ($284))|0;
  $286 = $285 >> 11;
  $287 = $wsptr;
  $288 = (($287) + 64|0);
  HEAP32[$288>>2] = $286;
  $289 = $tmp22;
  $290 = $tmp2;
  $291 = (($289) - ($290))|0;
  $292 = $291 >> 11;
  $293 = $wsptr;
  $294 = (($293) + 416|0);
  HEAP32[$294>>2] = $292;
  $295 = $tmp23;
  $296 = $tmp3;
  $297 = (($295) + ($296))|0;
  $298 = $297 >> 11;
  $299 = $wsptr;
  $300 = (($299) + 96|0);
  HEAP32[$300>>2] = $298;
  $301 = $tmp23;
  $302 = $tmp3;
  $303 = (($301) - ($302))|0;
  $304 = $303 >> 11;
  $305 = $wsptr;
  $306 = (($305) + 384|0);
  HEAP32[$306>>2] = $304;
  $307 = $tmp24;
  $308 = $tmp10;
  $309 = (($307) + ($308))|0;
  $310 = $309 >> 11;
  $311 = $wsptr;
  $312 = (($311) + 128|0);
  HEAP32[$312>>2] = $310;
  $313 = $tmp24;
  $314 = $tmp10;
  $315 = (($313) - ($314))|0;
  $316 = $315 >> 11;
  $317 = $wsptr;
  $318 = (($317) + 352|0);
  HEAP32[$318>>2] = $316;
  $319 = $tmp25;
  $320 = $tmp11;
  $321 = (($319) + ($320))|0;
  $322 = $321 >> 11;
  $323 = $wsptr;
  $324 = (($323) + 160|0);
  HEAP32[$324>>2] = $322;
  $325 = $tmp25;
  $326 = $tmp11;
  $327 = (($325) - ($326))|0;
  $328 = $327 >> 11;
  $329 = $wsptr;
  $330 = (($329) + 320|0);
  HEAP32[$330>>2] = $328;
  $331 = $tmp26;
  $332 = $tmp12;
  $333 = (($331) + ($332))|0;
  $334 = $333 >> 11;
  $335 = $wsptr;
  $336 = (($335) + 192|0);
  HEAP32[$336>>2] = $334;
  $337 = $tmp26;
  $338 = $tmp12;
  $339 = (($337) - ($338))|0;
  $340 = $339 >> 11;
  $341 = $wsptr;
  $342 = (($341) + 288|0);
  HEAP32[$342>>2] = $340;
  $343 = $tmp27;
  $344 = $tmp13;
  $345 = (($343) + ($344))|0;
  $346 = $345 >> 11;
  $347 = $wsptr;
  $348 = (($347) + 224|0);
  HEAP32[$348>>2] = $346;
  $349 = $tmp27;
  $350 = $tmp13;
  $351 = (($349) - ($350))|0;
  $352 = $351 >> 11;
  $353 = $wsptr;
  $354 = (($353) + 256|0);
  HEAP32[$354>>2] = $352;
  $355 = $ctr;
  $356 = (($355) + 1)|0;
  $ctr = $356;
  $357 = $inptr;
  $358 = (($357) + 2|0);
  $inptr = $358;
  $359 = $quantptr;
  $360 = (($359) + 4|0);
  $quantptr = $360;
  $361 = $wsptr;
  $362 = (($361) + 4|0);
  $wsptr = $362;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $363 = $ctr;
  $364 = ($363|0)<(16);
  if (!($364)) {
   break;
  }
  $365 = $ctr;
  $366 = $3;
  $367 = (($366) + ($365<<2)|0);
  $368 = HEAP32[$367>>2]|0;
  $369 = $4;
  $370 = (($368) + ($369)|0);
  $outptr = $370;
  $371 = $wsptr;
  $372 = (($371) + 8|0);
  $373 = HEAP32[$372>>2]|0;
  $z2 = $373;
  $374 = $wsptr;
  $375 = (($374) + 24|0);
  $376 = HEAP32[$375>>2]|0;
  $z3 = $376;
  $377 = $z2;
  $378 = $z3;
  $379 = (($377) + ($378))|0;
  $380 = ($379*4433)|0;
  $z1 = $380;
  $381 = $z1;
  $382 = $z2;
  $383 = ($382*6270)|0;
  $384 = (($381) + ($383))|0;
  $tmp2 = $384;
  $385 = $z1;
  $386 = $z3;
  $387 = ($386*15137)|0;
  $388 = (($385) - ($387))|0;
  $tmp3 = $388;
  $389 = $wsptr;
  $390 = HEAP32[$389>>2]|0;
  $391 = (($390) + 16)|0;
  $z2 = $391;
  $392 = $wsptr;
  $393 = (($392) + 16|0);
  $394 = HEAP32[$393>>2]|0;
  $z3 = $394;
  $395 = $z2;
  $396 = $z3;
  $397 = (($395) + ($396))|0;
  $398 = $397 << 13;
  $tmp0 = $398;
  $399 = $z2;
  $400 = $z3;
  $401 = (($399) - ($400))|0;
  $402 = $401 << 13;
  $tmp1 = $402;
  $403 = $tmp0;
  $404 = $tmp2;
  $405 = (($403) + ($404))|0;
  $tmp10 = $405;
  $406 = $tmp0;
  $407 = $tmp2;
  $408 = (($406) - ($407))|0;
  $tmp13 = $408;
  $409 = $tmp1;
  $410 = $tmp3;
  $411 = (($409) + ($410))|0;
  $tmp11 = $411;
  $412 = $tmp1;
  $413 = $tmp3;
  $414 = (($412) - ($413))|0;
  $tmp12 = $414;
  $415 = $wsptr;
  $416 = (($415) + 28|0);
  $417 = HEAP32[$416>>2]|0;
  $tmp0 = $417;
  $418 = $wsptr;
  $419 = (($418) + 20|0);
  $420 = HEAP32[$419>>2]|0;
  $tmp1 = $420;
  $421 = $wsptr;
  $422 = (($421) + 12|0);
  $423 = HEAP32[$422>>2]|0;
  $tmp2 = $423;
  $424 = $wsptr;
  $425 = (($424) + 4|0);
  $426 = HEAP32[$425>>2]|0;
  $tmp3 = $426;
  $427 = $tmp0;
  $428 = $tmp2;
  $429 = (($427) + ($428))|0;
  $z2 = $429;
  $430 = $tmp1;
  $431 = $tmp3;
  $432 = (($430) + ($431))|0;
  $z3 = $432;
  $433 = $z2;
  $434 = $z3;
  $435 = (($433) + ($434))|0;
  $436 = ($435*9633)|0;
  $z1 = $436;
  $437 = $z2;
  $438 = Math_imul($437, -16069)|0;
  $z2 = $438;
  $439 = $z3;
  $440 = Math_imul($439, -3196)|0;
  $z3 = $440;
  $441 = $z1;
  $442 = $z2;
  $443 = (($442) + ($441))|0;
  $z2 = $443;
  $444 = $z1;
  $445 = $z3;
  $446 = (($445) + ($444))|0;
  $z3 = $446;
  $447 = $tmp0;
  $448 = $tmp3;
  $449 = (($447) + ($448))|0;
  $450 = Math_imul($449, -7373)|0;
  $z1 = $450;
  $451 = $tmp0;
  $452 = ($451*2446)|0;
  $tmp0 = $452;
  $453 = $tmp3;
  $454 = ($453*12299)|0;
  $tmp3 = $454;
  $455 = $z1;
  $456 = $z2;
  $457 = (($455) + ($456))|0;
  $458 = $tmp0;
  $459 = (($458) + ($457))|0;
  $tmp0 = $459;
  $460 = $z1;
  $461 = $z3;
  $462 = (($460) + ($461))|0;
  $463 = $tmp3;
  $464 = (($463) + ($462))|0;
  $tmp3 = $464;
  $465 = $tmp1;
  $466 = $tmp2;
  $467 = (($465) + ($466))|0;
  $468 = Math_imul($467, -20995)|0;
  $z1 = $468;
  $469 = $tmp1;
  $470 = ($469*16819)|0;
  $tmp1 = $470;
  $471 = $tmp2;
  $472 = ($471*25172)|0;
  $tmp2 = $472;
  $473 = $z1;
  $474 = $z3;
  $475 = (($473) + ($474))|0;
  $476 = $tmp1;
  $477 = (($476) + ($475))|0;
  $tmp1 = $477;
  $478 = $z1;
  $479 = $z2;
  $480 = (($478) + ($479))|0;
  $481 = $tmp2;
  $482 = (($481) + ($480))|0;
  $tmp2 = $482;
  $483 = $tmp10;
  $484 = $tmp3;
  $485 = (($483) + ($484))|0;
  $486 = $485 >> 18;
  $487 = $486 & 1023;
  $488 = $range_limit;
  $489 = (($488) + ($487)|0);
  $490 = HEAP8[$489>>0]|0;
  $491 = $outptr;
  HEAP8[$491>>0] = $490;
  $492 = $tmp10;
  $493 = $tmp3;
  $494 = (($492) - ($493))|0;
  $495 = $494 >> 18;
  $496 = $495 & 1023;
  $497 = $range_limit;
  $498 = (($497) + ($496)|0);
  $499 = HEAP8[$498>>0]|0;
  $500 = $outptr;
  $501 = (($500) + 7|0);
  HEAP8[$501>>0] = $499;
  $502 = $tmp11;
  $503 = $tmp2;
  $504 = (($502) + ($503))|0;
  $505 = $504 >> 18;
  $506 = $505 & 1023;
  $507 = $range_limit;
  $508 = (($507) + ($506)|0);
  $509 = HEAP8[$508>>0]|0;
  $510 = $outptr;
  $511 = (($510) + 1|0);
  HEAP8[$511>>0] = $509;
  $512 = $tmp11;
  $513 = $tmp2;
  $514 = (($512) - ($513))|0;
  $515 = $514 >> 18;
  $516 = $515 & 1023;
  $517 = $range_limit;
  $518 = (($517) + ($516)|0);
  $519 = HEAP8[$518>>0]|0;
  $520 = $outptr;
  $521 = (($520) + 6|0);
  HEAP8[$521>>0] = $519;
  $522 = $tmp12;
  $523 = $tmp1;
  $524 = (($522) + ($523))|0;
  $525 = $524 >> 18;
  $526 = $525 & 1023;
  $527 = $range_limit;
  $528 = (($527) + ($526)|0);
  $529 = HEAP8[$528>>0]|0;
  $530 = $outptr;
  $531 = (($530) + 2|0);
  HEAP8[$531>>0] = $529;
  $532 = $tmp12;
  $533 = $tmp1;
  $534 = (($532) - ($533))|0;
  $535 = $534 >> 18;
  $536 = $535 & 1023;
  $537 = $range_limit;
  $538 = (($537) + ($536)|0);
  $539 = HEAP8[$538>>0]|0;
  $540 = $outptr;
  $541 = (($540) + 5|0);
  HEAP8[$541>>0] = $539;
  $542 = $tmp13;
  $543 = $tmp0;
  $544 = (($542) + ($543))|0;
  $545 = $544 >> 18;
  $546 = $545 & 1023;
  $547 = $range_limit;
  $548 = (($547) + ($546)|0);
  $549 = HEAP8[$548>>0]|0;
  $550 = $outptr;
  $551 = (($550) + 3|0);
  HEAP8[$551>>0] = $549;
  $552 = $tmp13;
  $553 = $tmp0;
  $554 = (($552) - ($553))|0;
  $555 = $554 >> 18;
  $556 = $555 & 1023;
  $557 = $range_limit;
  $558 = (($557) + ($556)|0);
  $559 = HEAP8[$558>>0]|0;
  $560 = $outptr;
  $561 = (($560) + 4|0);
  HEAP8[$561>>0] = $559;
  $562 = $wsptr;
  $563 = (($562) + 32|0);
  $wsptr = $563;
  $564 = $ctr;
  $565 = (($564) + 1)|0;
  $ctr = $565;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_7x14($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp16 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0;
 var $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $tmp26 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(7);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $z1 = $20;
  $21 = $z1;
  $22 = $21 << 13;
  $z1 = $22;
  $23 = $z1;
  $24 = (($23) + 1024)|0;
  $z1 = $24;
  $25 = $inptr;
  $26 = (($25) + 64|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z4 = $32;
  $33 = $z4;
  $34 = ($33*10438)|0;
  $z2 = $34;
  $35 = $z4;
  $36 = ($35*2578)|0;
  $z3 = $36;
  $37 = $z4;
  $38 = ($37*7223)|0;
  $z4 = $38;
  $39 = $z1;
  $40 = $z2;
  $41 = (($39) + ($40))|0;
  $tmp10 = $41;
  $42 = $z1;
  $43 = $z3;
  $44 = (($42) + ($43))|0;
  $tmp11 = $44;
  $45 = $z1;
  $46 = $z4;
  $47 = (($45) - ($46))|0;
  $tmp12 = $47;
  $48 = $z1;
  $49 = $z2;
  $50 = $z3;
  $51 = (($49) + ($50))|0;
  $52 = $z4;
  $53 = (($51) - ($52))|0;
  $54 = $53 << 1;
  $55 = (($48) - ($54))|0;
  $56 = $55 >> 11;
  $tmp23 = $56;
  $57 = $inptr;
  $58 = (($57) + 32|0);
  $59 = HEAP16[$58>>1]|0;
  $60 = $59 << 16 >> 16;
  $61 = $quantptr;
  $62 = (($61) + 64|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = Math_imul($60, $63)|0;
  $z1 = $64;
  $65 = $inptr;
  $66 = (($65) + 96|0);
  $67 = HEAP16[$66>>1]|0;
  $68 = $67 << 16 >> 16;
  $69 = $quantptr;
  $70 = (($69) + 192|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = Math_imul($68, $71)|0;
  $z2 = $72;
  $73 = $z1;
  $74 = $z2;
  $75 = (($73) + ($74))|0;
  $76 = ($75*9058)|0;
  $z3 = $76;
  $77 = $z3;
  $78 = $z1;
  $79 = ($78*2237)|0;
  $80 = (($77) + ($79))|0;
  $tmp13 = $80;
  $81 = $z3;
  $82 = $z2;
  $83 = ($82*14084)|0;
  $84 = (($81) - ($83))|0;
  $tmp14 = $84;
  $85 = $z1;
  $86 = ($85*5027)|0;
  $87 = $z2;
  $88 = ($87*11295)|0;
  $89 = (($86) - ($88))|0;
  $tmp15 = $89;
  $90 = $tmp10;
  $91 = $tmp13;
  $92 = (($90) + ($91))|0;
  $tmp20 = $92;
  $93 = $tmp10;
  $94 = $tmp13;
  $95 = (($93) - ($94))|0;
  $tmp26 = $95;
  $96 = $tmp11;
  $97 = $tmp14;
  $98 = (($96) + ($97))|0;
  $tmp21 = $98;
  $99 = $tmp11;
  $100 = $tmp14;
  $101 = (($99) - ($100))|0;
  $tmp25 = $101;
  $102 = $tmp12;
  $103 = $tmp15;
  $104 = (($102) + ($103))|0;
  $tmp22 = $104;
  $105 = $tmp12;
  $106 = $tmp15;
  $107 = (($105) - ($106))|0;
  $tmp24 = $107;
  $108 = $inptr;
  $109 = (($108) + 16|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110 << 16 >> 16;
  $112 = $quantptr;
  $113 = (($112) + 32|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = Math_imul($111, $114)|0;
  $z1 = $115;
  $116 = $inptr;
  $117 = (($116) + 48|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118 << 16 >> 16;
  $120 = $quantptr;
  $121 = (($120) + 96|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = Math_imul($119, $122)|0;
  $z2 = $123;
  $124 = $inptr;
  $125 = (($124) + 80|0);
  $126 = HEAP16[$125>>1]|0;
  $127 = $126 << 16 >> 16;
  $128 = $quantptr;
  $129 = (($128) + 160|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = Math_imul($127, $130)|0;
  $z3 = $131;
  $132 = $inptr;
  $133 = (($132) + 112|0);
  $134 = HEAP16[$133>>1]|0;
  $135 = $134 << 16 >> 16;
  $136 = $quantptr;
  $137 = (($136) + 224|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = Math_imul($135, $138)|0;
  $z4 = $139;
  $140 = $z4;
  $141 = $140 << 13;
  $tmp13 = $141;
  $142 = $z1;
  $143 = $z3;
  $144 = (($142) + ($143))|0;
  $tmp14 = $144;
  $145 = $z1;
  $146 = $z2;
  $147 = (($145) + ($146))|0;
  $148 = ($147*10935)|0;
  $tmp11 = $148;
  $149 = $tmp14;
  $150 = ($149*9810)|0;
  $tmp12 = $150;
  $151 = $tmp11;
  $152 = $tmp12;
  $153 = (($151) + ($152))|0;
  $154 = $tmp13;
  $155 = (($153) + ($154))|0;
  $156 = $z1;
  $157 = ($156*9232)|0;
  $158 = (($155) - ($157))|0;
  $tmp10 = $158;
  $159 = $tmp14;
  $160 = ($159*6164)|0;
  $tmp14 = $160;
  $161 = $tmp14;
  $162 = $z1;
  $163 = ($162*8693)|0;
  $164 = (($161) - ($163))|0;
  $tmp16 = $164;
  $165 = $z2;
  $166 = $z1;
  $167 = (($166) - ($165))|0;
  $z1 = $167;
  $168 = $z1;
  $169 = ($168*3826)|0;
  $170 = $tmp13;
  $171 = (($169) - ($170))|0;
  $tmp15 = $171;
  $172 = $tmp15;
  $173 = $tmp16;
  $174 = (($173) + ($172))|0;
  $tmp16 = $174;
  $175 = $z4;
  $176 = $z1;
  $177 = (($176) + ($175))|0;
  $z1 = $177;
  $178 = $z2;
  $179 = $z3;
  $180 = (($178) + ($179))|0;
  $181 = Math_imul($180, -1297)|0;
  $182 = $tmp13;
  $183 = (($181) - ($182))|0;
  $z4 = $183;
  $184 = $z4;
  $185 = $z2;
  $186 = ($185*3474)|0;
  $187 = (($184) - ($186))|0;
  $188 = $tmp11;
  $189 = (($188) + ($187))|0;
  $tmp11 = $189;
  $190 = $z4;
  $191 = $z3;
  $192 = ($191*19447)|0;
  $193 = (($190) - ($192))|0;
  $194 = $tmp12;
  $195 = (($194) + ($193))|0;
  $tmp12 = $195;
  $196 = $z3;
  $197 = $z2;
  $198 = (($196) - ($197))|0;
  $199 = ($198*11512)|0;
  $z4 = $199;
  $200 = $z4;
  $201 = $tmp13;
  $202 = (($200) + ($201))|0;
  $203 = $z3;
  $204 = ($203*13850)|0;
  $205 = (($202) - ($204))|0;
  $206 = $tmp14;
  $207 = (($206) + ($205))|0;
  $tmp14 = $207;
  $208 = $z4;
  $209 = $z2;
  $210 = ($209*5529)|0;
  $211 = (($208) + ($210))|0;
  $212 = $tmp15;
  $213 = (($212) + ($211))|0;
  $tmp15 = $213;
  $214 = $z1;
  $215 = $z3;
  $216 = (($214) - ($215))|0;
  $217 = $216 << 2;
  $tmp13 = $217;
  $218 = $tmp20;
  $219 = $tmp10;
  $220 = (($218) + ($219))|0;
  $221 = $220 >> 11;
  $222 = $wsptr;
  HEAP32[$222>>2] = $221;
  $223 = $tmp20;
  $224 = $tmp10;
  $225 = (($223) - ($224))|0;
  $226 = $225 >> 11;
  $227 = $wsptr;
  $228 = (($227) + 364|0);
  HEAP32[$228>>2] = $226;
  $229 = $tmp21;
  $230 = $tmp11;
  $231 = (($229) + ($230))|0;
  $232 = $231 >> 11;
  $233 = $wsptr;
  $234 = (($233) + 28|0);
  HEAP32[$234>>2] = $232;
  $235 = $tmp21;
  $236 = $tmp11;
  $237 = (($235) - ($236))|0;
  $238 = $237 >> 11;
  $239 = $wsptr;
  $240 = (($239) + 336|0);
  HEAP32[$240>>2] = $238;
  $241 = $tmp22;
  $242 = $tmp12;
  $243 = (($241) + ($242))|0;
  $244 = $243 >> 11;
  $245 = $wsptr;
  $246 = (($245) + 56|0);
  HEAP32[$246>>2] = $244;
  $247 = $tmp22;
  $248 = $tmp12;
  $249 = (($247) - ($248))|0;
  $250 = $249 >> 11;
  $251 = $wsptr;
  $252 = (($251) + 308|0);
  HEAP32[$252>>2] = $250;
  $253 = $tmp23;
  $254 = $tmp13;
  $255 = (($253) + ($254))|0;
  $256 = $wsptr;
  $257 = (($256) + 84|0);
  HEAP32[$257>>2] = $255;
  $258 = $tmp23;
  $259 = $tmp13;
  $260 = (($258) - ($259))|0;
  $261 = $wsptr;
  $262 = (($261) + 280|0);
  HEAP32[$262>>2] = $260;
  $263 = $tmp24;
  $264 = $tmp14;
  $265 = (($263) + ($264))|0;
  $266 = $265 >> 11;
  $267 = $wsptr;
  $268 = (($267) + 112|0);
  HEAP32[$268>>2] = $266;
  $269 = $tmp24;
  $270 = $tmp14;
  $271 = (($269) - ($270))|0;
  $272 = $271 >> 11;
  $273 = $wsptr;
  $274 = (($273) + 252|0);
  HEAP32[$274>>2] = $272;
  $275 = $tmp25;
  $276 = $tmp15;
  $277 = (($275) + ($276))|0;
  $278 = $277 >> 11;
  $279 = $wsptr;
  $280 = (($279) + 140|0);
  HEAP32[$280>>2] = $278;
  $281 = $tmp25;
  $282 = $tmp15;
  $283 = (($281) - ($282))|0;
  $284 = $283 >> 11;
  $285 = $wsptr;
  $286 = (($285) + 224|0);
  HEAP32[$286>>2] = $284;
  $287 = $tmp26;
  $288 = $tmp16;
  $289 = (($287) + ($288))|0;
  $290 = $289 >> 11;
  $291 = $wsptr;
  $292 = (($291) + 168|0);
  HEAP32[$292>>2] = $290;
  $293 = $tmp26;
  $294 = $tmp16;
  $295 = (($293) - ($294))|0;
  $296 = $295 >> 11;
  $297 = $wsptr;
  $298 = (($297) + 196|0);
  HEAP32[$298>>2] = $296;
  $299 = $ctr;
  $300 = (($299) + 1)|0;
  $ctr = $300;
  $301 = $inptr;
  $302 = (($301) + 2|0);
  $inptr = $302;
  $303 = $quantptr;
  $304 = (($303) + 4|0);
  $quantptr = $304;
  $305 = $wsptr;
  $306 = (($305) + 4|0);
  $wsptr = $306;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $307 = $ctr;
  $308 = ($307|0)<(14);
  if (!($308)) {
   break;
  }
  $309 = $ctr;
  $310 = $3;
  $311 = (($310) + ($309<<2)|0);
  $312 = HEAP32[$311>>2]|0;
  $313 = $4;
  $314 = (($312) + ($313)|0);
  $outptr = $314;
  $315 = $wsptr;
  $316 = HEAP32[$315>>2]|0;
  $317 = (($316) + 16)|0;
  $tmp23 = $317;
  $318 = $tmp23;
  $319 = $318 << 13;
  $tmp23 = $319;
  $320 = $wsptr;
  $321 = (($320) + 8|0);
  $322 = HEAP32[$321>>2]|0;
  $z1 = $322;
  $323 = $wsptr;
  $324 = (($323) + 16|0);
  $325 = HEAP32[$324>>2]|0;
  $z2 = $325;
  $326 = $wsptr;
  $327 = (($326) + 24|0);
  $328 = HEAP32[$327>>2]|0;
  $z3 = $328;
  $329 = $z2;
  $330 = $z3;
  $331 = (($329) - ($330))|0;
  $332 = ($331*7223)|0;
  $tmp20 = $332;
  $333 = $z1;
  $334 = $z2;
  $335 = (($333) - ($334))|0;
  $336 = ($335*2578)|0;
  $tmp22 = $336;
  $337 = $tmp20;
  $338 = $tmp22;
  $339 = (($337) + ($338))|0;
  $340 = $tmp23;
  $341 = (($339) + ($340))|0;
  $342 = $z2;
  $343 = ($342*15083)|0;
  $344 = (($341) - ($343))|0;
  $tmp21 = $344;
  $345 = $z1;
  $346 = $z3;
  $347 = (($345) + ($346))|0;
  $tmp10 = $347;
  $348 = $tmp10;
  $349 = $z2;
  $350 = (($349) - ($348))|0;
  $z2 = $350;
  $351 = $tmp10;
  $352 = ($351*10438)|0;
  $353 = $tmp23;
  $354 = (($352) + ($353))|0;
  $tmp10 = $354;
  $355 = $tmp10;
  $356 = $z3;
  $357 = ($356*637)|0;
  $358 = (($355) - ($357))|0;
  $359 = $tmp20;
  $360 = (($359) + ($358))|0;
  $tmp20 = $360;
  $361 = $tmp10;
  $362 = $z1;
  $363 = ($362*20239)|0;
  $364 = (($361) - ($363))|0;
  $365 = $tmp22;
  $366 = (($365) + ($364))|0;
  $tmp22 = $366;
  $367 = $z2;
  $368 = ($367*11585)|0;
  $369 = $tmp23;
  $370 = (($369) + ($368))|0;
  $tmp23 = $370;
  $371 = $wsptr;
  $372 = (($371) + 4|0);
  $373 = HEAP32[$372>>2]|0;
  $z1 = $373;
  $374 = $wsptr;
  $375 = (($374) + 12|0);
  $376 = HEAP32[$375>>2]|0;
  $z2 = $376;
  $377 = $wsptr;
  $378 = (($377) + 20|0);
  $379 = HEAP32[$378>>2]|0;
  $z3 = $379;
  $380 = $z1;
  $381 = $z2;
  $382 = (($380) + ($381))|0;
  $383 = ($382*7663)|0;
  $tmp11 = $383;
  $384 = $z1;
  $385 = $z2;
  $386 = (($384) - ($385))|0;
  $387 = ($386*1395)|0;
  $tmp12 = $387;
  $388 = $tmp11;
  $389 = $tmp12;
  $390 = (($388) - ($389))|0;
  $tmp10 = $390;
  $391 = $tmp12;
  $392 = $tmp11;
  $393 = (($392) + ($391))|0;
  $tmp11 = $393;
  $394 = $z2;
  $395 = $z3;
  $396 = (($394) + ($395))|0;
  $397 = Math_imul($396, -11295)|0;
  $tmp12 = $397;
  $398 = $tmp12;
  $399 = $tmp11;
  $400 = (($399) + ($398))|0;
  $tmp11 = $400;
  $401 = $z1;
  $402 = $z3;
  $403 = (($401) + ($402))|0;
  $404 = ($403*5027)|0;
  $z2 = $404;
  $405 = $z2;
  $406 = $tmp10;
  $407 = (($406) + ($405))|0;
  $tmp10 = $407;
  $408 = $z2;
  $409 = $z3;
  $410 = ($409*15326)|0;
  $411 = (($408) + ($410))|0;
  $412 = $tmp12;
  $413 = (($412) + ($411))|0;
  $tmp12 = $413;
  $414 = $tmp20;
  $415 = $tmp10;
  $416 = (($414) + ($415))|0;
  $417 = $416 >> 18;
  $418 = $417 & 1023;
  $419 = $range_limit;
  $420 = (($419) + ($418)|0);
  $421 = HEAP8[$420>>0]|0;
  $422 = $outptr;
  HEAP8[$422>>0] = $421;
  $423 = $tmp20;
  $424 = $tmp10;
  $425 = (($423) - ($424))|0;
  $426 = $425 >> 18;
  $427 = $426 & 1023;
  $428 = $range_limit;
  $429 = (($428) + ($427)|0);
  $430 = HEAP8[$429>>0]|0;
  $431 = $outptr;
  $432 = (($431) + 6|0);
  HEAP8[$432>>0] = $430;
  $433 = $tmp21;
  $434 = $tmp11;
  $435 = (($433) + ($434))|0;
  $436 = $435 >> 18;
  $437 = $436 & 1023;
  $438 = $range_limit;
  $439 = (($438) + ($437)|0);
  $440 = HEAP8[$439>>0]|0;
  $441 = $outptr;
  $442 = (($441) + 1|0);
  HEAP8[$442>>0] = $440;
  $443 = $tmp21;
  $444 = $tmp11;
  $445 = (($443) - ($444))|0;
  $446 = $445 >> 18;
  $447 = $446 & 1023;
  $448 = $range_limit;
  $449 = (($448) + ($447)|0);
  $450 = HEAP8[$449>>0]|0;
  $451 = $outptr;
  $452 = (($451) + 5|0);
  HEAP8[$452>>0] = $450;
  $453 = $tmp22;
  $454 = $tmp12;
  $455 = (($453) + ($454))|0;
  $456 = $455 >> 18;
  $457 = $456 & 1023;
  $458 = $range_limit;
  $459 = (($458) + ($457)|0);
  $460 = HEAP8[$459>>0]|0;
  $461 = $outptr;
  $462 = (($461) + 2|0);
  HEAP8[$462>>0] = $460;
  $463 = $tmp22;
  $464 = $tmp12;
  $465 = (($463) - ($464))|0;
  $466 = $465 >> 18;
  $467 = $466 & 1023;
  $468 = $range_limit;
  $469 = (($468) + ($467)|0);
  $470 = HEAP8[$469>>0]|0;
  $471 = $outptr;
  $472 = (($471) + 4|0);
  HEAP8[$472>>0] = $470;
  $473 = $tmp23;
  $474 = $473 >> 18;
  $475 = $474 & 1023;
  $476 = $range_limit;
  $477 = (($476) + ($475)|0);
  $478 = HEAP8[$477>>0]|0;
  $479 = $outptr;
  $480 = (($479) + 3|0);
  HEAP8[$480>>0] = $478;
  $481 = $wsptr;
  $482 = (($481) + 28|0);
  $wsptr = $482;
  $483 = $ctr;
  $484 = (($483) + 1)|0;
  $ctr = $484;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_6x12($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp15 = 0, $tmp20 = 0, $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $tmp25 = 0, $workspace = 0;
 var $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(6);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $z3 = $20;
  $21 = $z3;
  $22 = $21 << 13;
  $z3 = $22;
  $23 = $z3;
  $24 = (($23) + 1024)|0;
  $z3 = $24;
  $25 = $inptr;
  $26 = (($25) + 64|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z4 = $32;
  $33 = $z4;
  $34 = ($33*10033)|0;
  $z4 = $34;
  $35 = $z3;
  $36 = $z4;
  $37 = (($35) + ($36))|0;
  $tmp10 = $37;
  $38 = $z3;
  $39 = $z4;
  $40 = (($38) - ($39))|0;
  $tmp11 = $40;
  $41 = $inptr;
  $42 = (($41) + 32|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 << 16 >> 16;
  $45 = $quantptr;
  $46 = (($45) + 64|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = Math_imul($44, $47)|0;
  $z1 = $48;
  $49 = $z1;
  $50 = ($49*11190)|0;
  $z4 = $50;
  $51 = $z1;
  $52 = $51 << 13;
  $z1 = $52;
  $53 = $inptr;
  $54 = (($53) + 96|0);
  $55 = HEAP16[$54>>1]|0;
  $56 = $55 << 16 >> 16;
  $57 = $quantptr;
  $58 = (($57) + 192|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = Math_imul($56, $59)|0;
  $z2 = $60;
  $61 = $z2;
  $62 = $61 << 13;
  $z2 = $62;
  $63 = $z1;
  $64 = $z2;
  $65 = (($63) - ($64))|0;
  $tmp12 = $65;
  $66 = $z3;
  $67 = $tmp12;
  $68 = (($66) + ($67))|0;
  $tmp21 = $68;
  $69 = $z3;
  $70 = $tmp12;
  $71 = (($69) - ($70))|0;
  $tmp24 = $71;
  $72 = $z4;
  $73 = $z2;
  $74 = (($72) + ($73))|0;
  $tmp12 = $74;
  $75 = $tmp10;
  $76 = $tmp12;
  $77 = (($75) + ($76))|0;
  $tmp20 = $77;
  $78 = $tmp10;
  $79 = $tmp12;
  $80 = (($78) - ($79))|0;
  $tmp25 = $80;
  $81 = $z4;
  $82 = $z1;
  $83 = (($81) - ($82))|0;
  $84 = $z2;
  $85 = (($83) - ($84))|0;
  $tmp12 = $85;
  $86 = $tmp11;
  $87 = $tmp12;
  $88 = (($86) + ($87))|0;
  $tmp22 = $88;
  $89 = $tmp11;
  $90 = $tmp12;
  $91 = (($89) - ($90))|0;
  $tmp23 = $91;
  $92 = $inptr;
  $93 = (($92) + 16|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94 << 16 >> 16;
  $96 = $quantptr;
  $97 = (($96) + 32|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = Math_imul($95, $98)|0;
  $z1 = $99;
  $100 = $inptr;
  $101 = (($100) + 48|0);
  $102 = HEAP16[$101>>1]|0;
  $103 = $102 << 16 >> 16;
  $104 = $quantptr;
  $105 = (($104) + 96|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = Math_imul($103, $106)|0;
  $z2 = $107;
  $108 = $inptr;
  $109 = (($108) + 80|0);
  $110 = HEAP16[$109>>1]|0;
  $111 = $110 << 16 >> 16;
  $112 = $quantptr;
  $113 = (($112) + 160|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = Math_imul($111, $114)|0;
  $z3 = $115;
  $116 = $inptr;
  $117 = (($116) + 112|0);
  $118 = HEAP16[$117>>1]|0;
  $119 = $118 << 16 >> 16;
  $120 = $quantptr;
  $121 = (($120) + 224|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = Math_imul($119, $122)|0;
  $z4 = $123;
  $124 = $z2;
  $125 = ($124*10703)|0;
  $tmp11 = $125;
  $126 = $z2;
  $127 = Math_imul($126, -4433)|0;
  $tmp14 = $127;
  $128 = $z1;
  $129 = $z3;
  $130 = (($128) + ($129))|0;
  $tmp10 = $130;
  $131 = $tmp10;
  $132 = $z4;
  $133 = (($131) + ($132))|0;
  $134 = ($133*7053)|0;
  $tmp15 = $134;
  $135 = $tmp15;
  $136 = $tmp10;
  $137 = ($136*2139)|0;
  $138 = (($135) + ($137))|0;
  $tmp12 = $138;
  $139 = $tmp12;
  $140 = $tmp11;
  $141 = (($139) + ($140))|0;
  $142 = $z1;
  $143 = ($142*2295)|0;
  $144 = (($141) + ($143))|0;
  $tmp10 = $144;
  $145 = $z3;
  $146 = $z4;
  $147 = (($145) + ($146))|0;
  $148 = Math_imul($147, -8565)|0;
  $tmp13 = $148;
  $149 = $tmp13;
  $150 = $tmp14;
  $151 = (($149) + ($150))|0;
  $152 = $z3;
  $153 = ($152*12112)|0;
  $154 = (($151) - ($153))|0;
  $155 = $tmp12;
  $156 = (($155) + ($154))|0;
  $tmp12 = $156;
  $157 = $tmp15;
  $158 = $tmp11;
  $159 = (($157) - ($158))|0;
  $160 = $z4;
  $161 = ($160*12998)|0;
  $162 = (($159) + ($161))|0;
  $163 = $tmp13;
  $164 = (($163) + ($162))|0;
  $tmp13 = $164;
  $165 = $tmp14;
  $166 = $z1;
  $167 = ($166*5540)|0;
  $168 = (($165) - ($167))|0;
  $169 = $z4;
  $170 = ($169*16244)|0;
  $171 = (($168) - ($170))|0;
  $172 = $tmp15;
  $173 = (($172) + ($171))|0;
  $tmp15 = $173;
  $174 = $z4;
  $175 = $z1;
  $176 = (($175) - ($174))|0;
  $z1 = $176;
  $177 = $z3;
  $178 = $z2;
  $179 = (($178) - ($177))|0;
  $z2 = $179;
  $180 = $z1;
  $181 = $z2;
  $182 = (($180) + ($181))|0;
  $183 = ($182*4433)|0;
  $z3 = $183;
  $184 = $z3;
  $185 = $z1;
  $186 = ($185*6270)|0;
  $187 = (($184) + ($186))|0;
  $tmp11 = $187;
  $188 = $z3;
  $189 = $z2;
  $190 = ($189*15137)|0;
  $191 = (($188) - ($190))|0;
  $tmp14 = $191;
  $192 = $tmp20;
  $193 = $tmp10;
  $194 = (($192) + ($193))|0;
  $195 = $194 >> 11;
  $196 = $wsptr;
  HEAP32[$196>>2] = $195;
  $197 = $tmp20;
  $198 = $tmp10;
  $199 = (($197) - ($198))|0;
  $200 = $199 >> 11;
  $201 = $wsptr;
  $202 = (($201) + 264|0);
  HEAP32[$202>>2] = $200;
  $203 = $tmp21;
  $204 = $tmp11;
  $205 = (($203) + ($204))|0;
  $206 = $205 >> 11;
  $207 = $wsptr;
  $208 = (($207) + 24|0);
  HEAP32[$208>>2] = $206;
  $209 = $tmp21;
  $210 = $tmp11;
  $211 = (($209) - ($210))|0;
  $212 = $211 >> 11;
  $213 = $wsptr;
  $214 = (($213) + 240|0);
  HEAP32[$214>>2] = $212;
  $215 = $tmp22;
  $216 = $tmp12;
  $217 = (($215) + ($216))|0;
  $218 = $217 >> 11;
  $219 = $wsptr;
  $220 = (($219) + 48|0);
  HEAP32[$220>>2] = $218;
  $221 = $tmp22;
  $222 = $tmp12;
  $223 = (($221) - ($222))|0;
  $224 = $223 >> 11;
  $225 = $wsptr;
  $226 = (($225) + 216|0);
  HEAP32[$226>>2] = $224;
  $227 = $tmp23;
  $228 = $tmp13;
  $229 = (($227) + ($228))|0;
  $230 = $229 >> 11;
  $231 = $wsptr;
  $232 = (($231) + 72|0);
  HEAP32[$232>>2] = $230;
  $233 = $tmp23;
  $234 = $tmp13;
  $235 = (($233) - ($234))|0;
  $236 = $235 >> 11;
  $237 = $wsptr;
  $238 = (($237) + 192|0);
  HEAP32[$238>>2] = $236;
  $239 = $tmp24;
  $240 = $tmp14;
  $241 = (($239) + ($240))|0;
  $242 = $241 >> 11;
  $243 = $wsptr;
  $244 = (($243) + 96|0);
  HEAP32[$244>>2] = $242;
  $245 = $tmp24;
  $246 = $tmp14;
  $247 = (($245) - ($246))|0;
  $248 = $247 >> 11;
  $249 = $wsptr;
  $250 = (($249) + 168|0);
  HEAP32[$250>>2] = $248;
  $251 = $tmp25;
  $252 = $tmp15;
  $253 = (($251) + ($252))|0;
  $254 = $253 >> 11;
  $255 = $wsptr;
  $256 = (($255) + 120|0);
  HEAP32[$256>>2] = $254;
  $257 = $tmp25;
  $258 = $tmp15;
  $259 = (($257) - ($258))|0;
  $260 = $259 >> 11;
  $261 = $wsptr;
  $262 = (($261) + 144|0);
  HEAP32[$262>>2] = $260;
  $263 = $ctr;
  $264 = (($263) + 1)|0;
  $ctr = $264;
  $265 = $inptr;
  $266 = (($265) + 2|0);
  $inptr = $266;
  $267 = $quantptr;
  $268 = (($267) + 4|0);
  $quantptr = $268;
  $269 = $wsptr;
  $270 = (($269) + 4|0);
  $wsptr = $270;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $271 = $ctr;
  $272 = ($271|0)<(12);
  if (!($272)) {
   break;
  }
  $273 = $ctr;
  $274 = $3;
  $275 = (($274) + ($273<<2)|0);
  $276 = HEAP32[$275>>2]|0;
  $277 = $4;
  $278 = (($276) + ($277)|0);
  $outptr = $278;
  $279 = $wsptr;
  $280 = HEAP32[$279>>2]|0;
  $281 = (($280) + 16)|0;
  $tmp10 = $281;
  $282 = $tmp10;
  $283 = $282 << 13;
  $tmp10 = $283;
  $284 = $wsptr;
  $285 = (($284) + 16|0);
  $286 = HEAP32[$285>>2]|0;
  $tmp12 = $286;
  $287 = $tmp12;
  $288 = ($287*5793)|0;
  $tmp20 = $288;
  $289 = $tmp10;
  $290 = $tmp20;
  $291 = (($289) + ($290))|0;
  $tmp11 = $291;
  $292 = $tmp10;
  $293 = $tmp20;
  $294 = (($292) - ($293))|0;
  $295 = $tmp20;
  $296 = (($294) - ($295))|0;
  $tmp21 = $296;
  $297 = $wsptr;
  $298 = (($297) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $tmp20 = $299;
  $300 = $tmp20;
  $301 = ($300*10033)|0;
  $tmp10 = $301;
  $302 = $tmp11;
  $303 = $tmp10;
  $304 = (($302) + ($303))|0;
  $tmp20 = $304;
  $305 = $tmp11;
  $306 = $tmp10;
  $307 = (($305) - ($306))|0;
  $tmp22 = $307;
  $308 = $wsptr;
  $309 = (($308) + 4|0);
  $310 = HEAP32[$309>>2]|0;
  $z1 = $310;
  $311 = $wsptr;
  $312 = (($311) + 12|0);
  $313 = HEAP32[$312>>2]|0;
  $z2 = $313;
  $314 = $wsptr;
  $315 = (($314) + 20|0);
  $316 = HEAP32[$315>>2]|0;
  $z3 = $316;
  $317 = $z1;
  $318 = $z3;
  $319 = (($317) + ($318))|0;
  $320 = ($319*2998)|0;
  $tmp11 = $320;
  $321 = $tmp11;
  $322 = $z1;
  $323 = $z2;
  $324 = (($322) + ($323))|0;
  $325 = $324 << 13;
  $326 = (($321) + ($325))|0;
  $tmp10 = $326;
  $327 = $tmp11;
  $328 = $z3;
  $329 = $z2;
  $330 = (($328) - ($329))|0;
  $331 = $330 << 13;
  $332 = (($327) + ($331))|0;
  $tmp12 = $332;
  $333 = $z1;
  $334 = $z2;
  $335 = (($333) - ($334))|0;
  $336 = $z3;
  $337 = (($335) - ($336))|0;
  $338 = $337 << 13;
  $tmp11 = $338;
  $339 = $tmp20;
  $340 = $tmp10;
  $341 = (($339) + ($340))|0;
  $342 = $341 >> 18;
  $343 = $342 & 1023;
  $344 = $range_limit;
  $345 = (($344) + ($343)|0);
  $346 = HEAP8[$345>>0]|0;
  $347 = $outptr;
  HEAP8[$347>>0] = $346;
  $348 = $tmp20;
  $349 = $tmp10;
  $350 = (($348) - ($349))|0;
  $351 = $350 >> 18;
  $352 = $351 & 1023;
  $353 = $range_limit;
  $354 = (($353) + ($352)|0);
  $355 = HEAP8[$354>>0]|0;
  $356 = $outptr;
  $357 = (($356) + 5|0);
  HEAP8[$357>>0] = $355;
  $358 = $tmp21;
  $359 = $tmp11;
  $360 = (($358) + ($359))|0;
  $361 = $360 >> 18;
  $362 = $361 & 1023;
  $363 = $range_limit;
  $364 = (($363) + ($362)|0);
  $365 = HEAP8[$364>>0]|0;
  $366 = $outptr;
  $367 = (($366) + 1|0);
  HEAP8[$367>>0] = $365;
  $368 = $tmp21;
  $369 = $tmp11;
  $370 = (($368) - ($369))|0;
  $371 = $370 >> 18;
  $372 = $371 & 1023;
  $373 = $range_limit;
  $374 = (($373) + ($372)|0);
  $375 = HEAP8[$374>>0]|0;
  $376 = $outptr;
  $377 = (($376) + 4|0);
  HEAP8[$377>>0] = $375;
  $378 = $tmp22;
  $379 = $tmp12;
  $380 = (($378) + ($379))|0;
  $381 = $380 >> 18;
  $382 = $381 & 1023;
  $383 = $range_limit;
  $384 = (($383) + ($382)|0);
  $385 = HEAP8[$384>>0]|0;
  $386 = $outptr;
  $387 = (($386) + 2|0);
  HEAP8[$387>>0] = $385;
  $388 = $tmp22;
  $389 = $tmp12;
  $390 = (($388) - ($389))|0;
  $391 = $390 >> 18;
  $392 = $391 & 1023;
  $393 = $range_limit;
  $394 = (($393) + ($392)|0);
  $395 = HEAP8[$394>>0]|0;
  $396 = $outptr;
  $397 = (($396) + 3|0);
  HEAP8[$397>>0] = $395;
  $398 = $wsptr;
  $399 = (($398) + 24|0);
  $wsptr = $399;
  $400 = $ctr;
  $401 = (($400) + 1)|0;
  $ctr = $401;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_5x10($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp14 = 0, $tmp20 = 0;
 var $tmp21 = 0, $tmp22 = 0, $tmp23 = 0, $tmp24 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, $z4 = 0, $z5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(5);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $z3 = $20;
  $21 = $z3;
  $22 = $21 << 13;
  $z3 = $22;
  $23 = $z3;
  $24 = (($23) + 1024)|0;
  $z3 = $24;
  $25 = $inptr;
  $26 = (($25) + 64|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $z4 = $32;
  $33 = $z4;
  $34 = ($33*9373)|0;
  $z1 = $34;
  $35 = $z4;
  $36 = ($35*3580)|0;
  $z2 = $36;
  $37 = $z3;
  $38 = $z1;
  $39 = (($37) + ($38))|0;
  $tmp10 = $39;
  $40 = $z3;
  $41 = $z2;
  $42 = (($40) - ($41))|0;
  $tmp11 = $42;
  $43 = $z3;
  $44 = $z1;
  $45 = $z2;
  $46 = (($44) - ($45))|0;
  $47 = $46 << 1;
  $48 = (($43) - ($47))|0;
  $49 = $48 >> 11;
  $tmp22 = $49;
  $50 = $inptr;
  $51 = (($50) + 32|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = $quantptr;
  $55 = (($54) + 64|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = Math_imul($53, $56)|0;
  $z2 = $57;
  $58 = $inptr;
  $59 = (($58) + 96|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $62 = $quantptr;
  $63 = (($62) + 192|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = Math_imul($61, $64)|0;
  $z3 = $65;
  $66 = $z2;
  $67 = $z3;
  $68 = (($66) + ($67))|0;
  $69 = ($68*6810)|0;
  $z1 = $69;
  $70 = $z1;
  $71 = $z2;
  $72 = ($71*4209)|0;
  $73 = (($70) + ($72))|0;
  $tmp12 = $73;
  $74 = $z1;
  $75 = $z3;
  $76 = ($75*17828)|0;
  $77 = (($74) - ($76))|0;
  $tmp13 = $77;
  $78 = $tmp10;
  $79 = $tmp12;
  $80 = (($78) + ($79))|0;
  $tmp20 = $80;
  $81 = $tmp10;
  $82 = $tmp12;
  $83 = (($81) - ($82))|0;
  $tmp24 = $83;
  $84 = $tmp11;
  $85 = $tmp13;
  $86 = (($84) + ($85))|0;
  $tmp21 = $86;
  $87 = $tmp11;
  $88 = $tmp13;
  $89 = (($87) - ($88))|0;
  $tmp23 = $89;
  $90 = $inptr;
  $91 = (($90) + 16|0);
  $92 = HEAP16[$91>>1]|0;
  $93 = $92 << 16 >> 16;
  $94 = $quantptr;
  $95 = (($94) + 32|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = Math_imul($93, $96)|0;
  $z1 = $97;
  $98 = $inptr;
  $99 = (($98) + 48|0);
  $100 = HEAP16[$99>>1]|0;
  $101 = $100 << 16 >> 16;
  $102 = $quantptr;
  $103 = (($102) + 96|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = Math_imul($101, $104)|0;
  $z2 = $105;
  $106 = $inptr;
  $107 = (($106) + 80|0);
  $108 = HEAP16[$107>>1]|0;
  $109 = $108 << 16 >> 16;
  $110 = $quantptr;
  $111 = (($110) + 160|0);
  $112 = HEAP32[$111>>2]|0;
  $113 = Math_imul($109, $112)|0;
  $z3 = $113;
  $114 = $inptr;
  $115 = (($114) + 112|0);
  $116 = HEAP16[$115>>1]|0;
  $117 = $116 << 16 >> 16;
  $118 = $quantptr;
  $119 = (($118) + 224|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = Math_imul($117, $120)|0;
  $z4 = $121;
  $122 = $z2;
  $123 = $z4;
  $124 = (($122) + ($123))|0;
  $tmp11 = $124;
  $125 = $z2;
  $126 = $z4;
  $127 = (($125) - ($126))|0;
  $tmp13 = $127;
  $128 = $tmp13;
  $129 = ($128*2531)|0;
  $tmp12 = $129;
  $130 = $z3;
  $131 = $130 << 13;
  $z5 = $131;
  $132 = $tmp11;
  $133 = ($132*7791)|0;
  $z2 = $133;
  $134 = $z5;
  $135 = $tmp12;
  $136 = (($134) + ($135))|0;
  $z4 = $136;
  $137 = $z1;
  $138 = ($137*11443)|0;
  $139 = $z2;
  $140 = (($138) + ($139))|0;
  $141 = $z4;
  $142 = (($140) + ($141))|0;
  $tmp10 = $142;
  $143 = $z1;
  $144 = ($143*1812)|0;
  $145 = $z2;
  $146 = (($144) - ($145))|0;
  $147 = $z4;
  $148 = (($146) + ($147))|0;
  $tmp14 = $148;
  $149 = $tmp11;
  $150 = ($149*4815)|0;
  $z2 = $150;
  $151 = $z5;
  $152 = $tmp12;
  $153 = (($151) - ($152))|0;
  $154 = $tmp13;
  $155 = $154 << 12;
  $156 = (($153) - ($155))|0;
  $z4 = $156;
  $157 = $z1;
  $158 = $tmp13;
  $159 = (($157) - ($158))|0;
  $160 = $z3;
  $161 = (($159) - ($160))|0;
  $162 = $161 << 2;
  $tmp12 = $162;
  $163 = $z1;
  $164 = ($163*10323)|0;
  $165 = $z2;
  $166 = (($164) - ($165))|0;
  $167 = $z4;
  $168 = (($166) - ($167))|0;
  $tmp11 = $168;
  $169 = $z1;
  $170 = ($169*5260)|0;
  $171 = $z2;
  $172 = (($170) - ($171))|0;
  $173 = $z4;
  $174 = (($172) + ($173))|0;
  $tmp13 = $174;
  $175 = $tmp20;
  $176 = $tmp10;
  $177 = (($175) + ($176))|0;
  $178 = $177 >> 11;
  $179 = $wsptr;
  HEAP32[$179>>2] = $178;
  $180 = $tmp20;
  $181 = $tmp10;
  $182 = (($180) - ($181))|0;
  $183 = $182 >> 11;
  $184 = $wsptr;
  $185 = (($184) + 180|0);
  HEAP32[$185>>2] = $183;
  $186 = $tmp21;
  $187 = $tmp11;
  $188 = (($186) + ($187))|0;
  $189 = $188 >> 11;
  $190 = $wsptr;
  $191 = (($190) + 20|0);
  HEAP32[$191>>2] = $189;
  $192 = $tmp21;
  $193 = $tmp11;
  $194 = (($192) - ($193))|0;
  $195 = $194 >> 11;
  $196 = $wsptr;
  $197 = (($196) + 160|0);
  HEAP32[$197>>2] = $195;
  $198 = $tmp22;
  $199 = $tmp12;
  $200 = (($198) + ($199))|0;
  $201 = $wsptr;
  $202 = (($201) + 40|0);
  HEAP32[$202>>2] = $200;
  $203 = $tmp22;
  $204 = $tmp12;
  $205 = (($203) - ($204))|0;
  $206 = $wsptr;
  $207 = (($206) + 140|0);
  HEAP32[$207>>2] = $205;
  $208 = $tmp23;
  $209 = $tmp13;
  $210 = (($208) + ($209))|0;
  $211 = $210 >> 11;
  $212 = $wsptr;
  $213 = (($212) + 60|0);
  HEAP32[$213>>2] = $211;
  $214 = $tmp23;
  $215 = $tmp13;
  $216 = (($214) - ($215))|0;
  $217 = $216 >> 11;
  $218 = $wsptr;
  $219 = (($218) + 120|0);
  HEAP32[$219>>2] = $217;
  $220 = $tmp24;
  $221 = $tmp14;
  $222 = (($220) + ($221))|0;
  $223 = $222 >> 11;
  $224 = $wsptr;
  $225 = (($224) + 80|0);
  HEAP32[$225>>2] = $223;
  $226 = $tmp24;
  $227 = $tmp14;
  $228 = (($226) - ($227))|0;
  $229 = $228 >> 11;
  $230 = $wsptr;
  $231 = (($230) + 100|0);
  HEAP32[$231>>2] = $229;
  $232 = $ctr;
  $233 = (($232) + 1)|0;
  $ctr = $233;
  $234 = $inptr;
  $235 = (($234) + 2|0);
  $inptr = $235;
  $236 = $quantptr;
  $237 = (($236) + 4|0);
  $quantptr = $237;
  $238 = $wsptr;
  $239 = (($238) + 4|0);
  $wsptr = $239;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $240 = $ctr;
  $241 = ($240|0)<(10);
  if (!($241)) {
   break;
  }
  $242 = $ctr;
  $243 = $3;
  $244 = (($243) + ($242<<2)|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = $4;
  $247 = (($245) + ($246)|0);
  $outptr = $247;
  $248 = $wsptr;
  $249 = HEAP32[$248>>2]|0;
  $250 = (($249) + 16)|0;
  $tmp12 = $250;
  $251 = $tmp12;
  $252 = $251 << 13;
  $tmp12 = $252;
  $253 = $wsptr;
  $254 = (($253) + 8|0);
  $255 = HEAP32[$254>>2]|0;
  $tmp13 = $255;
  $256 = $wsptr;
  $257 = (($256) + 16|0);
  $258 = HEAP32[$257>>2]|0;
  $tmp14 = $258;
  $259 = $tmp13;
  $260 = $tmp14;
  $261 = (($259) + ($260))|0;
  $262 = ($261*6476)|0;
  $z1 = $262;
  $263 = $tmp13;
  $264 = $tmp14;
  $265 = (($263) - ($264))|0;
  $266 = ($265*2896)|0;
  $z2 = $266;
  $267 = $tmp12;
  $268 = $z2;
  $269 = (($267) + ($268))|0;
  $z3 = $269;
  $270 = $z3;
  $271 = $z1;
  $272 = (($270) + ($271))|0;
  $tmp10 = $272;
  $273 = $z3;
  $274 = $z1;
  $275 = (($273) - ($274))|0;
  $tmp11 = $275;
  $276 = $z2;
  $277 = $276 << 2;
  $278 = $tmp12;
  $279 = (($278) - ($277))|0;
  $tmp12 = $279;
  $280 = $wsptr;
  $281 = (($280) + 4|0);
  $282 = HEAP32[$281>>2]|0;
  $z2 = $282;
  $283 = $wsptr;
  $284 = (($283) + 12|0);
  $285 = HEAP32[$284>>2]|0;
  $z3 = $285;
  $286 = $z2;
  $287 = $z3;
  $288 = (($286) + ($287))|0;
  $289 = ($288*6810)|0;
  $z1 = $289;
  $290 = $z1;
  $291 = $z2;
  $292 = ($291*4209)|0;
  $293 = (($290) + ($292))|0;
  $tmp13 = $293;
  $294 = $z1;
  $295 = $z3;
  $296 = ($295*17828)|0;
  $297 = (($294) - ($296))|0;
  $tmp14 = $297;
  $298 = $tmp10;
  $299 = $tmp13;
  $300 = (($298) + ($299))|0;
  $301 = $300 >> 18;
  $302 = $301 & 1023;
  $303 = $range_limit;
  $304 = (($303) + ($302)|0);
  $305 = HEAP8[$304>>0]|0;
  $306 = $outptr;
  HEAP8[$306>>0] = $305;
  $307 = $tmp10;
  $308 = $tmp13;
  $309 = (($307) - ($308))|0;
  $310 = $309 >> 18;
  $311 = $310 & 1023;
  $312 = $range_limit;
  $313 = (($312) + ($311)|0);
  $314 = HEAP8[$313>>0]|0;
  $315 = $outptr;
  $316 = (($315) + 4|0);
  HEAP8[$316>>0] = $314;
  $317 = $tmp11;
  $318 = $tmp14;
  $319 = (($317) + ($318))|0;
  $320 = $319 >> 18;
  $321 = $320 & 1023;
  $322 = $range_limit;
  $323 = (($322) + ($321)|0);
  $324 = HEAP8[$323>>0]|0;
  $325 = $outptr;
  $326 = (($325) + 1|0);
  HEAP8[$326>>0] = $324;
  $327 = $tmp11;
  $328 = $tmp14;
  $329 = (($327) - ($328))|0;
  $330 = $329 >> 18;
  $331 = $330 & 1023;
  $332 = $range_limit;
  $333 = (($332) + ($331)|0);
  $334 = HEAP8[$333>>0]|0;
  $335 = $outptr;
  $336 = (($335) + 3|0);
  HEAP8[$336>>0] = $334;
  $337 = $tmp12;
  $338 = $337 >> 18;
  $339 = $338 & 1023;
  $340 = $range_limit;
  $341 = (($340) + ($339)|0);
  $342 = HEAP8[$341>>0]|0;
  $343 = $outptr;
  $344 = (($343) + 2|0);
  HEAP8[$344>>0] = $342;
  $345 = $wsptr;
  $346 = (($345) + 20|0);
  $wsptr = $346;
  $347 = $ctr;
  $348 = (($347) + 1)|0;
  $ctr = $348;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_4x8($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $dcval = 0;
 var $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp13 = 0, $tmp2 = 0, $tmp3 = 0, $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $workspace = sp + 8|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 4;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)>(0);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = (($15) + 16|0);
  $17 = HEAP16[$16>>1]|0;
  $18 = $17 << 16 >> 16;
  $19 = ($18|0)==(0);
  if ($19) {
   $20 = $inptr;
   $21 = (($20) + 32|0);
   $22 = HEAP16[$21>>1]|0;
   $23 = $22 << 16 >> 16;
   $24 = ($23|0)==(0);
   if ($24) {
    $25 = $inptr;
    $26 = (($25) + 48|0);
    $27 = HEAP16[$26>>1]|0;
    $28 = $27 << 16 >> 16;
    $29 = ($28|0)==(0);
    if ($29) {
     $30 = $inptr;
     $31 = (($30) + 64|0);
     $32 = HEAP16[$31>>1]|0;
     $33 = $32 << 16 >> 16;
     $34 = ($33|0)==(0);
     if ($34) {
      $35 = $inptr;
      $36 = (($35) + 80|0);
      $37 = HEAP16[$36>>1]|0;
      $38 = $37 << 16 >> 16;
      $39 = ($38|0)==(0);
      if ($39) {
       $40 = $inptr;
       $41 = (($40) + 96|0);
       $42 = HEAP16[$41>>1]|0;
       $43 = $42 << 16 >> 16;
       $44 = ($43|0)==(0);
       if ($44) {
        $45 = $inptr;
        $46 = (($45) + 112|0);
        $47 = HEAP16[$46>>1]|0;
        $48 = $47 << 16 >> 16;
        $49 = ($48|0)==(0);
        if ($49) {
         $50 = $inptr;
         $51 = HEAP16[$50>>1]|0;
         $52 = $51 << 16 >> 16;
         $53 = $quantptr;
         $54 = HEAP32[$53>>2]|0;
         $55 = Math_imul($52, $54)|0;
         $56 = $55 << 2;
         $dcval = $56;
         $57 = $dcval;
         $58 = $wsptr;
         HEAP32[$58>>2] = $57;
         $59 = $dcval;
         $60 = $wsptr;
         $61 = (($60) + 16|0);
         HEAP32[$61>>2] = $59;
         $62 = $dcval;
         $63 = $wsptr;
         $64 = (($63) + 32|0);
         HEAP32[$64>>2] = $62;
         $65 = $dcval;
         $66 = $wsptr;
         $67 = (($66) + 48|0);
         HEAP32[$67>>2] = $65;
         $68 = $dcval;
         $69 = $wsptr;
         $70 = (($69) + 64|0);
         HEAP32[$70>>2] = $68;
         $71 = $dcval;
         $72 = $wsptr;
         $73 = (($72) + 80|0);
         HEAP32[$73>>2] = $71;
         $74 = $dcval;
         $75 = $wsptr;
         $76 = (($75) + 96|0);
         HEAP32[$76>>2] = $74;
         $77 = $dcval;
         $78 = $wsptr;
         $79 = (($78) + 112|0);
         HEAP32[$79>>2] = $77;
         $80 = $inptr;
         $81 = (($80) + 2|0);
         $inptr = $81;
         $82 = $quantptr;
         $83 = (($82) + 4|0);
         $quantptr = $83;
         $84 = $wsptr;
         $85 = (($84) + 4|0);
         $wsptr = $85;
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $86 = $inptr;
   $87 = (($86) + 32|0);
   $88 = HEAP16[$87>>1]|0;
   $89 = $88 << 16 >> 16;
   $90 = $quantptr;
   $91 = (($90) + 64|0);
   $92 = HEAP32[$91>>2]|0;
   $93 = Math_imul($89, $92)|0;
   $z2 = $93;
   $94 = $inptr;
   $95 = (($94) + 96|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96 << 16 >> 16;
   $98 = $quantptr;
   $99 = (($98) + 192|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = Math_imul($97, $100)|0;
   $z3 = $101;
   $102 = $z2;
   $103 = $z3;
   $104 = (($102) + ($103))|0;
   $105 = ($104*4433)|0;
   $z1 = $105;
   $106 = $z1;
   $107 = $z2;
   $108 = ($107*6270)|0;
   $109 = (($106) + ($108))|0;
   $tmp2 = $109;
   $110 = $z1;
   $111 = $z3;
   $112 = ($111*15137)|0;
   $113 = (($110) - ($112))|0;
   $tmp3 = $113;
   $114 = $inptr;
   $115 = HEAP16[$114>>1]|0;
   $116 = $115 << 16 >> 16;
   $117 = $quantptr;
   $118 = HEAP32[$117>>2]|0;
   $119 = Math_imul($116, $118)|0;
   $z2 = $119;
   $120 = $inptr;
   $121 = (($120) + 64|0);
   $122 = HEAP16[$121>>1]|0;
   $123 = $122 << 16 >> 16;
   $124 = $quantptr;
   $125 = (($124) + 128|0);
   $126 = HEAP32[$125>>2]|0;
   $127 = Math_imul($123, $126)|0;
   $z3 = $127;
   $128 = $z2;
   $129 = $128 << 13;
   $z2 = $129;
   $130 = $z3;
   $131 = $130 << 13;
   $z3 = $131;
   $132 = $z2;
   $133 = (($132) + 1024)|0;
   $z2 = $133;
   $134 = $z2;
   $135 = $z3;
   $136 = (($134) + ($135))|0;
   $tmp0 = $136;
   $137 = $z2;
   $138 = $z3;
   $139 = (($137) - ($138))|0;
   $tmp1 = $139;
   $140 = $tmp0;
   $141 = $tmp2;
   $142 = (($140) + ($141))|0;
   $tmp10 = $142;
   $143 = $tmp0;
   $144 = $tmp2;
   $145 = (($143) - ($144))|0;
   $tmp13 = $145;
   $146 = $tmp1;
   $147 = $tmp3;
   $148 = (($146) + ($147))|0;
   $tmp11 = $148;
   $149 = $tmp1;
   $150 = $tmp3;
   $151 = (($149) - ($150))|0;
   $tmp12 = $151;
   $152 = $inptr;
   $153 = (($152) + 112|0);
   $154 = HEAP16[$153>>1]|0;
   $155 = $154 << 16 >> 16;
   $156 = $quantptr;
   $157 = (($156) + 224|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = Math_imul($155, $158)|0;
   $tmp0 = $159;
   $160 = $inptr;
   $161 = (($160) + 80|0);
   $162 = HEAP16[$161>>1]|0;
   $163 = $162 << 16 >> 16;
   $164 = $quantptr;
   $165 = (($164) + 160|0);
   $166 = HEAP32[$165>>2]|0;
   $167 = Math_imul($163, $166)|0;
   $tmp1 = $167;
   $168 = $inptr;
   $169 = (($168) + 48|0);
   $170 = HEAP16[$169>>1]|0;
   $171 = $170 << 16 >> 16;
   $172 = $quantptr;
   $173 = (($172) + 96|0);
   $174 = HEAP32[$173>>2]|0;
   $175 = Math_imul($171, $174)|0;
   $tmp2 = $175;
   $176 = $inptr;
   $177 = (($176) + 16|0);
   $178 = HEAP16[$177>>1]|0;
   $179 = $178 << 16 >> 16;
   $180 = $quantptr;
   $181 = (($180) + 32|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = Math_imul($179, $182)|0;
   $tmp3 = $183;
   $184 = $tmp0;
   $185 = $tmp2;
   $186 = (($184) + ($185))|0;
   $z2 = $186;
   $187 = $tmp1;
   $188 = $tmp3;
   $189 = (($187) + ($188))|0;
   $z3 = $189;
   $190 = $z2;
   $191 = $z3;
   $192 = (($190) + ($191))|0;
   $193 = ($192*9633)|0;
   $z1 = $193;
   $194 = $z2;
   $195 = Math_imul($194, -16069)|0;
   $z2 = $195;
   $196 = $z3;
   $197 = Math_imul($196, -3196)|0;
   $z3 = $197;
   $198 = $z1;
   $199 = $z2;
   $200 = (($199) + ($198))|0;
   $z2 = $200;
   $201 = $z1;
   $202 = $z3;
   $203 = (($202) + ($201))|0;
   $z3 = $203;
   $204 = $tmp0;
   $205 = $tmp3;
   $206 = (($204) + ($205))|0;
   $207 = Math_imul($206, -7373)|0;
   $z1 = $207;
   $208 = $tmp0;
   $209 = ($208*2446)|0;
   $tmp0 = $209;
   $210 = $tmp3;
   $211 = ($210*12299)|0;
   $tmp3 = $211;
   $212 = $z1;
   $213 = $z2;
   $214 = (($212) + ($213))|0;
   $215 = $tmp0;
   $216 = (($215) + ($214))|0;
   $tmp0 = $216;
   $217 = $z1;
   $218 = $z3;
   $219 = (($217) + ($218))|0;
   $220 = $tmp3;
   $221 = (($220) + ($219))|0;
   $tmp3 = $221;
   $222 = $tmp1;
   $223 = $tmp2;
   $224 = (($222) + ($223))|0;
   $225 = Math_imul($224, -20995)|0;
   $z1 = $225;
   $226 = $tmp1;
   $227 = ($226*16819)|0;
   $tmp1 = $227;
   $228 = $tmp2;
   $229 = ($228*25172)|0;
   $tmp2 = $229;
   $230 = $z1;
   $231 = $z3;
   $232 = (($230) + ($231))|0;
   $233 = $tmp1;
   $234 = (($233) + ($232))|0;
   $tmp1 = $234;
   $235 = $z1;
   $236 = $z2;
   $237 = (($235) + ($236))|0;
   $238 = $tmp2;
   $239 = (($238) + ($237))|0;
   $tmp2 = $239;
   $240 = $tmp10;
   $241 = $tmp3;
   $242 = (($240) + ($241))|0;
   $243 = $242 >> 11;
   $244 = $wsptr;
   HEAP32[$244>>2] = $243;
   $245 = $tmp10;
   $246 = $tmp3;
   $247 = (($245) - ($246))|0;
   $248 = $247 >> 11;
   $249 = $wsptr;
   $250 = (($249) + 112|0);
   HEAP32[$250>>2] = $248;
   $251 = $tmp11;
   $252 = $tmp2;
   $253 = (($251) + ($252))|0;
   $254 = $253 >> 11;
   $255 = $wsptr;
   $256 = (($255) + 16|0);
   HEAP32[$256>>2] = $254;
   $257 = $tmp11;
   $258 = $tmp2;
   $259 = (($257) - ($258))|0;
   $260 = $259 >> 11;
   $261 = $wsptr;
   $262 = (($261) + 96|0);
   HEAP32[$262>>2] = $260;
   $263 = $tmp12;
   $264 = $tmp1;
   $265 = (($263) + ($264))|0;
   $266 = $265 >> 11;
   $267 = $wsptr;
   $268 = (($267) + 32|0);
   HEAP32[$268>>2] = $266;
   $269 = $tmp12;
   $270 = $tmp1;
   $271 = (($269) - ($270))|0;
   $272 = $271 >> 11;
   $273 = $wsptr;
   $274 = (($273) + 80|0);
   HEAP32[$274>>2] = $272;
   $275 = $tmp13;
   $276 = $tmp0;
   $277 = (($275) + ($276))|0;
   $278 = $277 >> 11;
   $279 = $wsptr;
   $280 = (($279) + 48|0);
   HEAP32[$280>>2] = $278;
   $281 = $tmp13;
   $282 = $tmp0;
   $283 = (($281) - ($282))|0;
   $284 = $283 >> 11;
   $285 = $wsptr;
   $286 = (($285) + 64|0);
   HEAP32[$286>>2] = $284;
   $287 = $inptr;
   $288 = (($287) + 2|0);
   $inptr = $288;
   $289 = $quantptr;
   $290 = (($289) + 4|0);
   $quantptr = $290;
   $291 = $wsptr;
   $292 = (($291) + 4|0);
   $wsptr = $292;
  }
  $293 = $ctr;
  $294 = (($293) + -1)|0;
  $ctr = $294;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $295 = $ctr;
  $296 = ($295|0)<(8);
  if (!($296)) {
   break;
  }
  $297 = $ctr;
  $298 = $3;
  $299 = (($298) + ($297<<2)|0);
  $300 = HEAP32[$299>>2]|0;
  $301 = $4;
  $302 = (($300) + ($301)|0);
  $outptr = $302;
  $303 = $wsptr;
  $304 = HEAP32[$303>>2]|0;
  $305 = (($304) + 16)|0;
  $tmp0 = $305;
  $306 = $wsptr;
  $307 = (($306) + 8|0);
  $308 = HEAP32[$307>>2]|0;
  $tmp2 = $308;
  $309 = $tmp0;
  $310 = $tmp2;
  $311 = (($309) + ($310))|0;
  $312 = $311 << 13;
  $tmp10 = $312;
  $313 = $tmp0;
  $314 = $tmp2;
  $315 = (($313) - ($314))|0;
  $316 = $315 << 13;
  $tmp12 = $316;
  $317 = $wsptr;
  $318 = (($317) + 4|0);
  $319 = HEAP32[$318>>2]|0;
  $z2 = $319;
  $320 = $wsptr;
  $321 = (($320) + 12|0);
  $322 = HEAP32[$321>>2]|0;
  $z3 = $322;
  $323 = $z2;
  $324 = $z3;
  $325 = (($323) + ($324))|0;
  $326 = ($325*4433)|0;
  $z1 = $326;
  $327 = $z1;
  $328 = $z2;
  $329 = ($328*6270)|0;
  $330 = (($327) + ($329))|0;
  $tmp0 = $330;
  $331 = $z1;
  $332 = $z3;
  $333 = ($332*15137)|0;
  $334 = (($331) - ($333))|0;
  $tmp2 = $334;
  $335 = $tmp10;
  $336 = $tmp0;
  $337 = (($335) + ($336))|0;
  $338 = $337 >> 18;
  $339 = $338 & 1023;
  $340 = $range_limit;
  $341 = (($340) + ($339)|0);
  $342 = HEAP8[$341>>0]|0;
  $343 = $outptr;
  HEAP8[$343>>0] = $342;
  $344 = $tmp10;
  $345 = $tmp0;
  $346 = (($344) - ($345))|0;
  $347 = $346 >> 18;
  $348 = $347 & 1023;
  $349 = $range_limit;
  $350 = (($349) + ($348)|0);
  $351 = HEAP8[$350>>0]|0;
  $352 = $outptr;
  $353 = (($352) + 3|0);
  HEAP8[$353>>0] = $351;
  $354 = $tmp12;
  $355 = $tmp2;
  $356 = (($354) + ($355))|0;
  $357 = $356 >> 18;
  $358 = $357 & 1023;
  $359 = $range_limit;
  $360 = (($359) + ($358)|0);
  $361 = HEAP8[$360>>0]|0;
  $362 = $outptr;
  $363 = (($362) + 1|0);
  HEAP8[$363>>0] = $361;
  $364 = $tmp12;
  $365 = $tmp2;
  $366 = (($364) - ($365))|0;
  $367 = $366 >> 18;
  $368 = $367 & 1023;
  $369 = $range_limit;
  $370 = (($369) + ($368)|0);
  $371 = HEAP8[$370>>0]|0;
  $372 = $outptr;
  $373 = (($372) + 2|0);
  HEAP8[$373>>0] = $371;
  $374 = $wsptr;
  $375 = (($374) + 16|0);
  $wsptr = $375;
  $376 = $ctr;
  $377 = (($376) + 1)|0;
  $ctr = $377;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_3x6($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, $tmp10 = 0, $tmp11 = 0, $tmp12 = 0, $tmp2 = 0;
 var $workspace = 0, $wsptr = 0, $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(3);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp0 = $20;
  $21 = $tmp0;
  $22 = $21 << 13;
  $tmp0 = $22;
  $23 = $tmp0;
  $24 = (($23) + 1024)|0;
  $tmp0 = $24;
  $25 = $inptr;
  $26 = (($25) + 64|0);
  $27 = HEAP16[$26>>1]|0;
  $28 = $27 << 16 >> 16;
  $29 = $quantptr;
  $30 = (($29) + 128|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = Math_imul($28, $31)|0;
  $tmp2 = $32;
  $33 = $tmp2;
  $34 = ($33*5793)|0;
  $tmp10 = $34;
  $35 = $tmp0;
  $36 = $tmp10;
  $37 = (($35) + ($36))|0;
  $tmp1 = $37;
  $38 = $tmp0;
  $39 = $tmp10;
  $40 = (($38) - ($39))|0;
  $41 = $tmp10;
  $42 = (($40) - ($41))|0;
  $43 = $42 >> 11;
  $tmp11 = $43;
  $44 = $inptr;
  $45 = (($44) + 32|0);
  $46 = HEAP16[$45>>1]|0;
  $47 = $46 << 16 >> 16;
  $48 = $quantptr;
  $49 = (($48) + 64|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = Math_imul($47, $50)|0;
  $tmp10 = $51;
  $52 = $tmp10;
  $53 = ($52*10033)|0;
  $tmp0 = $53;
  $54 = $tmp1;
  $55 = $tmp0;
  $56 = (($54) + ($55))|0;
  $tmp10 = $56;
  $57 = $tmp1;
  $58 = $tmp0;
  $59 = (($57) - ($58))|0;
  $tmp12 = $59;
  $60 = $inptr;
  $61 = (($60) + 16|0);
  $62 = HEAP16[$61>>1]|0;
  $63 = $62 << 16 >> 16;
  $64 = $quantptr;
  $65 = (($64) + 32|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = Math_imul($63, $66)|0;
  $z1 = $67;
  $68 = $inptr;
  $69 = (($68) + 48|0);
  $70 = HEAP16[$69>>1]|0;
  $71 = $70 << 16 >> 16;
  $72 = $quantptr;
  $73 = (($72) + 96|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = Math_imul($71, $74)|0;
  $z2 = $75;
  $76 = $inptr;
  $77 = (($76) + 80|0);
  $78 = HEAP16[$77>>1]|0;
  $79 = $78 << 16 >> 16;
  $80 = $quantptr;
  $81 = (($80) + 160|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = Math_imul($79, $82)|0;
  $z3 = $83;
  $84 = $z1;
  $85 = $z3;
  $86 = (($84) + ($85))|0;
  $87 = ($86*2998)|0;
  $tmp1 = $87;
  $88 = $tmp1;
  $89 = $z1;
  $90 = $z2;
  $91 = (($89) + ($90))|0;
  $92 = $91 << 13;
  $93 = (($88) + ($92))|0;
  $tmp0 = $93;
  $94 = $tmp1;
  $95 = $z3;
  $96 = $z2;
  $97 = (($95) - ($96))|0;
  $98 = $97 << 13;
  $99 = (($94) + ($98))|0;
  $tmp2 = $99;
  $100 = $z1;
  $101 = $z2;
  $102 = (($100) - ($101))|0;
  $103 = $z3;
  $104 = (($102) - ($103))|0;
  $105 = $104 << 2;
  $tmp1 = $105;
  $106 = $tmp10;
  $107 = $tmp0;
  $108 = (($106) + ($107))|0;
  $109 = $108 >> 11;
  $110 = $wsptr;
  HEAP32[$110>>2] = $109;
  $111 = $tmp10;
  $112 = $tmp0;
  $113 = (($111) - ($112))|0;
  $114 = $113 >> 11;
  $115 = $wsptr;
  $116 = (($115) + 60|0);
  HEAP32[$116>>2] = $114;
  $117 = $tmp11;
  $118 = $tmp1;
  $119 = (($117) + ($118))|0;
  $120 = $wsptr;
  $121 = (($120) + 12|0);
  HEAP32[$121>>2] = $119;
  $122 = $tmp11;
  $123 = $tmp1;
  $124 = (($122) - ($123))|0;
  $125 = $wsptr;
  $126 = (($125) + 48|0);
  HEAP32[$126>>2] = $124;
  $127 = $tmp12;
  $128 = $tmp2;
  $129 = (($127) + ($128))|0;
  $130 = $129 >> 11;
  $131 = $wsptr;
  $132 = (($131) + 24|0);
  HEAP32[$132>>2] = $130;
  $133 = $tmp12;
  $134 = $tmp2;
  $135 = (($133) - ($134))|0;
  $136 = $135 >> 11;
  $137 = $wsptr;
  $138 = (($137) + 36|0);
  HEAP32[$138>>2] = $136;
  $139 = $ctr;
  $140 = (($139) + 1)|0;
  $ctr = $140;
  $141 = $inptr;
  $142 = (($141) + 2|0);
  $inptr = $142;
  $143 = $quantptr;
  $144 = (($143) + 4|0);
  $quantptr = $144;
  $145 = $wsptr;
  $146 = (($145) + 4|0);
  $wsptr = $146;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $147 = $ctr;
  $148 = ($147|0)<(6);
  if (!($148)) {
   break;
  }
  $149 = $ctr;
  $150 = $3;
  $151 = (($150) + ($149<<2)|0);
  $152 = HEAP32[$151>>2]|0;
  $153 = $4;
  $154 = (($152) + ($153)|0);
  $outptr = $154;
  $155 = $wsptr;
  $156 = HEAP32[$155>>2]|0;
  $157 = (($156) + 16)|0;
  $tmp0 = $157;
  $158 = $tmp0;
  $159 = $158 << 13;
  $tmp0 = $159;
  $160 = $wsptr;
  $161 = (($160) + 8|0);
  $162 = HEAP32[$161>>2]|0;
  $tmp2 = $162;
  $163 = $tmp2;
  $164 = ($163*5793)|0;
  $tmp12 = $164;
  $165 = $tmp0;
  $166 = $tmp12;
  $167 = (($165) + ($166))|0;
  $tmp10 = $167;
  $168 = $tmp0;
  $169 = $tmp12;
  $170 = (($168) - ($169))|0;
  $171 = $tmp12;
  $172 = (($170) - ($171))|0;
  $tmp2 = $172;
  $173 = $wsptr;
  $174 = (($173) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  $tmp12 = $175;
  $176 = $tmp12;
  $177 = ($176*10033)|0;
  $tmp0 = $177;
  $178 = $tmp10;
  $179 = $tmp0;
  $180 = (($178) + ($179))|0;
  $181 = $180 >> 18;
  $182 = $181 & 1023;
  $183 = $range_limit;
  $184 = (($183) + ($182)|0);
  $185 = HEAP8[$184>>0]|0;
  $186 = $outptr;
  HEAP8[$186>>0] = $185;
  $187 = $tmp10;
  $188 = $tmp0;
  $189 = (($187) - ($188))|0;
  $190 = $189 >> 18;
  $191 = $190 & 1023;
  $192 = $range_limit;
  $193 = (($192) + ($191)|0);
  $194 = HEAP8[$193>>0]|0;
  $195 = $outptr;
  $196 = (($195) + 2|0);
  HEAP8[$196>>0] = $194;
  $197 = $tmp2;
  $198 = $197 >> 18;
  $199 = $198 & 1023;
  $200 = $range_limit;
  $201 = (($200) + ($199)|0);
  $202 = HEAP8[$201>>0]|0;
  $203 = $outptr;
  $204 = (($203) + 1|0);
  HEAP8[$204>>0] = $202;
  $205 = $wsptr;
  $206 = (($205) + 12|0);
  $wsptr = $206;
  $207 = $ctr;
  $208 = (($207) + 1)|0;
  $ctr = $208;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_2x4($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctr = 0, $inptr = 0, $outptr = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp10 = 0, $tmp12 = 0, $tmp2 = 0, $workspace = 0, $wsptr = 0;
 var $z1 = 0, $z2 = 0, $z3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $workspace = sp;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $2;
 $inptr = $9;
 $10 = $1;
 $11 = (($10) + 84|0);
 $12 = HEAP32[$11>>2]|0;
 $quantptr = $12;
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $13 = $ctr;
  $14 = ($13|0)<(2);
  if (!($14)) {
   break;
  }
  $15 = $inptr;
  $16 = HEAP16[$15>>1]|0;
  $17 = $16 << 16 >> 16;
  $18 = $quantptr;
  $19 = HEAP32[$18>>2]|0;
  $20 = Math_imul($17, $19)|0;
  $tmp0 = $20;
  $21 = $inptr;
  $22 = (($21) + 32|0);
  $23 = HEAP16[$22>>1]|0;
  $24 = $23 << 16 >> 16;
  $25 = $quantptr;
  $26 = (($25) + 64|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = Math_imul($24, $27)|0;
  $tmp2 = $28;
  $29 = $tmp0;
  $30 = $tmp2;
  $31 = (($29) + ($30))|0;
  $32 = $31 << 13;
  $tmp10 = $32;
  $33 = $tmp0;
  $34 = $tmp2;
  $35 = (($33) - ($34))|0;
  $36 = $35 << 13;
  $tmp12 = $36;
  $37 = $inptr;
  $38 = (($37) + 16|0);
  $39 = HEAP16[$38>>1]|0;
  $40 = $39 << 16 >> 16;
  $41 = $quantptr;
  $42 = (($41) + 32|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = Math_imul($40, $43)|0;
  $z2 = $44;
  $45 = $inptr;
  $46 = (($45) + 48|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47 << 16 >> 16;
  $49 = $quantptr;
  $50 = (($49) + 96|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = Math_imul($48, $51)|0;
  $z3 = $52;
  $53 = $z2;
  $54 = $z3;
  $55 = (($53) + ($54))|0;
  $56 = ($55*4433)|0;
  $z1 = $56;
  $57 = $z1;
  $58 = $z2;
  $59 = ($58*6270)|0;
  $60 = (($57) + ($59))|0;
  $tmp0 = $60;
  $61 = $z1;
  $62 = $z3;
  $63 = ($62*15137)|0;
  $64 = (($61) - ($63))|0;
  $tmp2 = $64;
  $65 = $tmp10;
  $66 = $tmp0;
  $67 = (($65) + ($66))|0;
  $68 = $wsptr;
  HEAP32[$68>>2] = $67;
  $69 = $tmp10;
  $70 = $tmp0;
  $71 = (($69) - ($70))|0;
  $72 = $wsptr;
  $73 = (($72) + 24|0);
  HEAP32[$73>>2] = $71;
  $74 = $tmp12;
  $75 = $tmp2;
  $76 = (($74) + ($75))|0;
  $77 = $wsptr;
  $78 = (($77) + 8|0);
  HEAP32[$78>>2] = $76;
  $79 = $tmp12;
  $80 = $tmp2;
  $81 = (($79) - ($80))|0;
  $82 = $wsptr;
  $83 = (($82) + 16|0);
  HEAP32[$83>>2] = $81;
  $84 = $ctr;
  $85 = (($84) + 1)|0;
  $ctr = $85;
  $86 = $inptr;
  $87 = (($86) + 2|0);
  $inptr = $87;
  $88 = $quantptr;
  $89 = (($88) + 4|0);
  $quantptr = $89;
  $90 = $wsptr;
  $91 = (($90) + 4|0);
  $wsptr = $91;
 }
 $wsptr = $workspace;
 $ctr = 0;
 while(1) {
  $92 = $ctr;
  $93 = ($92|0)<(4);
  if (!($93)) {
   break;
  }
  $94 = $ctr;
  $95 = $3;
  $96 = (($95) + ($94<<2)|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = $4;
  $99 = (($97) + ($98)|0);
  $outptr = $99;
  $100 = $wsptr;
  $101 = HEAP32[$100>>2]|0;
  $102 = (($101) + 32768)|0;
  $tmp10 = $102;
  $103 = $wsptr;
  $104 = (($103) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $tmp0 = $105;
  $106 = $tmp10;
  $107 = $tmp0;
  $108 = (($106) + ($107))|0;
  $109 = $108 >> 16;
  $110 = $109 & 1023;
  $111 = $range_limit;
  $112 = (($111) + ($110)|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $outptr;
  HEAP8[$114>>0] = $113;
  $115 = $tmp10;
  $116 = $tmp0;
  $117 = (($115) - ($116))|0;
  $118 = $117 >> 16;
  $119 = $118 & 1023;
  $120 = $range_limit;
  $121 = (($120) + ($119)|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = $outptr;
  $124 = (($123) + 1|0);
  HEAP8[$124>>0] = $122;
  $125 = $wsptr;
  $126 = (($125) + 8|0);
  $wsptr = $126;
  $127 = $ctr;
  $128 = (($127) + 1)|0;
  $ctr = $128;
 }
 STACKTOP = sp;return;
}
function _jpeg_idct_1x2($cinfo,$compptr,$coef_block,$output_buf,$output_col) {
 $cinfo = $cinfo|0;
 $compptr = $compptr|0;
 $coef_block = $coef_block|0;
 $output_buf = $output_buf|0;
 $output_col = $output_col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $quantptr = 0, $range_limit = 0, $tmp0 = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $compptr;
 $2 = $coef_block;
 $3 = $output_buf;
 $4 = $output_col;
 $5 = $0;
 $6 = (($5) + 336|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 128|0);
 $range_limit = $8;
 $9 = $1;
 $10 = (($9) + 84|0);
 $11 = HEAP32[$10>>2]|0;
 $quantptr = $11;
 $12 = $2;
 $13 = HEAP16[$12>>1]|0;
 $14 = $13 << 16 >> 16;
 $15 = $quantptr;
 $16 = HEAP32[$15>>2]|0;
 $17 = Math_imul($14, $16)|0;
 $tmp0 = $17;
 $18 = $tmp0;
 $19 = (($18) + 4)|0;
 $tmp0 = $19;
 $20 = $2;
 $21 = (($20) + 16|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = $22 << 16 >> 16;
 $24 = $quantptr;
 $25 = (($24) + 32|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = Math_imul($23, $26)|0;
 $tmp1 = $27;
 $28 = $tmp0;
 $29 = $tmp1;
 $30 = (($28) + ($29))|0;
 $31 = $30 >> 3;
 $32 = $31 & 1023;
 $33 = $range_limit;
 $34 = (($33) + ($32)|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = $4;
 $37 = $3;
 $38 = HEAP32[$37>>2]|0;
 $39 = (($38) + ($36)|0);
 HEAP8[$39>>0] = $35;
 $40 = $tmp0;
 $41 = $tmp1;
 $42 = (($40) - ($41))|0;
 $43 = $42 >> 3;
 $44 = $43 & 1023;
 $45 = $range_limit;
 $46 = (($45) + ($44)|0);
 $47 = HEAP8[$46>>0]|0;
 $48 = $4;
 $49 = $3;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($48)|0);
 HEAP8[$52>>0] = $47;
 STACKTOP = sp;return;
}
function _jinit_1pass_quantizer($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cquantize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,88)|0);
 $cquantize = $6;
 $7 = $cquantize;
 $8 = $0;
 $9 = (($8) + 484|0);
 HEAP32[$9>>2] = $7;
 $10 = $cquantize;
 HEAP32[$10>>2] = 245;
 $11 = $cquantize;
 $12 = (($11) + 8|0);
 HEAP32[$12>>2] = 246;
 $13 = $cquantize;
 $14 = (($13) + 12|0);
 HEAP32[$14>>2] = 247;
 $15 = $cquantize;
 $16 = (($15) + 68|0);
 HEAP32[$16>>2] = 0;
 $17 = $cquantize;
 $18 = (($17) + 52|0);
 HEAP32[$18>>2] = 0;
 $19 = $0;
 $20 = (($19) + 120|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)>(4);
 if ($22) {
  $23 = $0;
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 20|0);
  HEAP32[$25>>2] = 57;
  $26 = $0;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 24|0);
  HEAP32[$28>>2] = 4;
  $29 = $0;
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$30>>2]|0;
  $32 = $0;
  FUNCTION_TABLE_vi[$31 & 511]($32);
 }
 $33 = $0;
 $34 = (($33) + 96|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($35|0)>(256);
 if ($36) {
  $37 = $0;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 20|0);
  HEAP32[$39>>2] = 59;
  $40 = $0;
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + 24|0);
  HEAP32[$42>>2] = 256;
  $43 = $0;
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = $0;
  FUNCTION_TABLE_vi[$45 & 511]($46);
 }
 $47 = $0;
 _create_colormap($47);
 $48 = $0;
 _create_colorindex($48);
 $49 = $0;
 $50 = (($49) + 88|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = ($51|0)==(2);
 if (!($52)) {
  STACKTOP = sp;return;
 }
 $53 = $0;
 _alloc_fs_workspace($53);
 STACKTOP = sp;return;
}
function _start_pass_1_quant($cinfo,$is_pre_scan) {
 $cinfo = $cinfo|0;
 $is_pre_scan = $is_pre_scan|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $arraysize = 0, $cquantize = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $is_pre_scan;
 $2 = $0;
 $3 = (($2) + 484|0);
 $4 = HEAP32[$3>>2]|0;
 $cquantize = $4;
 $5 = $cquantize;
 $6 = (($5) + 16|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (($8) + 136|0);
 HEAP32[$9>>2] = $7;
 $10 = $cquantize;
 $11 = (($10) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $0;
 $14 = (($13) + 132|0);
 HEAP32[$14>>2] = $12;
 $15 = $0;
 $16 = (($15) + 88|0);
 $17 = HEAP32[$16>>2]|0;
 if ((($17|0) == 2)) {
  $46 = $cquantize;
  $47 = (($46) + 4|0);
  HEAP32[$47>>2] = 252;
  $48 = $cquantize;
  $49 = (($48) + 84|0);
  HEAP32[$49>>2] = 0;
  $50 = $cquantize;
  $51 = (($50) + 68|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0|0);
  if ($53) {
   $54 = $0;
   _alloc_fs_workspace($54);
  }
  $55 = $0;
  $56 = (($55) + 112|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = (($57) + 2)|0;
  $59 = $58<<1;
  $arraysize = $59;
  $i = 0;
  while(1) {
   $60 = $i;
   $61 = $0;
   $62 = (($61) + 120|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($60|0)<($63|0);
   if (!($64)) {
    break;
   }
   $65 = $i;
   $66 = $cquantize;
   $67 = (($66) + 68|0);
   $68 = (($67) + ($65<<2)|0);
   $69 = HEAP32[$68>>2]|0;
   $70 = $arraysize;
   _memset(($69|0),0,($70|0))|0;
   $71 = $i;
   $72 = (($71) + 1)|0;
   $i = $72;
  }
  STACKTOP = sp;return;
 } else if ((($17|0) == 1)) {
  $26 = $0;
  $27 = (($26) + 120|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(3);
  if ($29) {
   $30 = $cquantize;
   $31 = (($30) + 4|0);
   HEAP32[$31>>2] = 250;
  } else {
   $32 = $cquantize;
   $33 = (($32) + 4|0);
   HEAP32[$33>>2] = 251;
  }
  $34 = $cquantize;
  $35 = (($34) + 48|0);
  HEAP32[$35>>2] = 0;
  $36 = $cquantize;
  $37 = (($36) + 28|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)!=(0);
  if (!($39)) {
   $40 = $0;
   _create_colorindex($40);
  }
  $41 = $cquantize;
  $42 = (($41) + 52|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($43|0)==(0|0);
  if ($44) {
   $45 = $0;
   _create_odither_tables($45);
  }
  STACKTOP = sp;return;
 } else if ((($17|0) == 0)) {
  $18 = $0;
  $19 = (($18) + 120|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(3);
  if ($21) {
   $22 = $cquantize;
   $23 = (($22) + 4|0);
   HEAP32[$23>>2] = 248;
  } else {
   $24 = $cquantize;
   $25 = (($24) + 4|0);
   HEAP32[$25>>2] = 249;
  }
  STACKTOP = sp;return;
 } else {
  $73 = $0;
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + 20|0);
  HEAP32[$75>>2] = 49;
  $76 = $0;
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = $0;
  FUNCTION_TABLE_vi[$78 & 511]($79);
  STACKTOP = sp;return;
 }
}
function _finish_pass_1_quant($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return;
}
function _new_color_map_1_quant($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 HEAP32[$3>>2] = 47;
 $4 = $0;
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 FUNCTION_TABLE_vi[$6 & 511]($7);
 STACKTOP = sp;return;
}
function _create_colormap($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $_mp = 0, $blkdist = 0, $blksize = 0, $colormap = 0, $cquantize = 0, $i = 0, $j = 0, $k = 0, $nci = 0, $ptr = 0, $total_colors = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 484|0);
 $3 = HEAP32[$2>>2]|0;
 $cquantize = $3;
 $4 = $0;
 $5 = $cquantize;
 $6 = (($5) + 32|0);
 $7 = (_select_ncolors($4,$6)|0);
 $total_colors = $7;
 $8 = $0;
 $9 = (($8) + 120|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(3);
 if ($11) {
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 24|0);
  $_mp = $14;
  $15 = $total_colors;
  $16 = $_mp;
  HEAP32[$16>>2] = $15;
  $17 = $cquantize;
  $18 = (($17) + 32|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $_mp;
  $21 = (($20) + 4|0);
  HEAP32[$21>>2] = $19;
  $22 = $cquantize;
  $23 = (($22) + 32|0);
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $_mp;
  $27 = (($26) + 8|0);
  HEAP32[$27>>2] = $25;
  $28 = $cquantize;
  $29 = (($28) + 32|0);
  $30 = (($29) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $_mp;
  $33 = (($32) + 12|0);
  HEAP32[$33>>2] = $31;
  $34 = $0;
  $35 = HEAP32[$34>>2]|0;
  $36 = (($35) + 20|0);
  HEAP32[$36>>2] = 96;
  $37 = $0;
  $38 = HEAP32[$37>>2]|0;
  $39 = (($38) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $0;
  FUNCTION_TABLE_vii[$40 & 511]($41,1);
 } else {
  $42 = $0;
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 20|0);
  HEAP32[$44>>2] = 97;
  $45 = $total_colors;
  $46 = $0;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 24|0);
  HEAP32[$48>>2] = $45;
  $49 = $0;
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $0;
  FUNCTION_TABLE_vii[$52 & 511]($53,1);
 }
 $54 = $0;
 $55 = (($54) + 4|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = (($56) + 8|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = $0;
 $60 = $total_colors;
 $61 = $0;
 $62 = (($61) + 120|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (FUNCTION_TABLE_iiiii[$58 & 511]($59,1,$60,$63)|0);
 $colormap = $64;
 $65 = $total_colors;
 $blkdist = $65;
 $i = 0;
 while(1) {
  $66 = $i;
  $67 = $0;
  $68 = (($67) + 120|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($66|0)<($69|0);
  if (!($70)) {
   break;
  }
  $71 = $i;
  $72 = $cquantize;
  $73 = (($72) + 32|0);
  $74 = (($73) + ($71<<2)|0);
  $75 = HEAP32[$74>>2]|0;
  $nci = $75;
  $76 = $blkdist;
  $77 = $nci;
  $78 = (($76|0) / ($77|0))&-1;
  $blksize = $78;
  $j = 0;
  while(1) {
   $79 = $j;
   $80 = $nci;
   $81 = ($79|0)<($80|0);
   if (!($81)) {
    break;
   }
   $82 = $0;
   $83 = $i;
   $84 = $j;
   $85 = $nci;
   $86 = (($85) - 1)|0;
   $87 = (_output_value($82,$83,$84,$86)|0);
   $val = $87;
   $88 = $j;
   $89 = $blksize;
   $90 = Math_imul($88, $89)|0;
   $ptr = $90;
   while(1) {
    $91 = $ptr;
    $92 = $total_colors;
    $93 = ($91|0)<($92|0);
    if (!($93)) {
     break;
    }
    $k = 0;
    while(1) {
     $94 = $k;
     $95 = $blksize;
     $96 = ($94|0)<($95|0);
     if (!($96)) {
      break;
     }
     $97 = $val;
     $98 = $97&255;
     $99 = $ptr;
     $100 = $k;
     $101 = (($99) + ($100))|0;
     $102 = $i;
     $103 = $colormap;
     $104 = (($103) + ($102<<2)|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = (($105) + ($101)|0);
     HEAP8[$106>>0] = $98;
     $107 = $k;
     $108 = (($107) + 1)|0;
     $k = $108;
    }
    $109 = $blkdist;
    $110 = $ptr;
    $111 = (($110) + ($109))|0;
    $ptr = $111;
   }
   $112 = $j;
   $113 = (($112) + 1)|0;
   $j = $113;
  }
  $114 = $blksize;
  $blkdist = $114;
  $115 = $i;
  $116 = (($115) + 1)|0;
  $i = $116;
 }
 $117 = $colormap;
 $118 = $cquantize;
 $119 = (($118) + 16|0);
 HEAP32[$119>>2] = $117;
 $120 = $total_colors;
 $121 = $cquantize;
 $122 = (($121) + 20|0);
 HEAP32[$122>>2] = $120;
 STACKTOP = sp;return;
}
function _create_colorindex($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $blksize = 0, $cquantize = 0, $i = 0, $indexptr = 0, $j = 0, $k = 0, $nci = 0, $pad = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 484|0);
 $3 = HEAP32[$2>>2]|0;
 $cquantize = $3;
 $4 = $0;
 $5 = (($4) + 88|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(1);
 if ($7) {
  $pad = 510;
  $8 = $cquantize;
  $9 = (($8) + 28|0);
  HEAP32[$9>>2] = 1;
 } else {
  $pad = 0;
  $10 = $cquantize;
  $11 = (($10) + 28|0);
  HEAP32[$11>>2] = 0;
 }
 $12 = $0;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $0;
 $18 = $pad;
 $19 = (256 + ($18))|0;
 $20 = $0;
 $21 = (($20) + 120|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (FUNCTION_TABLE_iiiii[$16 & 511]($17,1,$19,$22)|0);
 $24 = $cquantize;
 $25 = (($24) + 24|0);
 HEAP32[$25>>2] = $23;
 $26 = $cquantize;
 $27 = (($26) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $blksize = $28;
 $i = 0;
 while(1) {
  $29 = $i;
  $30 = $0;
  $31 = (($30) + 120|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($29|0)<($32|0);
  if (!($33)) {
   break;
  }
  $34 = $i;
  $35 = $cquantize;
  $36 = (($35) + 32|0);
  $37 = (($36) + ($34<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $nci = $38;
  $39 = $blksize;
  $40 = $nci;
  $41 = (($39|0) / ($40|0))&-1;
  $blksize = $41;
  $42 = $pad;
  $43 = ($42|0)!=(0);
  if ($43) {
   $44 = $i;
   $45 = $cquantize;
   $46 = (($45) + 24|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($44<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + 255|0);
   HEAP32[$48>>2] = $50;
  }
  $51 = $i;
  $52 = $cquantize;
  $53 = (($52) + 24|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (($54) + ($51<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $indexptr = $56;
  $val = 0;
  $57 = $0;
  $58 = $i;
  $59 = $nci;
  $60 = (($59) - 1)|0;
  $61 = (_largest_input_value($57,$58,0,$60)|0);
  $k = $61;
  $j = 0;
  while(1) {
   $62 = $j;
   $63 = ($62|0)<=(255);
   if (!($63)) {
    break;
   }
   while(1) {
    $64 = $j;
    $65 = $k;
    $66 = ($64|0)>($65|0);
    if (!($66)) {
     break;
    }
    $67 = $0;
    $68 = $i;
    $69 = $val;
    $70 = (($69) + 1)|0;
    $val = $70;
    $71 = $nci;
    $72 = (($71) - 1)|0;
    $73 = (_largest_input_value($67,$68,$70,$72)|0);
    $k = $73;
   }
   $74 = $val;
   $75 = $blksize;
   $76 = Math_imul($74, $75)|0;
   $77 = $76&255;
   $78 = $j;
   $79 = $indexptr;
   $80 = (($79) + ($78)|0);
   HEAP8[$80>>0] = $77;
   $81 = $j;
   $82 = (($81) + 1)|0;
   $j = $82;
  }
  $83 = $pad;
  $84 = ($83|0)!=(0);
  if ($84) {
   $j = 1;
   while(1) {
    $85 = $j;
    $86 = ($85|0)<=(255);
    if (!($86)) {
     break;
    }
    $87 = $indexptr;
    $88 = HEAP8[$87>>0]|0;
    $89 = $j;
    $90 = (0 - ($89))|0;
    $91 = $indexptr;
    $92 = (($91) + ($90)|0);
    HEAP8[$92>>0] = $88;
    $93 = $indexptr;
    $94 = (($93) + 255|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $j;
    $97 = (255 + ($96))|0;
    $98 = $indexptr;
    $99 = (($98) + ($97)|0);
    HEAP8[$99>>0] = $95;
    $100 = $j;
    $101 = (($100) + 1)|0;
    $j = $101;
   }
  }
  $102 = $i;
  $103 = (($102) + 1)|0;
  $i = $103;
 }
 STACKTOP = sp;return;
}
function _alloc_fs_workspace($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arraysize = 0, $cquantize = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 484|0);
 $3 = HEAP32[$2>>2]|0;
 $cquantize = $3;
 $4 = $0;
 $5 = (($4) + 112|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 2)|0;
 $8 = $7<<1;
 $arraysize = $8;
 $i = 0;
 while(1) {
  $9 = $i;
  $10 = $0;
  $11 = (($10) + 120|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($9|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $0;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  $20 = $arraysize;
  $21 = (FUNCTION_TABLE_iiii[$18 & 511]($19,1,$20)|0);
  $22 = $i;
  $23 = $cquantize;
  $24 = (($23) + 68|0);
  $25 = (($24) + ($22<<2)|0);
  HEAP32[$25>>2] = $21;
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 STACKTOP = sp;return;
}
function _largest_input_value($cinfo,$ci,$j,$maxj) {
 $cinfo = $cinfo|0;
 $ci = $ci|0;
 $j = $j|0;
 $maxj = $maxj|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $ci;
 $2 = $j;
 $3 = $maxj;
 $4 = $2;
 $5 = $4<<1;
 $6 = (($5) + 1)|0;
 $7 = ($6*255)|0;
 $8 = $3;
 $9 = (($7) + ($8))|0;
 $10 = $3;
 $11 = $10<<1;
 $12 = (($9|0) / ($11|0))&-1;
 STACKTOP = sp;return ($12|0);
}
function _select_ncolors($cinfo,$Ncolors) {
 $cinfo = $cinfo|0;
 $Ncolors = $Ncolors|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $changed = 0, $i = 0, $iroot = 0, $j = 0, $max_colors = 0, $nc = 0, $temp = 0, $total_colors = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $Ncolors;
 $2 = $0;
 $3 = (($2) + 120|0);
 $4 = HEAP32[$3>>2]|0;
 $nc = $4;
 $5 = $0;
 $6 = (($5) + 96|0);
 $7 = HEAP32[$6>>2]|0;
 $max_colors = $7;
 $iroot = 1;
 while(1) {
  $8 = $iroot;
  $9 = (($8) + 1)|0;
  $iroot = $9;
  $10 = $iroot;
  $temp = $10;
  $i = 1;
  while(1) {
   $11 = $i;
   $12 = $nc;
   $13 = ($11|0)<($12|0);
   if (!($13)) {
    break;
   }
   $14 = $iroot;
   $15 = $temp;
   $16 = Math_imul($15, $14)|0;
   $temp = $16;
   $17 = $i;
   $18 = (($17) + 1)|0;
   $i = $18;
  }
  $19 = $temp;
  $20 = $max_colors;
  $21 = ($19|0)<=($20|0);
  if (!($21)) {
   break;
  }
 }
 $22 = $iroot;
 $23 = (($22) + -1)|0;
 $iroot = $23;
 $24 = $iroot;
 $25 = ($24|0)<(2);
 if ($25) {
  $26 = $0;
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 20|0);
  HEAP32[$28>>2] = 58;
  $29 = $temp;
  $30 = $0;
  $31 = HEAP32[$30>>2]|0;
  $32 = (($31) + 24|0);
  HEAP32[$32>>2] = $29;
  $33 = $0;
  $34 = HEAP32[$33>>2]|0;
  $35 = HEAP32[$34>>2]|0;
  $36 = $0;
  FUNCTION_TABLE_vi[$35 & 511]($36);
 }
 $total_colors = 1;
 $i = 0;
 while(1) {
  $37 = $i;
  $38 = $nc;
  $39 = ($37|0)<($38|0);
  if (!($39)) {
   break;
  }
  $40 = $iroot;
  $41 = $i;
  $42 = $1;
  $43 = (($42) + ($41<<2)|0);
  HEAP32[$43>>2] = $40;
  $44 = $iroot;
  $45 = $total_colors;
  $46 = Math_imul($45, $44)|0;
  $total_colors = $46;
  $47 = $i;
  $48 = (($47) + 1)|0;
  $i = $48;
 }
 while(1) {
  $changed = 0;
  $i = 0;
  while(1) {
   $49 = $i;
   $50 = $nc;
   $51 = ($49|0)<($50|0);
   if (!($51)) {
    break;
   }
   $52 = $0;
   $53 = (($52) + 44|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ($54|0)==(2);
   if ($55) {
    $56 = $i;
    $57 = (8616 + ($56<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $60 = $58;
   } else {
    $59 = $i;
    $60 = $59;
   }
   $j = $60;
   $61 = $total_colors;
   $62 = $j;
   $63 = $1;
   $64 = (($63) + ($62<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($61|0) / ($65|0))&-1;
   $temp = $66;
   $67 = $j;
   $68 = $1;
   $69 = (($68) + ($67<<2)|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (($70) + 1)|0;
   $72 = $temp;
   $73 = Math_imul($72, $71)|0;
   $temp = $73;
   $74 = $temp;
   $75 = $max_colors;
   $76 = ($74|0)>($75|0);
   if ($76) {
    label = 21;
    break;
   }
   $77 = $j;
   $78 = $1;
   $79 = (($78) + ($77<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = (($80) + 1)|0;
   HEAP32[$79>>2] = $81;
   $82 = $temp;
   $total_colors = $82;
   $changed = 1;
   $83 = $i;
   $84 = (($83) + 1)|0;
   $i = $84;
  }
  if ((label|0) == 21) {
   label = 0;
  }
  $85 = $changed;
  $86 = ($85|0)!=(0);
  if (!($86)) {
   break;
  }
 }
 $87 = $total_colors;
 STACKTOP = sp;return ($87|0);
}
function _output_value($cinfo,$ci,$j,$maxj) {
 $cinfo = $cinfo|0;
 $ci = $ci|0;
 $j = $j|0;
 $maxj = $maxj|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $ci;
 $2 = $j;
 $3 = $maxj;
 $4 = $2;
 $5 = ($4*255)|0;
 $6 = $3;
 $7 = (($6|0) / 2)&-1;
 $8 = (($5) + ($7))|0;
 $9 = $3;
 $10 = (($8|0) / ($9|0))&-1;
 STACKTOP = sp;return ($10|0);
}
function _color_quantize3($cinfo,$input_buf,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $col = 0, $colorindex0 = 0, $colorindex1 = 0, $colorindex2 = 0, $cquantize = 0, $pixcode = 0;
 var $ptrin = 0, $ptrout = 0, $row = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $num_rows;
 $4 = $0;
 $5 = (($4) + 484|0);
 $6 = HEAP32[$5>>2]|0;
 $cquantize = $6;
 $7 = $cquantize;
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $colorindex0 = $10;
 $11 = $cquantize;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $colorindex1 = $15;
 $16 = $cquantize;
 $17 = (($16) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $colorindex2 = $20;
 $21 = $0;
 $22 = (($21) + 112|0);
 $23 = HEAP32[$22>>2]|0;
 $width = $23;
 $row = 0;
 while(1) {
  $24 = $row;
  $25 = $3;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $row;
  $28 = $1;
  $29 = (($28) + ($27<<2)|0);
  $30 = HEAP32[$29>>2]|0;
  $ptrin = $30;
  $31 = $row;
  $32 = $2;
  $33 = (($32) + ($31<<2)|0);
  $34 = HEAP32[$33>>2]|0;
  $ptrout = $34;
  $35 = $width;
  $col = $35;
  while(1) {
   $36 = $col;
   $37 = ($36>>>0)>(0);
   if (!($37)) {
    break;
   }
   $38 = $ptrin;
   $39 = (($38) + 1|0);
   $ptrin = $39;
   $40 = HEAP8[$38>>0]|0;
   $41 = $40&255;
   $42 = $colorindex0;
   $43 = (($42) + ($41)|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $pixcode = $45;
   $46 = $ptrin;
   $47 = (($46) + 1|0);
   $ptrin = $47;
   $48 = HEAP8[$46>>0]|0;
   $49 = $48&255;
   $50 = $colorindex1;
   $51 = (($50) + ($49)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $pixcode;
   $55 = (($54) + ($53))|0;
   $pixcode = $55;
   $56 = $ptrin;
   $57 = (($56) + 1|0);
   $ptrin = $57;
   $58 = HEAP8[$56>>0]|0;
   $59 = $58&255;
   $60 = $colorindex2;
   $61 = (($60) + ($59)|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $pixcode;
   $65 = (($64) + ($63))|0;
   $pixcode = $65;
   $66 = $pixcode;
   $67 = $66&255;
   $68 = $ptrout;
   $69 = (($68) + 1|0);
   $ptrout = $69;
   HEAP8[$68>>0] = $67;
   $70 = $col;
   $71 = (($70) + -1)|0;
   $col = $71;
  }
  $72 = $row;
  $73 = (($72) + 1)|0;
  $row = $73;
 }
 STACKTOP = sp;return;
}
function _color_quantize($cinfo,$input_buf,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ci = 0, $col = 0, $colorindex = 0, $cquantize = 0;
 var $nc = 0, $pixcode = 0, $ptrin = 0, $ptrout = 0, $row = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $num_rows;
 $4 = $0;
 $5 = (($4) + 484|0);
 $6 = HEAP32[$5>>2]|0;
 $cquantize = $6;
 $7 = $cquantize;
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $colorindex = $9;
 $10 = $0;
 $11 = (($10) + 112|0);
 $12 = HEAP32[$11>>2]|0;
 $width = $12;
 $13 = $0;
 $14 = (($13) + 120|0);
 $15 = HEAP32[$14>>2]|0;
 $nc = $15;
 $row = 0;
 while(1) {
  $16 = $row;
  $17 = $3;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $row;
  $20 = $1;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $ptrin = $22;
  $23 = $row;
  $24 = $2;
  $25 = (($24) + ($23<<2)|0);
  $26 = HEAP32[$25>>2]|0;
  $ptrout = $26;
  $27 = $width;
  $col = $27;
  while(1) {
   $28 = $col;
   $29 = ($28>>>0)>(0);
   if (!($29)) {
    break;
   }
   $pixcode = 0;
   $ci = 0;
   while(1) {
    $30 = $ci;
    $31 = $nc;
    $32 = ($30|0)<($31|0);
    if (!($32)) {
     break;
    }
    $33 = $ptrin;
    $34 = (($33) + 1|0);
    $ptrin = $34;
    $35 = HEAP8[$33>>0]|0;
    $36 = $35&255;
    $37 = $ci;
    $38 = $colorindex;
    $39 = (($38) + ($37<<2)|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + ($36)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $pixcode;
    $45 = (($44) + ($43))|0;
    $pixcode = $45;
    $46 = $ci;
    $47 = (($46) + 1)|0;
    $ci = $47;
   }
   $48 = $pixcode;
   $49 = $48&255;
   $50 = $ptrout;
   $51 = (($50) + 1|0);
   $ptrout = $51;
   HEAP8[$50>>0] = $49;
   $52 = $col;
   $53 = (($52) + -1)|0;
   $col = $53;
  }
  $54 = $row;
  $55 = (($54) + 1)|0;
  $row = $55;
 }
 STACKTOP = sp;return;
}
function _quantize3_ord_dither($cinfo,$input_buf,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $col = 0, $col_index = 0;
 var $colorindex0 = 0, $colorindex1 = 0, $colorindex2 = 0, $cquantize = 0, $dither0 = 0, $dither1 = 0, $dither2 = 0, $input_ptr = 0, $output_ptr = 0, $pixcode = 0, $row = 0, $row_index = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $num_rows;
 $4 = $0;
 $5 = (($4) + 484|0);
 $6 = HEAP32[$5>>2]|0;
 $cquantize = $6;
 $7 = $cquantize;
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$9>>2]|0;
 $colorindex0 = $10;
 $11 = $cquantize;
 $12 = (($11) + 24|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($13) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $colorindex1 = $15;
 $16 = $cquantize;
 $17 = (($16) + 24|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $colorindex2 = $20;
 $21 = $0;
 $22 = (($21) + 112|0);
 $23 = HEAP32[$22>>2]|0;
 $width = $23;
 $row = 0;
 while(1) {
  $24 = $row;
  $25 = $3;
  $26 = ($24|0)<($25|0);
  if (!($26)) {
   break;
  }
  $27 = $cquantize;
  $28 = (($27) + 48|0);
  $29 = HEAP32[$28>>2]|0;
  $row_index = $29;
  $30 = $row;
  $31 = $1;
  $32 = (($31) + ($30<<2)|0);
  $33 = HEAP32[$32>>2]|0;
  $input_ptr = $33;
  $34 = $row;
  $35 = $2;
  $36 = (($35) + ($34<<2)|0);
  $37 = HEAP32[$36>>2]|0;
  $output_ptr = $37;
  $38 = $row_index;
  $39 = $cquantize;
  $40 = (($39) + 52|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($38<<6)|0);
  $dither0 = $42;
  $43 = $row_index;
  $44 = $cquantize;
  $45 = (($44) + 52|0);
  $46 = (($45) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + ($43<<6)|0);
  $dither1 = $48;
  $49 = $row_index;
  $50 = $cquantize;
  $51 = (($50) + 52|0);
  $52 = (($51) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + ($49<<6)|0);
  $dither2 = $54;
  $col_index = 0;
  $55 = $width;
  $col = $55;
  while(1) {
   $56 = $col;
   $57 = ($56>>>0)>(0);
   if (!($57)) {
    break;
   }
   $58 = $input_ptr;
   $59 = (($58) + 1|0);
   $input_ptr = $59;
   $60 = HEAP8[$58>>0]|0;
   $61 = $60&255;
   $62 = $col_index;
   $63 = $dither0;
   $64 = (($63) + ($62<<2)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($61) + ($65))|0;
   $67 = $colorindex0;
   $68 = (($67) + ($66)|0);
   $69 = HEAP8[$68>>0]|0;
   $70 = $69&255;
   $pixcode = $70;
   $71 = $input_ptr;
   $72 = (($71) + 1|0);
   $input_ptr = $72;
   $73 = HEAP8[$71>>0]|0;
   $74 = $73&255;
   $75 = $col_index;
   $76 = $dither1;
   $77 = (($76) + ($75<<2)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = (($74) + ($78))|0;
   $80 = $colorindex1;
   $81 = (($80) + ($79)|0);
   $82 = HEAP8[$81>>0]|0;
   $83 = $82&255;
   $84 = $pixcode;
   $85 = (($84) + ($83))|0;
   $pixcode = $85;
   $86 = $input_ptr;
   $87 = (($86) + 1|0);
   $input_ptr = $87;
   $88 = HEAP8[$86>>0]|0;
   $89 = $88&255;
   $90 = $col_index;
   $91 = $dither2;
   $92 = (($91) + ($90<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($89) + ($93))|0;
   $95 = $colorindex2;
   $96 = (($95) + ($94)|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = $pixcode;
   $100 = (($99) + ($98))|0;
   $pixcode = $100;
   $101 = $pixcode;
   $102 = $101&255;
   $103 = $output_ptr;
   $104 = (($103) + 1|0);
   $output_ptr = $104;
   HEAP8[$103>>0] = $102;
   $105 = $col_index;
   $106 = (($105) + 1)|0;
   $107 = $106 & 15;
   $col_index = $107;
   $108 = $col;
   $109 = (($108) + -1)|0;
   $col = $109;
  }
  $110 = $row_index;
  $111 = (($110) + 1)|0;
  $112 = $111 & 15;
  $row_index = $112;
  $113 = $row_index;
  $114 = $cquantize;
  $115 = (($114) + 48|0);
  HEAP32[$115>>2] = $113;
  $116 = $row;
  $117 = (($116) + 1)|0;
  $row = $117;
 }
 STACKTOP = sp;return;
}
function _quantize_ord_dither($cinfo,$input_buf,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $ci = 0, $col = 0, $col_index = 0, $colorindex_ci = 0, $cquantize = 0, $dither = 0, $input_ptr = 0, $nc = 0, $output_ptr = 0;
 var $row = 0, $row_index = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $num_rows;
 $4 = $0;
 $5 = (($4) + 484|0);
 $6 = HEAP32[$5>>2]|0;
 $cquantize = $6;
 $7 = $0;
 $8 = (($7) + 120|0);
 $9 = HEAP32[$8>>2]|0;
 $nc = $9;
 $10 = $0;
 $11 = (($10) + 112|0);
 $12 = HEAP32[$11>>2]|0;
 $width = $12;
 $row = 0;
 while(1) {
  $13 = $row;
  $14 = $3;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $row;
  $17 = $2;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $width;
  $21 = $20;
  _memset(($19|0),0,($21|0))|0;
  $22 = $cquantize;
  $23 = (($22) + 48|0);
  $24 = HEAP32[$23>>2]|0;
  $row_index = $24;
  $ci = 0;
  while(1) {
   $25 = $ci;
   $26 = $nc;
   $27 = ($25|0)<($26|0);
   if (!($27)) {
    break;
   }
   $28 = $row;
   $29 = $1;
   $30 = (($29) + ($28<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $ci;
   $33 = (($31) + ($32)|0);
   $input_ptr = $33;
   $34 = $row;
   $35 = $2;
   $36 = (($35) + ($34<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $output_ptr = $37;
   $38 = $ci;
   $39 = $cquantize;
   $40 = (($39) + 24|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + ($38<<2)|0);
   $43 = HEAP32[$42>>2]|0;
   $colorindex_ci = $43;
   $44 = $row_index;
   $45 = $ci;
   $46 = $cquantize;
   $47 = (($46) + 52|0);
   $48 = (($47) + ($45<<2)|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = (($49) + ($44<<6)|0);
   $dither = $50;
   $col_index = 0;
   $51 = $width;
   $col = $51;
   while(1) {
    $52 = $col;
    $53 = ($52>>>0)>(0);
    if (!($53)) {
     break;
    }
    $54 = $input_ptr;
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = $col_index;
    $58 = $dither;
    $59 = (($58) + ($57<<2)|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (($56) + ($60))|0;
    $62 = $colorindex_ci;
    $63 = (($62) + ($61)|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = $output_ptr;
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = (($68) + ($65))|0;
    $70 = $69&255;
    HEAP8[$66>>0] = $70;
    $71 = $nc;
    $72 = $input_ptr;
    $73 = (($72) + ($71)|0);
    $input_ptr = $73;
    $74 = $output_ptr;
    $75 = (($74) + 1|0);
    $output_ptr = $75;
    $76 = $col_index;
    $77 = (($76) + 1)|0;
    $78 = $77 & 15;
    $col_index = $78;
    $79 = $col;
    $80 = (($79) + -1)|0;
    $col = $80;
   }
   $81 = $ci;
   $82 = (($81) + 1)|0;
   $ci = $82;
  }
  $83 = $row_index;
  $84 = (($83) + 1)|0;
  $85 = $84 & 15;
  $row_index = $85;
  $86 = $row_index;
  $87 = $cquantize;
  $88 = (($87) + 48|0);
  HEAP32[$88>>2] = $86;
  $89 = $row;
  $90 = (($89) + 1)|0;
  $row = $90;
 }
 STACKTOP = sp;return;
}
function _create_odither_tables($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cquantize = 0, $i = 0, $j = 0, $nci = 0, $odither = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 484|0);
 $3 = HEAP32[$2>>2]|0;
 $cquantize = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $0;
  $6 = (($5) + 120|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($4|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $cquantize;
  $11 = (($10) + 32|0);
  $12 = (($11) + ($9<<2)|0);
  $13 = HEAP32[$12>>2]|0;
  $nci = $13;
  $odither = 0;
  $j = 0;
  while(1) {
   $14 = $j;
   $15 = $i;
   $16 = ($14|0)<($15|0);
   if (!($16)) {
    break;
   }
   $17 = $nci;
   $18 = $j;
   $19 = $cquantize;
   $20 = (($19) + 32|0);
   $21 = (($20) + ($18<<2)|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($17|0)==($22|0);
   if ($23) {
    label = 6;
    break;
   }
   $29 = $j;
   $30 = (($29) + 1)|0;
   $j = $30;
  }
  if ((label|0) == 6) {
   label = 0;
   $24 = $j;
   $25 = $cquantize;
   $26 = (($25) + 52|0);
   $27 = (($26) + ($24<<2)|0);
   $28 = HEAP32[$27>>2]|0;
   $odither = $28;
  }
  $31 = $odither;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $33 = $0;
   $34 = $nci;
   $35 = (_make_odither_array($33,$34)|0);
   $odither = $35;
  }
  $36 = $odither;
  $37 = $i;
  $38 = $cquantize;
  $39 = (($38) + 52|0);
  $40 = (($39) + ($37<<2)|0);
  HEAP32[$40>>2] = $36;
  $41 = $i;
  $42 = (($41) + 1)|0;
  $i = $42;
 }
 STACKTOP = sp;return;
}
function _quantize_fs_dither($cinfo,$input_buf,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $belowerr = 0, $bnexterr = 0, $bpreverr = 0, $ci = 0, $col = 0, $colorindex_ci = 0, $colormap_ci = 0, $cquantize = 0, $cur = 0, $delta = 0, $dir = 0, $dirnc = 0;
 var $errorptr = 0, $input_ptr = 0, $nc = 0, $output_ptr = 0, $pixcode = 0, $range_limit = 0, $row = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $num_rows;
 $4 = $0;
 $5 = (($4) + 484|0);
 $6 = HEAP32[$5>>2]|0;
 $cquantize = $6;
 $7 = $0;
 $8 = (($7) + 120|0);
 $9 = HEAP32[$8>>2]|0;
 $nc = $9;
 $10 = $0;
 $11 = (($10) + 112|0);
 $12 = HEAP32[$11>>2]|0;
 $width = $12;
 $13 = $0;
 $14 = (($13) + 336|0);
 $15 = HEAP32[$14>>2]|0;
 $range_limit = $15;
 $row = 0;
 while(1) {
  $16 = $row;
  $17 = $3;
  $18 = ($16|0)<($17|0);
  if (!($18)) {
   break;
  }
  $19 = $row;
  $20 = $2;
  $21 = (($20) + ($19<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $width;
  $24 = $23;
  _memset(($22|0),0,($24|0))|0;
  $ci = 0;
  while(1) {
   $25 = $ci;
   $26 = $nc;
   $27 = ($25|0)<($26|0);
   if (!($27)) {
    break;
   }
   $28 = $row;
   $29 = $1;
   $30 = (($29) + ($28<<2)|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $ci;
   $33 = (($31) + ($32)|0);
   $input_ptr = $33;
   $34 = $row;
   $35 = $2;
   $36 = (($35) + ($34<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $output_ptr = $37;
   $38 = $cquantize;
   $39 = (($38) + 84|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $width;
    $43 = (($42) - 1)|0;
    $44 = $nc;
    $45 = Math_imul($43, $44)|0;
    $46 = $input_ptr;
    $47 = (($46) + ($45)|0);
    $input_ptr = $47;
    $48 = $width;
    $49 = (($48) - 1)|0;
    $50 = $output_ptr;
    $51 = (($50) + ($49)|0);
    $output_ptr = $51;
    $dir = -1;
    $52 = $nc;
    $53 = (0 - ($52))|0;
    $dirnc = $53;
    $54 = $ci;
    $55 = $cquantize;
    $56 = (($55) + 68|0);
    $57 = (($56) + ($54<<2)|0);
    $58 = HEAP32[$57>>2]|0;
    $59 = $width;
    $60 = (($59) + 1)|0;
    $61 = (($58) + ($60<<1)|0);
    $errorptr = $61;
   } else {
    $dir = 1;
    $62 = $nc;
    $dirnc = $62;
    $63 = $ci;
    $64 = $cquantize;
    $65 = (($64) + 68|0);
    $66 = (($65) + ($63<<2)|0);
    $67 = HEAP32[$66>>2]|0;
    $errorptr = $67;
   }
   $68 = $ci;
   $69 = $cquantize;
   $70 = (($69) + 24|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($71) + ($68<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $colorindex_ci = $73;
   $74 = $ci;
   $75 = $cquantize;
   $76 = (($75) + 16|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + ($74<<2)|0);
   $79 = HEAP32[$78>>2]|0;
   $colormap_ci = $79;
   $cur = 0;
   $bpreverr = 0;
   $belowerr = 0;
   $80 = $width;
   $col = $80;
   while(1) {
    $81 = $col;
    $82 = ($81>>>0)>(0);
    if (!($82)) {
     break;
    }
    $83 = $cur;
    $84 = $dir;
    $85 = $errorptr;
    $86 = (($85) + ($84<<1)|0);
    $87 = HEAP16[$86>>1]|0;
    $88 = $87 << 16 >> 16;
    $89 = (($83) + ($88))|0;
    $90 = (($89) + 8)|0;
    $91 = $90 >> 4;
    $cur = $91;
    $92 = $input_ptr;
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $95 = $cur;
    $96 = (($95) + ($94))|0;
    $cur = $96;
    $97 = $cur;
    $98 = $range_limit;
    $99 = (($98) + ($97)|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $cur = $101;
    $102 = $cur;
    $103 = $colorindex_ci;
    $104 = (($103) + ($102)|0);
    $105 = HEAP8[$104>>0]|0;
    $106 = $105&255;
    $pixcode = $106;
    $107 = $pixcode;
    $108 = $107&255;
    $109 = $108&255;
    $110 = $output_ptr;
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&255;
    $113 = (($112) + ($109))|0;
    $114 = $113&255;
    HEAP8[$110>>0] = $114;
    $115 = $pixcode;
    $116 = $colormap_ci;
    $117 = (($116) + ($115)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118&255;
    $120 = $cur;
    $121 = (($120) - ($119))|0;
    $cur = $121;
    $122 = $cur;
    $bnexterr = $122;
    $123 = $cur;
    $124 = $123<<1;
    $delta = $124;
    $125 = $delta;
    $126 = $cur;
    $127 = (($126) + ($125))|0;
    $cur = $127;
    $128 = $bpreverr;
    $129 = $cur;
    $130 = (($128) + ($129))|0;
    $131 = $130&65535;
    $132 = $errorptr;
    HEAP16[$132>>1] = $131;
    $133 = $delta;
    $134 = $cur;
    $135 = (($134) + ($133))|0;
    $cur = $135;
    $136 = $belowerr;
    $137 = $cur;
    $138 = (($136) + ($137))|0;
    $bpreverr = $138;
    $139 = $bnexterr;
    $belowerr = $139;
    $140 = $delta;
    $141 = $cur;
    $142 = (($141) + ($140))|0;
    $cur = $142;
    $143 = $dirnc;
    $144 = $input_ptr;
    $145 = (($144) + ($143)|0);
    $input_ptr = $145;
    $146 = $dir;
    $147 = $output_ptr;
    $148 = (($147) + ($146)|0);
    $output_ptr = $148;
    $149 = $dir;
    $150 = $errorptr;
    $151 = (($150) + ($149<<1)|0);
    $errorptr = $151;
    $152 = $col;
    $153 = (($152) + -1)|0;
    $col = $153;
   }
   $154 = $bpreverr;
   $155 = $154&65535;
   $156 = $errorptr;
   HEAP16[$156>>1] = $155;
   $157 = $ci;
   $158 = (($157) + 1)|0;
   $ci = $158;
  }
  $159 = $cquantize;
  $160 = (($159) + 84|0);
  $161 = HEAP32[$160>>2]|0;
  $162 = ($161|0)!=(0);
  $163 = $162 ? 0 : 1;
  $164 = $cquantize;
  $165 = (($164) + 84|0);
  HEAP32[$165>>2] = $163;
  $166 = $row;
  $167 = (($166) + 1)|0;
  $row = $167;
 }
 STACKTOP = sp;return;
}
function _make_odither_array($cinfo,$ncolors) {
 $cinfo = $cinfo|0;
 $ncolors = $ncolors|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $den = 0, $j = 0, $k = 0, $num = 0, $odither = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $ncolors;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = (FUNCTION_TABLE_iiii[$5 & 511]($6,1,1024)|0);
 $odither = $7;
 $8 = $1;
 $9 = (($8) - 1)|0;
 $10 = $9<<9;
 $den = $10;
 $j = 0;
 while(1) {
  $11 = $j;
  $12 = ($11|0)<(16);
  if (!($12)) {
   break;
  }
  $k = 0;
  while(1) {
   $13 = $k;
   $14 = ($13|0)<(16);
   if (!($14)) {
    break;
   }
   $15 = $k;
   $16 = $j;
   $17 = (8632 + ($16<<4)|0);
   $18 = (($17) + ($15)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = $20<<1;
   $22 = (255 - ($21))|0;
   $23 = ($22*255)|0;
   $num = $23;
   $24 = $num;
   $25 = ($24|0)<(0);
   if ($25) {
    $26 = $num;
    $27 = (0 - ($26))|0;
    $28 = $den;
    $29 = (($27|0) / ($28|0))&-1;
    $30 = (0 - ($29))|0;
    $39 = $30;
   } else {
    $31 = $num;
    $32 = $den;
    $33 = (($31|0) / ($32|0))&-1;
    $39 = $33;
   }
   $34 = $k;
   $35 = $j;
   $36 = $odither;
   $37 = (($36) + ($35<<6)|0);
   $38 = (($37) + ($34<<2)|0);
   HEAP32[$38>>2] = $39;
   $40 = $k;
   $41 = (($40) + 1)|0;
   $k = $41;
  }
  $42 = $j;
  $43 = (($42) + 1)|0;
  $j = $43;
 }
 $44 = $odither;
 STACKTOP = sp;return ($44|0);
}
function _jinit_2pass_quantizer($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cquantize = 0, $desired = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = $0;
 $6 = (FUNCTION_TABLE_iiii[$4 & 511]($5,1,44)|0);
 $cquantize = $6;
 $7 = $cquantize;
 $8 = $0;
 $9 = (($8) + 484|0);
 HEAP32[$9>>2] = $7;
 $10 = $cquantize;
 HEAP32[$10>>2] = 253;
 $11 = $cquantize;
 $12 = (($11) + 12|0);
 HEAP32[$12>>2] = 254;
 $13 = $cquantize;
 $14 = (($13) + 32|0);
 HEAP32[$14>>2] = 0;
 $15 = $cquantize;
 $16 = (($15) + 40|0);
 HEAP32[$16>>2] = 0;
 $17 = $0;
 $18 = (($17) + 120|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(3);
 if ($20) {
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 20|0);
  HEAP32[$23>>2] = 48;
  $24 = $0;
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = $0;
  FUNCTION_TABLE_vi[$26 & 511]($27);
 }
 $28 = $0;
 $29 = (($28) + 4|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = HEAP32[$30>>2]|0;
 $32 = $0;
 $33 = (FUNCTION_TABLE_iiii[$31 & 511]($32,1,128)|0);
 $34 = $cquantize;
 $35 = (($34) + 24|0);
 HEAP32[$35>>2] = $33;
 $i = 0;
 while(1) {
  $36 = $i;
  $37 = ($36|0)<(32);
  if (!($37)) {
   break;
  }
  $38 = $0;
  $39 = (($38) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (($40) + 4|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $0;
  $44 = (FUNCTION_TABLE_iiii[$42 & 511]($43,1,4096)|0);
  $45 = $i;
  $46 = $cquantize;
  $47 = (($46) + 24|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($48) + ($45<<2)|0);
  HEAP32[$49>>2] = $44;
  $50 = $i;
  $51 = (($50) + 1)|0;
  $i = $51;
 }
 $52 = $cquantize;
 $53 = (($52) + 28|0);
 HEAP32[$53>>2] = 1;
 $54 = $0;
 $55 = (($54) + 108|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($56|0)!=(0);
 if ($57) {
  $58 = $0;
  $59 = (($58) + 96|0);
  $60 = HEAP32[$59>>2]|0;
  $desired = $60;
  $61 = $desired;
  $62 = ($61|0)<(8);
  if ($62) {
   $63 = $0;
   $64 = HEAP32[$63>>2]|0;
   $65 = (($64) + 20|0);
   HEAP32[$65>>2] = 58;
   $66 = $0;
   $67 = HEAP32[$66>>2]|0;
   $68 = (($67) + 24|0);
   HEAP32[$68>>2] = 8;
   $69 = $0;
   $70 = HEAP32[$69>>2]|0;
   $71 = HEAP32[$70>>2]|0;
   $72 = $0;
   FUNCTION_TABLE_vi[$71 & 511]($72);
  }
  $73 = $desired;
  $74 = ($73|0)>(256);
  if ($74) {
   $75 = $0;
   $76 = HEAP32[$75>>2]|0;
   $77 = (($76) + 20|0);
   HEAP32[$77>>2] = 59;
   $78 = $0;
   $79 = HEAP32[$78>>2]|0;
   $80 = (($79) + 24|0);
   HEAP32[$80>>2] = 256;
   $81 = $0;
   $82 = HEAP32[$81>>2]|0;
   $83 = HEAP32[$82>>2]|0;
   $84 = $0;
   FUNCTION_TABLE_vi[$83 & 511]($84);
  }
  $85 = $0;
  $86 = (($85) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + 8|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = $0;
  $91 = $desired;
  $92 = (FUNCTION_TABLE_iiiii[$89 & 511]($90,1,$91,3)|0);
  $93 = $cquantize;
  $94 = (($93) + 16|0);
  HEAP32[$94>>2] = $92;
  $95 = $desired;
  $96 = $cquantize;
  $97 = (($96) + 20|0);
  HEAP32[$97>>2] = $95;
 } else {
  $98 = $cquantize;
  $99 = (($98) + 16|0);
  HEAP32[$99>>2] = 0;
 }
 $100 = $0;
 $101 = (($100) + 88|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0);
 if ($103) {
  $104 = $0;
  $105 = (($104) + 88|0);
  HEAP32[$105>>2] = 2;
 }
 $106 = $0;
 $107 = (($106) + 88|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)==(2);
 if (!($109)) {
  STACKTOP = sp;return;
 }
 $110 = $0;
 $111 = (($110) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = (($112) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $0;
 $116 = $0;
 $117 = (($116) + 112|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (($118) + 2)|0;
 $120 = ($119*6)|0;
 $121 = (FUNCTION_TABLE_iiii[$114 & 511]($115,1,$120)|0);
 $122 = $cquantize;
 $123 = (($122) + 32|0);
 HEAP32[$123>>2] = $121;
 $124 = $0;
 _init_error_limit($124);
 STACKTOP = sp;return;
}
function _start_pass_2_quant($cinfo,$is_pre_scan) {
 $cinfo = $cinfo|0;
 $is_pre_scan = $is_pre_scan|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arraysize = 0, $cquantize = 0, $histogram = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $is_pre_scan;
 $2 = $0;
 $3 = (($2) + 484|0);
 $4 = HEAP32[$3>>2]|0;
 $cquantize = $4;
 $5 = $cquantize;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $histogram = $7;
 $8 = $0;
 $9 = (($8) + 88|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0);
 if ($11) {
  $12 = $0;
  $13 = (($12) + 88|0);
  HEAP32[$13>>2] = 2;
 }
 $14 = $1;
 $15 = ($14|0)!=(0);
 if ($15) {
  $16 = $cquantize;
  $17 = (($16) + 4|0);
  HEAP32[$17>>2] = 255;
  $18 = $cquantize;
  $19 = (($18) + 8|0);
  HEAP32[$19>>2] = 256;
  $20 = $cquantize;
  $21 = (($20) + 28|0);
  HEAP32[$21>>2] = 1;
 } else {
  $22 = $0;
  $23 = (($22) + 88|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(2);
  if ($25) {
   $26 = $cquantize;
   $27 = (($26) + 4|0);
   HEAP32[$27>>2] = 257;
  } else {
   $28 = $cquantize;
   $29 = (($28) + 4|0);
   HEAP32[$29>>2] = 258;
  }
  $30 = $cquantize;
  $31 = (($30) + 8|0);
  HEAP32[$31>>2] = 259;
  $32 = $0;
  $33 = (($32) + 132|0);
  $34 = HEAP32[$33>>2]|0;
  $i = $34;
  $35 = $i;
  $36 = ($35|0)<(1);
  if ($36) {
   $37 = $0;
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 20|0);
   HEAP32[$39>>2] = 58;
   $40 = $0;
   $41 = HEAP32[$40>>2]|0;
   $42 = (($41) + 24|0);
   HEAP32[$42>>2] = 1;
   $43 = $0;
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$44>>2]|0;
   $46 = $0;
   FUNCTION_TABLE_vi[$45 & 511]($46);
  }
  $47 = $i;
  $48 = ($47|0)>(256);
  if ($48) {
   $49 = $0;
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 20|0);
   HEAP32[$51>>2] = 59;
   $52 = $0;
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 24|0);
   HEAP32[$54>>2] = 256;
   $55 = $0;
   $56 = HEAP32[$55>>2]|0;
   $57 = HEAP32[$56>>2]|0;
   $58 = $0;
   FUNCTION_TABLE_vi[$57 & 511]($58);
  }
  $59 = $0;
  $60 = (($59) + 88|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(2);
  if ($62) {
   $63 = $0;
   $64 = (($63) + 112|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($65) + 2)|0;
   $67 = ($66*6)|0;
   $arraysize = $67;
   $68 = $cquantize;
   $69 = (($68) + 32|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(0|0);
   if ($71) {
    $72 = $0;
    $73 = (($72) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (($74) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $0;
    $78 = $arraysize;
    $79 = (FUNCTION_TABLE_iiii[$76 & 511]($77,1,$78)|0);
    $80 = $cquantize;
    $81 = (($80) + 32|0);
    HEAP32[$81>>2] = $79;
   }
   $82 = $cquantize;
   $83 = (($82) + 32|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = $arraysize;
   _memset(($84|0),0,($85|0))|0;
   $86 = $cquantize;
   $87 = (($86) + 40|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ($88|0)==(0|0);
   if ($89) {
    $90 = $0;
    _init_error_limit($90);
   }
   $91 = $cquantize;
   $92 = (($91) + 36|0);
   HEAP32[$92>>2] = 0;
  }
 }
 $93 = $cquantize;
 $94 = (($93) + 28|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)!=(0);
 if (!($96)) {
  STACKTOP = sp;return;
 }
 $i = 0;
 while(1) {
  $97 = $i;
  $98 = ($97|0)<(32);
  if (!($98)) {
   break;
  }
  $99 = $i;
  $100 = $histogram;
  $101 = (($100) + ($99<<2)|0);
  $102 = HEAP32[$101>>2]|0;
  _memset(($102|0),0,4096)|0;
  $103 = $i;
  $104 = (($103) + 1)|0;
  $i = $104;
 }
 $105 = $cquantize;
 $106 = (($105) + 28|0);
 HEAP32[$106>>2] = 0;
 STACKTOP = sp;return;
}
function _new_color_map_2_quant($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $cquantize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 484|0);
 $3 = HEAP32[$2>>2]|0;
 $cquantize = $3;
 $4 = $cquantize;
 $5 = (($4) + 28|0);
 HEAP32[$5>>2] = 1;
 STACKTOP = sp;return;
}
function _init_error_limit($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $cquantize = 0, $in = 0, $out = 0, $table = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 484|0);
 $3 = HEAP32[$2>>2]|0;
 $cquantize = $3;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = (FUNCTION_TABLE_iiii[$7 & 511]($8,1,2044)|0);
 $table = $9;
 $10 = $table;
 $11 = (($10) + 1020|0);
 $table = $11;
 $12 = $table;
 $13 = $cquantize;
 $14 = (($13) + 40|0);
 HEAP32[$14>>2] = $12;
 $out = 0;
 $in = 0;
 while(1) {
  $15 = $in;
  $16 = ($15|0)<(16);
  if (!($16)) {
   break;
  }
  $17 = $out;
  $18 = $in;
  $19 = $table;
  $20 = (($19) + ($18<<2)|0);
  HEAP32[$20>>2] = $17;
  $21 = $out;
  $22 = (0 - ($21))|0;
  $23 = $in;
  $24 = (0 - ($23))|0;
  $25 = $table;
  $26 = (($25) + ($24<<2)|0);
  HEAP32[$26>>2] = $22;
  $27 = $in;
  $28 = (($27) + 1)|0;
  $in = $28;
  $29 = $out;
  $30 = (($29) + 1)|0;
  $out = $30;
 }
 while(1) {
  $31 = $in;
  $32 = ($31|0)<(48);
  if (!($32)) {
   break;
  }
  $33 = $out;
  $34 = $in;
  $35 = $table;
  $36 = (($35) + ($34<<2)|0);
  HEAP32[$36>>2] = $33;
  $37 = $out;
  $38 = (0 - ($37))|0;
  $39 = $in;
  $40 = (0 - ($39))|0;
  $41 = $table;
  $42 = (($41) + ($40<<2)|0);
  HEAP32[$42>>2] = $38;
  $43 = $in;
  $44 = (($43) + 1)|0;
  $in = $44;
  $45 = $in;
  $46 = $45 & 1;
  $47 = ($46|0)!=(0);
  $48 = $47 ? 0 : 1;
  $49 = $out;
  $50 = (($49) + ($48))|0;
  $out = $50;
 }
 while(1) {
  $51 = $in;
  $52 = ($51|0)<=(255);
  if (!($52)) {
   break;
  }
  $53 = $out;
  $54 = $in;
  $55 = $table;
  $56 = (($55) + ($54<<2)|0);
  HEAP32[$56>>2] = $53;
  $57 = $out;
  $58 = (0 - ($57))|0;
  $59 = $in;
  $60 = (0 - ($59))|0;
  $61 = $table;
  $62 = (($61) + ($60<<2)|0);
  HEAP32[$62>>2] = $58;
  $63 = $in;
  $64 = (($63) + 1)|0;
  $in = $64;
 }
 STACKTOP = sp;return;
}
function _prescan_quantize($cinfo,$input_buf,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $col = 0, $cquantize = 0, $histogram = 0, $histp = 0;
 var $ptr = 0, $row = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $num_rows;
 $4 = $0;
 $5 = (($4) + 484|0);
 $6 = HEAP32[$5>>2]|0;
 $cquantize = $6;
 $7 = $cquantize;
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $histogram = $9;
 $10 = $0;
 $11 = (($10) + 112|0);
 $12 = HEAP32[$11>>2]|0;
 $width = $12;
 $row = 0;
 while(1) {
  $13 = $row;
  $14 = $3;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $row;
  $17 = $1;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $ptr = $19;
  $20 = $width;
  $col = $20;
  while(1) {
   $21 = $col;
   $22 = ($21>>>0)>(0);
   if (!($22)) {
    break;
   }
   $23 = $ptr;
   $24 = (($23) + 2|0);
   $25 = HEAP8[$24>>0]|0;
   $26 = $25&255;
   $27 = $26 >> 3;
   $28 = $ptr;
   $29 = (($28) + 1|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&255;
   $32 = $31 >> 2;
   $33 = $ptr;
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $35 >> 3;
   $37 = $histogram;
   $38 = (($37) + ($36<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($32<<6)|0);
   $41 = (($40) + ($27<<1)|0);
   $histp = $41;
   $42 = $histp;
   $43 = HEAP16[$42>>1]|0;
   $44 = (($43) + 1)<<16>>16;
   HEAP16[$42>>1] = $44;
   $45 = $44&65535;
   $46 = ($45|0)<=(0);
   if ($46) {
    $47 = $histp;
    $48 = HEAP16[$47>>1]|0;
    $49 = (($48) + -1)<<16>>16;
    HEAP16[$47>>1] = $49;
   }
   $50 = $ptr;
   $51 = (($50) + 3|0);
   $ptr = $51;
   $52 = $col;
   $53 = (($52) + -1)|0;
   $col = $53;
  }
  $54 = $row;
  $55 = (($54) + 1)|0;
  $row = $55;
 }
 STACKTOP = sp;return;
}
function _finish_pass1($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cquantize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 484|0);
 $3 = HEAP32[$2>>2]|0;
 $cquantize = $3;
 $4 = $cquantize;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = (($7) + 136|0);
 HEAP32[$8>>2] = $6;
 $9 = $0;
 $10 = $cquantize;
 $11 = (($10) + 20|0);
 $12 = HEAP32[$11>>2]|0;
 _select_colors($9,$12);
 $13 = $cquantize;
 $14 = (($13) + 28|0);
 HEAP32[$14>>2] = 1;
 STACKTOP = sp;return;
}
function _pass2_fs_dither($cinfo,$input_buf,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $belowerr0 = 0, $belowerr1 = 0, $belowerr2 = 0, $bnexterr = 0, $bpreverr0 = 0, $bpreverr1 = 0, $bpreverr2 = 0, $cachep = 0, $col = 0, $colormap0 = 0, $colormap1 = 0, $colormap2 = 0, $cquantize = 0;
 var $cur0 = 0, $cur1 = 0, $cur2 = 0, $delta = 0, $dir = 0, $dir3 = 0, $error_limit = 0, $errorptr = 0, $histogram = 0, $inptr = 0, $outptr = 0, $pixcode = 0, $range_limit = 0, $row = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $num_rows;
 $4 = $0;
 $5 = (($4) + 484|0);
 $6 = HEAP32[$5>>2]|0;
 $cquantize = $6;
 $7 = $cquantize;
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $histogram = $9;
 $10 = $0;
 $11 = (($10) + 112|0);
 $12 = HEAP32[$11>>2]|0;
 $width = $12;
 $13 = $0;
 $14 = (($13) + 336|0);
 $15 = HEAP32[$14>>2]|0;
 $range_limit = $15;
 $16 = $cquantize;
 $17 = (($16) + 40|0);
 $18 = HEAP32[$17>>2]|0;
 $error_limit = $18;
 $19 = $0;
 $20 = (($19) + 136|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $colormap0 = $22;
 $23 = $0;
 $24 = (($23) + 136|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $colormap1 = $27;
 $28 = $0;
 $29 = (($28) + 136|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($30) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $colormap2 = $32;
 $row = 0;
 while(1) {
  $33 = $row;
  $34 = $3;
  $35 = ($33|0)<($34|0);
  if (!($35)) {
   break;
  }
  $36 = $row;
  $37 = $1;
  $38 = (($37) + ($36<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $inptr = $39;
  $40 = $row;
  $41 = $2;
  $42 = (($41) + ($40<<2)|0);
  $43 = HEAP32[$42>>2]|0;
  $outptr = $43;
  $44 = $cquantize;
  $45 = (($44) + 36|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $width;
   $49 = (($48) - 1)|0;
   $50 = ($49*3)|0;
   $51 = $inptr;
   $52 = (($51) + ($50)|0);
   $inptr = $52;
   $53 = $width;
   $54 = (($53) - 1)|0;
   $55 = $outptr;
   $56 = (($55) + ($54)|0);
   $outptr = $56;
   $dir = -1;
   $dir3 = -3;
   $57 = $cquantize;
   $58 = (($57) + 32|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $width;
   $61 = (($60) + 1)|0;
   $62 = ($61*3)|0;
   $63 = (($59) + ($62<<1)|0);
   $errorptr = $63;
   $64 = $cquantize;
   $65 = (($64) + 36|0);
   HEAP32[$65>>2] = 0;
  } else {
   $dir = 1;
   $dir3 = 3;
   $66 = $cquantize;
   $67 = (($66) + 32|0);
   $68 = HEAP32[$67>>2]|0;
   $errorptr = $68;
   $69 = $cquantize;
   $70 = (($69) + 36|0);
   HEAP32[$70>>2] = 1;
  }
  $cur2 = 0;
  $cur1 = 0;
  $cur0 = 0;
  $belowerr2 = 0;
  $belowerr1 = 0;
  $belowerr0 = 0;
  $bpreverr2 = 0;
  $bpreverr1 = 0;
  $bpreverr0 = 0;
  $71 = $width;
  $col = $71;
  while(1) {
   $72 = $col;
   $73 = ($72>>>0)>(0);
   if (!($73)) {
    break;
   }
   $74 = $cur0;
   $75 = $dir3;
   $76 = (($75) + 0)|0;
   $77 = $errorptr;
   $78 = (($77) + ($76<<1)|0);
   $79 = HEAP16[$78>>1]|0;
   $80 = $79 << 16 >> 16;
   $81 = (($74) + ($80))|0;
   $82 = (($81) + 8)|0;
   $83 = $82 >> 4;
   $cur0 = $83;
   $84 = $cur1;
   $85 = $dir3;
   $86 = (($85) + 1)|0;
   $87 = $errorptr;
   $88 = (($87) + ($86<<1)|0);
   $89 = HEAP16[$88>>1]|0;
   $90 = $89 << 16 >> 16;
   $91 = (($84) + ($90))|0;
   $92 = (($91) + 8)|0;
   $93 = $92 >> 4;
   $cur1 = $93;
   $94 = $cur2;
   $95 = $dir3;
   $96 = (($95) + 2)|0;
   $97 = $errorptr;
   $98 = (($97) + ($96<<1)|0);
   $99 = HEAP16[$98>>1]|0;
   $100 = $99 << 16 >> 16;
   $101 = (($94) + ($100))|0;
   $102 = (($101) + 8)|0;
   $103 = $102 >> 4;
   $cur2 = $103;
   $104 = $cur0;
   $105 = $error_limit;
   $106 = (($105) + ($104<<2)|0);
   $107 = HEAP32[$106>>2]|0;
   $cur0 = $107;
   $108 = $cur1;
   $109 = $error_limit;
   $110 = (($109) + ($108<<2)|0);
   $111 = HEAP32[$110>>2]|0;
   $cur1 = $111;
   $112 = $cur2;
   $113 = $error_limit;
   $114 = (($113) + ($112<<2)|0);
   $115 = HEAP32[$114>>2]|0;
   $cur2 = $115;
   $116 = $inptr;
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $119 = $cur0;
   $120 = (($119) + ($118))|0;
   $cur0 = $120;
   $121 = $inptr;
   $122 = (($121) + 1|0);
   $123 = HEAP8[$122>>0]|0;
   $124 = $123&255;
   $125 = $cur1;
   $126 = (($125) + ($124))|0;
   $cur1 = $126;
   $127 = $inptr;
   $128 = (($127) + 2|0);
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&255;
   $131 = $cur2;
   $132 = (($131) + ($130))|0;
   $cur2 = $132;
   $133 = $cur0;
   $134 = $range_limit;
   $135 = (($134) + ($133)|0);
   $136 = HEAP8[$135>>0]|0;
   $137 = $136&255;
   $cur0 = $137;
   $138 = $cur1;
   $139 = $range_limit;
   $140 = (($139) + ($138)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $cur1 = $142;
   $143 = $cur2;
   $144 = $range_limit;
   $145 = (($144) + ($143)|0);
   $146 = HEAP8[$145>>0]|0;
   $147 = $146&255;
   $cur2 = $147;
   $148 = $cur2;
   $149 = $148 >> 3;
   $150 = $cur1;
   $151 = $150 >> 2;
   $152 = $cur0;
   $153 = $152 >> 3;
   $154 = $histogram;
   $155 = (($154) + ($153<<2)|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = (($156) + ($151<<6)|0);
   $158 = (($157) + ($149<<1)|0);
   $cachep = $158;
   $159 = $cachep;
   $160 = HEAP16[$159>>1]|0;
   $161 = $160&65535;
   $162 = ($161|0)==(0);
   if ($162) {
    $163 = $0;
    $164 = $cur0;
    $165 = $164 >> 3;
    $166 = $cur1;
    $167 = $166 >> 2;
    $168 = $cur2;
    $169 = $168 >> 3;
    _fill_inverse_cmap($163,$165,$167,$169);
   }
   $170 = $cachep;
   $171 = HEAP16[$170>>1]|0;
   $172 = $171&65535;
   $173 = (($172) - 1)|0;
   $pixcode = $173;
   $174 = $pixcode;
   $175 = $174&255;
   $176 = $outptr;
   HEAP8[$176>>0] = $175;
   $177 = $pixcode;
   $178 = $colormap0;
   $179 = (($178) + ($177)|0);
   $180 = HEAP8[$179>>0]|0;
   $181 = $180&255;
   $182 = $cur0;
   $183 = (($182) - ($181))|0;
   $cur0 = $183;
   $184 = $pixcode;
   $185 = $colormap1;
   $186 = (($185) + ($184)|0);
   $187 = HEAP8[$186>>0]|0;
   $188 = $187&255;
   $189 = $cur1;
   $190 = (($189) - ($188))|0;
   $cur1 = $190;
   $191 = $pixcode;
   $192 = $colormap2;
   $193 = (($192) + ($191)|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = $194&255;
   $196 = $cur2;
   $197 = (($196) - ($195))|0;
   $cur2 = $197;
   $198 = $cur0;
   $bnexterr = $198;
   $199 = $cur0;
   $200 = $199<<1;
   $delta = $200;
   $201 = $delta;
   $202 = $cur0;
   $203 = (($202) + ($201))|0;
   $cur0 = $203;
   $204 = $bpreverr0;
   $205 = $cur0;
   $206 = (($204) + ($205))|0;
   $207 = $206&65535;
   $208 = $errorptr;
   HEAP16[$208>>1] = $207;
   $209 = $delta;
   $210 = $cur0;
   $211 = (($210) + ($209))|0;
   $cur0 = $211;
   $212 = $belowerr0;
   $213 = $cur0;
   $214 = (($212) + ($213))|0;
   $bpreverr0 = $214;
   $215 = $bnexterr;
   $belowerr0 = $215;
   $216 = $delta;
   $217 = $cur0;
   $218 = (($217) + ($216))|0;
   $cur0 = $218;
   $219 = $cur1;
   $bnexterr = $219;
   $220 = $cur1;
   $221 = $220<<1;
   $delta = $221;
   $222 = $delta;
   $223 = $cur1;
   $224 = (($223) + ($222))|0;
   $cur1 = $224;
   $225 = $bpreverr1;
   $226 = $cur1;
   $227 = (($225) + ($226))|0;
   $228 = $227&65535;
   $229 = $errorptr;
   $230 = (($229) + 2|0);
   HEAP16[$230>>1] = $228;
   $231 = $delta;
   $232 = $cur1;
   $233 = (($232) + ($231))|0;
   $cur1 = $233;
   $234 = $belowerr1;
   $235 = $cur1;
   $236 = (($234) + ($235))|0;
   $bpreverr1 = $236;
   $237 = $bnexterr;
   $belowerr1 = $237;
   $238 = $delta;
   $239 = $cur1;
   $240 = (($239) + ($238))|0;
   $cur1 = $240;
   $241 = $cur2;
   $bnexterr = $241;
   $242 = $cur2;
   $243 = $242<<1;
   $delta = $243;
   $244 = $delta;
   $245 = $cur2;
   $246 = (($245) + ($244))|0;
   $cur2 = $246;
   $247 = $bpreverr2;
   $248 = $cur2;
   $249 = (($247) + ($248))|0;
   $250 = $249&65535;
   $251 = $errorptr;
   $252 = (($251) + 4|0);
   HEAP16[$252>>1] = $250;
   $253 = $delta;
   $254 = $cur2;
   $255 = (($254) + ($253))|0;
   $cur2 = $255;
   $256 = $belowerr2;
   $257 = $cur2;
   $258 = (($256) + ($257))|0;
   $bpreverr2 = $258;
   $259 = $bnexterr;
   $belowerr2 = $259;
   $260 = $delta;
   $261 = $cur2;
   $262 = (($261) + ($260))|0;
   $cur2 = $262;
   $263 = $dir3;
   $264 = $inptr;
   $265 = (($264) + ($263)|0);
   $inptr = $265;
   $266 = $dir;
   $267 = $outptr;
   $268 = (($267) + ($266)|0);
   $outptr = $268;
   $269 = $dir3;
   $270 = $errorptr;
   $271 = (($270) + ($269<<1)|0);
   $errorptr = $271;
   $272 = $col;
   $273 = (($272) + -1)|0;
   $col = $273;
  }
  $274 = $bpreverr0;
  $275 = $274&65535;
  $276 = $errorptr;
  HEAP16[$276>>1] = $275;
  $277 = $bpreverr1;
  $278 = $277&65535;
  $279 = $errorptr;
  $280 = (($279) + 2|0);
  HEAP16[$280>>1] = $278;
  $281 = $bpreverr2;
  $282 = $281&65535;
  $283 = $errorptr;
  $284 = (($283) + 4|0);
  HEAP16[$284>>1] = $282;
  $285 = $row;
  $286 = (($285) + 1)|0;
  $row = $286;
 }
 STACKTOP = sp;return;
}
function _pass2_no_dither($cinfo,$input_buf,$output_buf,$num_rows) {
 $cinfo = $cinfo|0;
 $input_buf = $input_buf|0;
 $output_buf = $output_buf|0;
 $num_rows = $num_rows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $c0 = 0, $c1 = 0, $c2 = 0, $cachep = 0, $col = 0, $cquantize = 0, $histogram = 0, $inptr = 0, $outptr = 0, $row = 0, $width = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $0 = $cinfo;
 $1 = $input_buf;
 $2 = $output_buf;
 $3 = $num_rows;
 $4 = $0;
 $5 = (($4) + 484|0);
 $6 = HEAP32[$5>>2]|0;
 $cquantize = $6;
 $7 = $cquantize;
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $histogram = $9;
 $10 = $0;
 $11 = (($10) + 112|0);
 $12 = HEAP32[$11>>2]|0;
 $width = $12;
 $row = 0;
 while(1) {
  $13 = $row;
  $14 = $3;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $row;
  $17 = $1;
  $18 = (($17) + ($16<<2)|0);
  $19 = HEAP32[$18>>2]|0;
  $inptr = $19;
  $20 = $row;
  $21 = $2;
  $22 = (($21) + ($20<<2)|0);
  $23 = HEAP32[$22>>2]|0;
  $outptr = $23;
  $24 = $width;
  $col = $24;
  while(1) {
   $25 = $col;
   $26 = ($25>>>0)>(0);
   if (!($26)) {
    break;
   }
   $27 = $inptr;
   $28 = (($27) + 1|0);
   $inptr = $28;
   $29 = HEAP8[$27>>0]|0;
   $30 = $29&255;
   $31 = $30 >> 3;
   $c0 = $31;
   $32 = $inptr;
   $33 = (($32) + 1|0);
   $inptr = $33;
   $34 = HEAP8[$32>>0]|0;
   $35 = $34&255;
   $36 = $35 >> 2;
   $c1 = $36;
   $37 = $inptr;
   $38 = (($37) + 1|0);
   $inptr = $38;
   $39 = HEAP8[$37>>0]|0;
   $40 = $39&255;
   $41 = $40 >> 3;
   $c2 = $41;
   $42 = $c2;
   $43 = $c1;
   $44 = $c0;
   $45 = $histogram;
   $46 = (($45) + ($44<<2)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + ($43<<6)|0);
   $49 = (($48) + ($42<<1)|0);
   $cachep = $49;
   $50 = $cachep;
   $51 = HEAP16[$50>>1]|0;
   $52 = $51&65535;
   $53 = ($52|0)==(0);
   if ($53) {
    $54 = $0;
    $55 = $c0;
    $56 = $c1;
    $57 = $c2;
    _fill_inverse_cmap($54,$55,$56,$57);
   }
   $58 = $cachep;
   $59 = HEAP16[$58>>1]|0;
   $60 = $59&65535;
   $61 = (($60) - 1)|0;
   $62 = $61&255;
   $63 = $outptr;
   $64 = (($63) + 1|0);
   $outptr = $64;
   HEAP8[$63>>0] = $62;
   $65 = $col;
   $66 = (($65) + -1)|0;
   $col = $66;
  }
  $67 = $row;
  $68 = (($67) + 1)|0;
  $row = $68;
 }
 STACKTOP = sp;return;
}
function _finish_pass2($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return;
}
function _fill_inverse_cmap($cinfo,$c0,$c1,$c2) {
 $cinfo = $cinfo|0;
 $c0 = $c0|0;
 $c1 = $c1|0;
 $c2 = $c2|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $bestcolor = 0, $cachep = 0, $colorlist = 0, $cptr = 0, $cquantize = 0, $histogram = 0, $ic0 = 0;
 var $ic1 = 0, $ic2 = 0, $minc0 = 0, $minc1 = 0, $minc2 = 0, $numcolors = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 448|0;
 $colorlist = sp + 192|0;
 $bestcolor = sp + 64|0;
 $0 = $cinfo;
 $1 = $c0;
 $2 = $c1;
 $3 = $c2;
 $4 = $0;
 $5 = (($4) + 484|0);
 $6 = HEAP32[$5>>2]|0;
 $cquantize = $6;
 $7 = $cquantize;
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $histogram = $9;
 $10 = $1;
 $11 = $10 >> 2;
 $1 = $11;
 $12 = $2;
 $13 = $12 >> 3;
 $2 = $13;
 $14 = $3;
 $15 = $14 >> 2;
 $3 = $15;
 $16 = $1;
 $17 = $16 << 5;
 $18 = (($17) + 4)|0;
 $minc0 = $18;
 $19 = $2;
 $20 = $19 << 5;
 $21 = (($20) + 2)|0;
 $minc1 = $21;
 $22 = $3;
 $23 = $22 << 5;
 $24 = (($23) + 4)|0;
 $minc2 = $24;
 $25 = $0;
 $26 = $minc0;
 $27 = $minc1;
 $28 = $minc2;
 $29 = (_find_nearby_colors($25,$26,$27,$28,$colorlist)|0);
 $numcolors = $29;
 $30 = $0;
 $31 = $minc0;
 $32 = $minc1;
 $33 = $minc2;
 $34 = $numcolors;
 _find_best_colors($30,$31,$32,$33,$34,$colorlist,$bestcolor);
 $35 = $1;
 $36 = $35 << 2;
 $1 = $36;
 $37 = $2;
 $38 = $37 << 3;
 $2 = $38;
 $39 = $3;
 $40 = $39 << 2;
 $3 = $40;
 $cptr = $bestcolor;
 $ic0 = 0;
 while(1) {
  $41 = $ic0;
  $42 = ($41|0)<(4);
  if (!($42)) {
   break;
  }
  $ic1 = 0;
  while(1) {
   $43 = $ic1;
   $44 = ($43|0)<(8);
   if (!($44)) {
    break;
   }
   $45 = $3;
   $46 = $2;
   $47 = $ic1;
   $48 = (($46) + ($47))|0;
   $49 = $1;
   $50 = $ic0;
   $51 = (($49) + ($50))|0;
   $52 = $histogram;
   $53 = (($52) + ($51<<2)|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($54) + ($48<<6)|0);
   $56 = (($55) + ($45<<1)|0);
   $cachep = $56;
   $ic2 = 0;
   while(1) {
    $57 = $ic2;
    $58 = ($57|0)<(4);
    if (!($58)) {
     break;
    }
    $59 = $cptr;
    $60 = (($59) + 1|0);
    $cptr = $60;
    $61 = HEAP8[$59>>0]|0;
    $62 = $61&255;
    $63 = (($62) + 1)|0;
    $64 = $63&65535;
    $65 = $cachep;
    $66 = (($65) + 2|0);
    $cachep = $66;
    HEAP16[$65>>1] = $64;
    $67 = $ic2;
    $68 = (($67) + 1)|0;
    $ic2 = $68;
   }
   $69 = $ic1;
   $70 = (($69) + 1)|0;
   $ic1 = $70;
  }
  $71 = $ic0;
  $72 = (($71) + 1)|0;
  $ic0 = $72;
 }
 STACKTOP = sp;return;
}
function _find_nearby_colors($cinfo,$minc0,$minc1,$minc2,$colorlist) {
 $cinfo = $cinfo|0;
 $minc0 = $minc0|0;
 $minc1 = $minc1|0;
 $minc2 = $minc2|0;
 $colorlist = $colorlist|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $centerc0 = 0, $centerc1 = 0;
 var $centerc2 = 0, $i = 0, $max_dist = 0, $maxc0 = 0, $maxc1 = 0, $maxc2 = 0, $min_dist = 0, $mindist = 0, $minmaxdist = 0, $ncolors = 0, $numcolors = 0, $tdist = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1104|0;
 $mindist = sp;
 $0 = $cinfo;
 $1 = $minc0;
 $2 = $minc1;
 $3 = $minc2;
 $4 = $colorlist;
 $5 = $0;
 $6 = (($5) + 132|0);
 $7 = HEAP32[$6>>2]|0;
 $numcolors = $7;
 $8 = $1;
 $9 = (($8) + 24)|0;
 $maxc0 = $9;
 $10 = $1;
 $11 = $maxc0;
 $12 = (($10) + ($11))|0;
 $13 = $12 >> 1;
 $centerc0 = $13;
 $14 = $2;
 $15 = (($14) + 28)|0;
 $maxc1 = $15;
 $16 = $2;
 $17 = $maxc1;
 $18 = (($16) + ($17))|0;
 $19 = $18 >> 1;
 $centerc1 = $19;
 $20 = $3;
 $21 = (($20) + 24)|0;
 $maxc2 = $21;
 $22 = $3;
 $23 = $maxc2;
 $24 = (($22) + ($23))|0;
 $25 = $24 >> 1;
 $centerc2 = $25;
 $minmaxdist = 2147483647;
 $i = 0;
 while(1) {
  $26 = $i;
  $27 = $numcolors;
  $28 = ($26|0)<($27|0);
  if (!($28)) {
   break;
  }
  $29 = $i;
  $30 = $0;
  $31 = (($30) + 136|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = HEAP32[$32>>2]|0;
  $34 = (($33) + ($29)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $x = $36;
  $37 = $x;
  $38 = $1;
  $39 = ($37|0)<($38|0);
  if ($39) {
   $40 = $x;
   $41 = $1;
   $42 = (($40) - ($41))|0;
   $43 = $42<<1;
   $tdist = $43;
   $44 = $tdist;
   $45 = $tdist;
   $46 = Math_imul($44, $45)|0;
   $min_dist = $46;
   $47 = $x;
   $48 = $maxc0;
   $49 = (($47) - ($48))|0;
   $50 = $49<<1;
   $tdist = $50;
   $51 = $tdist;
   $52 = $tdist;
   $53 = Math_imul($51, $52)|0;
   $max_dist = $53;
  } else {
   $54 = $x;
   $55 = $maxc0;
   $56 = ($54|0)>($55|0);
   if ($56) {
    $57 = $x;
    $58 = $maxc0;
    $59 = (($57) - ($58))|0;
    $60 = $59<<1;
    $tdist = $60;
    $61 = $tdist;
    $62 = $tdist;
    $63 = Math_imul($61, $62)|0;
    $min_dist = $63;
    $64 = $x;
    $65 = $1;
    $66 = (($64) - ($65))|0;
    $67 = $66<<1;
    $tdist = $67;
    $68 = $tdist;
    $69 = $tdist;
    $70 = Math_imul($68, $69)|0;
    $max_dist = $70;
   } else {
    $min_dist = 0;
    $71 = $x;
    $72 = $centerc0;
    $73 = ($71|0)<=($72|0);
    if ($73) {
     $74 = $x;
     $75 = $maxc0;
     $76 = (($74) - ($75))|0;
     $77 = $76<<1;
     $tdist = $77;
     $78 = $tdist;
     $79 = $tdist;
     $80 = Math_imul($78, $79)|0;
     $max_dist = $80;
    } else {
     $81 = $x;
     $82 = $1;
     $83 = (($81) - ($82))|0;
     $84 = $83<<1;
     $tdist = $84;
     $85 = $tdist;
     $86 = $tdist;
     $87 = Math_imul($85, $86)|0;
     $max_dist = $87;
    }
   }
  }
  $88 = $i;
  $89 = $0;
  $90 = (($89) + 136|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + 4|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + ($88)|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = $95&255;
  $x = $96;
  $97 = $x;
  $98 = $2;
  $99 = ($97|0)<($98|0);
  if ($99) {
   $100 = $x;
   $101 = $2;
   $102 = (($100) - ($101))|0;
   $103 = ($102*3)|0;
   $tdist = $103;
   $104 = $tdist;
   $105 = $tdist;
   $106 = Math_imul($104, $105)|0;
   $107 = $min_dist;
   $108 = (($107) + ($106))|0;
   $min_dist = $108;
   $109 = $x;
   $110 = $maxc1;
   $111 = (($109) - ($110))|0;
   $112 = ($111*3)|0;
   $tdist = $112;
   $113 = $tdist;
   $114 = $tdist;
   $115 = Math_imul($113, $114)|0;
   $116 = $max_dist;
   $117 = (($116) + ($115))|0;
   $max_dist = $117;
  } else {
   $118 = $x;
   $119 = $maxc1;
   $120 = ($118|0)>($119|0);
   if ($120) {
    $121 = $x;
    $122 = $maxc1;
    $123 = (($121) - ($122))|0;
    $124 = ($123*3)|0;
    $tdist = $124;
    $125 = $tdist;
    $126 = $tdist;
    $127 = Math_imul($125, $126)|0;
    $128 = $min_dist;
    $129 = (($128) + ($127))|0;
    $min_dist = $129;
    $130 = $x;
    $131 = $2;
    $132 = (($130) - ($131))|0;
    $133 = ($132*3)|0;
    $tdist = $133;
    $134 = $tdist;
    $135 = $tdist;
    $136 = Math_imul($134, $135)|0;
    $137 = $max_dist;
    $138 = (($137) + ($136))|0;
    $max_dist = $138;
   } else {
    $139 = $x;
    $140 = $centerc1;
    $141 = ($139|0)<=($140|0);
    if ($141) {
     $142 = $x;
     $143 = $maxc1;
     $144 = (($142) - ($143))|0;
     $145 = ($144*3)|0;
     $tdist = $145;
     $146 = $tdist;
     $147 = $tdist;
     $148 = Math_imul($146, $147)|0;
     $149 = $max_dist;
     $150 = (($149) + ($148))|0;
     $max_dist = $150;
    } else {
     $151 = $x;
     $152 = $2;
     $153 = (($151) - ($152))|0;
     $154 = ($153*3)|0;
     $tdist = $154;
     $155 = $tdist;
     $156 = $tdist;
     $157 = Math_imul($155, $156)|0;
     $158 = $max_dist;
     $159 = (($158) + ($157))|0;
     $max_dist = $159;
    }
   }
  }
  $160 = $i;
  $161 = $0;
  $162 = (($161) + 136|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($163) + 8|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($165) + ($160)|0);
  $167 = HEAP8[$166>>0]|0;
  $168 = $167&255;
  $x = $168;
  $169 = $x;
  $170 = $3;
  $171 = ($169|0)<($170|0);
  if ($171) {
   $172 = $x;
   $173 = $3;
   $174 = (($172) - ($173))|0;
   $175 = $174;
   $tdist = $175;
   $176 = $tdist;
   $177 = $tdist;
   $178 = Math_imul($176, $177)|0;
   $179 = $min_dist;
   $180 = (($179) + ($178))|0;
   $min_dist = $180;
   $181 = $x;
   $182 = $maxc2;
   $183 = (($181) - ($182))|0;
   $184 = $183;
   $tdist = $184;
   $185 = $tdist;
   $186 = $tdist;
   $187 = Math_imul($185, $186)|0;
   $188 = $max_dist;
   $189 = (($188) + ($187))|0;
   $max_dist = $189;
  } else {
   $190 = $x;
   $191 = $maxc2;
   $192 = ($190|0)>($191|0);
   if ($192) {
    $193 = $x;
    $194 = $maxc2;
    $195 = (($193) - ($194))|0;
    $196 = $195;
    $tdist = $196;
    $197 = $tdist;
    $198 = $tdist;
    $199 = Math_imul($197, $198)|0;
    $200 = $min_dist;
    $201 = (($200) + ($199))|0;
    $min_dist = $201;
    $202 = $x;
    $203 = $3;
    $204 = (($202) - ($203))|0;
    $205 = $204;
    $tdist = $205;
    $206 = $tdist;
    $207 = $tdist;
    $208 = Math_imul($206, $207)|0;
    $209 = $max_dist;
    $210 = (($209) + ($208))|0;
    $max_dist = $210;
   } else {
    $211 = $x;
    $212 = $centerc2;
    $213 = ($211|0)<=($212|0);
    if ($213) {
     $214 = $x;
     $215 = $maxc2;
     $216 = (($214) - ($215))|0;
     $217 = $216;
     $tdist = $217;
     $218 = $tdist;
     $219 = $tdist;
     $220 = Math_imul($218, $219)|0;
     $221 = $max_dist;
     $222 = (($221) + ($220))|0;
     $max_dist = $222;
    } else {
     $223 = $x;
     $224 = $3;
     $225 = (($223) - ($224))|0;
     $226 = $225;
     $tdist = $226;
     $227 = $tdist;
     $228 = $tdist;
     $229 = Math_imul($227, $228)|0;
     $230 = $max_dist;
     $231 = (($230) + ($229))|0;
     $max_dist = $231;
    }
   }
  }
  $232 = $min_dist;
  $233 = $i;
  $234 = (($mindist) + ($233<<2)|0);
  HEAP32[$234>>2] = $232;
  $235 = $max_dist;
  $236 = $minmaxdist;
  $237 = ($235|0)<($236|0);
  if ($237) {
   $238 = $max_dist;
   $minmaxdist = $238;
  }
  $239 = $i;
  $240 = (($239) + 1)|0;
  $i = $240;
 }
 $ncolors = 0;
 $i = 0;
 while(1) {
  $241 = $i;
  $242 = $numcolors;
  $243 = ($241|0)<($242|0);
  if (!($243)) {
   break;
  }
  $244 = $i;
  $245 = (($mindist) + ($244<<2)|0);
  $246 = HEAP32[$245>>2]|0;
  $247 = $minmaxdist;
  $248 = ($246|0)<=($247|0);
  if ($248) {
   $249 = $i;
   $250 = $249&255;
   $251 = $ncolors;
   $252 = (($251) + 1)|0;
   $ncolors = $252;
   $253 = $4;
   $254 = (($253) + ($251)|0);
   HEAP8[$254>>0] = $250;
  }
  $255 = $i;
  $256 = (($255) + 1)|0;
  $i = $256;
 }
 $257 = $ncolors;
 STACKTOP = sp;return ($257|0);
}
function _find_best_colors($cinfo,$minc0,$minc1,$minc2,$numcolors,$colorlist,$bestcolor) {
 $cinfo = $cinfo|0;
 $minc0 = $minc0|0;
 $minc1 = $minc1|0;
 $minc2 = $minc2|0;
 $numcolors = $numcolors|0;
 $colorlist = $colorlist|0;
 $bestcolor = $bestcolor|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bestdist = 0, $bptr = 0, $cptr = 0, $dist0 = 0, $dist1 = 0, $dist2 = 0, $i = 0, $ic0 = 0, $ic1 = 0, $ic2 = 0, $icolor = 0, $inc0 = 0, $inc1 = 0, $inc2 = 0;
 var $xx0 = 0, $xx1 = 0, $xx2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0;
 $bestdist = sp;
 $0 = $cinfo;
 $1 = $minc0;
 $2 = $minc1;
 $3 = $minc2;
 $4 = $numcolors;
 $5 = $colorlist;
 $6 = $bestcolor;
 $bptr = $bestdist;
 $i = 127;
 while(1) {
  $7 = $i;
  $8 = ($7|0)>=(0);
  if (!($8)) {
   break;
  }
  $9 = $bptr;
  $10 = (($9) + 4|0);
  $bptr = $10;
  HEAP32[$9>>2] = 2147483647;
  $11 = $i;
  $12 = (($11) + -1)|0;
  $i = $12;
 }
 $i = 0;
 while(1) {
  $13 = $i;
  $14 = $4;
  $15 = ($13|0)<($14|0);
  if (!($15)) {
   break;
  }
  $16 = $i;
  $17 = $5;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $icolor = $20;
  $21 = $1;
  $22 = $icolor;
  $23 = $0;
  $24 = (($23) + 136|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + ($22)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = (($21) - ($29))|0;
  $31 = $30<<1;
  $inc0 = $31;
  $32 = $inc0;
  $33 = $inc0;
  $34 = Math_imul($32, $33)|0;
  $dist0 = $34;
  $35 = $2;
  $36 = $icolor;
  $37 = $0;
  $38 = (($37) + 136|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($39) + 4|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($41) + ($36)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = (($35) - ($44))|0;
  $46 = ($45*3)|0;
  $inc1 = $46;
  $47 = $inc1;
  $48 = $inc1;
  $49 = Math_imul($47, $48)|0;
  $50 = $dist0;
  $51 = (($50) + ($49))|0;
  $dist0 = $51;
  $52 = $3;
  $53 = $icolor;
  $54 = $0;
  $55 = (($54) + 136|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($58) + ($53)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (($52) - ($61))|0;
  $63 = $62;
  $inc2 = $63;
  $64 = $inc2;
  $65 = $inc2;
  $66 = Math_imul($64, $65)|0;
  $67 = $dist0;
  $68 = (($67) + ($66))|0;
  $dist0 = $68;
  $69 = $inc0;
  $70 = $69<<5;
  $71 = (($70) + 256)|0;
  $inc0 = $71;
  $72 = $inc1;
  $73 = ($72*24)|0;
  $74 = (($73) + 144)|0;
  $inc1 = $74;
  $75 = $inc2;
  $76 = $75<<4;
  $77 = (($76) + 64)|0;
  $inc2 = $77;
  $bptr = $bestdist;
  $78 = $6;
  $cptr = $78;
  $79 = $inc0;
  $xx0 = $79;
  $ic0 = 3;
  while(1) {
   $80 = $ic0;
   $81 = ($80|0)>=(0);
   if (!($81)) {
    break;
   }
   $82 = $dist0;
   $dist1 = $82;
   $83 = $inc1;
   $xx1 = $83;
   $ic1 = 7;
   while(1) {
    $84 = $ic1;
    $85 = ($84|0)>=(0);
    if (!($85)) {
     break;
    }
    $86 = $dist1;
    $dist2 = $86;
    $87 = $inc2;
    $xx2 = $87;
    $ic2 = 3;
    while(1) {
     $88 = $ic2;
     $89 = ($88|0)>=(0);
     if (!($89)) {
      break;
     }
     $90 = $dist2;
     $91 = $bptr;
     $92 = HEAP32[$91>>2]|0;
     $93 = ($90|0)<($92|0);
     if ($93) {
      $94 = $dist2;
      $95 = $bptr;
      HEAP32[$95>>2] = $94;
      $96 = $icolor;
      $97 = $96&255;
      $98 = $cptr;
      HEAP8[$98>>0] = $97;
     }
     $99 = $xx2;
     $100 = $dist2;
     $101 = (($100) + ($99))|0;
     $dist2 = $101;
     $102 = $xx2;
     $103 = (($102) + 128)|0;
     $xx2 = $103;
     $104 = $bptr;
     $105 = (($104) + 4|0);
     $bptr = $105;
     $106 = $cptr;
     $107 = (($106) + 1|0);
     $cptr = $107;
     $108 = $ic2;
     $109 = (($108) + -1)|0;
     $ic2 = $109;
    }
    $110 = $xx1;
    $111 = $dist1;
    $112 = (($111) + ($110))|0;
    $dist1 = $112;
    $113 = $xx1;
    $114 = (($113) + 288)|0;
    $xx1 = $114;
    $115 = $ic1;
    $116 = (($115) + -1)|0;
    $ic1 = $116;
   }
   $117 = $xx0;
   $118 = $dist0;
   $119 = (($118) + ($117))|0;
   $dist0 = $119;
   $120 = $xx0;
   $121 = (($120) + 512)|0;
   $xx0 = $121;
   $122 = $ic0;
   $123 = (($122) + -1)|0;
   $ic0 = $123;
  }
  $124 = $i;
  $125 = (($124) + 1)|0;
  $i = $125;
 }
 STACKTOP = sp;return;
}
function _select_colors($cinfo,$desired_colors) {
 $cinfo = $cinfo|0;
 $desired_colors = $desired_colors|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $boxlist = 0, $i = 0, $numboxes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $desired_colors;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = HEAP32[$4>>2]|0;
 $6 = $0;
 $7 = $1;
 $8 = $7<<5;
 $9 = (FUNCTION_TABLE_iiii[$5 & 511]($6,1,$8)|0);
 $boxlist = $9;
 $numboxes = 1;
 $10 = $boxlist;
 HEAP32[$10>>2] = 0;
 $11 = $boxlist;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 31;
 $13 = $boxlist;
 $14 = (($13) + 8|0);
 HEAP32[$14>>2] = 0;
 $15 = $boxlist;
 $16 = (($15) + 12|0);
 HEAP32[$16>>2] = 63;
 $17 = $boxlist;
 $18 = (($17) + 16|0);
 HEAP32[$18>>2] = 0;
 $19 = $boxlist;
 $20 = (($19) + 20|0);
 HEAP32[$20>>2] = 31;
 $21 = $0;
 $22 = $boxlist;
 _update_box($21,$22);
 $23 = $0;
 $24 = $boxlist;
 $25 = $numboxes;
 $26 = $1;
 $27 = (_median_cut($23,$24,$25,$26)|0);
 $numboxes = $27;
 $i = 0;
 while(1) {
  $28 = $i;
  $29 = $numboxes;
  $30 = ($28|0)<($29|0);
  if (!($30)) {
   break;
  }
  $31 = $0;
  $32 = $i;
  $33 = $boxlist;
  $34 = (($33) + ($32<<5)|0);
  $35 = $i;
  _compute_color($31,$34,$35);
  $36 = $i;
  $37 = (($36) + 1)|0;
  $i = $37;
 }
 $38 = $numboxes;
 $39 = $0;
 $40 = (($39) + 132|0);
 HEAP32[$40>>2] = $38;
 $41 = $0;
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + 20|0);
 HEAP32[$43>>2] = 98;
 $44 = $numboxes;
 $45 = $0;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + 24|0);
 HEAP32[$47>>2] = $44;
 $48 = $0;
 $49 = HEAP32[$48>>2]|0;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = $0;
 FUNCTION_TABLE_vii[$51 & 511]($52,1);
 STACKTOP = sp;return;
}
function _update_box($cinfo,$boxp) {
 $cinfo = $cinfo|0;
 $boxp = $boxp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c0 = 0, $c0max = 0, $c0min = 0, $c1 = 0, $c1max = 0, $c1min = 0, $c2 = 0;
 var $c2max = 0, $c2min = 0, $ccount = 0, $cquantize = 0, $dist0 = 0, $dist1 = 0, $dist2 = 0, $histogram = 0, $histp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $cinfo;
 $1 = $boxp;
 $2 = $0;
 $3 = (($2) + 484|0);
 $4 = HEAP32[$3>>2]|0;
 $cquantize = $4;
 $5 = $cquantize;
 $6 = (($5) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $histogram = $7;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $c0min = $9;
 $10 = $1;
 $11 = (($10) + 4|0);
 $12 = HEAP32[$11>>2]|0;
 $c0max = $12;
 $13 = $1;
 $14 = (($13) + 8|0);
 $15 = HEAP32[$14>>2]|0;
 $c1min = $15;
 $16 = $1;
 $17 = (($16) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $c1max = $18;
 $19 = $1;
 $20 = (($19) + 16|0);
 $21 = HEAP32[$20>>2]|0;
 $c2min = $21;
 $22 = $1;
 $23 = (($22) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $c2max = $24;
 $25 = $c0max;
 $26 = $c0min;
 $27 = ($25|0)>($26|0);
 do {
  if ($27) {
   $28 = $c0min;
   $c0 = $28;
   L3: while(1) {
    $29 = $c0;
    $30 = $c0max;
    $31 = ($29|0)<=($30|0);
    if (!($31)) {
     label = 16;
     break;
    }
    $32 = $c1min;
    $c1 = $32;
    while(1) {
     $33 = $c1;
     $34 = $c1max;
     $35 = ($33|0)<=($34|0);
     if (!($35)) {
      break;
     }
     $36 = $c2min;
     $37 = $c1;
     $38 = $c0;
     $39 = $histogram;
     $40 = (($39) + ($38<<2)|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (($41) + ($37<<6)|0);
     $43 = (($42) + ($36<<1)|0);
     $histp = $43;
     $44 = $c2min;
     $c2 = $44;
     while(1) {
      $45 = $c2;
      $46 = $c2max;
      $47 = ($45|0)<=($46|0);
      if (!($47)) {
       break;
      }
      $48 = $histp;
      $49 = (($48) + 2|0);
      $histp = $49;
      $50 = HEAP16[$48>>1]|0;
      $51 = $50&65535;
      $52 = ($51|0)!=(0);
      if ($52) {
       label = 9;
       break L3;
      }
      $55 = $c2;
      $56 = (($55) + 1)|0;
      $c2 = $56;
     }
     $57 = $c1;
     $58 = (($57) + 1)|0;
     $c1 = $58;
    }
    $59 = $c0;
    $60 = (($59) + 1)|0;
    $c0 = $60;
   }
   if ((label|0) == 9) {
    $53 = $c0;
    $c0min = $53;
    $54 = $1;
    HEAP32[$54>>2] = $53;
    break;
   }
   else if ((label|0) == 16) {
    label = 17;
    break;
   }
  } else {
   label = 17;
  }
 } while(0);
 if ((label|0) == 17) {
 }
 $61 = $c0max;
 $62 = $c0min;
 $63 = ($61|0)>($62|0);
 do {
  if ($63) {
   $64 = $c0max;
   $c0 = $64;
   L26: while(1) {
    $65 = $c0;
    $66 = $c0min;
    $67 = ($65|0)>=($66|0);
    if (!($67)) {
     label = 33;
     break;
    }
    $68 = $c1min;
    $c1 = $68;
    while(1) {
     $69 = $c1;
     $70 = $c1max;
     $71 = ($69|0)<=($70|0);
     if (!($71)) {
      break;
     }
     $72 = $c2min;
     $73 = $c1;
     $74 = $c0;
     $75 = $histogram;
     $76 = (($75) + ($74<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + ($73<<6)|0);
     $79 = (($78) + ($72<<1)|0);
     $histp = $79;
     $80 = $c2min;
     $c2 = $80;
     while(1) {
      $81 = $c2;
      $82 = $c2max;
      $83 = ($81|0)<=($82|0);
      if (!($83)) {
       break;
      }
      $84 = $histp;
      $85 = (($84) + 2|0);
      $histp = $85;
      $86 = HEAP16[$84>>1]|0;
      $87 = $86&65535;
      $88 = ($87|0)!=(0);
      if ($88) {
       label = 26;
       break L26;
      }
      $92 = $c2;
      $93 = (($92) + 1)|0;
      $c2 = $93;
     }
     $94 = $c1;
     $95 = (($94) + 1)|0;
     $c1 = $95;
    }
    $96 = $c0;
    $97 = (($96) + -1)|0;
    $c0 = $97;
   }
   if ((label|0) == 26) {
    $89 = $c0;
    $c0max = $89;
    $90 = $1;
    $91 = (($90) + 4|0);
    HEAP32[$91>>2] = $89;
    break;
   }
   else if ((label|0) == 33) {
    label = 34;
    break;
   }
  } else {
   label = 34;
  }
 } while(0);
 if ((label|0) == 34) {
 }
 $98 = $c1max;
 $99 = $c1min;
 $100 = ($98|0)>($99|0);
 do {
  if ($100) {
   $101 = $c1min;
   $c1 = $101;
   L49: while(1) {
    $102 = $c1;
    $103 = $c1max;
    $104 = ($102|0)<=($103|0);
    if (!($104)) {
     label = 50;
     break;
    }
    $105 = $c0min;
    $c0 = $105;
    while(1) {
     $106 = $c0;
     $107 = $c0max;
     $108 = ($106|0)<=($107|0);
     if (!($108)) {
      break;
     }
     $109 = $c2min;
     $110 = $c1;
     $111 = $c0;
     $112 = $histogram;
     $113 = (($112) + ($111<<2)|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = (($114) + ($110<<6)|0);
     $116 = (($115) + ($109<<1)|0);
     $histp = $116;
     $117 = $c2min;
     $c2 = $117;
     while(1) {
      $118 = $c2;
      $119 = $c2max;
      $120 = ($118|0)<=($119|0);
      if (!($120)) {
       break;
      }
      $121 = $histp;
      $122 = (($121) + 2|0);
      $histp = $122;
      $123 = HEAP16[$121>>1]|0;
      $124 = $123&65535;
      $125 = ($124|0)!=(0);
      if ($125) {
       label = 43;
       break L49;
      }
      $129 = $c2;
      $130 = (($129) + 1)|0;
      $c2 = $130;
     }
     $131 = $c0;
     $132 = (($131) + 1)|0;
     $c0 = $132;
    }
    $133 = $c1;
    $134 = (($133) + 1)|0;
    $c1 = $134;
   }
   if ((label|0) == 43) {
    $126 = $c1;
    $c1min = $126;
    $127 = $1;
    $128 = (($127) + 8|0);
    HEAP32[$128>>2] = $126;
    break;
   }
   else if ((label|0) == 50) {
    label = 51;
    break;
   }
  } else {
   label = 51;
  }
 } while(0);
 if ((label|0) == 51) {
 }
 $135 = $c1max;
 $136 = $c1min;
 $137 = ($135|0)>($136|0);
 do {
  if ($137) {
   $138 = $c1max;
   $c1 = $138;
   L72: while(1) {
    $139 = $c1;
    $140 = $c1min;
    $141 = ($139|0)>=($140|0);
    if (!($141)) {
     label = 67;
     break;
    }
    $142 = $c0min;
    $c0 = $142;
    while(1) {
     $143 = $c0;
     $144 = $c0max;
     $145 = ($143|0)<=($144|0);
     if (!($145)) {
      break;
     }
     $146 = $c2min;
     $147 = $c1;
     $148 = $c0;
     $149 = $histogram;
     $150 = (($149) + ($148<<2)|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = (($151) + ($147<<6)|0);
     $153 = (($152) + ($146<<1)|0);
     $histp = $153;
     $154 = $c2min;
     $c2 = $154;
     while(1) {
      $155 = $c2;
      $156 = $c2max;
      $157 = ($155|0)<=($156|0);
      if (!($157)) {
       break;
      }
      $158 = $histp;
      $159 = (($158) + 2|0);
      $histp = $159;
      $160 = HEAP16[$158>>1]|0;
      $161 = $160&65535;
      $162 = ($161|0)!=(0);
      if ($162) {
       label = 60;
       break L72;
      }
      $166 = $c2;
      $167 = (($166) + 1)|0;
      $c2 = $167;
     }
     $168 = $c0;
     $169 = (($168) + 1)|0;
     $c0 = $169;
    }
    $170 = $c1;
    $171 = (($170) + -1)|0;
    $c1 = $171;
   }
   if ((label|0) == 60) {
    $163 = $c1;
    $c1max = $163;
    $164 = $1;
    $165 = (($164) + 12|0);
    HEAP32[$165>>2] = $163;
    break;
   }
   else if ((label|0) == 67) {
    label = 68;
    break;
   }
  } else {
   label = 68;
  }
 } while(0);
 if ((label|0) == 68) {
 }
 $172 = $c2max;
 $173 = $c2min;
 $174 = ($172|0)>($173|0);
 do {
  if ($174) {
   $175 = $c2min;
   $c2 = $175;
   L95: while(1) {
    $176 = $c2;
    $177 = $c2max;
    $178 = ($176|0)<=($177|0);
    if (!($178)) {
     label = 84;
     break;
    }
    $179 = $c0min;
    $c0 = $179;
    while(1) {
     $180 = $c0;
     $181 = $c0max;
     $182 = ($180|0)<=($181|0);
     if (!($182)) {
      break;
     }
     $183 = $c2;
     $184 = $c1min;
     $185 = $c0;
     $186 = $histogram;
     $187 = (($186) + ($185<<2)|0);
     $188 = HEAP32[$187>>2]|0;
     $189 = (($188) + ($184<<6)|0);
     $190 = (($189) + ($183<<1)|0);
     $histp = $190;
     $191 = $c1min;
     $c1 = $191;
     while(1) {
      $192 = $c1;
      $193 = $c1max;
      $194 = ($192|0)<=($193|0);
      if (!($194)) {
       break;
      }
      $195 = $histp;
      $196 = HEAP16[$195>>1]|0;
      $197 = $196&65535;
      $198 = ($197|0)!=(0);
      if ($198) {
       label = 77;
       break L95;
      }
      $202 = $c1;
      $203 = (($202) + 1)|0;
      $c1 = $203;
      $204 = $histp;
      $205 = (($204) + 64|0);
      $histp = $205;
     }
     $206 = $c0;
     $207 = (($206) + 1)|0;
     $c0 = $207;
    }
    $208 = $c2;
    $209 = (($208) + 1)|0;
    $c2 = $209;
   }
   if ((label|0) == 77) {
    $199 = $c2;
    $c2min = $199;
    $200 = $1;
    $201 = (($200) + 16|0);
    HEAP32[$201>>2] = $199;
    break;
   }
   else if ((label|0) == 84) {
    label = 85;
    break;
   }
  } else {
   label = 85;
  }
 } while(0);
 if ((label|0) == 85) {
 }
 $210 = $c2max;
 $211 = $c2min;
 $212 = ($210|0)>($211|0);
 do {
  if ($212) {
   $213 = $c2max;
   $c2 = $213;
   L118: while(1) {
    $214 = $c2;
    $215 = $c2min;
    $216 = ($214|0)>=($215|0);
    if (!($216)) {
     label = 101;
     break;
    }
    $217 = $c0min;
    $c0 = $217;
    while(1) {
     $218 = $c0;
     $219 = $c0max;
     $220 = ($218|0)<=($219|0);
     if (!($220)) {
      break;
     }
     $221 = $c2;
     $222 = $c1min;
     $223 = $c0;
     $224 = $histogram;
     $225 = (($224) + ($223<<2)|0);
     $226 = HEAP32[$225>>2]|0;
     $227 = (($226) + ($222<<6)|0);
     $228 = (($227) + ($221<<1)|0);
     $histp = $228;
     $229 = $c1min;
     $c1 = $229;
     while(1) {
      $230 = $c1;
      $231 = $c1max;
      $232 = ($230|0)<=($231|0);
      if (!($232)) {
       break;
      }
      $233 = $histp;
      $234 = HEAP16[$233>>1]|0;
      $235 = $234&65535;
      $236 = ($235|0)!=(0);
      if ($236) {
       label = 94;
       break L118;
      }
      $240 = $c1;
      $241 = (($240) + 1)|0;
      $c1 = $241;
      $242 = $histp;
      $243 = (($242) + 64|0);
      $histp = $243;
     }
     $244 = $c0;
     $245 = (($244) + 1)|0;
     $c0 = $245;
    }
    $246 = $c2;
    $247 = (($246) + -1)|0;
    $c2 = $247;
   }
   if ((label|0) == 94) {
    $237 = $c2;
    $c2max = $237;
    $238 = $1;
    $239 = (($238) + 20|0);
    HEAP32[$239>>2] = $237;
    break;
   }
   else if ((label|0) == 101) {
    label = 102;
    break;
   }
  } else {
   label = 102;
  }
 } while(0);
 if ((label|0) == 102) {
 }
 $248 = $c0max;
 $249 = $c0min;
 $250 = (($248) - ($249))|0;
 $251 = $250 << 3;
 $252 = $251<<1;
 $dist0 = $252;
 $253 = $c1max;
 $254 = $c1min;
 $255 = (($253) - ($254))|0;
 $256 = $255 << 2;
 $257 = ($256*3)|0;
 $dist1 = $257;
 $258 = $c2max;
 $259 = $c2min;
 $260 = (($258) - ($259))|0;
 $261 = $260 << 3;
 $262 = $261;
 $dist2 = $262;
 $263 = $dist0;
 $264 = $dist0;
 $265 = Math_imul($263, $264)|0;
 $266 = $dist1;
 $267 = $dist1;
 $268 = Math_imul($266, $267)|0;
 $269 = (($265) + ($268))|0;
 $270 = $dist2;
 $271 = $dist2;
 $272 = Math_imul($270, $271)|0;
 $273 = (($269) + ($272))|0;
 $274 = $1;
 $275 = (($274) + 24|0);
 HEAP32[$275>>2] = $273;
 $ccount = 0;
 $276 = $c0min;
 $c0 = $276;
 while(1) {
  $277 = $c0;
  $278 = $c0max;
  $279 = ($277|0)<=($278|0);
  if (!($279)) {
   break;
  }
  $280 = $c1min;
  $c1 = $280;
  while(1) {
   $281 = $c1;
   $282 = $c1max;
   $283 = ($281|0)<=($282|0);
   if (!($283)) {
    break;
   }
   $284 = $c2min;
   $285 = $c1;
   $286 = $c0;
   $287 = $histogram;
   $288 = (($287) + ($286<<2)|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = (($289) + ($285<<6)|0);
   $291 = (($290) + ($284<<1)|0);
   $histp = $291;
   $292 = $c2min;
   $c2 = $292;
   while(1) {
    $293 = $c2;
    $294 = $c2max;
    $295 = ($293|0)<=($294|0);
    if (!($295)) {
     break;
    }
    $296 = $histp;
    $297 = HEAP16[$296>>1]|0;
    $298 = $297&65535;
    $299 = ($298|0)!=(0);
    if ($299) {
     $300 = $ccount;
     $301 = (($300) + 1)|0;
     $ccount = $301;
    }
    $302 = $c2;
    $303 = (($302) + 1)|0;
    $c2 = $303;
    $304 = $histp;
    $305 = (($304) + 2|0);
    $histp = $305;
   }
   $306 = $c1;
   $307 = (($306) + 1)|0;
   $c1 = $307;
  }
  $308 = $c0;
  $309 = (($308) + 1)|0;
  $c0 = $309;
 }
 $310 = $ccount;
 $311 = $1;
 $312 = (($311) + 28|0);
 HEAP32[$312>>2] = $310;
 STACKTOP = sp;return;
}
function _median_cut($cinfo,$boxlist,$numboxes,$desired_colors) {
 $cinfo = $cinfo|0;
 $boxlist = $boxlist|0;
 $numboxes = $numboxes|0;
 $desired_colors = $desired_colors|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b1 = 0, $b2 = 0, $c0 = 0, $c1 = 0, $c2 = 0;
 var $cmax = 0, $lb = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $boxlist;
 $2 = $numboxes;
 $3 = $desired_colors;
 while(1) {
  $4 = $2;
  $5 = $3;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   label = 17;
   break;
  }
  $7 = $2;
  $8 = $7<<1;
  $9 = $3;
  $10 = ($8|0)<=($9|0);
  if ($10) {
   $11 = $1;
   $12 = $2;
   $13 = (_find_biggest_color_pop($11,$12)|0);
   $b1 = $13;
  } else {
   $14 = $1;
   $15 = $2;
   $16 = (_find_biggest_volume($14,$15)|0);
   $b1 = $16;
  }
  $17 = $b1;
  $18 = ($17|0)==(0|0);
  if ($18) {
   break;
  }
  $19 = $2;
  $20 = $1;
  $21 = (($20) + ($19<<5)|0);
  $b2 = $21;
  $22 = $b1;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = $b2;
  $26 = (($25) + 4|0);
  HEAP32[$26>>2] = $24;
  $27 = $b1;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $b2;
  $31 = (($30) + 12|0);
  HEAP32[$31>>2] = $29;
  $32 = $b1;
  $33 = (($32) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $b2;
  $36 = (($35) + 20|0);
  HEAP32[$36>>2] = $34;
  $37 = $b1;
  $38 = HEAP32[$37>>2]|0;
  $39 = $b2;
  HEAP32[$39>>2] = $38;
  $40 = $b1;
  $41 = (($40) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $b2;
  $44 = (($43) + 8|0);
  HEAP32[$44>>2] = $42;
  $45 = $b1;
  $46 = (($45) + 16|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $b2;
  $49 = (($48) + 16|0);
  HEAP32[$49>>2] = $47;
  $50 = $b1;
  $51 = (($50) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $b1;
  $54 = HEAP32[$53>>2]|0;
  $55 = (($52) - ($54))|0;
  $56 = $55 << 3;
  $57 = $56<<1;
  $c0 = $57;
  $58 = $b1;
  $59 = (($58) + 12|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = $b1;
  $62 = (($61) + 8|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($60) - ($63))|0;
  $65 = $64 << 2;
  $66 = ($65*3)|0;
  $c1 = $66;
  $67 = $b1;
  $68 = (($67) + 20|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = $b1;
  $71 = (($70) + 16|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($69) - ($72))|0;
  $74 = $73 << 3;
  $75 = $74;
  $c2 = $75;
  $76 = $c1;
  $cmax = $76;
  $n = 1;
  $77 = $c0;
  $78 = $cmax;
  $79 = ($77|0)>($78|0);
  if ($79) {
   $80 = $c0;
   $cmax = $80;
   $n = 0;
  }
  $81 = $c2;
  $82 = $cmax;
  $83 = ($81|0)>($82|0);
  if ($83) {
   $n = 2;
  }
  $84 = $n;
  if ((($84|0) == 2)) {
   $113 = $b1;
   $114 = (($113) + 20|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $b1;
   $117 = (($116) + 16|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = (($115) + ($118))|0;
   $120 = (($119|0) / 2)&-1;
   $lb = $120;
   $121 = $lb;
   $122 = $b1;
   $123 = (($122) + 20|0);
   HEAP32[$123>>2] = $121;
   $124 = $lb;
   $125 = (($124) + 1)|0;
   $126 = $b2;
   $127 = (($126) + 16|0);
   HEAP32[$127>>2] = $125;
  } else if ((($84|0) == 1)) {
   $98 = $b1;
   $99 = (($98) + 12|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = $b1;
   $102 = (($101) + 8|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($100) + ($103))|0;
   $105 = (($104|0) / 2)&-1;
   $lb = $105;
   $106 = $lb;
   $107 = $b1;
   $108 = (($107) + 12|0);
   HEAP32[$108>>2] = $106;
   $109 = $lb;
   $110 = (($109) + 1)|0;
   $111 = $b2;
   $112 = (($111) + 8|0);
   HEAP32[$112>>2] = $110;
  } else if ((($84|0) == 0)) {
   $85 = $b1;
   $86 = (($85) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = $b1;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($87) + ($89))|0;
   $91 = (($90|0) / 2)&-1;
   $lb = $91;
   $92 = $lb;
   $93 = $b1;
   $94 = (($93) + 4|0);
   HEAP32[$94>>2] = $92;
   $95 = $lb;
   $96 = (($95) + 1)|0;
   $97 = $b2;
   HEAP32[$97>>2] = $96;
  }
  $128 = $0;
  $129 = $b1;
  _update_box($128,$129);
  $130 = $0;
  $131 = $b2;
  _update_box($130,$131);
  $132 = $2;
  $133 = (($132) + 1)|0;
  $2 = $133;
 }
 if ((label|0) == 17) {
  $134 = $2;
  STACKTOP = sp;return ($134|0);
 }
 $134 = $2;
 STACKTOP = sp;return ($134|0);
}
function _compute_color($cinfo,$boxp,$icolor) {
 $cinfo = $cinfo|0;
 $boxp = $boxp|0;
 $icolor = $icolor|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c0 = 0, $c0max = 0, $c0min = 0, $c0total = 0, $c1 = 0, $c1max = 0, $c1min = 0, $c1total = 0, $c2 = 0, $c2max = 0, $c2min = 0, $c2total = 0, $count = 0, $cquantize = 0, $histogram = 0, $histp = 0, $total = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $0 = $cinfo;
 $1 = $boxp;
 $2 = $icolor;
 $3 = $0;
 $4 = (($3) + 484|0);
 $5 = HEAP32[$4>>2]|0;
 $cquantize = $5;
 $6 = $cquantize;
 $7 = (($6) + 24|0);
 $8 = HEAP32[$7>>2]|0;
 $histogram = $8;
 $total = 0;
 $c0total = 0;
 $c1total = 0;
 $c2total = 0;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $c0min = $10;
 $11 = $1;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $c0max = $13;
 $14 = $1;
 $15 = (($14) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $c1min = $16;
 $17 = $1;
 $18 = (($17) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $c1max = $19;
 $20 = $1;
 $21 = (($20) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $c2min = $22;
 $23 = $1;
 $24 = (($23) + 20|0);
 $25 = HEAP32[$24>>2]|0;
 $c2max = $25;
 $26 = $c0min;
 $c0 = $26;
 while(1) {
  $27 = $c0;
  $28 = $c0max;
  $29 = ($27|0)<=($28|0);
  if (!($29)) {
   break;
  }
  $30 = $c1min;
  $c1 = $30;
  while(1) {
   $31 = $c1;
   $32 = $c1max;
   $33 = ($31|0)<=($32|0);
   if (!($33)) {
    break;
   }
   $34 = $c2min;
   $35 = $c1;
   $36 = $c0;
   $37 = $histogram;
   $38 = (($37) + ($36<<2)|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) + ($35<<6)|0);
   $41 = (($40) + ($34<<1)|0);
   $histp = $41;
   $42 = $c2min;
   $c2 = $42;
   while(1) {
    $43 = $c2;
    $44 = $c2max;
    $45 = ($43|0)<=($44|0);
    if (!($45)) {
     break;
    }
    $46 = $histp;
    $47 = (($46) + 2|0);
    $histp = $47;
    $48 = HEAP16[$46>>1]|0;
    $49 = $48&65535;
    $count = $49;
    $50 = ($49|0)!=(0);
    if ($50) {
     $51 = $count;
     $52 = $total;
     $53 = (($52) + ($51))|0;
     $total = $53;
     $54 = $c0;
     $55 = $54 << 3;
     $56 = (($55) + 4)|0;
     $57 = $count;
     $58 = Math_imul($56, $57)|0;
     $59 = $c0total;
     $60 = (($59) + ($58))|0;
     $c0total = $60;
     $61 = $c1;
     $62 = $61 << 2;
     $63 = (($62) + 2)|0;
     $64 = $count;
     $65 = Math_imul($63, $64)|0;
     $66 = $c1total;
     $67 = (($66) + ($65))|0;
     $c1total = $67;
     $68 = $c2;
     $69 = $68 << 3;
     $70 = (($69) + 4)|0;
     $71 = $count;
     $72 = Math_imul($70, $71)|0;
     $73 = $c2total;
     $74 = (($73) + ($72))|0;
     $c2total = $74;
    }
    $75 = $c2;
    $76 = (($75) + 1)|0;
    $c2 = $76;
   }
   $77 = $c1;
   $78 = (($77) + 1)|0;
   $c1 = $78;
  }
  $79 = $c0;
  $80 = (($79) + 1)|0;
  $c0 = $80;
 }
 $81 = $c0total;
 $82 = $total;
 $83 = $82 >> 1;
 $84 = (($81) + ($83))|0;
 $85 = $total;
 $86 = (($84|0) / ($85|0))&-1;
 $87 = $86&255;
 $88 = $2;
 $89 = $0;
 $90 = (($89) + 136|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + ($88)|0);
 HEAP8[$93>>0] = $87;
 $94 = $c1total;
 $95 = $total;
 $96 = $95 >> 1;
 $97 = (($94) + ($96))|0;
 $98 = $total;
 $99 = (($97|0) / ($98|0))&-1;
 $100 = $99&255;
 $101 = $2;
 $102 = $0;
 $103 = (($102) + 136|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + ($101)|0);
 HEAP8[$107>>0] = $100;
 $108 = $c2total;
 $109 = $total;
 $110 = $109 >> 1;
 $111 = (($108) + ($110))|0;
 $112 = $total;
 $113 = (($111|0) / ($112|0))&-1;
 $114 = $113&255;
 $115 = $2;
 $116 = $0;
 $117 = (($116) + 136|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = (($118) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = (($120) + ($115)|0);
 HEAP8[$121>>0] = $114;
 STACKTOP = sp;return;
}
function _find_biggest_color_pop($boxlist,$numboxes) {
 $boxlist = $boxlist|0;
 $numboxes = $numboxes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $boxp = 0, $i = 0, $maxc = 0, $which = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $boxlist;
 $1 = $numboxes;
 $maxc = 0;
 $which = 0;
 $i = 0;
 $2 = $0;
 $boxp = $2;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $boxp;
  $7 = (($6) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $maxc;
  $10 = ($8|0)>($9|0);
  if ($10) {
   $11 = $boxp;
   $12 = (($11) + 24|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)>(0);
   if ($14) {
    $15 = $boxp;
    $which = $15;
    $16 = $boxp;
    $17 = (($16) + 28|0);
    $18 = HEAP32[$17>>2]|0;
    $maxc = $18;
   }
  }
  $19 = $i;
  $20 = (($19) + 1)|0;
  $i = $20;
  $21 = $boxp;
  $22 = (($21) + 32|0);
  $boxp = $22;
 }
 $23 = $which;
 STACKTOP = sp;return ($23|0);
}
function _find_biggest_volume($boxlist,$numboxes) {
 $boxlist = $boxlist|0;
 $numboxes = $numboxes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $boxp = 0, $i = 0, $maxv = 0, $which = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $boxlist;
 $1 = $numboxes;
 $maxv = 0;
 $which = 0;
 $i = 0;
 $2 = $0;
 $boxp = $2;
 while(1) {
  $3 = $i;
  $4 = $1;
  $5 = ($3|0)<($4|0);
  if (!($5)) {
   break;
  }
  $6 = $boxp;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $maxv;
  $10 = ($8|0)>($9|0);
  if ($10) {
   $11 = $boxp;
   $which = $11;
   $12 = $boxp;
   $13 = (($12) + 24|0);
   $14 = HEAP32[$13>>2]|0;
   $maxv = $14;
  }
  $15 = $i;
  $16 = (($15) + 1)|0;
  $i = $16;
  $17 = $boxp;
  $18 = (($17) + 32|0);
  $boxp = $18;
 }
 $19 = $which;
 STACKTOP = sp;return ($19|0);
}
function _jdiv_round_up($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + ($3))|0;
 $5 = (($4) - 1)|0;
 $6 = $1;
 $7 = (($5|0) / ($6|0))&-1;
 STACKTOP = sp;return ($7|0);
}
function _jround_up($a,$b) {
 $a = $a|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $a;
 $1 = $b;
 $2 = $1;
 $3 = (($2) - 1)|0;
 $4 = $0;
 $5 = (($4) + ($3))|0;
 $0 = $5;
 $6 = $0;
 $7 = $0;
 $8 = $1;
 $9 = (($7|0) % ($8|0))&-1;
 $10 = (($6) - ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function _jcopy_sample_rows($input_array,$source_row,$output_array,$dest_row,$num_rows,$num_cols) {
 $input_array = $input_array|0;
 $source_row = $source_row|0;
 $output_array = $output_array|0;
 $dest_row = $dest_row|0;
 $num_rows = $num_rows|0;
 $num_cols = $num_cols|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $count = 0, $inptr = 0, $outptr = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $input_array;
 $1 = $source_row;
 $2 = $output_array;
 $3 = $dest_row;
 $4 = $num_rows;
 $5 = $num_cols;
 $6 = $5;
 $7 = $6;
 $count = $7;
 $8 = $1;
 $9 = $0;
 $10 = (($9) + ($8<<2)|0);
 $0 = $10;
 $11 = $3;
 $12 = $2;
 $13 = (($12) + ($11<<2)|0);
 $2 = $13;
 $14 = $4;
 $row = $14;
 while(1) {
  $15 = $row;
  $16 = ($15|0)>(0);
  if (!($16)) {
   break;
  }
  $17 = $0;
  $18 = (($17) + 4|0);
  $0 = $18;
  $19 = HEAP32[$17>>2]|0;
  $inptr = $19;
  $20 = $2;
  $21 = (($20) + 4|0);
  $2 = $21;
  $22 = HEAP32[$20>>2]|0;
  $outptr = $22;
  $23 = $outptr;
  $24 = $inptr;
  $25 = $count;
  _memcpy(($23|0),($24|0),($25|0))|0;
  $26 = $row;
  $27 = (($26) + -1)|0;
  $row = $27;
 }
 STACKTOP = sp;return;
}
function _jcopy_block_row($input_row,$output_row,$num_blocks) {
 $input_row = $input_row|0;
 $output_row = $output_row|0;
 $num_blocks = $num_blocks|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $input_row;
 $1 = $output_row;
 $2 = $num_blocks;
 $3 = $1;
 $4 = $0;
 $5 = $2;
 $6 = $5<<7;
 _memcpy(($3|0),($4|0),($6|0))|0;
 STACKTOP = sp;return;
}
function _jinit_memory_mgr($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $ch = 0, $max_to_use = 0, $mem = 0, $memenv = 0, $pool = 0, $test_mac = 0, $vararg_buffer = 0;
 var $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp;
 $max_to_use = sp + 20|0;
 $ch = sp + 32|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = 0;
 $test_mac = 1000000000;
 $3 = $test_mac;
 $4 = ($3|0)!=(1000000000);
 if ($4) {
  $5 = $0;
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + 20|0);
  HEAP32[$7>>2] = 2;
  $8 = $0;
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$9>>2]|0;
  $11 = $0;
  FUNCTION_TABLE_vi[$10 & 511]($11);
 }
 $12 = $0;
 $13 = (_jpeg_mem_init($12)|0);
 HEAP32[$max_to_use>>2] = $13;
 $14 = $0;
 $15 = (_jpeg_get_small($14,84)|0);
 $mem = $15;
 $16 = $mem;
 $17 = ($16|0)==(0|0);
 if ($17) {
  $18 = $0;
  _jpeg_mem_term($18);
  $19 = $0;
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 20|0);
  HEAP32[$21>>2] = 56;
  $22 = $0;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($23) + 24|0);
  HEAP32[$24>>2] = 0;
  $25 = $0;
  $26 = HEAP32[$25>>2]|0;
  $27 = HEAP32[$26>>2]|0;
  $28 = $0;
  FUNCTION_TABLE_vi[$27 & 511]($28);
 }
 $29 = $mem;
 HEAP32[$29>>2] = 260;
 $30 = $mem;
 $31 = (($30) + 4|0);
 HEAP32[$31>>2] = 261;
 $32 = $mem;
 $33 = (($32) + 8|0);
 HEAP32[$33>>2] = 262;
 $34 = $mem;
 $35 = (($34) + 12|0);
 HEAP32[$35>>2] = 263;
 $36 = $mem;
 $37 = (($36) + 16|0);
 HEAP32[$37>>2] = 264;
 $38 = $mem;
 $39 = (($38) + 20|0);
 HEAP32[$39>>2] = 265;
 $40 = $mem;
 $41 = (($40) + 24|0);
 HEAP32[$41>>2] = 266;
 $42 = $mem;
 $43 = (($42) + 28|0);
 HEAP32[$43>>2] = 267;
 $44 = $mem;
 $45 = (($44) + 32|0);
 HEAP32[$45>>2] = 268;
 $46 = $mem;
 $47 = (($46) + 36|0);
 HEAP32[$47>>2] = 269;
 $48 = $mem;
 $49 = (($48) + 40|0);
 HEAP32[$49>>2] = 270;
 $50 = $mem;
 $51 = (($50) + 48|0);
 HEAP32[$51>>2] = 1000000000;
 $52 = HEAP32[$max_to_use>>2]|0;
 $53 = $mem;
 $54 = (($53) + 44|0);
 HEAP32[$54>>2] = $52;
 $pool = 1;
 while(1) {
  $55 = $pool;
  $56 = ($55|0)>=(0);
  if (!($56)) {
   break;
  }
  $57 = $pool;
  $58 = $mem;
  $59 = (($58) + 52|0);
  $60 = (($59) + ($57<<2)|0);
  HEAP32[$60>>2] = 0;
  $61 = $pool;
  $62 = $mem;
  $63 = (($62) + 60|0);
  $64 = (($63) + ($61<<2)|0);
  HEAP32[$64>>2] = 0;
  $65 = $pool;
  $66 = (($65) + -1)|0;
  $pool = $66;
 }
 $67 = $mem;
 $68 = (($67) + 68|0);
 HEAP32[$68>>2] = 0;
 $69 = $mem;
 $70 = (($69) + 72|0);
 HEAP32[$70>>2] = 0;
 $71 = $mem;
 $72 = (($71) + 76|0);
 HEAP32[$72>>2] = 84;
 $73 = $mem;
 $74 = $0;
 $75 = (($74) + 4|0);
 HEAP32[$75>>2] = $73;
 $76 = (_getenv((10160|0))|0);
 $memenv = $76;
 $77 = ($76|0)!=(0|0);
 if (!($77)) {
  STACKTOP = sp;return;
 }
 HEAP8[$ch>>0] = 120;
 $78 = $memenv;
 HEAP32[$vararg_buffer>>2] = $max_to_use;
 $vararg_ptr1 = (($vararg_buffer) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $ch;
 $79 = (_sscanf($78,10168,$vararg_buffer)|0);
 $80 = ($79|0)>(0);
 if ($80) {
  $81 = HEAP8[$ch>>0]|0;
  $82 = $81 << 24 >> 24;
  $83 = ($82|0)==(109);
  if ($83) {
   label = 13;
  } else {
   $84 = HEAP8[$ch>>0]|0;
   $85 = $84 << 24 >> 24;
   $86 = ($85|0)==(77);
   if ($86) {
    label = 13;
   }
  }
  if ((label|0) == 13) {
   $87 = HEAP32[$max_to_use>>2]|0;
   $88 = ($87*1000)|0;
   HEAP32[$max_to_use>>2] = $88;
  }
  $89 = HEAP32[$max_to_use>>2]|0;
  $90 = ($89*1000)|0;
  $91 = $mem;
  $92 = (($91) + 44|0);
  HEAP32[$92>>2] = $90;
 }
 STACKTOP = sp;return;
}
function _alloc_small($cinfo,$pool_id,$sizeofobject) {
 $cinfo = $cinfo|0;
 $pool_id = $pool_id|0;
 $sizeofobject = $sizeofobject|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $data_ptr = 0;
 var $hdr_ptr = 0, $mem = 0, $min_request = 0, $odd_bytes = 0, $prev_hdr_ptr = 0, $slop = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $pool_id;
 $2 = $sizeofobject;
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $mem = $5;
 $6 = $2;
 $7 = ($6>>>0)>(999999984);
 if ($7) {
  $8 = $0;
  _out_of_memory($8,1);
 }
 $9 = $2;
 $10 = (($9>>>0) % 8)&-1;
 $odd_bytes = $10;
 $11 = $odd_bytes;
 $12 = ($11>>>0)>(0);
 if ($12) {
  $13 = $odd_bytes;
  $14 = (8 - ($13))|0;
  $15 = $2;
  $16 = (($15) + ($14))|0;
  $2 = $16;
 }
 $17 = $1;
 $18 = ($17|0)<(0);
 if ($18) {
  label = 7;
 } else {
  $19 = $1;
  $20 = ($19|0)>=(2);
  if ($20) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 20|0);
  HEAP32[$23>>2] = 15;
  $24 = $1;
  $25 = $0;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 24|0);
  HEAP32[$27>>2] = $24;
  $28 = $0;
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = $0;
  FUNCTION_TABLE_vi[$30 & 511]($31);
 }
 $prev_hdr_ptr = 0;
 $32 = $1;
 $33 = $mem;
 $34 = (($33) + 52|0);
 $35 = (($34) + ($32<<2)|0);
 $36 = HEAP32[$35>>2]|0;
 $hdr_ptr = $36;
 while(1) {
  $37 = $hdr_ptr;
  $38 = ($37|0)!=(0|0);
  if (!($38)) {
   break;
  }
  $39 = $hdr_ptr;
  $40 = (($39) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $2;
  $43 = ($41>>>0)>=($42>>>0);
  if ($43) {
   label = 11;
   break;
  }
  $44 = $hdr_ptr;
  $prev_hdr_ptr = $44;
  $45 = $hdr_ptr;
  $46 = HEAP32[$45>>2]|0;
  $hdr_ptr = $46;
 }
 if ((label|0) == 11) {
 }
 $47 = $hdr_ptr;
 $48 = ($47|0)==(0|0);
 if (!($48)) {
  $101 = $hdr_ptr;
  $102 = (($101) + 16|0);
  $data_ptr = $102;
  $103 = $hdr_ptr;
  $104 = (($103) + 4|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = $data_ptr;
  $107 = (($106) + ($105)|0);
  $data_ptr = $107;
  $108 = $2;
  $109 = $hdr_ptr;
  $110 = (($109) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = (($111) + ($108))|0;
  HEAP32[$110>>2] = $112;
  $113 = $2;
  $114 = $hdr_ptr;
  $115 = (($114) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($116) - ($113))|0;
  HEAP32[$115>>2] = $117;
  $118 = $data_ptr;
  STACKTOP = sp;return ($118|0);
 }
 $49 = $2;
 $50 = (($49) + 16)|0;
 $min_request = $50;
 $51 = $prev_hdr_ptr;
 $52 = ($51|0)==(0|0);
 if ($52) {
  $53 = $1;
  $54 = (10176 + ($53<<2)|0);
  $55 = HEAP32[$54>>2]|0;
  $slop = $55;
 } else {
  $56 = $1;
  $57 = (10184 + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $slop = $58;
 }
 $59 = $slop;
 $60 = $min_request;
 $61 = (1000000000 - ($60))|0;
 $62 = ($59>>>0)>($61>>>0);
 if ($62) {
  $63 = $min_request;
  $64 = (1000000000 - ($63))|0;
  $slop = $64;
 }
 while(1) {
  $65 = $0;
  $66 = $min_request;
  $67 = $slop;
  $68 = (($66) + ($67))|0;
  $69 = (_jpeg_get_small($65,$68)|0);
  $hdr_ptr = $69;
  $70 = $hdr_ptr;
  $71 = ($70|0)!=(0|0);
  if ($71) {
   break;
  }
  $72 = $slop;
  $73 = (($72>>>0) / 2)&-1;
  $slop = $73;
  $74 = $slop;
  $75 = ($74>>>0)<(50);
  if ($75) {
   $76 = $0;
   _out_of_memory($76,2);
  }
 }
 $77 = $min_request;
 $78 = $slop;
 $79 = (($77) + ($78))|0;
 $80 = $mem;
 $81 = (($80) + 76|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = (($82) + ($79))|0;
 HEAP32[$81>>2] = $83;
 $84 = $hdr_ptr;
 HEAP32[$84>>2] = 0;
 $85 = $hdr_ptr;
 $86 = (($85) + 4|0);
 HEAP32[$86>>2] = 0;
 $87 = $2;
 $88 = $slop;
 $89 = (($87) + ($88))|0;
 $90 = $hdr_ptr;
 $91 = (($90) + 8|0);
 HEAP32[$91>>2] = $89;
 $92 = $prev_hdr_ptr;
 $93 = ($92|0)==(0|0);
 if ($93) {
  $94 = $hdr_ptr;
  $95 = $1;
  $96 = $mem;
  $97 = (($96) + 52|0);
  $98 = (($97) + ($95<<2)|0);
  HEAP32[$98>>2] = $94;
 } else {
  $99 = $hdr_ptr;
  $100 = $prev_hdr_ptr;
  HEAP32[$100>>2] = $99;
 }
 $101 = $hdr_ptr;
 $102 = (($101) + 16|0);
 $data_ptr = $102;
 $103 = $hdr_ptr;
 $104 = (($103) + 4|0);
 $105 = HEAP32[$104>>2]|0;
 $106 = $data_ptr;
 $107 = (($106) + ($105)|0);
 $data_ptr = $107;
 $108 = $2;
 $109 = $hdr_ptr;
 $110 = (($109) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = (($111) + ($108))|0;
 HEAP32[$110>>2] = $112;
 $113 = $2;
 $114 = $hdr_ptr;
 $115 = (($114) + 8|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) - ($113))|0;
 HEAP32[$115>>2] = $117;
 $118 = $data_ptr;
 STACKTOP = sp;return ($118|0);
}
function _alloc_large($cinfo,$pool_id,$sizeofobject) {
 $cinfo = $cinfo|0;
 $pool_id = $pool_id|0;
 $sizeofobject = $sizeofobject|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $hdr_ptr = 0, $mem = 0, $odd_bytes = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $pool_id;
 $2 = $sizeofobject;
 $3 = $0;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $mem = $5;
 $6 = $2;
 $7 = ($6>>>0)>(999999984);
 if ($7) {
  $8 = $0;
  _out_of_memory($8,3);
 }
 $9 = $2;
 $10 = (($9>>>0) % 8)&-1;
 $odd_bytes = $10;
 $11 = $odd_bytes;
 $12 = ($11>>>0)>(0);
 if ($12) {
  $13 = $odd_bytes;
  $14 = (8 - ($13))|0;
  $15 = $2;
  $16 = (($15) + ($14))|0;
  $2 = $16;
 }
 $17 = $1;
 $18 = ($17|0)<(0);
 if ($18) {
  label = 7;
 } else {
  $19 = $1;
  $20 = ($19|0)>=(2);
  if ($20) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 20|0);
  HEAP32[$23>>2] = 15;
  $24 = $1;
  $25 = $0;
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 24|0);
  HEAP32[$27>>2] = $24;
  $28 = $0;
  $29 = HEAP32[$28>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = $0;
  FUNCTION_TABLE_vi[$30 & 511]($31);
 }
 $32 = $0;
 $33 = $2;
 $34 = (($33) + 16)|0;
 $35 = (_jpeg_get_large($32,$34)|0);
 $hdr_ptr = $35;
 $36 = $hdr_ptr;
 $37 = ($36|0)==(0|0);
 if ($37) {
  $38 = $0;
  _out_of_memory($38,4);
 }
 $39 = $2;
 $40 = (($39) + 16)|0;
 $41 = $mem;
 $42 = (($41) + 76|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (($43) + ($40))|0;
 HEAP32[$42>>2] = $44;
 $45 = $1;
 $46 = $mem;
 $47 = (($46) + 60|0);
 $48 = (($47) + ($45<<2)|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $hdr_ptr;
 HEAP32[$50>>2] = $49;
 $51 = $2;
 $52 = $hdr_ptr;
 $53 = (($52) + 4|0);
 HEAP32[$53>>2] = $51;
 $54 = $hdr_ptr;
 $55 = (($54) + 8|0);
 HEAP32[$55>>2] = 0;
 $56 = $hdr_ptr;
 $57 = $1;
 $58 = $mem;
 $59 = (($58) + 60|0);
 $60 = (($59) + ($57<<2)|0);
 HEAP32[$60>>2] = $56;
 $61 = $hdr_ptr;
 $62 = (($61) + 16|0);
 STACKTOP = sp;return ($62|0);
}
function _alloc_sarray($cinfo,$pool_id,$samplesperrow,$numrows) {
 $cinfo = $cinfo|0;
 $pool_id = $pool_id|0;
 $samplesperrow = $samplesperrow|0;
 $numrows = $numrows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $currow = 0, $i = 0, $ltemp = 0, $mem = 0, $result = 0, $rowsperchunk = 0, $workspace = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $pool_id;
 $2 = $samplesperrow;
 $3 = $numrows;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $mem = $6;
 $7 = $2;
 $8 = $7;
 $9 = (999999984 / ($8>>>0))&-1;
 $ltemp = $9;
 $10 = $ltemp;
 $11 = ($10|0)<=(0);
 if ($11) {
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 20|0);
  HEAP32[$14>>2] = 72;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  FUNCTION_TABLE_vi[$17 & 511]($18);
 }
 $19 = $ltemp;
 $20 = $3;
 $21 = ($19|0)<($20|0);
 if ($21) {
  $22 = $ltemp;
  $rowsperchunk = $22;
 } else {
  $23 = $3;
  $rowsperchunk = $23;
 }
 $24 = $rowsperchunk;
 $25 = $mem;
 $26 = (($25) + 80|0);
 HEAP32[$26>>2] = $24;
 $27 = $0;
 $28 = $1;
 $29 = $3;
 $30 = $29<<2;
 $31 = (_alloc_small($27,$28,$30)|0);
 $result = $31;
 $currow = 0;
 while(1) {
  $32 = $currow;
  $33 = $3;
  $34 = ($32>>>0)<($33>>>0);
  if (!($34)) {
   break;
  }
  $35 = $rowsperchunk;
  $36 = $3;
  $37 = $currow;
  $38 = (($36) - ($37))|0;
  $39 = ($35>>>0)<($38>>>0);
  if ($39) {
   $40 = $rowsperchunk;
   $44 = $40;
  } else {
   $41 = $3;
   $42 = $currow;
   $43 = (($41) - ($42))|0;
   $44 = $43;
  }
  $rowsperchunk = $44;
  $45 = $0;
  $46 = $1;
  $47 = $rowsperchunk;
  $48 = $2;
  $49 = Math_imul($47, $48)|0;
  $50 = $49;
  $51 = (_alloc_large($45,$46,$50)|0);
  $workspace = $51;
  $52 = $rowsperchunk;
  $i = $52;
  while(1) {
   $53 = $i;
   $54 = ($53>>>0)>(0);
   if (!($54)) {
    break;
   }
   $55 = $workspace;
   $56 = $currow;
   $57 = (($56) + 1)|0;
   $currow = $57;
   $58 = $result;
   $59 = (($58) + ($56<<2)|0);
   HEAP32[$59>>2] = $55;
   $60 = $2;
   $61 = $workspace;
   $62 = (($61) + ($60)|0);
   $workspace = $62;
   $63 = $i;
   $64 = (($63) + -1)|0;
   $i = $64;
  }
 }
 $65 = $result;
 STACKTOP = sp;return ($65|0);
}
function _alloc_barray($cinfo,$pool_id,$blocksperrow,$numrows) {
 $cinfo = $cinfo|0;
 $pool_id = $pool_id|0;
 $blocksperrow = $blocksperrow|0;
 $numrows = $numrows|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $currow = 0, $i = 0, $ltemp = 0, $mem = 0, $result = 0, $rowsperchunk = 0, $workspace = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $pool_id;
 $2 = $blocksperrow;
 $3 = $numrows;
 $4 = $0;
 $5 = (($4) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $mem = $6;
 $7 = $2;
 $8 = $7<<7;
 $9 = (999999984 / ($8>>>0))&-1;
 $ltemp = $9;
 $10 = $ltemp;
 $11 = ($10|0)<=(0);
 if ($11) {
  $12 = $0;
  $13 = HEAP32[$12>>2]|0;
  $14 = (($13) + 20|0);
  HEAP32[$14>>2] = 72;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$16>>2]|0;
  $18 = $0;
  FUNCTION_TABLE_vi[$17 & 511]($18);
 }
 $19 = $ltemp;
 $20 = $3;
 $21 = ($19|0)<($20|0);
 if ($21) {
  $22 = $ltemp;
  $rowsperchunk = $22;
 } else {
  $23 = $3;
  $rowsperchunk = $23;
 }
 $24 = $rowsperchunk;
 $25 = $mem;
 $26 = (($25) + 80|0);
 HEAP32[$26>>2] = $24;
 $27 = $0;
 $28 = $1;
 $29 = $3;
 $30 = $29<<2;
 $31 = (_alloc_small($27,$28,$30)|0);
 $result = $31;
 $currow = 0;
 while(1) {
  $32 = $currow;
  $33 = $3;
  $34 = ($32>>>0)<($33>>>0);
  if (!($34)) {
   break;
  }
  $35 = $rowsperchunk;
  $36 = $3;
  $37 = $currow;
  $38 = (($36) - ($37))|0;
  $39 = ($35>>>0)<($38>>>0);
  if ($39) {
   $40 = $rowsperchunk;
   $44 = $40;
  } else {
   $41 = $3;
   $42 = $currow;
   $43 = (($41) - ($42))|0;
   $44 = $43;
  }
  $rowsperchunk = $44;
  $45 = $0;
  $46 = $1;
  $47 = $rowsperchunk;
  $48 = $2;
  $49 = Math_imul($47, $48)|0;
  $50 = $49<<7;
  $51 = (_alloc_large($45,$46,$50)|0);
  $workspace = $51;
  $52 = $rowsperchunk;
  $i = $52;
  while(1) {
   $53 = $i;
   $54 = ($53>>>0)>(0);
   if (!($54)) {
    break;
   }
   $55 = $workspace;
   $56 = $currow;
   $57 = (($56) + 1)|0;
   $currow = $57;
   $58 = $result;
   $59 = (($58) + ($56<<2)|0);
   HEAP32[$59>>2] = $55;
   $60 = $2;
   $61 = $workspace;
   $62 = (($61) + ($60<<7)|0);
   $workspace = $62;
   $63 = $i;
   $64 = (($63) + -1)|0;
   $i = $64;
  }
 }
 $65 = $result;
 STACKTOP = sp;return ($65|0);
}
function _request_virt_sarray($cinfo,$pool_id,$pre_zero,$samplesperrow,$numrows,$maxaccess) {
 $cinfo = $cinfo|0;
 $pool_id = $pool_id|0;
 $pre_zero = $pre_zero|0;
 $samplesperrow = $samplesperrow|0;
 $numrows = $numrows|0;
 $maxaccess = $maxaccess|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $pool_id;
 $2 = $pre_zero;
 $3 = $samplesperrow;
 $4 = $numrows;
 $5 = $maxaccess;
 $6 = $0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $mem = $8;
 $9 = $1;
 $10 = ($9|0)!=(1);
 if ($10) {
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 20|0);
  HEAP32[$13>>2] = 15;
  $14 = $1;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 24|0);
  HEAP32[$17>>2] = $14;
  $18 = $0;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  FUNCTION_TABLE_vi[$20 & 511]($21);
 }
 $22 = $0;
 $23 = $1;
 $24 = (_alloc_small($22,$23,128)|0);
 $result = $24;
 $25 = $result;
 HEAP32[$25>>2] = 0;
 $26 = $4;
 $27 = $result;
 $28 = (($27) + 4|0);
 HEAP32[$28>>2] = $26;
 $29 = $3;
 $30 = $result;
 $31 = (($30) + 8|0);
 HEAP32[$31>>2] = $29;
 $32 = $5;
 $33 = $result;
 $34 = (($33) + 12|0);
 HEAP32[$34>>2] = $32;
 $35 = $2;
 $36 = $result;
 $37 = (($36) + 32|0);
 HEAP32[$37>>2] = $35;
 $38 = $result;
 $39 = (($38) + 40|0);
 HEAP32[$39>>2] = 0;
 $40 = $mem;
 $41 = (($40) + 68|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $result;
 $44 = (($43) + 44|0);
 HEAP32[$44>>2] = $42;
 $45 = $result;
 $46 = $mem;
 $47 = (($46) + 68|0);
 HEAP32[$47>>2] = $45;
 $48 = $result;
 STACKTOP = sp;return ($48|0);
}
function _request_virt_barray($cinfo,$pool_id,$pre_zero,$blocksperrow,$numrows,$maxaccess) {
 $cinfo = $cinfo|0;
 $pool_id = $pool_id|0;
 $pre_zero = $pre_zero|0;
 $blocksperrow = $blocksperrow|0;
 $numrows = $numrows|0;
 $maxaccess = $maxaccess|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mem = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $0 = $cinfo;
 $1 = $pool_id;
 $2 = $pre_zero;
 $3 = $blocksperrow;
 $4 = $numrows;
 $5 = $maxaccess;
 $6 = $0;
 $7 = (($6) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $mem = $8;
 $9 = $1;
 $10 = ($9|0)!=(1);
 if ($10) {
  $11 = $0;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($12) + 20|0);
  HEAP32[$13>>2] = 15;
  $14 = $1;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 24|0);
  HEAP32[$17>>2] = $14;
  $18 = $0;
  $19 = HEAP32[$18>>2]|0;
  $20 = HEAP32[$19>>2]|0;
  $21 = $0;
  FUNCTION_TABLE_vi[$20 & 511]($21);
 }
 $22 = $0;
 $23 = $1;
 $24 = (_alloc_small($22,$23,128)|0);
 $result = $24;
 $25 = $result;
 HEAP32[$25>>2] = 0;
 $26 = $4;
 $27 = $result;
 $28 = (($27) + 4|0);
 HEAP32[$28>>2] = $26;
 $29 = $3;
 $30 = $result;
 $31 = (($30) + 8|0);
 HEAP32[$31>>2] = $29;
 $32 = $5;
 $33 = $result;
 $34 = (($33) + 12|0);
 HEAP32[$34>>2] = $32;
 $35 = $2;
 $36 = $result;
 $37 = (($36) + 32|0);
 HEAP32[$37>>2] = $35;
 $38 = $result;
 $39 = (($38) + 40|0);
 HEAP32[$39>>2] = 0;
 $40 = $mem;
 $41 = (($40) + 72|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $result;
 $44 = (($43) + 44|0);
 HEAP32[$44>>2] = $42;
 $45 = $result;
 $46 = $mem;
 $47 = (($46) + 72|0);
 HEAP32[$47>>2] = $45;
 $48 = $result;
 STACKTOP = sp;return ($48|0);
}
function _realize_virt_arrays($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avail_mem = 0;
 var $bptr = 0, $max_minheights = 0, $maximum_space = 0, $mem = 0, $minheights = 0, $space_per_minheight = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $mem = $3;
 $space_per_minheight = 0;
 $maximum_space = 0;
 $4 = $mem;
 $5 = (($4) + 68|0);
 $6 = HEAP32[$5>>2]|0;
 $sptr = $6;
 while(1) {
  $7 = $sptr;
  $8 = ($7|0)!=(0|0);
  if (!($8)) {
   break;
  }
  $9 = $sptr;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $12 = $sptr;
   $13 = (($12) + 12|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $sptr;
   $16 = (($15) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = Math_imul($14, $17)|0;
   $19 = $18;
   $20 = $space_per_minheight;
   $21 = (($20) + ($19))|0;
   $space_per_minheight = $21;
   $22 = $sptr;
   $23 = (($22) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $sptr;
   $26 = (($25) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = Math_imul($24, $27)|0;
   $29 = $28;
   $30 = $maximum_space;
   $31 = (($30) + ($29))|0;
   $maximum_space = $31;
  }
  $32 = $sptr;
  $33 = (($32) + 44|0);
  $34 = HEAP32[$33>>2]|0;
  $sptr = $34;
 }
 $35 = $mem;
 $36 = (($35) + 72|0);
 $37 = HEAP32[$36>>2]|0;
 $bptr = $37;
 while(1) {
  $38 = $bptr;
  $39 = ($38|0)!=(0|0);
  if (!($39)) {
   break;
  }
  $40 = $bptr;
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0|0);
  if ($42) {
   $43 = $bptr;
   $44 = (($43) + 12|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = $bptr;
   $47 = (($46) + 8|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = Math_imul($45, $48)|0;
   $50 = $49<<7;
   $51 = $space_per_minheight;
   $52 = (($51) + ($50))|0;
   $space_per_minheight = $52;
   $53 = $bptr;
   $54 = (($53) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = $bptr;
   $57 = (($56) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = Math_imul($55, $58)|0;
   $60 = $59<<7;
   $61 = $maximum_space;
   $62 = (($61) + ($60))|0;
   $maximum_space = $62;
  }
  $63 = $bptr;
  $64 = (($63) + 44|0);
  $65 = HEAP32[$64>>2]|0;
  $bptr = $65;
 }
 $66 = $space_per_minheight;
 $67 = ($66|0)<=(0);
 if ($67) {
  STACKTOP = sp;return;
 }
 $68 = $0;
 $69 = $space_per_minheight;
 $70 = $maximum_space;
 $71 = $mem;
 $72 = (($71) + 76|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (_jpeg_mem_available($68,$69,$70,$73)|0);
 $avail_mem = $74;
 $75 = $avail_mem;
 $76 = $maximum_space;
 $77 = ($75|0)>=($76|0);
 if ($77) {
  $max_minheights = 1000000000;
 } else {
  $78 = $avail_mem;
  $79 = $space_per_minheight;
  $80 = (($78|0) / ($79|0))&-1;
  $max_minheights = $80;
  $81 = $max_minheights;
  $82 = ($81|0)<=(0);
  if ($82) {
   $max_minheights = 1;
  }
 }
 $83 = $mem;
 $84 = (($83) + 68|0);
 $85 = HEAP32[$84>>2]|0;
 $sptr = $85;
 while(1) {
  $86 = $sptr;
  $87 = ($86|0)!=(0|0);
  if (!($87)) {
   break;
  }
  $88 = $sptr;
  $89 = HEAP32[$88>>2]|0;
  $90 = ($89|0)==(0|0);
  if ($90) {
   $91 = $sptr;
   $92 = (($91) + 4|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) - 1)|0;
   $95 = $sptr;
   $96 = (($95) + 12|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($94>>>0) / ($97>>>0))&-1;
   $99 = (($98) + 1)|0;
   $minheights = $99;
   $100 = $minheights;
   $101 = $max_minheights;
   $102 = ($100|0)<=($101|0);
   if ($102) {
    $103 = $sptr;
    $104 = (($103) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $sptr;
    $107 = (($106) + 16|0);
    HEAP32[$107>>2] = $105;
   } else {
    $108 = $max_minheights;
    $109 = $sptr;
    $110 = (($109) + 12|0);
    $111 = HEAP32[$110>>2]|0;
    $112 = Math_imul($108, $111)|0;
    $113 = $sptr;
    $114 = (($113) + 16|0);
    HEAP32[$114>>2] = $112;
    $115 = $0;
    $116 = $sptr;
    $117 = (($116) + 48|0);
    $118 = $sptr;
    $119 = (($118) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = $sptr;
    $122 = (($121) + 8|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = Math_imul($120, $123)|0;
    $125 = $124;
    _jpeg_open_backing_store($115,$117,$125);
    $126 = $sptr;
    $127 = (($126) + 40|0);
    HEAP32[$127>>2] = 1;
   }
   $128 = $0;
   $129 = $sptr;
   $130 = (($129) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = $sptr;
   $133 = (($132) + 16|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = (_alloc_sarray($128,1,$131,$134)|0);
   $136 = $sptr;
   HEAP32[$136>>2] = $135;
   $137 = $mem;
   $138 = (($137) + 80|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = $sptr;
   $141 = (($140) + 20|0);
   HEAP32[$141>>2] = $139;
   $142 = $sptr;
   $143 = (($142) + 24|0);
   HEAP32[$143>>2] = 0;
   $144 = $sptr;
   $145 = (($144) + 28|0);
   HEAP32[$145>>2] = 0;
   $146 = $sptr;
   $147 = (($146) + 36|0);
   HEAP32[$147>>2] = 0;
  }
  $148 = $sptr;
  $149 = (($148) + 44|0);
  $150 = HEAP32[$149>>2]|0;
  $sptr = $150;
 }
 $151 = $mem;
 $152 = (($151) + 72|0);
 $153 = HEAP32[$152>>2]|0;
 $bptr = $153;
 while(1) {
  $154 = $bptr;
  $155 = ($154|0)!=(0|0);
  if (!($155)) {
   break;
  }
  $156 = $bptr;
  $157 = HEAP32[$156>>2]|0;
  $158 = ($157|0)==(0|0);
  if ($158) {
   $159 = $bptr;
   $160 = (($159) + 4|0);
   $161 = HEAP32[$160>>2]|0;
   $162 = (($161) - 1)|0;
   $163 = $bptr;
   $164 = (($163) + 12|0);
   $165 = HEAP32[$164>>2]|0;
   $166 = (($162>>>0) / ($165>>>0))&-1;
   $167 = (($166) + 1)|0;
   $minheights = $167;
   $168 = $minheights;
   $169 = $max_minheights;
   $170 = ($168|0)<=($169|0);
   if ($170) {
    $171 = $bptr;
    $172 = (($171) + 4|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = $bptr;
    $175 = (($174) + 16|0);
    HEAP32[$175>>2] = $173;
   } else {
    $176 = $max_minheights;
    $177 = $bptr;
    $178 = (($177) + 12|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = Math_imul($176, $179)|0;
    $181 = $bptr;
    $182 = (($181) + 16|0);
    HEAP32[$182>>2] = $180;
    $183 = $0;
    $184 = $bptr;
    $185 = (($184) + 48|0);
    $186 = $bptr;
    $187 = (($186) + 4|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = $bptr;
    $190 = (($189) + 8|0);
    $191 = HEAP32[$190>>2]|0;
    $192 = Math_imul($188, $191)|0;
    $193 = $192<<7;
    _jpeg_open_backing_store($183,$185,$193);
    $194 = $bptr;
    $195 = (($194) + 40|0);
    HEAP32[$195>>2] = 1;
   }
   $196 = $0;
   $197 = $bptr;
   $198 = (($197) + 8|0);
   $199 = HEAP32[$198>>2]|0;
   $200 = $bptr;
   $201 = (($200) + 16|0);
   $202 = HEAP32[$201>>2]|0;
   $203 = (_alloc_barray($196,1,$199,$202)|0);
   $204 = $bptr;
   HEAP32[$204>>2] = $203;
   $205 = $mem;
   $206 = (($205) + 80|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = $bptr;
   $209 = (($208) + 20|0);
   HEAP32[$209>>2] = $207;
   $210 = $bptr;
   $211 = (($210) + 24|0);
   HEAP32[$211>>2] = 0;
   $212 = $bptr;
   $213 = (($212) + 28|0);
   HEAP32[$213>>2] = 0;
   $214 = $bptr;
   $215 = (($214) + 36|0);
   HEAP32[$215>>2] = 0;
  }
  $216 = $bptr;
  $217 = (($216) + 44|0);
  $218 = HEAP32[$217>>2]|0;
  $bptr = $218;
 }
 STACKTOP = sp;return;
}
function _access_virt_sarray($cinfo,$ptr,$start_row,$num_rows,$writable) {
 $cinfo = $cinfo|0;
 $ptr = $ptr|0;
 $start_row = $start_row|0;
 $num_rows = $num_rows|0;
 $writable = $writable|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytesperrow = 0;
 var $end_row = 0, $ltemp = 0, $undef_row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $ptr;
 $2 = $start_row;
 $3 = $num_rows;
 $4 = $writable;
 $5 = $2;
 $6 = $3;
 $7 = (($5) + ($6))|0;
 $end_row = $7;
 $8 = $end_row;
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)>($11>>>0);
 if ($12) {
  label = 4;
 } else {
  $13 = $3;
  $14 = $1;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13>>>0)>($16>>>0);
  if ($17) {
   label = 4;
  } else {
   $18 = $1;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 20|0);
  HEAP32[$23>>2] = 23;
  $24 = $0;
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = $0;
  FUNCTION_TABLE_vi[$26 & 511]($27);
 }
 $28 = $2;
 $29 = $1;
 $30 = (($29) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28>>>0)<($31>>>0);
 if ($32) {
  label = 7;
 } else {
  $33 = $end_row;
  $34 = $1;
  $35 = (($34) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $1;
  $38 = (($37) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($36) + ($39))|0;
  $41 = ($33>>>0)>($40>>>0);
  if ($41) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $42 = $1;
  $43 = (($42) + 40|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0);
  if (!($45)) {
   $46 = $0;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + 20|0);
   HEAP32[$48>>2] = 71;
   $49 = $0;
   $50 = HEAP32[$49>>2]|0;
   $51 = HEAP32[$50>>2]|0;
   $52 = $0;
   FUNCTION_TABLE_vi[$51 & 511]($52);
  }
  $53 = $1;
  $54 = (($53) + 36|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = $0;
   $58 = $1;
   _do_sarray_io($57,$58,1);
   $59 = $1;
   $60 = (($59) + 36|0);
   HEAP32[$60>>2] = 0;
  }
  $61 = $2;
  $62 = $1;
  $63 = (($62) + 24|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($61>>>0)>($64>>>0);
  if ($65) {
   $66 = $2;
   $67 = $1;
   $68 = (($67) + 24|0);
   HEAP32[$68>>2] = $66;
  } else {
   $69 = $end_row;
   $70 = $1;
   $71 = (($70) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($69) - ($72))|0;
   $ltemp = $73;
   $74 = $ltemp;
   $75 = ($74|0)<(0);
   if ($75) {
    $ltemp = 0;
   }
   $76 = $ltemp;
   $77 = $1;
   $78 = (($77) + 24|0);
   HEAP32[$78>>2] = $76;
  }
  $79 = $0;
  $80 = $1;
  _do_sarray_io($79,$80,0);
 }
 $81 = $1;
 $82 = (($81) + 28|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $end_row;
 $85 = ($83>>>0)<($84>>>0);
 if ($85) {
  $86 = $1;
  $87 = (($86) + 28|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $2;
  $90 = ($88>>>0)<($89>>>0);
  if ($90) {
   $91 = $4;
   $92 = ($91|0)!=(0);
   if ($92) {
    $93 = $0;
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + 20|0);
    HEAP32[$95>>2] = 23;
    $96 = $0;
    $97 = HEAP32[$96>>2]|0;
    $98 = HEAP32[$97>>2]|0;
    $99 = $0;
    FUNCTION_TABLE_vi[$98 & 511]($99);
   }
   $100 = $2;
   $undef_row = $100;
  } else {
   $101 = $1;
   $102 = (($101) + 28|0);
   $103 = HEAP32[$102>>2]|0;
   $undef_row = $103;
  }
  $104 = $4;
  $105 = ($104|0)!=(0);
  if ($105) {
   $106 = $end_row;
   $107 = $1;
   $108 = (($107) + 28|0);
   HEAP32[$108>>2] = $106;
  }
  $109 = $1;
  $110 = (($109) + 32|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)!=(0);
  if ($112) {
   $113 = $1;
   $114 = (($113) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $115;
   $bytesperrow = $116;
   $117 = $1;
   $118 = (($117) + 24|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $undef_row;
   $121 = (($120) - ($119))|0;
   $undef_row = $121;
   $122 = $1;
   $123 = (($122) + 24|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $end_row;
   $126 = (($125) - ($124))|0;
   $end_row = $126;
   while(1) {
    $127 = $undef_row;
    $128 = $end_row;
    $129 = ($127>>>0)<($128>>>0);
    if (!($129)) {
     break;
    }
    $130 = $undef_row;
    $131 = $1;
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($130<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $bytesperrow;
    _memset(($134|0),0,($135|0))|0;
    $136 = $undef_row;
    $137 = (($136) + 1)|0;
    $undef_row = $137;
   }
  } else {
   $138 = $4;
   $139 = ($138|0)!=(0);
   if (!($139)) {
    $140 = $0;
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + 20|0);
    HEAP32[$142>>2] = 23;
    $143 = $0;
    $144 = HEAP32[$143>>2]|0;
    $145 = HEAP32[$144>>2]|0;
    $146 = $0;
    FUNCTION_TABLE_vi[$145 & 511]($146);
   }
  }
 }
 $147 = $4;
 $148 = ($147|0)!=(0);
 if (!($148)) {
  $151 = $1;
  $152 = HEAP32[$151>>2]|0;
  $153 = $2;
  $154 = $1;
  $155 = (($154) + 24|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (($153) - ($156))|0;
  $158 = (($152) + ($157<<2)|0);
  STACKTOP = sp;return ($158|0);
 }
 $149 = $1;
 $150 = (($149) + 36|0);
 HEAP32[$150>>2] = 1;
 $151 = $1;
 $152 = HEAP32[$151>>2]|0;
 $153 = $2;
 $154 = $1;
 $155 = (($154) + 24|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = (($153) - ($156))|0;
 $158 = (($152) + ($157<<2)|0);
 STACKTOP = sp;return ($158|0);
}
function _access_virt_barray($cinfo,$ptr,$start_row,$num_rows,$writable) {
 $cinfo = $cinfo|0;
 $ptr = $ptr|0;
 $start_row = $start_row|0;
 $num_rows = $num_rows|0;
 $writable = $writable|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bytesperrow = 0;
 var $end_row = 0, $ltemp = 0, $undef_row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $ptr;
 $2 = $start_row;
 $3 = $num_rows;
 $4 = $writable;
 $5 = $2;
 $6 = $3;
 $7 = (($5) + ($6))|0;
 $end_row = $7;
 $8 = $end_row;
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8>>>0)>($11>>>0);
 if ($12) {
  label = 4;
 } else {
  $13 = $3;
  $14 = $1;
  $15 = (($14) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ($13>>>0)>($16>>>0);
  if ($17) {
   label = 4;
  } else {
   $18 = $1;
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(0|0);
   if ($20) {
    label = 4;
   }
  }
 }
 if ((label|0) == 4) {
  $21 = $0;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 20|0);
  HEAP32[$23>>2] = 23;
  $24 = $0;
  $25 = HEAP32[$24>>2]|0;
  $26 = HEAP32[$25>>2]|0;
  $27 = $0;
  FUNCTION_TABLE_vi[$26 & 511]($27);
 }
 $28 = $2;
 $29 = $1;
 $30 = (($29) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($28>>>0)<($31>>>0);
 if ($32) {
  label = 7;
 } else {
  $33 = $end_row;
  $34 = $1;
  $35 = (($34) + 24|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $1;
  $38 = (($37) + 16|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($36) + ($39))|0;
  $41 = ($33>>>0)>($40>>>0);
  if ($41) {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $42 = $1;
  $43 = (($42) + 40|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ($44|0)!=(0);
  if (!($45)) {
   $46 = $0;
   $47 = HEAP32[$46>>2]|0;
   $48 = (($47) + 20|0);
   HEAP32[$48>>2] = 71;
   $49 = $0;
   $50 = HEAP32[$49>>2]|0;
   $51 = HEAP32[$50>>2]|0;
   $52 = $0;
   FUNCTION_TABLE_vi[$51 & 511]($52);
  }
  $53 = $1;
  $54 = (($53) + 36|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = $0;
   $58 = $1;
   _do_barray_io($57,$58,1);
   $59 = $1;
   $60 = (($59) + 36|0);
   HEAP32[$60>>2] = 0;
  }
  $61 = $2;
  $62 = $1;
  $63 = (($62) + 24|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($61>>>0)>($64>>>0);
  if ($65) {
   $66 = $2;
   $67 = $1;
   $68 = (($67) + 24|0);
   HEAP32[$68>>2] = $66;
  } else {
   $69 = $end_row;
   $70 = $1;
   $71 = (($70) + 16|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($69) - ($72))|0;
   $ltemp = $73;
   $74 = $ltemp;
   $75 = ($74|0)<(0);
   if ($75) {
    $ltemp = 0;
   }
   $76 = $ltemp;
   $77 = $1;
   $78 = (($77) + 24|0);
   HEAP32[$78>>2] = $76;
  }
  $79 = $0;
  $80 = $1;
  _do_barray_io($79,$80,0);
 }
 $81 = $1;
 $82 = (($81) + 28|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $end_row;
 $85 = ($83>>>0)<($84>>>0);
 if ($85) {
  $86 = $1;
  $87 = (($86) + 28|0);
  $88 = HEAP32[$87>>2]|0;
  $89 = $2;
  $90 = ($88>>>0)<($89>>>0);
  if ($90) {
   $91 = $4;
   $92 = ($91|0)!=(0);
   if ($92) {
    $93 = $0;
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + 20|0);
    HEAP32[$95>>2] = 23;
    $96 = $0;
    $97 = HEAP32[$96>>2]|0;
    $98 = HEAP32[$97>>2]|0;
    $99 = $0;
    FUNCTION_TABLE_vi[$98 & 511]($99);
   }
   $100 = $2;
   $undef_row = $100;
  } else {
   $101 = $1;
   $102 = (($101) + 28|0);
   $103 = HEAP32[$102>>2]|0;
   $undef_row = $103;
  }
  $104 = $4;
  $105 = ($104|0)!=(0);
  if ($105) {
   $106 = $end_row;
   $107 = $1;
   $108 = (($107) + 28|0);
   HEAP32[$108>>2] = $106;
  }
  $109 = $1;
  $110 = (($109) + 32|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)!=(0);
  if ($112) {
   $113 = $1;
   $114 = (($113) + 8|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $115<<7;
   $bytesperrow = $116;
   $117 = $1;
   $118 = (($117) + 24|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $undef_row;
   $121 = (($120) - ($119))|0;
   $undef_row = $121;
   $122 = $1;
   $123 = (($122) + 24|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = $end_row;
   $126 = (($125) - ($124))|0;
   $end_row = $126;
   while(1) {
    $127 = $undef_row;
    $128 = $end_row;
    $129 = ($127>>>0)<($128>>>0);
    if (!($129)) {
     break;
    }
    $130 = $undef_row;
    $131 = $1;
    $132 = HEAP32[$131>>2]|0;
    $133 = (($132) + ($130<<2)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $bytesperrow;
    _memset(($134|0),0,($135|0))|0;
    $136 = $undef_row;
    $137 = (($136) + 1)|0;
    $undef_row = $137;
   }
  } else {
   $138 = $4;
   $139 = ($138|0)!=(0);
   if (!($139)) {
    $140 = $0;
    $141 = HEAP32[$140>>2]|0;
    $142 = (($141) + 20|0);
    HEAP32[$142>>2] = 23;
    $143 = $0;
    $144 = HEAP32[$143>>2]|0;
    $145 = HEAP32[$144>>2]|0;
    $146 = $0;
    FUNCTION_TABLE_vi[$145 & 511]($146);
   }
  }
 }
 $147 = $4;
 $148 = ($147|0)!=(0);
 if (!($148)) {
  $151 = $1;
  $152 = HEAP32[$151>>2]|0;
  $153 = $2;
  $154 = $1;
  $155 = (($154) + 24|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = (($153) - ($156))|0;
  $158 = (($152) + ($157<<2)|0);
  STACKTOP = sp;return ($158|0);
 }
 $149 = $1;
 $150 = (($149) + 36|0);
 HEAP32[$150>>2] = 1;
 $151 = $1;
 $152 = HEAP32[$151>>2]|0;
 $153 = $2;
 $154 = $1;
 $155 = (($154) + 24|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = (($153) - ($156))|0;
 $158 = (($152) + ($157<<2)|0);
 STACKTOP = sp;return ($158|0);
}
function _free_pool($cinfo,$pool_id) {
 $cinfo = $cinfo|0;
 $pool_id = $pool_id|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bptr = 0, $lhdr_ptr = 0, $mem = 0, $next_lhdr_ptr = 0, $next_shdr_ptr = 0, $shdr_ptr = 0, $space_freed = 0, $sptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $pool_id;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $mem = $4;
 $5 = $1;
 $6 = ($5|0)<(0);
 if ($6) {
  label = 3;
 } else {
  $7 = $1;
  $8 = ($7|0)>=(2);
  if ($8) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $9 = $0;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 20|0);
  HEAP32[$11>>2] = 15;
  $12 = $1;
  $13 = $0;
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 24|0);
  HEAP32[$15>>2] = $12;
  $16 = $0;
  $17 = HEAP32[$16>>2]|0;
  $18 = HEAP32[$17>>2]|0;
  $19 = $0;
  FUNCTION_TABLE_vi[$18 & 511]($19);
 }
 $20 = $1;
 $21 = ($20|0)==(1);
 if ($21) {
  $22 = $mem;
  $23 = (($22) + 68|0);
  $24 = HEAP32[$23>>2]|0;
  $sptr = $24;
  while(1) {
   $25 = $sptr;
   $26 = ($25|0)!=(0|0);
   if (!($26)) {
    break;
   }
   $27 = $sptr;
   $28 = (($27) + 40|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $sptr;
    $32 = (($31) + 40|0);
    HEAP32[$32>>2] = 0;
    $33 = $sptr;
    $34 = (($33) + 48|0);
    $35 = (($34) + 8|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = $0;
    $38 = $sptr;
    $39 = (($38) + 48|0);
    FUNCTION_TABLE_vii[$36 & 511]($37,$39);
   }
   $40 = $sptr;
   $41 = (($40) + 44|0);
   $42 = HEAP32[$41>>2]|0;
   $sptr = $42;
  }
  $43 = $mem;
  $44 = (($43) + 68|0);
  HEAP32[$44>>2] = 0;
  $45 = $mem;
  $46 = (($45) + 72|0);
  $47 = HEAP32[$46>>2]|0;
  $bptr = $47;
  while(1) {
   $48 = $bptr;
   $49 = ($48|0)!=(0|0);
   if (!($49)) {
    break;
   }
   $50 = $bptr;
   $51 = (($50) + 40|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ($52|0)!=(0);
   if ($53) {
    $54 = $bptr;
    $55 = (($54) + 40|0);
    HEAP32[$55>>2] = 0;
    $56 = $bptr;
    $57 = (($56) + 48|0);
    $58 = (($57) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = $0;
    $61 = $bptr;
    $62 = (($61) + 48|0);
    FUNCTION_TABLE_vii[$59 & 511]($60,$62);
   }
   $63 = $bptr;
   $64 = (($63) + 44|0);
   $65 = HEAP32[$64>>2]|0;
   $bptr = $65;
  }
  $66 = $mem;
  $67 = (($66) + 72|0);
  HEAP32[$67>>2] = 0;
 }
 $68 = $1;
 $69 = $mem;
 $70 = (($69) + 60|0);
 $71 = (($70) + ($68<<2)|0);
 $72 = HEAP32[$71>>2]|0;
 $lhdr_ptr = $72;
 $73 = $1;
 $74 = $mem;
 $75 = (($74) + 60|0);
 $76 = (($75) + ($73<<2)|0);
 HEAP32[$76>>2] = 0;
 while(1) {
  $77 = $lhdr_ptr;
  $78 = ($77|0)!=(0|0);
  if (!($78)) {
   break;
  }
  $79 = $lhdr_ptr;
  $80 = HEAP32[$79>>2]|0;
  $next_lhdr_ptr = $80;
  $81 = $lhdr_ptr;
  $82 = (($81) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $lhdr_ptr;
  $85 = (($84) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($83) + ($86))|0;
  $88 = (($87) + 16)|0;
  $space_freed = $88;
  $89 = $0;
  $90 = $lhdr_ptr;
  $91 = $space_freed;
  _jpeg_free_large($89,$90,$91);
  $92 = $space_freed;
  $93 = $mem;
  $94 = (($93) + 76|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = (($95) - ($92))|0;
  HEAP32[$94>>2] = $96;
  $97 = $next_lhdr_ptr;
  $lhdr_ptr = $97;
 }
 $98 = $1;
 $99 = $mem;
 $100 = (($99) + 52|0);
 $101 = (($100) + ($98<<2)|0);
 $102 = HEAP32[$101>>2]|0;
 $shdr_ptr = $102;
 $103 = $1;
 $104 = $mem;
 $105 = (($104) + 52|0);
 $106 = (($105) + ($103<<2)|0);
 HEAP32[$106>>2] = 0;
 while(1) {
  $107 = $shdr_ptr;
  $108 = ($107|0)!=(0|0);
  if (!($108)) {
   break;
  }
  $109 = $shdr_ptr;
  $110 = HEAP32[$109>>2]|0;
  $next_shdr_ptr = $110;
  $111 = $shdr_ptr;
  $112 = (($111) + 4|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $shdr_ptr;
  $115 = (($114) + 8|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = (($113) + ($116))|0;
  $118 = (($117) + 16)|0;
  $space_freed = $118;
  $119 = $0;
  $120 = $shdr_ptr;
  $121 = $space_freed;
  _jpeg_free_small($119,$120,$121);
  $122 = $space_freed;
  $123 = $mem;
  $124 = (($123) + 76|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($125) - ($122))|0;
  HEAP32[$124>>2] = $126;
  $127 = $next_shdr_ptr;
  $shdr_ptr = $127;
 }
 STACKTOP = sp;return;
}
function _self_destruct($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pool = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $pool = 1;
 while(1) {
  $1 = $pool;
  $2 = ($1|0)>=(0);
  if (!($2)) {
   break;
  }
  $3 = $0;
  $4 = $pool;
  _free_pool($3,$4);
  $5 = $pool;
  $6 = (($5) + -1)|0;
  $pool = $6;
 }
 $7 = $0;
 $8 = $0;
 $9 = (($8) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 _jpeg_free_small($7,$10,84);
 $11 = $0;
 $12 = (($11) + 4|0);
 HEAP32[$12>>2] = 0;
 $13 = $0;
 _jpeg_mem_term($13);
 STACKTOP = sp;return;
}
function _do_barray_io($cinfo,$ptr,$writing) {
 $cinfo = $cinfo|0;
 $ptr = $ptr|0;
 $writing = $writing|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byte_count = 0, $bytesperrow = 0, $file_offset = 0, $i = 0, $rows = 0, $thisrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $ptr;
 $2 = $writing;
 $3 = $1;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5<<7;
 $bytesperrow = $6;
 $7 = $1;
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $bytesperrow;
 $11 = Math_imul($9, $10)|0;
 $file_offset = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $1;
  $14 = (($13) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   label = 19;
   break;
  }
  $17 = $1;
  $18 = (($17) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = (($20) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $i;
  $24 = (($22) - ($23))|0;
  $25 = ($19|0)<($24|0);
  if ($25) {
   $26 = $1;
   $27 = (($26) + 20|0);
   $28 = HEAP32[$27>>2]|0;
   $34 = $28;
  } else {
   $29 = $1;
   $30 = (($29) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $i;
   $33 = (($31) - ($32))|0;
   $34 = $33;
  }
  $rows = $34;
  $35 = $1;
  $36 = (($35) + 24|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $i;
  $39 = (($37) + ($38))|0;
  $thisrow = $39;
  $40 = $rows;
  $41 = $1;
  $42 = (($41) + 28|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $thisrow;
  $45 = (($43) - ($44))|0;
  $46 = ($40|0)<($45|0);
  if ($46) {
   $47 = $rows;
   $53 = $47;
  } else {
   $48 = $1;
   $49 = (($48) + 28|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $thisrow;
   $52 = (($50) - ($51))|0;
   $53 = $52;
  }
  $rows = $53;
  $54 = $rows;
  $55 = $1;
  $56 = (($55) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $thisrow;
  $59 = (($57) - ($58))|0;
  $60 = ($54|0)<($59|0);
  if ($60) {
   $61 = $rows;
   $67 = $61;
  } else {
   $62 = $1;
   $63 = (($62) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $thisrow;
   $66 = (($64) - ($65))|0;
   $67 = $66;
  }
  $rows = $67;
  $68 = $rows;
  $69 = ($68|0)<=(0);
  if ($69) {
   break;
  }
  $70 = $rows;
  $71 = $bytesperrow;
  $72 = Math_imul($70, $71)|0;
  $byte_count = $72;
  $73 = $2;
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = $1;
   $76 = (($75) + 48|0);
   $77 = (($76) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $0;
   $80 = $1;
   $81 = (($80) + 48|0);
   $82 = $i;
   $83 = $1;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($82<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $file_offset;
   $88 = $byte_count;
   FUNCTION_TABLE_viiiii[$78 & 255]($79,$81,$86,$87,$88);
  } else {
   $89 = $1;
   $90 = (($89) + 48|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $0;
   $93 = $1;
   $94 = (($93) + 48|0);
   $95 = $i;
   $96 = $1;
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + ($95<<2)|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $file_offset;
   $101 = $byte_count;
   FUNCTION_TABLE_viiiii[$91 & 255]($92,$94,$99,$100,$101);
  }
  $102 = $byte_count;
  $103 = $file_offset;
  $104 = (($103) + ($102))|0;
  $file_offset = $104;
  $105 = $1;
  $106 = (($105) + 20|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $i;
  $109 = (($108) + ($107))|0;
  $i = $109;
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _do_sarray_io($cinfo,$ptr,$writing) {
 $cinfo = $cinfo|0;
 $ptr = $ptr|0;
 $writing = $writing|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $byte_count = 0, $bytesperrow = 0, $file_offset = 0, $i = 0, $rows = 0, $thisrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $0 = $cinfo;
 $1 = $ptr;
 $2 = $writing;
 $3 = $1;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 $bytesperrow = $6;
 $7 = $1;
 $8 = (($7) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $bytesperrow;
 $11 = Math_imul($9, $10)|0;
 $file_offset = $11;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = $1;
  $14 = (($13) + 16|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($12|0)<($15|0);
  if (!($16)) {
   label = 19;
   break;
  }
  $17 = $1;
  $18 = (($17) + 20|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $1;
  $21 = (($20) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $i;
  $24 = (($22) - ($23))|0;
  $25 = ($19|0)<($24|0);
  if ($25) {
   $26 = $1;
   $27 = (($26) + 20|0);
   $28 = HEAP32[$27>>2]|0;
   $34 = $28;
  } else {
   $29 = $1;
   $30 = (($29) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $i;
   $33 = (($31) - ($32))|0;
   $34 = $33;
  }
  $rows = $34;
  $35 = $1;
  $36 = (($35) + 24|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $i;
  $39 = (($37) + ($38))|0;
  $thisrow = $39;
  $40 = $rows;
  $41 = $1;
  $42 = (($41) + 28|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $thisrow;
  $45 = (($43) - ($44))|0;
  $46 = ($40|0)<($45|0);
  if ($46) {
   $47 = $rows;
   $53 = $47;
  } else {
   $48 = $1;
   $49 = (($48) + 28|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = $thisrow;
   $52 = (($50) - ($51))|0;
   $53 = $52;
  }
  $rows = $53;
  $54 = $rows;
  $55 = $1;
  $56 = (($55) + 4|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = $thisrow;
  $59 = (($57) - ($58))|0;
  $60 = ($54|0)<($59|0);
  if ($60) {
   $61 = $rows;
   $67 = $61;
  } else {
   $62 = $1;
   $63 = (($62) + 4|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $thisrow;
   $66 = (($64) - ($65))|0;
   $67 = $66;
  }
  $rows = $67;
  $68 = $rows;
  $69 = ($68|0)<=(0);
  if ($69) {
   break;
  }
  $70 = $rows;
  $71 = $bytesperrow;
  $72 = Math_imul($70, $71)|0;
  $byte_count = $72;
  $73 = $2;
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = $1;
   $76 = (($75) + 48|0);
   $77 = (($76) + 4|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $0;
   $80 = $1;
   $81 = (($80) + 48|0);
   $82 = $i;
   $83 = $1;
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($82<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $file_offset;
   $88 = $byte_count;
   FUNCTION_TABLE_viiiii[$78 & 255]($79,$81,$86,$87,$88);
  } else {
   $89 = $1;
   $90 = (($89) + 48|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $0;
   $93 = $1;
   $94 = (($93) + 48|0);
   $95 = $i;
   $96 = $1;
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + ($95<<2)|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $file_offset;
   $101 = $byte_count;
   FUNCTION_TABLE_viiiii[$91 & 255]($92,$94,$99,$100,$101);
  }
  $102 = $byte_count;
  $103 = $file_offset;
  $104 = (($103) + ($102))|0;
  $file_offset = $104;
  $105 = $1;
  $106 = (($105) + 20|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = $i;
  $109 = (($108) + ($107))|0;
  $i = $109;
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return;
 }
 STACKTOP = sp;return;
}
function _out_of_memory($cinfo,$which) {
 $cinfo = $cinfo|0;
 $which = $which|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $which;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 HEAP32[$4>>2] = 56;
 $5 = $1;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + 24|0);
 HEAP32[$8>>2] = $5;
 $9 = $0;
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$10>>2]|0;
 $12 = $0;
 FUNCTION_TABLE_vi[$11 & 511]($12);
 STACKTOP = sp;return;
}
function _jpeg_get_small($cinfo,$sizeofobject) {
 $cinfo = $cinfo|0;
 $sizeofobject = $sizeofobject|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $sizeofobject;
 $2 = $1;
 $3 = (_malloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _jpeg_free_small($cinfo,$object,$sizeofobject) {
 $cinfo = $cinfo|0;
 $object = $object|0;
 $sizeofobject = $sizeofobject|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $object;
 $2 = $sizeofobject;
 $3 = $1;
 _free($3);
 STACKTOP = sp;return;
}
function _jpeg_get_large($cinfo,$sizeofobject) {
 $cinfo = $cinfo|0;
 $sizeofobject = $sizeofobject|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $sizeofobject;
 $2 = $1;
 $3 = (_malloc($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _jpeg_free_large($cinfo,$object,$sizeofobject) {
 $cinfo = $cinfo|0;
 $object = $object|0;
 $sizeofobject = $sizeofobject|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $object;
 $2 = $sizeofobject;
 $3 = $1;
 _free($3);
 STACKTOP = sp;return;
}
function _jpeg_mem_available($cinfo,$min_bytes_needed,$max_bytes_needed,$already_allocated) {
 $cinfo = $cinfo|0;
 $min_bytes_needed = $min_bytes_needed|0;
 $max_bytes_needed = $max_bytes_needed|0;
 $already_allocated = $already_allocated|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $min_bytes_needed;
 $2 = $max_bytes_needed;
 $3 = $already_allocated;
 $4 = $2;
 STACKTOP = sp;return ($4|0);
}
function _jpeg_open_backing_store($cinfo,$info,$total_bytes_needed) {
 $cinfo = $cinfo|0;
 $info = $info|0;
 $total_bytes_needed = $total_bytes_needed|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 $1 = $info;
 $2 = $total_bytes_needed;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 20|0);
 HEAP32[$5>>2] = 51;
 $6 = $0;
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 FUNCTION_TABLE_vi[$8 & 511]($9);
 STACKTOP = sp;return;
}
function _jpeg_mem_init($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return 0;
}
function _jpeg_mem_term($cinfo) {
 $cinfo = $cinfo|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = $cinfo;
 STACKTOP = sp;return;
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 10400 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (10192 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L17: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L17;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39&255;
      $41 = (($40) + -128)|0;
      $42 = ($41>>>0)>(63);
      if ($42) {
       break L1;
      } else {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $43 = (___errno_location()|0);
 HEAP32[$43>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$4 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$lcssa18 = 0, $$matches$0 = 0, $$not = 0, $$pre = 0, $$pre$phi213Z2D = 0, $$pre193 = 0, $$pre206 = 0, $$pre207 = 0, $$pre208 = 0, $$pre209 = 0, $$pre210 = 0, $$pre211 = 0, $$pre212 = 0, $$size$0 = 0;
 var $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0.0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$027 = 0, $dest$0 = 0, $factor = 0;
 var $factor14 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph46 = 0, $i$0$ph46$lcssa = 0, $i$0$ph46$us53 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit3 = 0, $isdigit320 = 0, $isdigittmp = 0, $isdigittmp2 = 0, $isdigittmp219 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0116 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond5 = 0, $or$cond6 = 0, $p$0122 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$321 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0;
 var $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0121 = 0, $pos$1 = 0, $pos$2 = 0, $s$0114 = 0, $s$1$ph = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0115 = 0;
 var $wcs$1 = 0, $wcs$2$ph = 0, $wcs$2$ph146 = 0, $wcs$3 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $width$0$lcssa = 0, $width$022 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0116 = 0;$p$0122 = $fmt;$pos$0121 = 0;$s$0114 = 0;$wcs$0115 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0122>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L21: do {
     if ($43) {
      $44 = (($p$0122) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 37)) {
        break L21;
       } else if ((($45<<24>>24) == 42)) {
        $65 = (($p$0122) + 2|0);
        $dest$0 = 0;$p$2 = $65;
       } else {
        $66 = $45&255;
        $isdigittmp = (($66) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $67 = (($p$0122) + 2|0);
         $68 = HEAP8[$67>>0]|0;
         $69 = ($68<<24>>24)==(36);
         if ($69) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $70 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $71 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $72 = (($i$0$i) + -1)|0;
           if ($70) {
            $i$0$i = $72;
           } else {
            break;
           }
          }
          $73 = (($p$0122) + 3|0);
          $dest$0 = $71;$p$2 = $73;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $74 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $74;$p$2 = $44;
       }
      } while(0);
      $75 = HEAP8[$p$2>>0]|0;
      $76 = $75&255;
      $isdigittmp219 = (($76) + -48)|0;
      $isdigit320 = ($isdigittmp219>>>0)<(10);
      if ($isdigit320) {
       $80 = $76;$p$321 = $p$2;$width$022 = 0;
       while(1) {
        $77 = ($width$022*10)|0;
        $78 = (($77) + -48)|0;
        $79 = (($78) + ($80))|0;
        $81 = (($p$321) + 1|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = $82&255;
        $isdigittmp2 = (($83) + -48)|0;
        $isdigit3 = ($isdigittmp2>>>0)<(10);
        if ($isdigit3) {
         $80 = $83;$p$321 = $81;$width$022 = $79;
        } else {
         $$lcssa18 = $82;$p$3$lcssa = $81;$width$0$lcssa = $79;
         break;
        }
       }
      } else {
       $$lcssa18 = $75;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $84 = ($$lcssa18<<24>>24)==(109);
      if ($84) {
       $85 = ($dest$0|0)!=(0|0);
       $86 = $85&1;
       $87 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$87>>0]|0;
       $90 = $$pre;$alloc$0 = $86;$p$4 = $87;
      } else {
       $90 = $$lcssa18;$alloc$0 = 0;$p$4 = $p$3$lcssa;
      }
      $88 = (($p$4) + 1|0);
      $89 = $90&255;
      switch ($89|0) {
      case 106:  {
       $p$5 = $88;$size$0 = 3;
       break;
      }
      case 104:  {
       $91 = HEAP8[$88>>0]|0;
       $92 = ($91<<24>>24)==(104);
       $93 = (($p$4) + 2|0);
       $$7 = $92 ? $93 : $88;
       $$8 = $92 ? -2 : -1;
       $p$5 = $$7;$size$0 = $$8;
       break;
      }
      case 116: case 122:  {
       $p$5 = $88;$size$0 = 1;
       break;
      }
      case 108:  {
       $94 = HEAP8[$88>>0]|0;
       $95 = ($94<<24>>24)==(108);
       $96 = (($p$4) + 2|0);
       $$9 = $95 ? $96 : $88;
       $$10 = $95 ? 3 : 1;
       $p$5 = $$9;$size$0 = $$10;
       break;
      }
      case 76:  {
       $p$5 = $88;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      default: {
       $alloc$1 = $alloc$0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
       label = 162;
       break L4;
      }
      }
      $97 = HEAP8[$p$5>>0]|0;
      $98 = $97&255;
      $99 = $98 & 47;
      $100 = ($99|0)==(3);
      $101 = $98 | 32;
      $$ = $100 ? $101 : $98;
      $$size$0 = $100 ? 1 : $size$0;
      if ((($$|0) == 110)) {
       $103 = ($pos$0121|0)<(0);
       $104 = $103 << 31 >> 31;
       $105 = ($dest$0|0)==(0|0);
       if ($105) {
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
       }
       switch ($$size$0|0) {
       case -2:  {
        $106 = $pos$0121&255;
        HEAP8[$dest$0>>0] = $106;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case -1:  {
        $107 = $pos$0121&65535;
        HEAP16[$dest$0>>1] = $107;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0121;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0121;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       case 3:  {
        $108 = $dest$0;
        $109 = $108;
        HEAP32[$109>>2] = $pos$0121;
        $110 = (($108) + 4)|0;
        $111 = $110;
        HEAP32[$111>>2] = $104;
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0116;$p$11 = $p$5;$pos$2 = $pos$0121;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
        break L6;
       }
       }
      } else if ((($$|0) == 91)) {
       $pos$1 = $pos$0121;$width$1 = $width$0$lcssa;
      } else if ((($$|0) == 99)) {
       $102 = ($width$0$lcssa|0)<(1);
       $$width$0 = $102 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0121;$width$1 = $$width$0;
      } else {
       ___shlim($f,0);
       while(1) {
        $112 = HEAP32[$3>>2]|0;
        $113 = HEAP32[$4>>2]|0;
        $114 = ($112>>>0)<($113>>>0);
        if ($114) {
         $115 = (($112) + 1|0);
         HEAP32[$3>>2] = $115;
         $116 = HEAP8[$112>>0]|0;
         $117 = $116&255;
         $119 = $117;
        } else {
         $118 = (___shgetc($f)|0);
         $119 = $118;
        }
        $120 = (_isspace($119)|0);
        $121 = ($120|0)==(0);
        if ($121) {
         break;
        }
       }
       $122 = HEAP32[$4>>2]|0;
       $123 = ($122|0)==(0|0);
       $$pre206 = HEAP32[$3>>2]|0;
       if ($123) {
        $128 = $$pre206;
       } else {
        $124 = (($$pre206) + -1|0);
        HEAP32[$3>>2] = $124;
        $128 = $124;
       }
       $125 = HEAP32[$5>>2]|0;
       $126 = HEAP32[$6>>2]|0;
       $127 = $128;
       $129 = $126;
       $130 = (($125) + ($pos$0121))|0;
       $131 = (($130) + ($127))|0;
       $132 = (($131) - ($129))|0;
       $pos$1 = $132;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $133 = HEAP32[$3>>2]|0;
      $134 = HEAP32[$4>>2]|0;
      $135 = ($133>>>0)<($134>>>0);
      if ($135) {
       $136 = (($133) + 1|0);
       HEAP32[$3>>2] = $136;
       $140 = $134;
      } else {
       $137 = (___shgetc($f)|0);
       $138 = ($137|0)<(0);
       if ($138) {
        $alloc$1 = $alloc$0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
        label = 162;
        break L4;
       }
       $$pre207 = HEAP32[$4>>2]|0;
       $140 = $$pre207;
      }
      $139 = ($140|0)==(0|0);
      if (!($139)) {
       $141 = HEAP32[$3>>2]|0;
       $142 = (($141) + -1|0);
       HEAP32[$3>>2] = $142;
      }
      L78: do {
       switch ($$|0) {
       case 91: case 99: case 115:  {
        $143 = ($$|0)==(99);
        $144 = $$ & 239;
        $145 = ($144|0)==(99);
        L80: do {
         if ($145) {
          $146 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($146) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $147 = (($p$5) + 1|0);
          $148 = HEAP8[$147>>0]|0;
          $149 = ($148<<24>>24)==(94);
          $150 = (($p$5) + 2|0);
          $invert$0 = $149&1;
          $p$6 = $149 ? $150 : $147;
          $151 = $149&1;
          _memset(($scanset|0),($151|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $152 = HEAP8[$p$6>>0]|0;
          if ((($152<<24>>24) == 45)) {
           $153 = (($p$6) + 1|0);
           $154 = $invert$0 ^ 1;
           $155 = $154&255;
           HEAP8[$10>>0] = $155;
           $$pre$phi213Z2D = $155;$p$7$ph = $153;
          } else if ((($152<<24>>24) == 93)) {
           $156 = (($p$6) + 1|0);
           $157 = $invert$0 ^ 1;
           $158 = $157&255;
           HEAP8[$11>>0] = $158;
           $$pre$phi213Z2D = $158;$p$7$ph = $156;
          } else {
           $$pre211 = $invert$0 ^ 1;
           $$pre212 = $$pre211&255;
           $$pre$phi213Z2D = $$pre212;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $159 = HEAP8[$p$7>>0]|0;
           if ((($159<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L80;
           } else if ((($159<<24>>24) == 45)) {
            $160 = (($p$7) + 1|0);
            $161 = HEAP8[$160>>0]|0;
            if ((($161<<24>>24) == 93) | (($161<<24>>24) == 0)) {
             $172 = 45;$p$8 = $p$7;
            } else {
             $162 = (($p$7) + -1|0);
             $163 = HEAP8[$162>>0]|0;
             $164 = ($163&255)<($161&255);
             if ($164) {
              $165 = $163&255;
              $c$027 = $165;
              while(1) {
               $166 = (($c$027) + 1)|0;
               $167 = (($scanset) + ($166)|0);
               HEAP8[$167>>0] = $$pre$phi213Z2D;
               $168 = HEAP8[$160>>0]|0;
               $169 = $168&255;
               $170 = ($166|0)<($169|0);
               if ($170) {
                $c$027 = $166;
               } else {
                $172 = $168;$p$8 = $160;
                break;
               }
              }
             } else {
              $172 = $161;$p$8 = $160;
             }
            }
           } else if ((($159<<24>>24) == 0)) {
            $alloc$1 = $alloc$0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
            label = 162;
            break L4;
           } else {
            $172 = $159;$p$8 = $p$7;
           }
           $171 = $172&255;
           $173 = (($171) + 1)|0;
           $174 = (($scanset) + ($173)|0);
           HEAP8[$174>>0] = $$pre$phi213Z2D;
           $175 = (($p$8) + 1|0);
           $p$7 = $175;
          }
         }
        } while(0);
        $176 = (($width$1) + 1)|0;
        $$4 = $143 ? $176 : 31;
        $177 = ($$size$0|0)==(1);
        $178 = ($alloc$0|0)!=(0);
        L99: do {
         if ($177) {
          if ($178) {
           $179 = $$4 << 2;
           $180 = (_malloc($179)|0);
           $181 = ($180|0)==(0|0);
           if ($181) {
            $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $180;
            label = 162;
            break L4;
           } else {
            $wcs$1 = $180;
           }
          } else {
           $wcs$1 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$4;$wcs$2$ph = $wcs$1;
          L105: while(1) {
           $182 = ($wcs$2$ph|0)==(0|0);
           if ($182) {
            while(1) {
             $185 = HEAP32[$3>>2]|0;
             $196 = HEAP32[$4>>2]|0;
             $197 = ($185>>>0)<($196>>>0);
             if ($197) {
              $184 = (($185) + 1|0);
              HEAP32[$3>>2] = $184;
              $186 = HEAP8[$185>>0]|0;
              $187 = $186&255;
              $189 = $187;
             } else {
              $183 = (___shgetc($f)|0);
              $189 = $183;
             }
             $188 = (($189) + 1)|0;
             $190 = (($scanset) + ($188)|0);
             $191 = HEAP8[$190>>0]|0;
             $192 = ($191<<24>>24)==(0);
             if ($192) {
              $i$0$ph46$lcssa = $i$0$ph;$wcs$2$ph146 = 0;
              break L105;
             }
             $193 = $189&255;
             HEAP8[$0>>0] = $193;
             $194 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($194|0) == -2)) {
              continue;
             } else if ((($194|0) == -1)) {
              $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = 0;
              label = 162;
              break L4;
             }
             $195 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $178 & $195;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($178) {
             $i$0$ph46$us53 = $i$0$ph;
            } else {
             $i$0$ph46 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $200 = HEAP32[$3>>2]|0;
              $214 = HEAP32[$4>>2]|0;
              $215 = ($200>>>0)<($214>>>0);
              if ($215) {
               $199 = (($200) + 1|0);
               HEAP32[$3>>2] = $199;
               $201 = HEAP8[$200>>0]|0;
               $202 = $201&255;
               $204 = $202;
              } else {
               $198 = (___shgetc($f)|0);
               $204 = $198;
              }
              $203 = (($204) + 1)|0;
              $205 = (($scanset) + ($203)|0);
              $206 = HEAP8[$205>>0]|0;
              $207 = ($206<<24>>24)==(0);
              if ($207) {
               $i$0$ph46$lcssa = $i$0$ph46$us53;$wcs$2$ph146 = $wcs$2$ph;
               break L105;
              }
              $208 = $204&255;
              HEAP8[$0>>0] = $208;
              $209 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($209|0) == -1)) {
               $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $wcs$2$ph;
               label = 162;
               break L4;
              } else if (!((($209|0) == -2))) {
               break;
              }
             }
             $210 = HEAP32[$wc>>2]|0;
             $211 = (($i$0$ph46$us53) + 1)|0;
             $212 = (($wcs$2$ph) + ($i$0$ph46$us53<<2)|0);
             HEAP32[$212>>2] = $210;
             $213 = ($211|0)==($k$0$ph|0);
             if ($213) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph46$us53 = $211;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $233 = $factor | 1;
           $234 = $233 << 2;
           $235 = (_realloc($wcs$2$ph,$234)|0);
           $236 = ($235|0)==(0|0);
           if ($236) {
            $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $wcs$2$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $233;$wcs$2$ph = $235;
          }
          L129: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $216 = HEAP32[$3>>2]|0;
              $217 = HEAP32[$4>>2]|0;
              $218 = ($216>>>0)<($217>>>0);
              if ($218) {
               $219 = (($216) + 1|0);
               HEAP32[$3>>2] = $219;
               $220 = HEAP8[$216>>0]|0;
               $221 = $220&255;
               $224 = $221;
              } else {
               $222 = (___shgetc($f)|0);
               $224 = $222;
              }
              $223 = (($224) + 1)|0;
              $225 = (($scanset) + ($223)|0);
              $226 = HEAP8[$225>>0]|0;
              $227 = ($226<<24>>24)==(0);
              if ($227) {
               $i$0$ph46$lcssa = $i$0$ph46;$wcs$2$ph146 = $wcs$2$ph;
               break L129;
              }
              $228 = $224&255;
              HEAP8[$0>>0] = $228;
              $229 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($229|0) == -1)) {
               $alloc$1 = 0;$s$5 = 0;$wcs$6 = $wcs$2$ph;
               label = 162;
               break L4;
              } else if (!((($229|0) == -2))) {
               break;
              }
             }
             $230 = HEAP32[$wc>>2]|0;
             $231 = (($i$0$ph46) + 1)|0;
             $232 = (($wcs$2$ph) + ($i$0$ph46<<2)|0);
             HEAP32[$232>>2] = $230;
             $i$0$ph46 = $231;
             label = 98;
            }
           }
          } while(0);
          $237 = (_mbsinit($st)|0);
          $238 = ($237|0)==(0);
          if ($238) {
           $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = $wcs$2$ph146;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph46$lcssa;$s$2 = 0;$wcs$3 = $wcs$2$ph146;
          }
         } else {
          if ($178) {
           $239 = (_malloc($$4)|0);
           $240 = ($239|0)==(0|0);
           if ($240) {
            $alloc$1 = $alloc$0;$s$5 = 0;$wcs$6 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$4;$s$1$ph = $239;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $241 = HEAP32[$3>>2]|0;
             $242 = HEAP32[$4>>2]|0;
             $243 = ($241>>>0)<($242>>>0);
             if ($243) {
              $244 = (($241) + 1|0);
              HEAP32[$3>>2] = $244;
              $245 = HEAP8[$241>>0]|0;
              $246 = $245&255;
              $249 = $246;
             } else {
              $247 = (___shgetc($f)|0);
              $249 = $247;
             }
             $248 = (($249) + 1)|0;
             $250 = (($scanset) + ($248)|0);
             $251 = HEAP8[$250>>0]|0;
             $252 = ($251<<24>>24)==(0);
             if ($252) {
              $i$4 = $i$2;$s$2 = $s$1$ph;$wcs$3 = 0;
              break L99;
             }
             $253 = $249&255;
             $254 = (($i$2) + 1)|0;
             $255 = (($s$1$ph) + ($i$2)|0);
             HEAP8[$255>>0] = $253;
             $256 = ($254|0)==($k$1$ph|0);
             if ($256) {
              break;
             } else {
              $i$2 = $254;
             }
            }
            $factor14 = $k$1$ph << 1;
            $257 = $factor14 | 1;
            $258 = (_realloc($s$1$ph,$257)|0);
            $259 = ($258|0)==(0|0);
            if ($259) {
             $alloc$1 = $alloc$0;$s$5 = $s$1$ph;$wcs$6 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $257;$s$1$ph = $258;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $260 = ($dest$0|0)==(0|0);
          if ($260) {
           $278 = $140;
           while(1) {
            $276 = HEAP32[$3>>2]|0;
            $277 = ($276>>>0)<($278>>>0);
            if ($277) {
             $279 = (($276) + 1|0);
             HEAP32[$3>>2] = $279;
             $280 = HEAP8[$276>>0]|0;
             $281 = $280&255;
             $284 = $281;
            } else {
             $282 = (___shgetc($f)|0);
             $284 = $282;
            }
            $283 = (($284) + 1)|0;
            $285 = (($scanset) + ($283)|0);
            $286 = HEAP8[$285>>0]|0;
            $287 = ($286<<24>>24)==(0);
            if ($287) {
             $i$4 = 0;$s$2 = 0;$wcs$3 = 0;
             break L99;
            }
            $$pre209 = HEAP32[$4>>2]|0;
            $278 = $$pre209;
           }
          } else {
           $263 = $140;$i$3 = 0;
           while(1) {
            $261 = HEAP32[$3>>2]|0;
            $262 = ($261>>>0)<($263>>>0);
            if ($262) {
             $264 = (($261) + 1|0);
             HEAP32[$3>>2] = $264;
             $265 = HEAP8[$261>>0]|0;
             $266 = $265&255;
             $269 = $266;
            } else {
             $267 = (___shgetc($f)|0);
             $269 = $267;
            }
            $268 = (($269) + 1)|0;
            $270 = (($scanset) + ($268)|0);
            $271 = HEAP8[$270>>0]|0;
            $272 = ($271<<24>>24)==(0);
            if ($272) {
             $i$4 = $i$3;$s$2 = $dest$0;$wcs$3 = 0;
             break L99;
            }
            $273 = $269&255;
            $274 = (($i$3) + 1)|0;
            $275 = (($dest$0) + ($i$3)|0);
            HEAP8[$275>>0] = $273;
            $$pre193 = HEAP32[$4>>2]|0;
            $263 = $$pre193;$i$3 = $274;
           }
          }
         }
        } while(0);
        $288 = HEAP32[$4>>2]|0;
        $289 = ($288|0)==(0|0);
        $$pre208 = HEAP32[$3>>2]|0;
        if ($289) {
         $294 = $$pre208;
        } else {
         $290 = (($$pre208) + -1|0);
         HEAP32[$3>>2] = $290;
         $294 = $290;
        }
        $291 = HEAP32[$5>>2]|0;
        $292 = HEAP32[$6>>2]|0;
        $293 = $294;
        $295 = $292;
        $296 = (($293) - ($295))|0;
        $297 = (($296) + ($291))|0;
        $298 = ($297|0)==(0);
        if ($298) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$2;$wcs$7 = $wcs$3;
         break L4;
        }
        $$not = $143 ^ 1;
        $299 = ($297|0)==($width$1|0);
        $or$cond5 = $299 | $$not;
        if (!($or$cond5)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$2;$wcs$7 = $wcs$3;
         break L4;
        }
        do {
         if ($178) {
          if ($177) {
           HEAP32[$dest$0>>2] = $wcs$3;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$2;
           break;
          }
         }
        } while(0);
        if ($143) {
         $p$10 = $p$9;$s$3 = $s$2;$wcs$4 = $wcs$3;
        } else {
         $300 = ($wcs$3|0)==(0|0);
         if (!($300)) {
          $301 = (($wcs$3) + ($i$4<<2)|0);
          HEAP32[$301>>2] = 0;
         }
         $302 = ($s$2|0)==(0|0);
         if ($302) {
          $p$10 = $p$9;$s$3 = 0;$wcs$4 = $wcs$3;
         } else {
          $303 = (($s$2) + ($i$4)|0);
          HEAP8[$303>>0] = 0;
          $p$10 = $p$9;$s$3 = $s$2;$wcs$4 = $wcs$3;
         }
        }
        break;
       }
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $322 = (+___floatscan($f,$$size$0,0));
        $323 = HEAP32[$5>>2]|0;
        $324 = HEAP32[$3>>2]|0;
        $325 = HEAP32[$6>>2]|0;
        $326 = $324;
        $327 = $325;
        $328 = (($327) - ($326))|0;
        $329 = ($323|0)==($328|0);
        if ($329) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$0114;$wcs$7 = $wcs$0115;
         break L4;
        }
        $330 = ($dest$0|0)==(0|0);
        if ($330) {
         $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
        } else {
         if ((($$size$0|0) == 0)) {
          $331 = $322;
          HEAPF32[$dest$0>>2] = $331;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L78;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L78;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $322;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L78;
         } else {
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L78;
         }
        }
        break;
       }
       default: {
        $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
       }
       }
      } while(0);
      L197: do {
       if ((label|0) == 144) {
        label = 0;
        $304 = (___intscan($f,$base$0,0,-1,-1)|0);
        $305 = tempRet0;
        $306 = HEAP32[$5>>2]|0;
        $307 = HEAP32[$3>>2]|0;
        $308 = HEAP32[$6>>2]|0;
        $309 = $307;
        $310 = $308;
        $311 = (($310) - ($309))|0;
        $312 = ($306|0)==($311|0);
        if ($312) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0116;$s$6 = $s$0114;$wcs$7 = $wcs$0115;
         break L4;
        }
        $313 = ($$|0)!=(112);
        $314 = ($dest$0|0)==(0|0);
        $or$cond6 = $313 | $314;
        if (!($or$cond6)) {
         $315 = $304;
         HEAP32[$dest$0>>2] = $315;
         $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
         break;
        }
        if ($314) {
         $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
        } else {
         switch ($$size$0|0) {
         case -1:  {
          $317 = $304&65535;
          HEAP16[$dest$0>>1] = $317;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $304;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
          break;
         }
         case 3:  {
          $318 = $dest$0;
          $319 = $318;
          HEAP32[$319>>2] = $304;
          $320 = (($318) + 4)|0;
          $321 = $320;
          HEAP32[$321>>2] = $305;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
          break;
         }
         case -2:  {
          $316 = $304&255;
          HEAP8[$dest$0>>0] = $316;
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
          break;
         }
         default: {
          $p$10 = $p$5;$s$3 = $s$0114;$wcs$4 = $wcs$0115;
          break L197;
         }
         }
        }
       }
      } while(0);
      $332 = HEAP32[$5>>2]|0;
      $333 = HEAP32[$3>>2]|0;
      $334 = HEAP32[$6>>2]|0;
      $335 = $333;
      $336 = $334;
      $337 = (($332) + ($pos$1))|0;
      $338 = (($337) + ($335))|0;
      $339 = (($338) - ($336))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $340 = $not$&1;
      $matches$0$ = (($340) + ($matches$0116))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $339;$s$4 = $s$3;$wcs$5 = $wcs$4;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0122) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $58 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $58 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $57 = ($58|0)==($56|0);
    if (!($57)) {
     label = 19;
     break L4;
    }
    $64 = (($pos$0121) + 1)|0;
    $matches$1 = $matches$0116;$p$11 = $47;$pos$2 = $64;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
   } else {
    $p$1 = $p$0122;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre210 = HEAP32[$3>>2]|0;
    if ($32) {
     $37 = $$pre210;
    } else {
     $33 = (($$pre210) + -1|0);
     HEAP32[$3>>2] = $33;
     $37 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $36 = $37;
    $38 = $35;
    $39 = (($34) + ($pos$0121))|0;
    $40 = (($39) + ($36))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0116;$p$11 = $p$1;$pos$2 = $41;$s$4 = $s$0114;$wcs$5 = $wcs$0115;
   }
  } while(0);
  $341 = (($p$11) + 1|0);
  $342 = HEAP8[$341>>0]|0;
  $343 = ($342<<24>>24)==(0);
  if ($343) {
   $matches$3 = $matches$1;
   label = 165;
   break;
  } else {
   $13 = $342;$matches$0116 = $matches$1;$p$0122 = $341;$pos$0121 = $pos$2;$s$0114 = $s$4;$wcs$0115 = $wcs$5;
  }
 }
 if ((label|0) == 165) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($58|0)<(0);
  if ($63) {
   $alloc$1 = 0;$s$5 = $s$0114;$wcs$6 = $wcs$0115;
   label = 162;
  } else {
   $matches$3 = $matches$0116;
   STACKTOP = sp;return ($matches$3|0);
  }
 }
 if ((label|0) == 162) {
  $344 = ($matches$0116|0)==(0);
  $345 = $344 << 31 >> 31;
  $$matches$0 = (($345) + ($matches$0116))|0;
  $alloc$2 = $alloc$1;$matches$2 = $$matches$0;$s$6 = $s$5;$wcs$7 = $wcs$6;
 }
 $346 = ($alloc$2|0)==(0);
 if ($346) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$6);
 _free($wcs$7);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 271;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 STACKTOP = sp;return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$026 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $w$0$lcssa = 0, $w$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 if ($1) {
  $6 = (_strlen(($s|0))|0);
  $7 = (($s) + ($6)|0);
  $$0 = $7;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = $s;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L5: do {
  if ($4) {
   $$02$lcssa = $s;
  } else {
   $5 = $c&255;
   $$026 = $s;
   while(1) {
    $12 = HEAP8[$$026>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $14 = ($12<<24>>24)==($5<<24>>24);
    $9 = (($$026) + 1|0);
    if ($14) {
     $$0 = $$026;
     label = 13;
     break;
    }
    $8 = $9;
    $10 = $8 & 3;
    $11 = ($10|0)==(0);
    if ($11) {
     $$02$lcssa = $9;
     break L5;
    } else {
     $$026 = $9;
    }
   }
   if ((label|0) == 13) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $15 = Math_imul($0, 16843009)|0;
 $16 = HEAP32[$$02$lcssa>>2]|0;
 $17 = (($16) + -16843009)|0;
 $18 = $16 & -2139062144;
 $19 = $18 ^ -2139062144;
 $20 = $19 & $17;
 $21 = ($20|0)==(0);
 L15: do {
  if ($21) {
   $30 = $16;$w$03 = $$02$lcssa;
   while(1) {
    $29 = $30 ^ $15;
    $31 = (($29) + -16843009)|0;
    $32 = $29 & -2139062144;
    $33 = $32 ^ -2139062144;
    $34 = $33 & $31;
    $35 = ($34|0)==(0);
    $23 = (($w$03) + 4|0);
    if (!($35)) {
     $w$0$lcssa = $w$03;
     break L15;
    }
    $22 = HEAP32[$23>>2]|0;
    $24 = (($22) + -16843009)|0;
    $25 = $22 & -2139062144;
    $26 = $25 ^ -2139062144;
    $27 = $26 & $24;
    $28 = ($27|0)==(0);
    if ($28) {
     $30 = $22;$w$03 = $23;
    } else {
     $w$0$lcssa = $23;
     break;
    }
   }
  } else {
   $w$0$lcssa = $$02$lcssa;
  }
 } while(0);
 $36 = $c&255;
 $$1 = $w$0$lcssa;
 while(1) {
  $37 = HEAP8[$$1>>0]|0;
  $38 = ($37<<24>>24)==(0);
  $39 = ($37<<24>>24)==($36<<24>>24);
  $or$cond = $38 | $39;
  $40 = (($$1) + 1|0);
  if ($or$cond) {
   $$0 = $$1;
   break;
  } else {
   $$1 = $40;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___strdup($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($s|0))|0);
 $1 = (($0) + 1)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 _memcpy(($2|0),($s|0),($1|0))|0;
 $$0 = $2;
 STACKTOP = sp;return ($$0|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$$i = 0, $$3$i = 0, $$4$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i25 = 0, $$pre$i25$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i26$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre57$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0;
 var $$sum$i14$i = 0, $$sum$i15$i = 0, $$sum$i18$i = 0, $$sum$i21$i = 0, $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i16$i = 0, $$sum1$i22$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0;
 var $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i24$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0, $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0;
 var $$sum14$pre$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i17$i = 0, $$sum2$i19$i = 0, $$sum2$i23$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0;
 var $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0;
 var $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0;
 var $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0;
 var $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0;
 var $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0;
 var $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0;
 var $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0;
 var $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0;
 var $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0;
 var $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0;
 var $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0;
 var $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0;
 var $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0;
 var $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$025$i = 0, $K2$014$i$i = 0, $K8$052$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i28$i = 0, $T$013$i$i = 0;
 var $T$024$i = 0, $T$051$i$i = 0, $br$0$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $notlhs$i = 0, $notrhs$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond19$i = 0, $or$cond2$i = 0;
 var $or$cond49$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$not$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$329$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$075$i = 0, $sp$168$i = 0, $ssize$0$$i = 0;
 var $ssize$0$i = 0, $ssize$1$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$228$i = 0, $tbase$0$i = 0, $tbase$247$i = 0, $tsize$0$i = 0, $tsize$0323841$i = 0, $tsize$1$i = 0, $tsize$246$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0;
 var $v$330$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[10408>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((10408 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((10408 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[10408>>2] = $22;
     } else {
      $23 = HEAP32[((10408 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((10408 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((10408 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((10408 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[10408>>2] = $74;
      } else {
       $75 = HEAP32[((10408 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = HEAP32[((10408 + 8|0))>>2]|0;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[((10408 + 20|0))>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = ((10408 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[10408>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[10408>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre = ((10408 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((10408 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((10408 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((10408 + 8|0))>>2] = $81;
     HEAP32[((10408 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((10408 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((10408 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((10408 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((10408 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((10408 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((10408 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((10408 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((10408 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = HEAP32[((10408 + 16|0))>>2]|0;
         $204 = ($201>>>0)<($203>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = (($R$1$i) + 16|0);
          HEAP32[$205>>2] = $201;
          $206 = (($201) + 24|0);
          HEAP32[$206>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $207 = (($v$0$i) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[((10408 + 16|0))>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = (($R$1$i) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = (($208) + 24|0);
         HEAP32[$213>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i) + ($5))|0;
      $216 = $215 | 3;
      $217 = (($v$0$i) + 4|0);
      HEAP32[$217>>2] = $216;
      $$sum4$i = (($215) + 4)|0;
      $218 = (($v$0$i) + ($$sum4$i)|0);
      $219 = HEAP32[$218>>2]|0;
      $220 = $219 | 1;
      HEAP32[$218>>2] = $220;
     } else {
      $221 = $5 | 3;
      $222 = (($v$0$i) + 4|0);
      HEAP32[$222>>2] = $221;
      $223 = $rsize$0$i | 1;
      $$sum$i35 = $5 | 4;
      $224 = (($v$0$i) + ($$sum$i35)|0);
      HEAP32[$224>>2] = $223;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $225 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$225>>2] = $rsize$0$i;
      $226 = HEAP32[((10408 + 8|0))>>2]|0;
      $227 = ($226|0)==(0);
      if (!($227)) {
       $228 = HEAP32[((10408 + 20|0))>>2]|0;
       $229 = $226 >>> 3;
       $230 = $229 << 1;
       $231 = ((10408 + ($230<<2)|0) + 40|0);
       $232 = HEAP32[10408>>2]|0;
       $233 = 1 << $229;
       $234 = $232 & $233;
       $235 = ($234|0)==(0);
       if ($235) {
        $236 = $232 | $233;
        HEAP32[10408>>2] = $236;
        $$sum2$pre$i = (($230) + 2)|0;
        $$pre$i = ((10408 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $231;
       } else {
        $$sum3$i = (($230) + 2)|0;
        $237 = ((10408 + ($$sum3$i<<2)|0) + 40|0);
        $238 = HEAP32[$237>>2]|0;
        $239 = HEAP32[((10408 + 16|0))>>2]|0;
        $240 = ($238>>>0)<($239>>>0);
        if ($240) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $237;$F1$0$i = $238;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $241 = (($F1$0$i) + 12|0);
       HEAP32[$241>>2] = $228;
       $242 = (($228) + 8|0);
       HEAP32[$242>>2] = $F1$0$i;
       $243 = (($228) + 12|0);
       HEAP32[$243>>2] = $231;
      }
      HEAP32[((10408 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((10408 + 20|0))>>2] = $151;
     }
     $244 = (($v$0$i) + 8|0);
     $mem$0 = $244;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $245 = ($bytes>>>0)>(4294967231);
   if ($245) {
    $nb$0 = -1;
   } else {
    $246 = (($bytes) + 11)|0;
    $247 = $246 & -8;
    $248 = HEAP32[((10408 + 4|0))>>2]|0;
    $249 = ($248|0)==(0);
    if ($249) {
     $nb$0 = $247;
    } else {
     $250 = (0 - ($247))|0;
     $251 = $246 >>> 8;
     $252 = ($251|0)==(0);
     if ($252) {
      $idx$0$i = 0;
     } else {
      $253 = ($247>>>0)>(16777215);
      if ($253) {
       $idx$0$i = 31;
      } else {
       $254 = (($251) + 1048320)|0;
       $255 = $254 >>> 16;
       $256 = $255 & 8;
       $257 = $251 << $256;
       $258 = (($257) + 520192)|0;
       $259 = $258 >>> 16;
       $260 = $259 & 4;
       $261 = $260 | $256;
       $262 = $257 << $260;
       $263 = (($262) + 245760)|0;
       $264 = $263 >>> 16;
       $265 = $264 & 2;
       $266 = $261 | $265;
       $267 = (14 - ($266))|0;
       $268 = $262 << $265;
       $269 = $268 >>> 15;
       $270 = (($267) + ($269))|0;
       $271 = $270 << 1;
       $272 = (($270) + 7)|0;
       $273 = $247 >>> $272;
       $274 = $273 & 1;
       $275 = $274 | $271;
       $idx$0$i = $275;
      }
     }
     $276 = ((10408 + ($idx$0$i<<2)|0) + 304|0);
     $277 = HEAP32[$276>>2]|0;
     $278 = ($277|0)==(0|0);
     L126: do {
      if ($278) {
       $rsize$2$i = $250;$t$1$i = 0;$v$2$i = 0;
      } else {
       $279 = ($idx$0$i|0)==(31);
       if ($279) {
        $283 = 0;
       } else {
        $280 = $idx$0$i >>> 1;
        $281 = (25 - ($280))|0;
        $283 = $281;
       }
       $282 = $247 << $283;
       $rsize$0$i15 = $250;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $277;$v$0$i16 = 0;
       while(1) {
        $284 = (($t$0$i14) + 4|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = $285 & -8;
        $287 = (($286) - ($247))|0;
        $288 = ($287>>>0)<($rsize$0$i15>>>0);
        if ($288) {
         $289 = ($286|0)==($247|0);
         if ($289) {
          $rsize$2$i = $287;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $287;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $290 = (($t$0$i14) + 20|0);
        $291 = HEAP32[$290>>2]|0;
        $292 = $sizebits$0$i >>> 31;
        $293 = ((($t$0$i14) + ($292<<2)|0) + 16|0);
        $294 = HEAP32[$293>>2]|0;
        $295 = ($291|0)==(0|0);
        $296 = ($291|0)==($294|0);
        $or$cond$i = $295 | $296;
        $rst$1$i = $or$cond$i ? $rst$0$i : $291;
        $297 = ($294|0)==(0|0);
        $298 = $sizebits$0$i << 1;
        if ($297) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $298;$t$0$i14 = $294;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $299 = ($t$1$i|0)==(0|0);
     $300 = ($v$2$i|0)==(0|0);
     $or$cond19$i = $299 & $300;
     if ($or$cond19$i) {
      $301 = 2 << $idx$0$i;
      $302 = (0 - ($301))|0;
      $303 = $301 | $302;
      $304 = $248 & $303;
      $305 = ($304|0)==(0);
      if ($305) {
       $nb$0 = $247;
       break;
      }
      $306 = (0 - ($304))|0;
      $307 = $304 & $306;
      $308 = (($307) + -1)|0;
      $309 = $308 >>> 12;
      $310 = $309 & 16;
      $311 = $308 >>> $310;
      $312 = $311 >>> 5;
      $313 = $312 & 8;
      $314 = $313 | $310;
      $315 = $311 >>> $313;
      $316 = $315 >>> 2;
      $317 = $316 & 4;
      $318 = $314 | $317;
      $319 = $315 >>> $317;
      $320 = $319 >>> 1;
      $321 = $320 & 2;
      $322 = $318 | $321;
      $323 = $319 >>> $321;
      $324 = $323 >>> 1;
      $325 = $324 & 1;
      $326 = $322 | $325;
      $327 = $323 >>> $325;
      $328 = (($326) + ($327))|0;
      $329 = ((10408 + ($328<<2)|0) + 304|0);
      $330 = HEAP32[$329>>2]|0;
      $t$2$ph$i = $330;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $331 = ($t$2$ph$i|0)==(0|0);
     if ($331) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$329$i = $rsize$2$i;$t$228$i = $t$2$ph$i;$v$330$i = $v$2$i;
      while(1) {
       $332 = (($t$228$i) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($247))|0;
       $336 = ($335>>>0)<($rsize$329$i>>>0);
       $$rsize$3$i = $336 ? $335 : $rsize$329$i;
       $t$2$v$3$i = $336 ? $t$228$i : $v$330$i;
       $337 = (($t$228$i) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $338;$v$330$i = $t$2$v$3$i;
        continue;
       }
       $340 = (($t$228$i) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$329$i = $$rsize$3$i;$t$228$i = $341;$v$330$i = $t$2$v$3$i;
       }
      }
     }
     $343 = ($v$3$lcssa$i|0)==(0|0);
     if ($343) {
      $nb$0 = $247;
     } else {
      $344 = HEAP32[((10408 + 8|0))>>2]|0;
      $345 = (($344) - ($247))|0;
      $346 = ($rsize$3$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[((10408 + 16|0))>>2]|0;
       $348 = ($v$3$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($v$3$lcssa$i) + ($247)|0);
       $350 = ($v$3$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = (($v$3$lcssa$i) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = (($v$3$lcssa$i) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($v$3$lcssa$i|0);
       do {
        if ($355) {
         $365 = (($v$3$lcssa$i) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = (($v$3$lcssa$i) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $369;$RP$0$i17 = $368;
          }
         } else {
          $R$0$i18 = $366;$RP$0$i17 = $365;
         }
         while(1) {
          $371 = (($R$0$i18) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $R$0$i18 = $372;$RP$0$i17 = $371;
           continue;
          }
          $374 = (($R$0$i18) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $R$0$i18 = $375;$RP$0$i17 = $374;
          }
         }
         $377 = ($RP$0$i17>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $356 = (($v$3$lcssa$i) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = (($357) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($v$3$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = (($354) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($v$3$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $R$1$i20 = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if (!($378)) {
         $379 = (($v$3$lcssa$i) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = ((10408 + ($380<<2)|0) + 304|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($v$3$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = HEAP32[((10408 + 4|0))>>2]|0;
           $387 = $386 & $385;
           HEAP32[((10408 + 4|0))>>2] = $387;
           break;
          }
         } else {
          $388 = HEAP32[((10408 + 16|0))>>2]|0;
          $389 = ($352>>>0)<($388>>>0);
          if ($389) {
           _abort();
           // unreachable;
          }
          $390 = (($352) + 16|0);
          $391 = HEAP32[$390>>2]|0;
          $392 = ($391|0)==($v$3$lcssa$i|0);
          if ($392) {
           HEAP32[$390>>2] = $R$1$i20;
          } else {
           $393 = (($352) + 20|0);
           HEAP32[$393>>2] = $R$1$i20;
          }
          $394 = ($R$1$i20|0)==(0|0);
          if ($394) {
           break;
          }
         }
         $395 = HEAP32[((10408 + 16|0))>>2]|0;
         $396 = ($R$1$i20>>>0)<($395>>>0);
         if ($396) {
          _abort();
          // unreachable;
         }
         $397 = (($R$1$i20) + 24|0);
         HEAP32[$397>>2] = $352;
         $398 = (($v$3$lcssa$i) + 16|0);
         $399 = HEAP32[$398>>2]|0;
         $400 = ($399|0)==(0|0);
         do {
          if (!($400)) {
           $401 = HEAP32[((10408 + 16|0))>>2]|0;
           $402 = ($399>>>0)<($401>>>0);
           if ($402) {
            _abort();
            // unreachable;
           } else {
            $403 = (($R$1$i20) + 16|0);
            HEAP32[$403>>2] = $399;
            $404 = (($399) + 24|0);
            HEAP32[$404>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $405 = (($v$3$lcssa$i) + 20|0);
         $406 = HEAP32[$405>>2]|0;
         $407 = ($406|0)==(0|0);
         if (!($407)) {
          $408 = HEAP32[((10408 + 16|0))>>2]|0;
          $409 = ($406>>>0)<($408>>>0);
          if ($409) {
           _abort();
           // unreachable;
          } else {
           $410 = (($R$1$i20) + 20|0);
           HEAP32[$410>>2] = $406;
           $411 = (($406) + 24|0);
           HEAP32[$411>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $412 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($412) {
         $413 = (($rsize$3$lcssa$i) + ($247))|0;
         $414 = $413 | 3;
         $415 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$415>>2] = $414;
         $$sum18$i = (($413) + 4)|0;
         $416 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $417 = HEAP32[$416>>2]|0;
         $418 = $417 | 1;
         HEAP32[$416>>2] = $418;
        } else {
         $419 = $247 | 3;
         $420 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$420>>2] = $419;
         $421 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $247 | 4;
         $422 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$422>>2] = $421;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($247))|0;
         $423 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$423>>2] = $rsize$3$lcssa$i;
         $424 = $rsize$3$lcssa$i >>> 3;
         $425 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($425) {
          $426 = $424 << 1;
          $427 = ((10408 + ($426<<2)|0) + 40|0);
          $428 = HEAP32[10408>>2]|0;
          $429 = 1 << $424;
          $430 = $428 & $429;
          $431 = ($430|0)==(0);
          do {
           if ($431) {
            $432 = $428 | $429;
            HEAP32[10408>>2] = $432;
            $$sum14$pre$i = (($426) + 2)|0;
            $$pre$i25 = ((10408 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $427;
           } else {
            $$sum17$i = (($426) + 2)|0;
            $433 = ((10408 + ($$sum17$i<<2)|0) + 40|0);
            $434 = HEAP32[$433>>2]|0;
            $435 = HEAP32[((10408 + 16|0))>>2]|0;
            $436 = ($434>>>0)<($435>>>0);
            if (!($436)) {
             $$pre$phi$i26Z2D = $433;$F5$0$i = $434;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $349;
          $437 = (($F5$0$i) + 12|0);
          HEAP32[$437>>2] = $349;
          $$sum15$i = (($247) + 8)|0;
          $438 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$438>>2] = $F5$0$i;
          $$sum16$i = (($247) + 12)|0;
          $439 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$439>>2] = $427;
          break;
         }
         $440 = $rsize$3$lcssa$i >>> 8;
         $441 = ($440|0)==(0);
         if ($441) {
          $I7$0$i = 0;
         } else {
          $442 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($442) {
           $I7$0$i = 31;
          } else {
           $443 = (($440) + 1048320)|0;
           $444 = $443 >>> 16;
           $445 = $444 & 8;
           $446 = $440 << $445;
           $447 = (($446) + 520192)|0;
           $448 = $447 >>> 16;
           $449 = $448 & 4;
           $450 = $449 | $445;
           $451 = $446 << $449;
           $452 = (($451) + 245760)|0;
           $453 = $452 >>> 16;
           $454 = $453 & 2;
           $455 = $450 | $454;
           $456 = (14 - ($455))|0;
           $457 = $451 << $454;
           $458 = $457 >>> 15;
           $459 = (($456) + ($458))|0;
           $460 = $459 << 1;
           $461 = (($459) + 7)|0;
           $462 = $rsize$3$lcssa$i >>> $461;
           $463 = $462 & 1;
           $464 = $463 | $460;
           $I7$0$i = $464;
          }
         }
         $465 = ((10408 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($247) + 28)|0;
         $466 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$466>>2] = $I7$0$i;
         $$sum3$i27 = (($247) + 16)|0;
         $467 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($247) + 20)|0;
         $468 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$468>>2] = 0;
         HEAP32[$467>>2] = 0;
         $469 = HEAP32[((10408 + 4|0))>>2]|0;
         $470 = 1 << $I7$0$i;
         $471 = $469 & $470;
         $472 = ($471|0)==(0);
         if ($472) {
          $473 = $469 | $470;
          HEAP32[((10408 + 4|0))>>2] = $473;
          HEAP32[$465>>2] = $349;
          $$sum5$i = (($247) + 24)|0;
          $474 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$474>>2] = $465;
          $$sum6$i = (($247) + 12)|0;
          $475 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$475>>2] = $349;
          $$sum7$i = (($247) + 8)|0;
          $476 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$476>>2] = $349;
          break;
         }
         $477 = HEAP32[$465>>2]|0;
         $478 = ($I7$0$i|0)==(31);
         if ($478) {
          $486 = 0;
         } else {
          $479 = $I7$0$i >>> 1;
          $480 = (25 - ($479))|0;
          $486 = $480;
         }
         $481 = (($477) + 4|0);
         $482 = HEAP32[$481>>2]|0;
         $483 = $482 & -8;
         $484 = ($483|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($484) {
           $T$0$lcssa$i = $477;
          } else {
           $485 = $rsize$3$lcssa$i << $486;
           $K12$025$i = $485;$T$024$i = $477;
           while(1) {
            $493 = $K12$025$i >>> 31;
            $494 = ((($T$024$i) + ($493<<2)|0) + 16|0);
            $489 = HEAP32[$494>>2]|0;
            $495 = ($489|0)==(0|0);
            if ($495) {
             break;
            }
            $487 = $K12$025$i << 1;
            $488 = (($489) + 4|0);
            $490 = HEAP32[$488>>2]|0;
            $491 = $490 & -8;
            $492 = ($491|0)==($rsize$3$lcssa$i|0);
            if ($492) {
             $T$0$lcssa$i = $489;
             break L225;
            } else {
             $K12$025$i = $487;$T$024$i = $489;
            }
           }
           $496 = HEAP32[((10408 + 16|0))>>2]|0;
           $497 = ($494>>>0)<($496>>>0);
           if ($497) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$494>>2] = $349;
            $$sum11$i = (($247) + 24)|0;
            $498 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$498>>2] = $T$024$i;
            $$sum12$i = (($247) + 12)|0;
            $499 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$499>>2] = $349;
            $$sum13$i = (($247) + 8)|0;
            $500 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$500>>2] = $349;
            break L204;
           }
          }
         } while(0);
         $501 = (($T$0$lcssa$i) + 8|0);
         $502 = HEAP32[$501>>2]|0;
         $503 = HEAP32[((10408 + 16|0))>>2]|0;
         $504 = ($T$0$lcssa$i>>>0)<($503>>>0);
         if ($504) {
          _abort();
          // unreachable;
         }
         $505 = ($502>>>0)<($503>>>0);
         if ($505) {
          _abort();
          // unreachable;
         } else {
          $506 = (($502) + 12|0);
          HEAP32[$506>>2] = $349;
          HEAP32[$501>>2] = $349;
          $$sum8$i = (($247) + 8)|0;
          $507 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$507>>2] = $502;
          $$sum9$i = (($247) + 12)|0;
          $508 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$508>>2] = $T$0$lcssa$i;
          $$sum10$i = (($247) + 24)|0;
          $509 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$509>>2] = 0;
          break;
         }
        }
       } while(0);
       $510 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $510;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $247;
      }
     }
    }
   }
  }
 } while(0);
 $511 = HEAP32[((10408 + 8|0))>>2]|0;
 $512 = ($nb$0>>>0)>($511>>>0);
 if (!($512)) {
  $513 = (($511) - ($nb$0))|0;
  $514 = HEAP32[((10408 + 20|0))>>2]|0;
  $515 = ($513>>>0)>(15);
  if ($515) {
   $516 = (($514) + ($nb$0)|0);
   HEAP32[((10408 + 20|0))>>2] = $516;
   HEAP32[((10408 + 8|0))>>2] = $513;
   $517 = $513 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $518 = (($514) + ($$sum2)|0);
   HEAP32[$518>>2] = $517;
   $519 = (($514) + ($511)|0);
   HEAP32[$519>>2] = $513;
   $520 = $nb$0 | 3;
   $521 = (($514) + 4|0);
   HEAP32[$521>>2] = $520;
  } else {
   HEAP32[((10408 + 8|0))>>2] = 0;
   HEAP32[((10408 + 20|0))>>2] = 0;
   $522 = $511 | 3;
   $523 = (($514) + 4|0);
   HEAP32[$523>>2] = $522;
   $$sum1 = (($511) + 4)|0;
   $524 = (($514) + ($$sum1)|0);
   $525 = HEAP32[$524>>2]|0;
   $526 = $525 | 1;
   HEAP32[$524>>2] = $526;
  }
  $527 = (($514) + 8|0);
  $mem$0 = $527;
  STACKTOP = sp;return ($mem$0|0);
 }
 $528 = HEAP32[((10408 + 12|0))>>2]|0;
 $529 = ($nb$0>>>0)<($528>>>0);
 if ($529) {
  $530 = (($528) - ($nb$0))|0;
  HEAP32[((10408 + 12|0))>>2] = $530;
  $531 = HEAP32[((10408 + 24|0))>>2]|0;
  $532 = (($531) + ($nb$0)|0);
  HEAP32[((10408 + 24|0))>>2] = $532;
  $533 = $530 | 1;
  $$sum = (($nb$0) + 4)|0;
  $534 = (($531) + ($$sum)|0);
  HEAP32[$534>>2] = $533;
  $535 = $nb$0 | 3;
  $536 = (($531) + 4|0);
  HEAP32[$536>>2] = $535;
  $537 = (($531) + 8|0);
  $mem$0 = $537;
  STACKTOP = sp;return ($mem$0|0);
 }
 $538 = HEAP32[10880>>2]|0;
 $539 = ($538|0)==(0);
 do {
  if ($539) {
   $540 = (_sysconf(30)|0);
   $541 = (($540) + -1)|0;
   $542 = $541 & $540;
   $543 = ($542|0)==(0);
   if ($543) {
    HEAP32[((10880 + 8|0))>>2] = $540;
    HEAP32[((10880 + 4|0))>>2] = $540;
    HEAP32[((10880 + 12|0))>>2] = -1;
    HEAP32[((10880 + 16|0))>>2] = -1;
    HEAP32[((10880 + 20|0))>>2] = 0;
    HEAP32[((10408 + 444|0))>>2] = 0;
    $544 = (_time((0|0))|0);
    $545 = $544 & -16;
    $546 = $545 ^ 1431655768;
    HEAP32[10880>>2] = $546;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $547 = (($nb$0) + 48)|0;
 $548 = HEAP32[((10880 + 8|0))>>2]|0;
 $549 = (($nb$0) + 47)|0;
 $550 = (($548) + ($549))|0;
 $551 = (0 - ($548))|0;
 $552 = $550 & $551;
 $553 = ($552>>>0)>($nb$0>>>0);
 if (!($553)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $554 = HEAP32[((10408 + 440|0))>>2]|0;
 $555 = ($554|0)==(0);
 if (!($555)) {
  $556 = HEAP32[((10408 + 432|0))>>2]|0;
  $557 = (($556) + ($552))|0;
  $558 = ($557>>>0)<=($556>>>0);
  $559 = ($557>>>0)>($554>>>0);
  $or$cond1$i = $558 | $559;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $560 = HEAP32[((10408 + 444|0))>>2]|0;
 $561 = $560 & 4;
 $562 = ($561|0)==(0);
 L269: do {
  if ($562) {
   $563 = HEAP32[((10408 + 24|0))>>2]|0;
   $564 = ($563|0)==(0|0);
   L271: do {
    if ($564) {
     label = 182;
    } else {
     $sp$0$i$i = ((10408 + 448|0));
     while(1) {
      $565 = HEAP32[$sp$0$i$i>>2]|0;
      $566 = ($565>>>0)>($563>>>0);
      if (!($566)) {
       $567 = (($sp$0$i$i) + 4|0);
       $568 = HEAP32[$567>>2]|0;
       $569 = (($565) + ($568)|0);
       $570 = ($569>>>0)>($563>>>0);
       if ($570) {
        break;
       }
      }
      $571 = (($sp$0$i$i) + 8|0);
      $572 = HEAP32[$571>>2]|0;
      $573 = ($572|0)==(0|0);
      if ($573) {
       label = 182;
       break L271;
      } else {
       $sp$0$i$i = $572;
      }
     }
     $574 = ($sp$0$i$i|0)==(0|0);
     if ($574) {
      label = 182;
     } else {
      $597 = HEAP32[((10408 + 12|0))>>2]|0;
      $598 = (($550) - ($597))|0;
      $599 = $598 & $551;
      $600 = ($599>>>0)<(2147483647);
      if ($600) {
       $601 = (_sbrk(($599|0))|0);
       $602 = HEAP32[$sp$0$i$i>>2]|0;
       $603 = HEAP32[$567>>2]|0;
       $604 = (($602) + ($603)|0);
       $605 = ($601|0)==($604|0);
       $$3$i = $605 ? $599 : 0;
       $$4$i = $605 ? $601 : (-1);
       $br$0$i = $601;$ssize$1$i = $599;$tbase$0$i = $$4$i;$tsize$0$i = $$3$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 182) {
     $575 = (_sbrk(0)|0);
     $576 = ($575|0)==((-1)|0);
     if ($576) {
      $tsize$0323841$i = 0;
     } else {
      $577 = $575;
      $578 = HEAP32[((10880 + 4|0))>>2]|0;
      $579 = (($578) + -1)|0;
      $580 = $579 & $577;
      $581 = ($580|0)==(0);
      if ($581) {
       $ssize$0$i = $552;
      } else {
       $582 = (($579) + ($577))|0;
       $583 = (0 - ($578))|0;
       $584 = $582 & $583;
       $585 = (($552) - ($577))|0;
       $586 = (($585) + ($584))|0;
       $ssize$0$i = $586;
      }
      $587 = HEAP32[((10408 + 432|0))>>2]|0;
      $588 = (($587) + ($ssize$0$i))|0;
      $589 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $590 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $589 & $590;
      if ($or$cond$i29) {
       $591 = HEAP32[((10408 + 440|0))>>2]|0;
       $592 = ($591|0)==(0);
       if (!($592)) {
        $593 = ($588>>>0)<=($587>>>0);
        $594 = ($588>>>0)>($591>>>0);
        $or$cond2$i = $593 | $594;
        if ($or$cond2$i) {
         $tsize$0323841$i = 0;
         break;
        }
       }
       $595 = (_sbrk(($ssize$0$i|0))|0);
       $596 = ($595|0)==($575|0);
       $ssize$0$$i = $596 ? $ssize$0$i : 0;
       $$$i = $596 ? $575 : (-1);
       $br$0$i = $595;$ssize$1$i = $ssize$0$i;$tbase$0$i = $$$i;$tsize$0$i = $ssize$0$$i;
       label = 191;
      } else {
       $tsize$0323841$i = 0;
      }
     }
    }
   } while(0);
   L291: do {
    if ((label|0) == 191) {
     $606 = (0 - ($ssize$1$i))|0;
     $607 = ($tbase$0$i|0)==((-1)|0);
     if (!($607)) {
      $tbase$247$i = $tbase$0$i;$tsize$246$i = $tsize$0$i;
      label = 202;
      break L269;
     }
     $608 = ($br$0$i|0)!=((-1)|0);
     $609 = ($ssize$1$i>>>0)<(2147483647);
     $or$cond5$i = $608 & $609;
     $610 = ($ssize$1$i>>>0)<($547>>>0);
     $or$cond6$i = $or$cond5$i & $610;
     do {
      if ($or$cond6$i) {
       $611 = HEAP32[((10880 + 8|0))>>2]|0;
       $612 = (($549) - ($ssize$1$i))|0;
       $613 = (($612) + ($611))|0;
       $614 = (0 - ($611))|0;
       $615 = $613 & $614;
       $616 = ($615>>>0)<(2147483647);
       if ($616) {
        $617 = (_sbrk(($615|0))|0);
        $618 = ($617|0)==((-1)|0);
        if ($618) {
         (_sbrk(($606|0))|0);
         $tsize$0323841$i = $tsize$0$i;
         break L291;
        } else {
         $619 = (($615) + ($ssize$1$i))|0;
         $ssize$2$i = $619;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$i;
       }
      } else {
       $ssize$2$i = $ssize$1$i;
      }
     } while(0);
     $620 = ($br$0$i|0)==((-1)|0);
     if ($620) {
      $tsize$0323841$i = $tsize$0$i;
     } else {
      $tbase$247$i = $br$0$i;$tsize$246$i = $ssize$2$i;
      label = 202;
      break L269;
     }
    }
   } while(0);
   $621 = HEAP32[((10408 + 444|0))>>2]|0;
   $622 = $621 | 4;
   HEAP32[((10408 + 444|0))>>2] = $622;
   $tsize$1$i = $tsize$0323841$i;
   label = 199;
  } else {
   $tsize$1$i = 0;
   label = 199;
  }
 } while(0);
 if ((label|0) == 199) {
  $623 = ($552>>>0)<(2147483647);
  if ($623) {
   $624 = (_sbrk(($552|0))|0);
   $625 = (_sbrk(0)|0);
   $notlhs$i = ($624|0)!=((-1)|0);
   $notrhs$i = ($625|0)!=((-1)|0);
   $or$cond8$not$i = $notrhs$i & $notlhs$i;
   $626 = ($624>>>0)<($625>>>0);
   $or$cond9$i = $or$cond8$not$i & $626;
   if ($or$cond9$i) {
    $627 = $625;
    $628 = $624;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$247$i = $624;$tsize$246$i = $$tsize$1$i;
     label = 202;
    }
   }
  }
 }
 if ((label|0) == 202) {
  $632 = HEAP32[((10408 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$246$i))|0;
  HEAP32[((10408 + 432|0))>>2] = $633;
  $634 = HEAP32[((10408 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((10408 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((10408 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L311: do {
   if ($637) {
    $638 = HEAP32[((10408 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$247$i>>>0)<($638>>>0);
    $or$cond10$i = $639 | $640;
    if ($or$cond10$i) {
     HEAP32[((10408 + 16|0))>>2] = $tbase$247$i;
    }
    HEAP32[((10408 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((10408 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((10408 + 460|0))>>2] = 0;
    $641 = HEAP32[10880>>2]|0;
    HEAP32[((10408 + 36|0))>>2] = $641;
    HEAP32[((10408 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((10408 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((10408 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((10408 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$246$i) + -40)|0;
    $648 = (($tbase$247$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$247$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((10408 + 24|0))>>2] = $654;
    HEAP32[((10408 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i14$i = (($655) + 4)|0;
    $658 = (($tbase$247$i) + ($$sum$i14$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$246$i) + -36)|0;
    $659 = (($tbase$247$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((10880 + 16|0))>>2]|0;
    HEAP32[((10408 + 28|0))>>2] = $660;
   } else {
    $sp$075$i = ((10408 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$075$i>>2]|0;
     $662 = (($sp$075$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$247$i|0)==($664|0);
     if ($665) {
      label = 214;
      break;
     }
     $666 = (($sp$075$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$075$i = $667;
     }
    }
    if ((label|0) == 214) {
     $669 = (($sp$075$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$247$i>>>0);
      $or$cond49$i = $673 & $674;
      if ($or$cond49$i) {
       $675 = (($663) + ($tsize$246$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((10408 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$246$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((10408 + 24|0))>>2] = $684;
       HEAP32[((10408 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i18$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i18$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i19$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i19$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((10880 + 16|0))>>2]|0;
       HEAP32[((10408 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((10408 + 16|0))>>2]|0;
    $692 = ($tbase$247$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((10408 + 16|0))>>2] = $tbase$247$i;
    }
    $693 = (($tbase$247$i) + ($tsize$246$i)|0);
    $sp$168$i = ((10408 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$168$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 224;
      break;
     }
     $696 = (($sp$168$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$168$i = $697;
     }
    }
    if ((label|0) == 224) {
     $699 = (($sp$168$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$168$i>>2] = $tbase$247$i;
      $703 = (($sp$168$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$246$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$247$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$247$i) + ($713)|0);
      $$sum107$i = (($tsize$246$i) + 8)|0;
      $714 = (($tbase$247$i) + ($$sum107$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum108$i = (($720) + ($tsize$246$i))|0;
      $721 = (($tbase$247$i) + ($$sum108$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i21$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$247$i) + ($$sum$i21$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i22$i = (($713) + 4)|0;
      $728 = (($tbase$247$i) + ($$sum1$i22$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = HEAP32[((10408 + 24|0))>>2]|0;
      $730 = ($721|0)==($729|0);
      L338: do {
       if ($730) {
        $731 = HEAP32[((10408 + 12|0))>>2]|0;
        $732 = (($731) + ($726))|0;
        HEAP32[((10408 + 12|0))>>2] = $732;
        HEAP32[((10408 + 24|0))>>2] = $725;
        $733 = $732 | 1;
        $$sum42$i$i = (($$sum$i21$i) + 4)|0;
        $734 = (($tbase$247$i) + ($$sum42$i$i)|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[((10408 + 20|0))>>2]|0;
        $736 = ($721|0)==($735|0);
        if ($736) {
         $737 = HEAP32[((10408 + 8|0))>>2]|0;
         $738 = (($737) + ($726))|0;
         HEAP32[((10408 + 8|0))>>2] = $738;
         HEAP32[((10408 + 20|0))>>2] = $725;
         $739 = $738 | 1;
         $$sum40$i$i = (($$sum$i21$i) + 4)|0;
         $740 = (($tbase$247$i) + ($$sum40$i$i)|0);
         HEAP32[$740>>2] = $739;
         $$sum41$i$i = (($738) + ($$sum$i21$i))|0;
         $741 = (($tbase$247$i) + ($$sum41$i$i)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $$sum2$i23$i = (($tsize$246$i) + 4)|0;
        $$sum109$i = (($$sum2$i23$i) + ($720))|0;
        $742 = (($tbase$247$i) + ($$sum109$i)|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L346: do {
          if ($748) {
           $$sum3738$i$i = $720 | 8;
           $$sum119$i = (($$sum3738$i$i) + ($tsize$246$i))|0;
           $749 = (($tbase$247$i) + ($$sum119$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $$sum39$i$i = (($tsize$246$i) + 12)|0;
           $$sum120$i = (($$sum39$i$i) + ($720))|0;
           $751 = (($tbase$247$i) + ($$sum120$i)|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = ((10408 + ($753<<2)|0) + 40|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = HEAP32[((10408 + 16|0))>>2]|0;
             $757 = ($750>>>0)<($756>>>0);
             if ($757) {
              _abort();
              // unreachable;
             }
             $758 = (($750) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($721|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[10408>>2]|0;
            $765 = $764 & $763;
            HEAP32[10408>>2] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre57$i$i = (($752) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $767 = HEAP32[((10408 + 16|0))>>2]|0;
             $768 = ($752>>>0)<($767>>>0);
             if ($768) {
              _abort();
              // unreachable;
             }
             $769 = (($752) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770|0)==($721|0);
             if ($771) {
              $$pre$phi58$i$iZ2D = $769;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $772 = (($750) + 12|0);
           HEAP32[$772>>2] = $752;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $750;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum110$i = (($$sum34$i$i) + ($tsize$246$i))|0;
           $773 = (($tbase$247$i) + ($$sum110$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $$sum5$i$i = (($tsize$246$i) + 12)|0;
           $$sum111$i = (($$sum5$i$i) + ($720))|0;
           $775 = (($tbase$247$i) + ($$sum111$i)|0);
           $776 = HEAP32[$775>>2]|0;
           $777 = ($776|0)==($721|0);
           do {
            if ($777) {
             $$sum67$i$i = $720 | 16;
             $$sum117$i = (($$sum2$i23$i) + ($$sum67$i$i))|0;
             $788 = (($tbase$247$i) + ($$sum117$i)|0);
             $789 = HEAP32[$788>>2]|0;
             $790 = ($789|0)==(0|0);
             if ($790) {
              $$sum118$i = (($$sum67$i$i) + ($tsize$246$i))|0;
              $791 = (($tbase$247$i) + ($$sum118$i)|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if ($793) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $792;$RP$0$i$i = $791;
              }
             } else {
              $R$0$i$i = $789;$RP$0$i$i = $788;
             }
             while(1) {
              $794 = (($R$0$i$i) + 20|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if (!($796)) {
               $R$0$i$i = $795;$RP$0$i$i = $794;
               continue;
              }
              $797 = (($R$0$i$i) + 16|0);
              $798 = HEAP32[$797>>2]|0;
              $799 = ($798|0)==(0|0);
              if ($799) {
               break;
              } else {
               $R$0$i$i = $798;$RP$0$i$i = $797;
              }
             }
             $800 = HEAP32[((10408 + 16|0))>>2]|0;
             $801 = ($RP$0$i$i>>>0)<($800>>>0);
             if ($801) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum112$i = (($$sum3536$i$i) + ($tsize$246$i))|0;
             $778 = (($tbase$247$i) + ($$sum112$i)|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = HEAP32[((10408 + 16|0))>>2]|0;
             $781 = ($779>>>0)<($780>>>0);
             if ($781) {
              _abort();
              // unreachable;
             }
             $782 = (($779) + 12|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if (!($784)) {
              _abort();
              // unreachable;
             }
             $785 = (($776) + 8|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==($721|0);
             if ($787) {
              HEAP32[$782>>2] = $776;
              HEAP32[$785>>2] = $779;
              $R$1$i$i = $776;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $802 = ($774|0)==(0|0);
           if ($802) {
            break;
           }
           $$sum30$i$i = (($tsize$246$i) + 28)|0;
           $$sum113$i = (($$sum30$i$i) + ($720))|0;
           $803 = (($tbase$247$i) + ($$sum113$i)|0);
           $804 = HEAP32[$803>>2]|0;
           $805 = ((10408 + ($804<<2)|0) + 304|0);
           $806 = HEAP32[$805>>2]|0;
           $807 = ($721|0)==($806|0);
           do {
            if ($807) {
             HEAP32[$805>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $808 = 1 << $804;
             $809 = $808 ^ -1;
             $810 = HEAP32[((10408 + 4|0))>>2]|0;
             $811 = $810 & $809;
             HEAP32[((10408 + 4|0))>>2] = $811;
             break L346;
            } else {
             $812 = HEAP32[((10408 + 16|0))>>2]|0;
             $813 = ($774>>>0)<($812>>>0);
             if ($813) {
              _abort();
              // unreachable;
             }
             $814 = (($774) + 16|0);
             $815 = HEAP32[$814>>2]|0;
             $816 = ($815|0)==($721|0);
             if ($816) {
              HEAP32[$814>>2] = $R$1$i$i;
             } else {
              $817 = (($774) + 20|0);
              HEAP32[$817>>2] = $R$1$i$i;
             }
             $818 = ($R$1$i$i|0)==(0|0);
             if ($818) {
              break L346;
             }
            }
           } while(0);
           $819 = HEAP32[((10408 + 16|0))>>2]|0;
           $820 = ($R$1$i$i>>>0)<($819>>>0);
           if ($820) {
            _abort();
            // unreachable;
           }
           $821 = (($R$1$i$i) + 24|0);
           HEAP32[$821>>2] = $774;
           $$sum3132$i$i = $720 | 16;
           $$sum114$i = (($$sum3132$i$i) + ($tsize$246$i))|0;
           $822 = (($tbase$247$i) + ($$sum114$i)|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           do {
            if (!($824)) {
             $825 = HEAP32[((10408 + 16|0))>>2]|0;
             $826 = ($823>>>0)<($825>>>0);
             if ($826) {
              _abort();
              // unreachable;
             } else {
              $827 = (($R$1$i$i) + 16|0);
              HEAP32[$827>>2] = $823;
              $828 = (($823) + 24|0);
              HEAP32[$828>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum115$i = (($$sum2$i23$i) + ($$sum3132$i$i))|0;
           $829 = (($tbase$247$i) + ($$sum115$i)|0);
           $830 = HEAP32[$829>>2]|0;
           $831 = ($830|0)==(0|0);
           if ($831) {
            break;
           }
           $832 = HEAP32[((10408 + 16|0))>>2]|0;
           $833 = ($830>>>0)<($832>>>0);
           if ($833) {
            _abort();
            // unreachable;
           } else {
            $834 = (($R$1$i$i) + 20|0);
            HEAP32[$834>>2] = $830;
            $835 = (($830) + 24|0);
            HEAP32[$835>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $746 | $720;
         $$sum116$i = (($$sum9$i$i) + ($tsize$246$i))|0;
         $836 = (($tbase$247$i) + ($$sum116$i)|0);
         $837 = (($746) + ($726))|0;
         $oldfirst$0$i$i = $836;$qsize$0$i$i = $837;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $838 = (($oldfirst$0$i$i) + 4|0);
        $839 = HEAP32[$838>>2]|0;
        $840 = $839 & -2;
        HEAP32[$838>>2] = $840;
        $841 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i21$i) + 4)|0;
        $842 = (($tbase$247$i) + ($$sum10$i$i)|0);
        HEAP32[$842>>2] = $841;
        $$sum11$i24$i = (($qsize$0$i$i) + ($$sum$i21$i))|0;
        $843 = (($tbase$247$i) + ($$sum11$i24$i)|0);
        HEAP32[$843>>2] = $qsize$0$i$i;
        $844 = $qsize$0$i$i >>> 3;
        $845 = ($qsize$0$i$i>>>0)<(256);
        if ($845) {
         $846 = $844 << 1;
         $847 = ((10408 + ($846<<2)|0) + 40|0);
         $848 = HEAP32[10408>>2]|0;
         $849 = 1 << $844;
         $850 = $848 & $849;
         $851 = ($850|0)==(0);
         do {
          if ($851) {
           $852 = $848 | $849;
           HEAP32[10408>>2] = $852;
           $$sum26$pre$i$i = (($846) + 2)|0;
           $$pre$i25$i = ((10408 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i26$iZ2D = $$pre$i25$i;$F4$0$i$i = $847;
          } else {
           $$sum29$i$i = (($846) + 2)|0;
           $853 = ((10408 + ($$sum29$i$i<<2)|0) + 40|0);
           $854 = HEAP32[$853>>2]|0;
           $855 = HEAP32[((10408 + 16|0))>>2]|0;
           $856 = ($854>>>0)<($855>>>0);
           if (!($856)) {
            $$pre$phi$i26$iZ2D = $853;$F4$0$i$i = $854;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i26$iZ2D>>2] = $725;
         $857 = (($F4$0$i$i) + 12|0);
         HEAP32[$857>>2] = $725;
         $$sum27$i$i = (($$sum$i21$i) + 8)|0;
         $858 = (($tbase$247$i) + ($$sum27$i$i)|0);
         HEAP32[$858>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i21$i) + 12)|0;
         $859 = (($tbase$247$i) + ($$sum28$i$i)|0);
         HEAP32[$859>>2] = $847;
         break;
        }
        $860 = $qsize$0$i$i >>> 8;
        $861 = ($860|0)==(0);
        do {
         if ($861) {
          $I7$0$i$i = 0;
         } else {
          $862 = ($qsize$0$i$i>>>0)>(16777215);
          if ($862) {
           $I7$0$i$i = 31;
           break;
          }
          $863 = (($860) + 1048320)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 8;
          $866 = $860 << $865;
          $867 = (($866) + 520192)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 4;
          $870 = $869 | $865;
          $871 = $866 << $869;
          $872 = (($871) + 245760)|0;
          $873 = $872 >>> 16;
          $874 = $873 & 2;
          $875 = $870 | $874;
          $876 = (14 - ($875))|0;
          $877 = $871 << $874;
          $878 = $877 >>> 15;
          $879 = (($876) + ($878))|0;
          $880 = $879 << 1;
          $881 = (($879) + 7)|0;
          $882 = $qsize$0$i$i >>> $881;
          $883 = $882 & 1;
          $884 = $883 | $880;
          $I7$0$i$i = $884;
         }
        } while(0);
        $885 = ((10408 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i21$i) + 28)|0;
        $886 = (($tbase$247$i) + ($$sum12$i$i)|0);
        HEAP32[$886>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i21$i) + 16)|0;
        $887 = (($tbase$247$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i21$i) + 20)|0;
        $888 = (($tbase$247$i) + ($$sum14$i$i)|0);
        HEAP32[$888>>2] = 0;
        HEAP32[$887>>2] = 0;
        $889 = HEAP32[((10408 + 4|0))>>2]|0;
        $890 = 1 << $I7$0$i$i;
        $891 = $889 & $890;
        $892 = ($891|0)==(0);
        if ($892) {
         $893 = $889 | $890;
         HEAP32[((10408 + 4|0))>>2] = $893;
         HEAP32[$885>>2] = $725;
         $$sum15$i$i = (($$sum$i21$i) + 24)|0;
         $894 = (($tbase$247$i) + ($$sum15$i$i)|0);
         HEAP32[$894>>2] = $885;
         $$sum16$i$i = (($$sum$i21$i) + 12)|0;
         $895 = (($tbase$247$i) + ($$sum16$i$i)|0);
         HEAP32[$895>>2] = $725;
         $$sum17$i$i = (($$sum$i21$i) + 8)|0;
         $896 = (($tbase$247$i) + ($$sum17$i$i)|0);
         HEAP32[$896>>2] = $725;
         break;
        }
        $897 = HEAP32[$885>>2]|0;
        $898 = ($I7$0$i$i|0)==(31);
        if ($898) {
         $906 = 0;
        } else {
         $899 = $I7$0$i$i >>> 1;
         $900 = (25 - ($899))|0;
         $906 = $900;
        }
        $901 = (($897) + 4|0);
        $902 = HEAP32[$901>>2]|0;
        $903 = $902 & -8;
        $904 = ($903|0)==($qsize$0$i$i|0);
        L435: do {
         if ($904) {
          $T$0$lcssa$i28$i = $897;
         } else {
          $905 = $qsize$0$i$i << $906;
          $K8$052$i$i = $905;$T$051$i$i = $897;
          while(1) {
           $913 = $K8$052$i$i >>> 31;
           $914 = ((($T$051$i$i) + ($913<<2)|0) + 16|0);
           $909 = HEAP32[$914>>2]|0;
           $915 = ($909|0)==(0|0);
           if ($915) {
            break;
           }
           $907 = $K8$052$i$i << 1;
           $908 = (($909) + 4|0);
           $910 = HEAP32[$908>>2]|0;
           $911 = $910 & -8;
           $912 = ($911|0)==($qsize$0$i$i|0);
           if ($912) {
            $T$0$lcssa$i28$i = $909;
            break L435;
           } else {
            $K8$052$i$i = $907;$T$051$i$i = $909;
           }
          }
          $916 = HEAP32[((10408 + 16|0))>>2]|0;
          $917 = ($914>>>0)<($916>>>0);
          if ($917) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$914>>2] = $725;
           $$sum23$i$i = (($$sum$i21$i) + 24)|0;
           $918 = (($tbase$247$i) + ($$sum23$i$i)|0);
           HEAP32[$918>>2] = $T$051$i$i;
           $$sum24$i$i = (($$sum$i21$i) + 12)|0;
           $919 = (($tbase$247$i) + ($$sum24$i$i)|0);
           HEAP32[$919>>2] = $725;
           $$sum25$i$i = (($$sum$i21$i) + 8)|0;
           $920 = (($tbase$247$i) + ($$sum25$i$i)|0);
           HEAP32[$920>>2] = $725;
           break L338;
          }
         }
        } while(0);
        $921 = (($T$0$lcssa$i28$i) + 8|0);
        $922 = HEAP32[$921>>2]|0;
        $923 = HEAP32[((10408 + 16|0))>>2]|0;
        $924 = ($T$0$lcssa$i28$i>>>0)<($923>>>0);
        if ($924) {
         _abort();
         // unreachable;
        }
        $925 = ($922>>>0)<($923>>>0);
        if ($925) {
         _abort();
         // unreachable;
        } else {
         $926 = (($922) + 12|0);
         HEAP32[$926>>2] = $725;
         HEAP32[$921>>2] = $725;
         $$sum20$i$i = (($$sum$i21$i) + 8)|0;
         $927 = (($tbase$247$i) + ($$sum20$i$i)|0);
         HEAP32[$927>>2] = $922;
         $$sum21$i$i = (($$sum$i21$i) + 12)|0;
         $928 = (($tbase$247$i) + ($$sum21$i$i)|0);
         HEAP32[$928>>2] = $T$0$lcssa$i28$i;
         $$sum22$i$i = (($$sum$i21$i) + 24)|0;
         $929 = (($tbase$247$i) + ($$sum22$i$i)|0);
         HEAP32[$929>>2] = 0;
         break;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $930 = (($tbase$247$i) + ($$sum1819$i$i)|0);
      $mem$0 = $930;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((10408 + 448|0));
    while(1) {
     $931 = HEAP32[$sp$0$i$i$i>>2]|0;
     $932 = ($931>>>0)>($636>>>0);
     if (!($932)) {
      $933 = (($sp$0$i$i$i) + 4|0);
      $934 = HEAP32[$933>>2]|0;
      $935 = (($931) + ($934)|0);
      $936 = ($935>>>0)>($636>>>0);
      if ($936) {
       break;
      }
     }
     $937 = (($sp$0$i$i$i) + 8|0);
     $938 = HEAP32[$937>>2]|0;
     $sp$0$i$i$i = $938;
    }
    $$sum$i15$i = (($934) + -47)|0;
    $$sum1$i16$i = (($934) + -39)|0;
    $939 = (($931) + ($$sum1$i16$i)|0);
    $940 = $939;
    $941 = $940 & 7;
    $942 = ($941|0)==(0);
    if ($942) {
     $945 = 0;
    } else {
     $943 = (0 - ($940))|0;
     $944 = $943 & 7;
     $945 = $944;
    }
    $$sum2$i17$i = (($$sum$i15$i) + ($945))|0;
    $946 = (($931) + ($$sum2$i17$i)|0);
    $947 = (($636) + 16|0);
    $948 = ($946>>>0)<($947>>>0);
    $949 = $948 ? $636 : $946;
    $950 = (($949) + 8|0);
    $951 = (($tsize$246$i) + -40)|0;
    $952 = (($tbase$247$i) + 8|0);
    $953 = $952;
    $954 = $953 & 7;
    $955 = ($954|0)==(0);
    if ($955) {
     $959 = 0;
    } else {
     $956 = (0 - ($953))|0;
     $957 = $956 & 7;
     $959 = $957;
    }
    $958 = (($tbase$247$i) + ($959)|0);
    $960 = (($951) - ($959))|0;
    HEAP32[((10408 + 24|0))>>2] = $958;
    HEAP32[((10408 + 12|0))>>2] = $960;
    $961 = $960 | 1;
    $$sum$i$i$i = (($959) + 4)|0;
    $962 = (($tbase$247$i) + ($$sum$i$i$i)|0);
    HEAP32[$962>>2] = $961;
    $$sum2$i$i$i = (($tsize$246$i) + -36)|0;
    $963 = (($tbase$247$i) + ($$sum2$i$i$i)|0);
    HEAP32[$963>>2] = 40;
    $964 = HEAP32[((10880 + 16|0))>>2]|0;
    HEAP32[((10408 + 28|0))>>2] = $964;
    $965 = (($949) + 4|0);
    HEAP32[$965>>2] = 27;
    ;HEAP32[$950+0>>2]=HEAP32[((10408 + 448|0))+0>>2]|0;HEAP32[$950+4>>2]=HEAP32[((10408 + 448|0))+4>>2]|0;HEAP32[$950+8>>2]=HEAP32[((10408 + 448|0))+8>>2]|0;HEAP32[$950+12>>2]=HEAP32[((10408 + 448|0))+12>>2]|0;
    HEAP32[((10408 + 448|0))>>2] = $tbase$247$i;
    HEAP32[((10408 + 452|0))>>2] = $tsize$246$i;
    HEAP32[((10408 + 460|0))>>2] = 0;
    HEAP32[((10408 + 456|0))>>2] = $950;
    $966 = (($949) + 28|0);
    HEAP32[$966>>2] = 7;
    $967 = (($949) + 32|0);
    $968 = ($967>>>0)<($935>>>0);
    if ($968) {
     $970 = $966;
     while(1) {
      $969 = (($970) + 4|0);
      HEAP32[$969>>2] = 7;
      $971 = (($970) + 8|0);
      $972 = ($971>>>0)<($935>>>0);
      if ($972) {
       $970 = $969;
      } else {
       break;
      }
     }
    }
    $973 = ($949|0)==($636|0);
    if (!($973)) {
     $974 = $949;
     $975 = $636;
     $976 = (($974) - ($975))|0;
     $977 = (($636) + ($976)|0);
     $$sum3$i$i = (($976) + 4)|0;
     $978 = (($636) + ($$sum3$i$i)|0);
     $979 = HEAP32[$978>>2]|0;
     $980 = $979 & -2;
     HEAP32[$978>>2] = $980;
     $981 = $976 | 1;
     $982 = (($636) + 4|0);
     HEAP32[$982>>2] = $981;
     HEAP32[$977>>2] = $976;
     $983 = $976 >>> 3;
     $984 = ($976>>>0)<(256);
     if ($984) {
      $985 = $983 << 1;
      $986 = ((10408 + ($985<<2)|0) + 40|0);
      $987 = HEAP32[10408>>2]|0;
      $988 = 1 << $983;
      $989 = $987 & $988;
      $990 = ($989|0)==(0);
      do {
       if ($990) {
        $991 = $987 | $988;
        HEAP32[10408>>2] = $991;
        $$sum10$pre$i$i = (($985) + 2)|0;
        $$pre$i$i = ((10408 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $986;
       } else {
        $$sum11$i$i = (($985) + 2)|0;
        $992 = ((10408 + ($$sum11$i$i<<2)|0) + 40|0);
        $993 = HEAP32[$992>>2]|0;
        $994 = HEAP32[((10408 + 16|0))>>2]|0;
        $995 = ($993>>>0)<($994>>>0);
        if (!($995)) {
         $$pre$phi$i$iZ2D = $992;$F$0$i$i = $993;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $996 = (($F$0$i$i) + 12|0);
      HEAP32[$996>>2] = $636;
      $997 = (($636) + 8|0);
      HEAP32[$997>>2] = $F$0$i$i;
      $998 = (($636) + 12|0);
      HEAP32[$998>>2] = $986;
      break;
     }
     $999 = $976 >>> 8;
     $1000 = ($999|0)==(0);
     if ($1000) {
      $I1$0$i$i = 0;
     } else {
      $1001 = ($976>>>0)>(16777215);
      if ($1001) {
       $I1$0$i$i = 31;
      } else {
       $1002 = (($999) + 1048320)|0;
       $1003 = $1002 >>> 16;
       $1004 = $1003 & 8;
       $1005 = $999 << $1004;
       $1006 = (($1005) + 520192)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 4;
       $1009 = $1008 | $1004;
       $1010 = $1005 << $1008;
       $1011 = (($1010) + 245760)|0;
       $1012 = $1011 >>> 16;
       $1013 = $1012 & 2;
       $1014 = $1009 | $1013;
       $1015 = (14 - ($1014))|0;
       $1016 = $1010 << $1013;
       $1017 = $1016 >>> 15;
       $1018 = (($1015) + ($1017))|0;
       $1019 = $1018 << 1;
       $1020 = (($1018) + 7)|0;
       $1021 = $976 >>> $1020;
       $1022 = $1021 & 1;
       $1023 = $1022 | $1019;
       $I1$0$i$i = $1023;
      }
     }
     $1024 = ((10408 + ($I1$0$i$i<<2)|0) + 304|0);
     $1025 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1025>>2] = $I1$0$c$i$i;
     $1026 = (($636) + 20|0);
     HEAP32[$1026>>2] = 0;
     $1027 = (($636) + 16|0);
     HEAP32[$1027>>2] = 0;
     $1028 = HEAP32[((10408 + 4|0))>>2]|0;
     $1029 = 1 << $I1$0$i$i;
     $1030 = $1028 & $1029;
     $1031 = ($1030|0)==(0);
     if ($1031) {
      $1032 = $1028 | $1029;
      HEAP32[((10408 + 4|0))>>2] = $1032;
      HEAP32[$1024>>2] = $636;
      $1033 = (($636) + 24|0);
      HEAP32[$1033>>2] = $1024;
      $1034 = (($636) + 12|0);
      HEAP32[$1034>>2] = $636;
      $1035 = (($636) + 8|0);
      HEAP32[$1035>>2] = $636;
      break;
     }
     $1036 = HEAP32[$1024>>2]|0;
     $1037 = ($I1$0$i$i|0)==(31);
     if ($1037) {
      $1045 = 0;
     } else {
      $1038 = $I1$0$i$i >>> 1;
      $1039 = (25 - ($1038))|0;
      $1045 = $1039;
     }
     $1040 = (($1036) + 4|0);
     $1041 = HEAP32[$1040>>2]|0;
     $1042 = $1041 & -8;
     $1043 = ($1042|0)==($976|0);
     L489: do {
      if ($1043) {
       $T$0$lcssa$i$i = $1036;
      } else {
       $1044 = $976 << $1045;
       $K2$014$i$i = $1044;$T$013$i$i = $1036;
       while(1) {
        $1052 = $K2$014$i$i >>> 31;
        $1053 = ((($T$013$i$i) + ($1052<<2)|0) + 16|0);
        $1048 = HEAP32[$1053>>2]|0;
        $1054 = ($1048|0)==(0|0);
        if ($1054) {
         break;
        }
        $1046 = $K2$014$i$i << 1;
        $1047 = (($1048) + 4|0);
        $1049 = HEAP32[$1047>>2]|0;
        $1050 = $1049 & -8;
        $1051 = ($1050|0)==($976|0);
        if ($1051) {
         $T$0$lcssa$i$i = $1048;
         break L489;
        } else {
         $K2$014$i$i = $1046;$T$013$i$i = $1048;
        }
       }
       $1055 = HEAP32[((10408 + 16|0))>>2]|0;
       $1056 = ($1053>>>0)<($1055>>>0);
       if ($1056) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1053>>2] = $636;
        $1057 = (($636) + 24|0);
        HEAP32[$1057>>2] = $T$013$i$i;
        $1058 = (($636) + 12|0);
        HEAP32[$1058>>2] = $636;
        $1059 = (($636) + 8|0);
        HEAP32[$1059>>2] = $636;
        break L311;
       }
      }
     } while(0);
     $1060 = (($T$0$lcssa$i$i) + 8|0);
     $1061 = HEAP32[$1060>>2]|0;
     $1062 = HEAP32[((10408 + 16|0))>>2]|0;
     $1063 = ($T$0$lcssa$i$i>>>0)<($1062>>>0);
     if ($1063) {
      _abort();
      // unreachable;
     }
     $1064 = ($1061>>>0)<($1062>>>0);
     if ($1064) {
      _abort();
      // unreachable;
     } else {
      $1065 = (($1061) + 12|0);
      HEAP32[$1065>>2] = $636;
      HEAP32[$1060>>2] = $636;
      $1066 = (($636) + 8|0);
      HEAP32[$1066>>2] = $1061;
      $1067 = (($636) + 12|0);
      HEAP32[$1067>>2] = $T$0$lcssa$i$i;
      $1068 = (($636) + 24|0);
      HEAP32[$1068>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $1069 = HEAP32[((10408 + 12|0))>>2]|0;
  $1070 = ($1069>>>0)>($nb$0>>>0);
  if ($1070) {
   $1071 = (($1069) - ($nb$0))|0;
   HEAP32[((10408 + 12|0))>>2] = $1071;
   $1072 = HEAP32[((10408 + 24|0))>>2]|0;
   $1073 = (($1072) + ($nb$0)|0);
   HEAP32[((10408 + 24|0))>>2] = $1073;
   $1074 = $1071 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1075 = (($1072) + ($$sum$i32)|0);
   HEAP32[$1075>>2] = $1074;
   $1076 = $nb$0 | 3;
   $1077 = (($1072) + 4|0);
   HEAP32[$1077>>2] = $1076;
   $1078 = (($1072) + 8|0);
   $mem$0 = $1078;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1079 = (___errno_location()|0);
 HEAP32[$1079>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi68Z2D = 0, $$pre$phi70Z2D = 0, $$pre$phiZ2D = 0, $$pre67 = 0, $$pre69 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$057 = 0;
 var $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$056 = 0, $cond = 0, $cond54 = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((10408 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((10408 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $104 = (($mem) + ($$sum3)|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((10408 + 8|0))>>2] = $15;
    $108 = HEAP32[$104>>2]|0;
    $109 = $108 & -2;
    HEAP32[$104>>2] = $109;
    $110 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $111 = (($mem) + ($$sum26)|0);
    HEAP32[$111>>2] = $110;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((10408 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[10408>>2]|0;
     $36 = $35 & $34;
     HEAP32[10408>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre69 = (($24) + 8|0);
     $$pre$phi70Z2D = $$pre69;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi70Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi70Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((10408 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((10408 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((10408 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((10408 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((10408 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = HEAP32[((10408 + 16|0))>>2]|0;
      $94 = ($91>>>0)<($93>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = (($R$1) + 16|0);
       HEAP32[$95>>2] = $91;
       $96 = (($91) + 24|0);
       HEAP32[$96>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $97 = (($mem) + ($$sum34)|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $100 = HEAP32[((10408 + 16|0))>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = (($R$1) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = (($98) + 24|0);
      HEAP32[$103>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $112 = ($p$0>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $113 = (($mem) + ($$sum25)|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[((10408 + 24|0))>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[((10408 + 12|0))>>2]|0;
   $122 = (($121) + ($psize$0))|0;
   HEAP32[((10408 + 12|0))>>2] = $122;
   HEAP32[((10408 + 24|0))>>2] = $p$0;
   $123 = $122 | 1;
   $124 = (($p$0) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[((10408 + 20|0))>>2]|0;
   $126 = ($p$0|0)==($125|0);
   if (!($126)) {
    STACKTOP = sp;return;
   }
   HEAP32[((10408 + 20|0))>>2] = 0;
   HEAP32[((10408 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $127 = HEAP32[((10408 + 20|0))>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[((10408 + 8|0))>>2]|0;
   $130 = (($129) + ($psize$0))|0;
   HEAP32[((10408 + 8|0))>>2] = $130;
   HEAP32[((10408 + 20|0))>>2] = $p$0;
   $131 = $130 | 1;
   $132 = (($p$0) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$0) + ($130)|0);
   HEAP32[$133>>2] = $130;
   STACKTOP = sp;return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$0))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = (($mem) + ($8)|0);
    $139 = HEAP32[$138>>2]|0;
    $$sum2324 = $8 | 4;
    $140 = (($mem) + ($$sum2324)|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = ((10408 + ($142<<2)|0) + 40|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[((10408 + 16|0))>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = (($139) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[10408>>2]|0;
     $154 = $153 & $152;
     HEAP32[10408>>2] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre67 = (($141) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $156 = HEAP32[((10408 + 16|0))>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = (($141) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi68Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = (($139) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi68Z2D>>2] = $139;
   } else {
    $$sum5 = (($8) + 16)|0;
    $162 = (($mem) + ($$sum5)|0);
    $163 = HEAP32[$162>>2]|0;
    $$sum67 = $8 | 4;
    $164 = (($mem) + ($$sum67)|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $$sum9 = (($8) + 12)|0;
      $177 = (($mem) + ($$sum9)|0);
      $178 = HEAP32[$177>>2]|0;
      $179 = ($178|0)==(0|0);
      if ($179) {
       $$sum8 = (($8) + 8)|0;
       $180 = (($mem) + ($$sum8)|0);
       $181 = HEAP32[$180>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $181;$RP9$0 = $180;
       }
      } else {
       $R7$0 = $178;$RP9$0 = $177;
      }
      while(1) {
       $183 = (($R7$0) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R7$0 = $184;$RP9$0 = $183;
        continue;
       }
       $186 = (($R7$0) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        break;
       } else {
        $R7$0 = $187;$RP9$0 = $186;
       }
      }
      $189 = HEAP32[((10408 + 16|0))>>2]|0;
      $190 = ($RP9$0>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $167 = (($mem) + ($8)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[((10408 + 16|0))>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = (($168) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = (($165) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R7$1 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $$sum18 = (($8) + 20)|0;
     $192 = (($mem) + ($$sum18)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ((10408 + ($193<<2)|0) + 304|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[((10408 + 4|0))>>2]|0;
       $200 = $199 & $198;
       HEAP32[((10408 + 4|0))>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[((10408 + 16|0))>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = (($163) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R7$1;
      } else {
       $206 = (($163) + 20|0);
       HEAP32[$206>>2] = $R7$1;
      }
      $207 = ($R7$1|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[((10408 + 16|0))>>2]|0;
     $209 = ($R7$1>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = (($R7$1) + 24|0);
     HEAP32[$210>>2] = $163;
     $$sum19 = (($8) + 8)|0;
     $211 = (($mem) + ($$sum19)|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = HEAP32[((10408 + 16|0))>>2]|0;
       $215 = ($212>>>0)<($214>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = (($R7$1) + 16|0);
        HEAP32[$216>>2] = $212;
        $217 = (($212) + 24|0);
        HEAP32[$217>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $218 = (($mem) + ($$sum20)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[((10408 + 16|0))>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = (($R7$1) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = (($219) + 24|0);
       HEAP32[$224>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $135 | 1;
  $226 = (($p$0) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($p$0) + ($135)|0);
  HEAP32[$227>>2] = $135;
  $228 = HEAP32[((10408 + 20|0))>>2]|0;
  $229 = ($p$0|0)==($228|0);
  if ($229) {
   HEAP32[((10408 + 8|0))>>2] = $135;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $135;
  }
 } else {
  $230 = $114 & -2;
  HEAP32[$113>>2] = $230;
  $231 = $psize$0 | 1;
  $232 = (($p$0) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($p$0) + ($psize$0)|0);
  HEAP32[$233>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $234 = $psize$1 >>> 3;
 $235 = ($psize$1>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = ((10408 + ($236<<2)|0) + 40|0);
  $238 = HEAP32[10408>>2]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[10408>>2] = $242;
   $$sum16$pre = (($236) + 2)|0;
   $$pre = ((10408 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $237;
  } else {
   $$sum17 = (($236) + 2)|0;
   $243 = ((10408 + ($$sum17<<2)|0) + 40|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[((10408 + 16|0))>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $243;$F16$0 = $244;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $247 = (($F16$0) + 12|0);
  HEAP32[$247>>2] = $p$0;
  $248 = (($p$0) + 8|0);
  HEAP32[$248>>2] = $F16$0;
  $249 = (($p$0) + 12|0);
  HEAP32[$249>>2] = $237;
  STACKTOP = sp;return;
 }
 $250 = $psize$1 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $I18$0 = 0;
 } else {
  $252 = ($psize$1>>>0)>(16777215);
  if ($252) {
   $I18$0 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $psize$1 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $I18$0 = $274;
  }
 }
 $275 = ((10408 + ($I18$0<<2)|0) + 304|0);
 $276 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$276>>2] = $I18$0$c;
 $277 = (($p$0) + 20|0);
 HEAP32[$277>>2] = 0;
 $278 = (($p$0) + 16|0);
 HEAP32[$278>>2] = 0;
 $279 = HEAP32[((10408 + 4|0))>>2]|0;
 $280 = 1 << $I18$0;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 L199: do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[((10408 + 4|0))>>2] = $283;
   HEAP32[$275>>2] = $p$0;
   $284 = (($p$0) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = (($p$0) + 12|0);
   HEAP32[$285>>2] = $p$0;
   $286 = (($p$0) + 8|0);
   HEAP32[$286>>2] = $p$0;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($I18$0|0)==(31);
   if ($288) {
    $296 = 0;
   } else {
    $289 = $I18$0 >>> 1;
    $290 = (25 - ($289))|0;
    $296 = $290;
   }
   $291 = (($287) + 4|0);
   $292 = HEAP32[$291>>2]|0;
   $293 = $292 & -8;
   $294 = ($293|0)==($psize$1|0);
   L205: do {
    if ($294) {
     $T$0$lcssa = $287;
    } else {
     $295 = $psize$1 << $296;
     $K19$057 = $295;$T$056 = $287;
     while(1) {
      $303 = $K19$057 >>> 31;
      $304 = ((($T$056) + ($303<<2)|0) + 16|0);
      $299 = HEAP32[$304>>2]|0;
      $305 = ($299|0)==(0|0);
      if ($305) {
       break;
      }
      $297 = $K19$057 << 1;
      $298 = (($299) + 4|0);
      $300 = HEAP32[$298>>2]|0;
      $301 = $300 & -8;
      $302 = ($301|0)==($psize$1|0);
      if ($302) {
       $T$0$lcssa = $299;
       break L205;
      } else {
       $K19$057 = $297;$T$056 = $299;
      }
     }
     $306 = HEAP32[((10408 + 16|0))>>2]|0;
     $307 = ($304>>>0)<($306>>>0);
     if ($307) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$304>>2] = $p$0;
      $308 = (($p$0) + 24|0);
      HEAP32[$308>>2] = $T$056;
      $309 = (($p$0) + 12|0);
      HEAP32[$309>>2] = $p$0;
      $310 = (($p$0) + 8|0);
      HEAP32[$310>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $311 = (($T$0$lcssa) + 8|0);
   $312 = HEAP32[$311>>2]|0;
   $313 = HEAP32[((10408 + 16|0))>>2]|0;
   $314 = ($T$0$lcssa>>>0)<($313>>>0);
   if ($314) {
    _abort();
    // unreachable;
   }
   $315 = ($312>>>0)<($313>>>0);
   if ($315) {
    _abort();
    // unreachable;
   } else {
    $316 = (($312) + 12|0);
    HEAP32[$316>>2] = $p$0;
    HEAP32[$311>>2] = $p$0;
    $317 = (($p$0) + 8|0);
    HEAP32[$317>>2] = $312;
    $318 = (($p$0) + 12|0);
    HEAP32[$318>>2] = $T$0$lcssa;
    $319 = (($p$0) + 24|0);
    HEAP32[$319>>2] = 0;
    break;
   }
  }
 } while(0);
 $320 = HEAP32[((10408 + 32|0))>>2]|0;
 $321 = (($320) + -1)|0;
 HEAP32[((10408 + 32|0))>>2] = $321;
 $322 = ($321|0)==(0);
 if ($322) {
  $sp$0$in$i = ((10408 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $323 = ($sp$0$i|0)==(0|0);
  $324 = (($sp$0$i) + 8|0);
  if ($323) {
   break;
  } else {
   $sp$0$in$i = $324;
  }
 }
 HEAP32[((10408 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _calloc($n_elements,$elem_size) {
 $n_elements = $n_elements|0;
 $elem_size = $elem_size|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements|0)==(0);
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements)|0;
  $2 = $elem_size | $n_elements;
  $3 = ($2>>>0)>(65535);
  if ($3) {
   $4 = (($1>>>0) / ($n_elements>>>0))&-1;
   $5 = ($4|0)==($elem_size|0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = (_malloc($req$0)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return ($6|0);
 }
 $8 = (($6) + -4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 3;
 $11 = ($10|0)==(0);
 if ($11) {
  STACKTOP = sp;return ($6|0);
 }
 _memset(($6|0),0,($req$0|0))|0;
 STACKTOP = sp;return ($6|0);
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0;
 var $cond = 0, $newp$0 = 0, $or$cond = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((10408 + 16|0))>>2]|0;
 $5 = ($p>>>0)<($4>>>0);
 if ($5) {
  _abort();
  // unreachable;
 }
 $6 = $1 & 3;
 $7 = ($6|0)!=(1);
 $8 = ($p>>>0)<($3>>>0);
 $or$cond = $7 & $8;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $9 = (($p) + ($$sum2728)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($6|0)==(0);
 if ($13) {
  $14 = ($nb>>>0)<(256);
  if ($14) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $15 = (($nb) + 4)|0;
  $16 = ($2>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($2) - ($nb))|0;
   $18 = HEAP32[((10880 + 8|0))>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $21 = ($2>>>0)<($nb>>>0);
 if (!($21)) {
  $22 = (($2) - ($nb))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $24 = (($p) + ($nb)|0);
  $25 = $1 & 1;
  $26 = $25 | $nb;
  $27 = $26 | 2;
  HEAP32[$0>>2] = $27;
  $$sum23 = (($nb) + 4)|0;
  $28 = (($p) + ($$sum23)|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = HEAP32[$9>>2]|0;
  $31 = $30 | 1;
  HEAP32[$9>>2] = $31;
  _dispose_chunk($24,$22);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $32 = HEAP32[((10408 + 24|0))>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[((10408 + 12|0))>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $$sum22 = (($nb) + 4)|0;
  $42 = (($p) + ($$sum22)|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[((10408 + 24|0))>>2] = $38;
  HEAP32[((10408 + 12|0))>>2] = $37;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $44 = HEAP32[((10408 + 20|0))>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[((10408 + 8|0))>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($p) + ($47)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $$sum19 = (($nb) + 4)|0;
   $56 = (($p) + ($$sum19)|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $$sum20 = (($47) + 4)|0;
   $58 = (($p) + ($$sum20)|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge21 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $$sum17 = (($47) + 4)|0;
   $64 = (($p) + ($$sum17)|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = $65 | 1;
   HEAP32[$64>>2] = $66;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((10408 + 8|0))>>2] = $storemerge21;
  HEAP32[((10408 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $10 & 2;
 $68 = ($67|0)==(0);
 if (!($68)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $69 = $10 & -8;
 $70 = (($69) + ($2))|0;
 $71 = ($70>>>0)<($nb>>>0);
 if ($71) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $72 = (($70) - ($nb))|0;
 $73 = $10 >>> 3;
 $74 = ($10>>>0)<(256);
 do {
  if ($74) {
   $$sum15 = (($2) + 8)|0;
   $75 = (($p) + ($$sum15)|0);
   $76 = HEAP32[$75>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $77 = (($p) + ($$sum16)|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = $73 << 1;
   $80 = ((10408 + ($79<<2)|0) + 40|0);
   $81 = ($76|0)==($80|0);
   if (!($81)) {
    $82 = ($76>>>0)<($4>>>0);
    if ($82) {
     _abort();
     // unreachable;
    }
    $83 = (($76) + 12|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==($3|0);
    if (!($85)) {
     _abort();
     // unreachable;
    }
   }
   $86 = ($78|0)==($76|0);
   if ($86) {
    $87 = 1 << $73;
    $88 = $87 ^ -1;
    $89 = HEAP32[10408>>2]|0;
    $90 = $89 & $88;
    HEAP32[10408>>2] = $90;
    break;
   }
   $91 = ($78|0)==($80|0);
   if ($91) {
    $$pre = (($78) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $92 = ($78>>>0)<($4>>>0);
    if ($92) {
     _abort();
     // unreachable;
    }
    $93 = (($78) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==($3|0);
    if ($95) {
     $$pre$phiZ2D = $93;
    } else {
     _abort();
     // unreachable;
    }
   }
   $96 = (($76) + 12|0);
   HEAP32[$96>>2] = $78;
   HEAP32[$$pre$phiZ2D>>2] = $76;
  } else {
   $$sum = (($2) + 24)|0;
   $97 = (($p) + ($$sum)|0);
   $98 = HEAP32[$97>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $99 = (($p) + ($$sum2)|0);
   $100 = HEAP32[$99>>2]|0;
   $101 = ($100|0)==($3|0);
   do {
    if ($101) {
     $$sum4 = (($2) + 20)|0;
     $111 = (($p) + ($$sum4)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(0|0);
     if ($113) {
      $$sum3 = (($2) + 16)|0;
      $114 = (($p) + ($$sum3)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = ($115|0)==(0|0);
      if ($116) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $115;$RP$0 = $114;
      }
     } else {
      $R$0 = $112;$RP$0 = $111;
     }
     while(1) {
      $117 = (($R$0) + 20|0);
      $118 = HEAP32[$117>>2]|0;
      $119 = ($118|0)==(0|0);
      if (!($119)) {
       $R$0 = $118;$RP$0 = $117;
       continue;
      }
      $120 = (($R$0) + 16|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if ($122) {
       break;
      } else {
       $R$0 = $121;$RP$0 = $120;
      }
     }
     $123 = ($RP$0>>>0)<($4>>>0);
     if ($123) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $102 = (($p) + ($$sum14)|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103>>>0)<($4>>>0);
     if ($104) {
      _abort();
      // unreachable;
     }
     $105 = (($103) + 12|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106|0)==($3|0);
     if (!($107)) {
      _abort();
      // unreachable;
     }
     $108 = (($100) + 8|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($3|0);
     if ($110) {
      HEAP32[$105>>2] = $100;
      HEAP32[$108>>2] = $103;
      $R$1 = $100;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $124 = ($98|0)==(0|0);
   if (!($124)) {
    $$sum11 = (($2) + 28)|0;
    $125 = (($p) + ($$sum11)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((10408 + ($126<<2)|0) + 304|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($3|0)==($128|0);
    if ($129) {
     HEAP32[$127>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $130 = 1 << $126;
      $131 = $130 ^ -1;
      $132 = HEAP32[((10408 + 4|0))>>2]|0;
      $133 = $132 & $131;
      HEAP32[((10408 + 4|0))>>2] = $133;
      break;
     }
    } else {
     $134 = HEAP32[((10408 + 16|0))>>2]|0;
     $135 = ($98>>>0)<($134>>>0);
     if ($135) {
      _abort();
      // unreachable;
     }
     $136 = (($98) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==($3|0);
     if ($138) {
      HEAP32[$136>>2] = $R$1;
     } else {
      $139 = (($98) + 20|0);
      HEAP32[$139>>2] = $R$1;
     }
     $140 = ($R$1|0)==(0|0);
     if ($140) {
      break;
     }
    }
    $141 = HEAP32[((10408 + 16|0))>>2]|0;
    $142 = ($R$1>>>0)<($141>>>0);
    if ($142) {
     _abort();
     // unreachable;
    }
    $143 = (($R$1) + 24|0);
    HEAP32[$143>>2] = $98;
    $$sum12 = (($2) + 16)|0;
    $144 = (($p) + ($$sum12)|0);
    $145 = HEAP32[$144>>2]|0;
    $146 = ($145|0)==(0|0);
    do {
     if (!($146)) {
      $147 = HEAP32[((10408 + 16|0))>>2]|0;
      $148 = ($145>>>0)<($147>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = (($R$1) + 16|0);
       HEAP32[$149>>2] = $145;
       $150 = (($145) + 24|0);
       HEAP32[$150>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $151 = (($p) + ($$sum13)|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[((10408 + 16|0))>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = (($R$1) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = (($152) + 24|0);
      HEAP32[$157>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($72>>>0)<(16);
 if ($158) {
  $159 = HEAP32[$0>>2]|0;
  $160 = $159 & 1;
  $161 = $70 | $160;
  $162 = $161 | 2;
  HEAP32[$0>>2] = $162;
  $$sum910 = $70 | 4;
  $163 = (($p) + ($$sum910)|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = HEAP32[$0>>2]|0;
  $168 = $167 & 1;
  $169 = $168 | $nb;
  $170 = $169 | 2;
  HEAP32[$0>>2] = $170;
  $$sum5 = (($nb) + 4)|0;
  $171 = (($p) + ($$sum5)|0);
  $172 = $72 | 3;
  HEAP32[$171>>2] = $172;
  $$sum78 = $70 | 4;
  $173 = (($p) + ($$sum78)|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$72);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return 0|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi63Z2D = 0, $$pre$phi65Z2D = 0, $$pre$phiZ2D = 0, $$pre62 = 0, $$pre64 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$049 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$048 = 0, $cond = 0, $cond46 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((10408 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((10408 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $100 = (($p) + ($$sum)|0);
    $101 = HEAP32[$100>>2]|0;
    $102 = $101 & 3;
    $103 = ($102|0)==(3);
    if (!($103)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((10408 + 8|0))>>2] = $10;
    $104 = HEAP32[$100>>2]|0;
    $105 = $104 & -2;
    HEAP32[$100>>2] = $105;
    $106 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $107 = (($p) + ($$sum20)|0);
    HEAP32[$107>>2] = $106;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((10408 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[10408>>2]|0;
     $32 = $31 & $30;
     HEAP32[10408>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre64 = (($20) + 8|0);
     $$pre$phi65Z2D = $$pre64;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi65Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi65Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((10408 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((10408 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((10408 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((10408 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((10408 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = HEAP32[((10408 + 16|0))>>2]|0;
      $90 = ($87>>>0)<($89>>>0);
      if ($90) {
       _abort();
       // unreachable;
      } else {
       $91 = (($R$1) + 16|0);
       HEAP32[$91>>2] = $87;
       $92 = (($87) + 24|0);
       HEAP32[$92>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $93 = (($p) + ($$sum28)|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0|0);
    if ($95) {
     $$0 = $9;$$02 = $10;
    } else {
     $96 = HEAP32[((10408 + 16|0))>>2]|0;
     $97 = ($94>>>0)<($96>>>0);
     if ($97) {
      _abort();
      // unreachable;
     } else {
      $98 = (($R$1) + 20|0);
      HEAP32[$98>>2] = $94;
      $99 = (($94) + 24|0);
      HEAP32[$99>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $108 = HEAP32[((10408 + 16|0))>>2]|0;
 $109 = ($0>>>0)<($108>>>0);
 if ($109) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $110 = (($p) + ($$sum1)|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = $111 & 2;
 $113 = ($112|0)==(0);
 if ($113) {
  $114 = HEAP32[((10408 + 24|0))>>2]|0;
  $115 = ($0|0)==($114|0);
  if ($115) {
   $116 = HEAP32[((10408 + 12|0))>>2]|0;
   $117 = (($116) + ($$02))|0;
   HEAP32[((10408 + 12|0))>>2] = $117;
   HEAP32[((10408 + 24|0))>>2] = $$0;
   $118 = $117 | 1;
   $119 = (($$0) + 4|0);
   HEAP32[$119>>2] = $118;
   $120 = HEAP32[((10408 + 20|0))>>2]|0;
   $121 = ($$0|0)==($120|0);
   if (!($121)) {
    STACKTOP = sp;return;
   }
   HEAP32[((10408 + 20|0))>>2] = 0;
   HEAP32[((10408 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $122 = HEAP32[((10408 + 20|0))>>2]|0;
  $123 = ($0|0)==($122|0);
  if ($123) {
   $124 = HEAP32[((10408 + 8|0))>>2]|0;
   $125 = (($124) + ($$02))|0;
   HEAP32[((10408 + 8|0))>>2] = $125;
   HEAP32[((10408 + 20|0))>>2] = $$0;
   $126 = $125 | 1;
   $127 = (($$0) + 4|0);
   HEAP32[$127>>2] = $126;
   $128 = (($$0) + ($125)|0);
   HEAP32[$128>>2] = $125;
   STACKTOP = sp;return;
  }
  $129 = $111 & -8;
  $130 = (($129) + ($$02))|0;
  $131 = $111 >>> 3;
  $132 = ($111>>>0)<(256);
  do {
   if ($132) {
    $$sum18 = (($psize) + 8)|0;
    $133 = (($p) + ($$sum18)|0);
    $134 = HEAP32[$133>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $135 = (($p) + ($$sum19)|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = $131 << 1;
    $138 = ((10408 + ($137<<2)|0) + 40|0);
    $139 = ($134|0)==($138|0);
    if (!($139)) {
     $140 = ($134>>>0)<($108>>>0);
     if ($140) {
      _abort();
      // unreachable;
     }
     $141 = (($134) + 12|0);
     $142 = HEAP32[$141>>2]|0;
     $143 = ($142|0)==($0|0);
     if (!($143)) {
      _abort();
      // unreachable;
     }
    }
    $144 = ($136|0)==($134|0);
    if ($144) {
     $145 = 1 << $131;
     $146 = $145 ^ -1;
     $147 = HEAP32[10408>>2]|0;
     $148 = $147 & $146;
     HEAP32[10408>>2] = $148;
     break;
    }
    $149 = ($136|0)==($138|0);
    if ($149) {
     $$pre62 = (($136) + 8|0);
     $$pre$phi63Z2D = $$pre62;
    } else {
     $150 = ($136>>>0)<($108>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($136) + 8|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==($0|0);
     if ($153) {
      $$pre$phi63Z2D = $151;
     } else {
      _abort();
      // unreachable;
     }
    }
    $154 = (($134) + 12|0);
    HEAP32[$154>>2] = $136;
    HEAP32[$$pre$phi63Z2D>>2] = $134;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $155 = (($p) + ($$sum2)|0);
    $156 = HEAP32[$155>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $157 = (($p) + ($$sum3)|0);
    $158 = HEAP32[$157>>2]|0;
    $159 = ($158|0)==($0|0);
    do {
     if ($159) {
      $$sum5 = (($psize) + 20)|0;
      $169 = (($p) + ($$sum5)|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $$sum4 = (($psize) + 16)|0;
       $172 = (($p) + ($$sum4)|0);
       $173 = HEAP32[$172>>2]|0;
       $174 = ($173|0)==(0|0);
       if ($174) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $173;$RP9$0 = $172;
       }
      } else {
       $R7$0 = $170;$RP9$0 = $169;
      }
      while(1) {
       $175 = (($R7$0) + 20|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($176|0)==(0|0);
       if (!($177)) {
        $R7$0 = $176;$RP9$0 = $175;
        continue;
       }
       $178 = (($R7$0) + 16|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      }
      $181 = ($RP9$0>>>0)<($108>>>0);
      if ($181) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $160 = (($p) + ($$sum17)|0);
      $161 = HEAP32[$160>>2]|0;
      $162 = ($161>>>0)<($108>>>0);
      if ($162) {
       _abort();
       // unreachable;
      }
      $163 = (($161) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ($164|0)==($0|0);
      if (!($165)) {
       _abort();
       // unreachable;
      }
      $166 = (($158) + 8|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = ($167|0)==($0|0);
      if ($168) {
       HEAP32[$163>>2] = $158;
       HEAP32[$166>>2] = $161;
       $R7$1 = $158;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $182 = ($156|0)==(0|0);
    if (!($182)) {
     $$sum14 = (($psize) + 28)|0;
     $183 = (($p) + ($$sum14)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ((10408 + ($184<<2)|0) + 304|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($0|0)==($186|0);
     if ($187) {
      HEAP32[$185>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $188 = 1 << $184;
       $189 = $188 ^ -1;
       $190 = HEAP32[((10408 + 4|0))>>2]|0;
       $191 = $190 & $189;
       HEAP32[((10408 + 4|0))>>2] = $191;
       break;
      }
     } else {
      $192 = HEAP32[((10408 + 16|0))>>2]|0;
      $193 = ($156>>>0)<($192>>>0);
      if ($193) {
       _abort();
       // unreachable;
      }
      $194 = (($156) + 16|0);
      $195 = HEAP32[$194>>2]|0;
      $196 = ($195|0)==($0|0);
      if ($196) {
       HEAP32[$194>>2] = $R7$1;
      } else {
       $197 = (($156) + 20|0);
       HEAP32[$197>>2] = $R7$1;
      }
      $198 = ($R7$1|0)==(0|0);
      if ($198) {
       break;
      }
     }
     $199 = HEAP32[((10408 + 16|0))>>2]|0;
     $200 = ($R7$1>>>0)<($199>>>0);
     if ($200) {
      _abort();
      // unreachable;
     }
     $201 = (($R7$1) + 24|0);
     HEAP32[$201>>2] = $156;
     $$sum15 = (($psize) + 16)|0;
     $202 = (($p) + ($$sum15)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = ($203|0)==(0|0);
     do {
      if (!($204)) {
       $205 = HEAP32[((10408 + 16|0))>>2]|0;
       $206 = ($203>>>0)<($205>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = (($R7$1) + 16|0);
        HEAP32[$207>>2] = $203;
        $208 = (($203) + 24|0);
        HEAP32[$208>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $209 = (($p) + ($$sum16)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[((10408 + 16|0))>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = (($R7$1) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = (($210) + 24|0);
       HEAP32[$215>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $130 | 1;
  $217 = (($$0) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$0) + ($130)|0);
  HEAP32[$218>>2] = $130;
  $219 = HEAP32[((10408 + 20|0))>>2]|0;
  $220 = ($$0|0)==($219|0);
  if ($220) {
   HEAP32[((10408 + 8|0))>>2] = $130;
   STACKTOP = sp;return;
  } else {
   $$1 = $130;
  }
 } else {
  $221 = $111 & -2;
  HEAP32[$110>>2] = $221;
  $222 = $$02 | 1;
  $223 = (($$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$0) + ($$02)|0);
  HEAP32[$224>>2] = $$02;
  $$1 = $$02;
 }
 $225 = $$1 >>> 3;
 $226 = ($$1>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = ((10408 + ($227<<2)|0) + 40|0);
  $229 = HEAP32[10408>>2]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[10408>>2] = $233;
   $$sum12$pre = (($227) + 2)|0;
   $$pre = ((10408 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $228;
  } else {
   $$sum13 = (($227) + 2)|0;
   $234 = ((10408 + ($$sum13<<2)|0) + 40|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[((10408 + 16|0))>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $234;$F16$0 = $235;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $238 = (($F16$0) + 12|0);
  HEAP32[$238>>2] = $$0;
  $239 = (($$0) + 8|0);
  HEAP32[$239>>2] = $F16$0;
  $240 = (($$0) + 12|0);
  HEAP32[$240>>2] = $228;
  STACKTOP = sp;return;
 }
 $241 = $$1 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $I19$0 = 0;
 } else {
  $243 = ($$1>>>0)>(16777215);
  if ($243) {
   $I19$0 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$1 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $I19$0 = $265;
  }
 }
 $266 = ((10408 + ($I19$0<<2)|0) + 304|0);
 $267 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$267>>2] = $I19$0$c;
 $268 = (($$0) + 20|0);
 HEAP32[$268>>2] = 0;
 $269 = (($$0) + 16|0);
 HEAP32[$269>>2] = 0;
 $270 = HEAP32[((10408 + 4|0))>>2]|0;
 $271 = 1 << $I19$0;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[((10408 + 4|0))>>2] = $274;
  HEAP32[$266>>2] = $$0;
  $275 = (($$0) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = (($$0) + 12|0);
  HEAP32[$276>>2] = $$0;
  $277 = (($$0) + 8|0);
  HEAP32[$277>>2] = $$0;
  STACKTOP = sp;return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($I19$0|0)==(31);
 if ($279) {
  $287 = 0;
 } else {
  $280 = $I19$0 >>> 1;
  $281 = (25 - ($280))|0;
  $287 = $281;
 }
 $282 = (($278) + 4|0);
 $283 = HEAP32[$282>>2]|0;
 $284 = $283 & -8;
 $285 = ($284|0)==($$1|0);
 L194: do {
  if ($285) {
   $T$0$lcssa = $278;
  } else {
   $286 = $$1 << $287;
   $K20$049 = $286;$T$048 = $278;
   while(1) {
    $294 = $K20$049 >>> 31;
    $295 = ((($T$048) + ($294<<2)|0) + 16|0);
    $290 = HEAP32[$295>>2]|0;
    $296 = ($290|0)==(0|0);
    if ($296) {
     break;
    }
    $288 = $K20$049 << 1;
    $289 = (($290) + 4|0);
    $291 = HEAP32[$289>>2]|0;
    $292 = $291 & -8;
    $293 = ($292|0)==($$1|0);
    if ($293) {
     $T$0$lcssa = $290;
     break L194;
    } else {
     $K20$049 = $288;$T$048 = $290;
    }
   }
   $297 = HEAP32[((10408 + 16|0))>>2]|0;
   $298 = ($295>>>0)<($297>>>0);
   if ($298) {
    _abort();
    // unreachable;
   }
   HEAP32[$295>>2] = $$0;
   $299 = (($$0) + 24|0);
   HEAP32[$299>>2] = $T$048;
   $300 = (($$0) + 12|0);
   HEAP32[$300>>2] = $$0;
   $301 = (($$0) + 8|0);
   HEAP32[$301>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $302 = (($T$0$lcssa) + 8|0);
 $303 = HEAP32[$302>>2]|0;
 $304 = HEAP32[((10408 + 16|0))>>2]|0;
 $305 = ($T$0$lcssa>>>0)<($304>>>0);
 if ($305) {
  _abort();
  // unreachable;
 }
 $306 = ($303>>>0)<($304>>>0);
 if ($306) {
  _abort();
  // unreachable;
 }
 $307 = (($303) + 12|0);
 HEAP32[$307>>2] = $$0;
 HEAP32[$302>>2] = $$0;
 $308 = (($$0) + 8|0);
 HEAP32[$308>>2] = $303;
 $309 = (($$0) + 12|0);
 HEAP32[$309>>2] = $T$0$lcssa;
 $310 = (($$0) + 24|0);
 HEAP32[$310>>2] = 0;
 STACKTOP = sp;return;
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$121 = 0, $$122 = 0, $$18 = 0, $$19 = 0, $$base = 0, $$base16 = 0, $$lcssa = 0, $$sum = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum1352 = 0, $$sum14 = 0, $$sum15 = 0, $$sum9 = 0, $$sum934 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$123 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$744 = 0;
 var $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond26 = 0, $or$cond2628 = 0, $phitmp93 = 0, $x$068 = 0, $x$135 = 0, $x$253 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $278 = 0;$279 = 0;
  tempRet0 = $278;
  STACKTOP = sp;return ($279|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond = $27 & $28;
 do {
  if ($or$cond) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    $$base = $25 ? 8 : $base;
    $$1 = $$base;$c$1 = $37;
    label = 32;
    break;
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum15 = (($46) + 1)|0;
   $47 = (10904 + ($$sum15)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    if ($51) {
     $278 = 0;$279 = 0;
     tempRet0 = $278;
     STACKTOP = sp;return ($279|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   } else {
    $$122 = 16;$c$123 = $46;
    label = 47;
   }
  } else {
   $$base16 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (10904 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base16>>>0);
   if ($60) {
    $$1 = $$base16;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $278 = 0;$279 = 0;
    tempRet0 = $278;
    STACKTOP = sp;return ($279|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $70 = $67;$x$068 = 0;
    while(1) {
     $69 = (($x$068) + ($70))|0;
     $71 = HEAP32[$3>>2]|0;
     $72 = HEAP32[$4>>2]|0;
     $73 = ($71>>>0)<($72>>>0);
     if ($73) {
      $74 = (($71) + 1|0);
      HEAP32[$3>>2] = $74;
      $75 = HEAP8[$71>>0]|0;
      $76 = $75&255;
      $c$2$be = $76;
     } else {
      $77 = (___shgetc($f)|0);
      $c$2$be = $77;
     }
     $78 = (($c$2$be) + -48)|0;
     $79 = ($78>>>0)<(10);
     $80 = ($69>>>0)<(429496729);
     $$ = $79 & $80;
     if (!($$)) {
      break;
     }
     $phitmp93 = ($69*10)|0;
     $70 = $78;$x$068 = $phitmp93;
    }
    $280 = $69;$281 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $280 = 0;$281 = 0;$c$2$lcssa = $c$1;
   }
   $81 = (($c$2$lcssa) + -48)|0;
   $82 = ($81>>>0)<(10);
   if ($82) {
    $83 = $280;$84 = $281;$88 = $81;$c$359 = $c$2$lcssa;
    while(1) {
     $85 = (___muldi3(($83|0),($84|0),10,0)|0);
     $86 = tempRet0;
     $87 = ($88|0)<(0);
     $89 = $87 << 31 >> 31;
     $90 = $88 ^ -1;
     $91 = $89 ^ -1;
     $92 = ($86>>>0)>($91>>>0);
     $93 = ($86|0)==($91|0);
     $94 = ($85>>>0)>($90>>>0);
     $95 = $93 & $94;
     $96 = $92 | $95;
     if ($96) {
      $$lcssa = $88;$282 = $83;$283 = $84;$c$3$lcssa = $c$359;
      break;
     }
     $97 = (_i64Add(($85|0),($86|0),($88|0),($89|0))|0);
     $98 = tempRet0;
     $99 = HEAP32[$3>>2]|0;
     $100 = HEAP32[$4>>2]|0;
     $101 = ($99>>>0)<($100>>>0);
     if ($101) {
      $102 = (($99) + 1|0);
      HEAP32[$3>>2] = $102;
      $103 = HEAP8[$99>>0]|0;
      $104 = $103&255;
      $c$3$be = $104;
     } else {
      $105 = (___shgetc($f)|0);
      $c$3$be = $105;
     }
     $106 = (($c$3$be) + -48)|0;
     $107 = ($106>>>0)<(10);
     $108 = ($98>>>0)<(429496729);
     $109 = ($98|0)==(429496729);
     $110 = ($97>>>0)<(2576980378);
     $111 = $109 & $110;
     $112 = $108 | $111;
     $or$cond17 = $107 & $112;
     if ($or$cond17) {
      $83 = $97;$84 = $98;$88 = $106;$c$359 = $c$3$be;
     } else {
      $$lcssa = $106;$282 = $97;$283 = $98;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $113 = ($$lcssa>>>0)>(9);
    if ($113) {
     $252 = $283;$255 = $282;
    } else {
     $$121 = 10;$284 = $282;$285 = $283;$c$8 = $c$3$lcssa;
     label = 73;
    }
   } else {
    $252 = $281;$255 = $280;
   }
  } else {
   $$122 = $$1;$c$123 = $c$1;
   label = 47;
  }
 }
 L70: do {
  if ((label|0) == 47) {
   $114 = (($$122) + -1)|0;
   $115 = $114 & $$122;
   $116 = ($115|0)==(0);
   if ($116) {
    $121 = ($$122*23)|0;
    $122 = $121 >>> 5;
    $123 = $122 & 7;
    $124 = (11168 + ($123)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125 << 24 >> 24;
    $$sum934 = (($c$123) + 1)|0;
    $127 = (10904 + ($$sum934)|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = ($129>>>0)<($$122>>>0);
    if ($130) {
     $133 = $129;$x$135 = 0;
     while(1) {
      $131 = $x$135 << $126;
      $132 = $133 | $131;
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $138 = HEAP8[$134>>0]|0;
       $139 = $138&255;
       $c$4$be = $139;
      } else {
       $140 = (___shgetc($f)|0);
       $c$4$be = $140;
      }
      $$sum9 = (($c$4$be) + 1)|0;
      $141 = (10904 + ($$sum9)|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = $142&255;
      $144 = ($143>>>0)<($$122>>>0);
      $145 = ($132>>>0)<(134217728);
      $$18 = $144 & $145;
      if ($$18) {
       $133 = $143;$x$135 = $132;
      } else {
       break;
      }
     }
     $149 = $142;$152 = 0;$155 = $132;$c$4$lcssa = $c$4$be;
    } else {
     $149 = $128;$152 = 0;$155 = 0;$c$4$lcssa = $c$123;
    }
    $146 = (_bitshift64Lshr(-1,-1,($126|0))|0);
    $147 = tempRet0;
    $148 = $149&255;
    $150 = ($148>>>0)>=($$122>>>0);
    $151 = ($152>>>0)>($147>>>0);
    $153 = ($152|0)==($147|0);
    $154 = ($155>>>0)>($146>>>0);
    $156 = $153 & $154;
    $157 = $151 | $156;
    $or$cond2628 = $150 | $157;
    if ($or$cond2628) {
     $$121 = $$122;$284 = $155;$285 = $152;$c$8 = $c$4$lcssa;
     label = 73;
     break;
    } else {
     $158 = $155;$159 = $152;$163 = $149;
    }
    while(1) {
     $160 = (_bitshift64Shl(($158|0),($159|0),($126|0))|0);
     $161 = tempRet0;
     $162 = $163&255;
     $164 = $162 | $160;
     $165 = HEAP32[$3>>2]|0;
     $166 = HEAP32[$4>>2]|0;
     $167 = ($165>>>0)<($166>>>0);
     if ($167) {
      $168 = (($165) + 1|0);
      HEAP32[$3>>2] = $168;
      $169 = HEAP8[$165>>0]|0;
      $170 = $169&255;
      $c$5$be = $170;
     } else {
      $171 = (___shgetc($f)|0);
      $c$5$be = $171;
     }
     $$sum10 = (($c$5$be) + 1)|0;
     $172 = (10904 + ($$sum10)|0);
     $173 = HEAP8[$172>>0]|0;
     $174 = $173&255;
     $175 = ($174>>>0)>=($$122>>>0);
     $176 = ($161>>>0)>($147>>>0);
     $177 = ($161|0)==($147|0);
     $178 = ($164>>>0)>($146>>>0);
     $179 = $177 & $178;
     $180 = $176 | $179;
     $or$cond26 = $175 | $180;
     if ($or$cond26) {
      $$121 = $$122;$284 = $164;$285 = $161;$c$8 = $c$5$be;
      label = 73;
      break L70;
     } else {
      $158 = $164;$159 = $161;$163 = $173;
     }
    }
   }
   $$sum1352 = (($c$123) + 1)|0;
   $117 = (10904 + ($$sum1352)|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = ($119>>>0)<($$122>>>0);
   if ($120) {
    $183 = $119;$x$253 = 0;
    while(1) {
     $181 = Math_imul($x$253, $$122)|0;
     $182 = (($183) + ($181))|0;
     $184 = HEAP32[$3>>2]|0;
     $185 = HEAP32[$4>>2]|0;
     $186 = ($184>>>0)<($185>>>0);
     if ($186) {
      $187 = (($184) + 1|0);
      HEAP32[$3>>2] = $187;
      $188 = HEAP8[$184>>0]|0;
      $189 = $188&255;
      $c$6$be = $189;
     } else {
      $190 = (___shgetc($f)|0);
      $c$6$be = $190;
     }
     $$sum13 = (($c$6$be) + 1)|0;
     $191 = (10904 + ($$sum13)|0);
     $192 = HEAP8[$191>>0]|0;
     $193 = $192&255;
     $194 = ($193>>>0)<($$122>>>0);
     $195 = ($182>>>0)<(119304647);
     $$19 = $194 & $195;
     if ($$19) {
      $183 = $193;$x$253 = $182;
     } else {
      break;
     }
    }
    $197 = $192;$286 = $182;$287 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $197 = $118;$286 = 0;$287 = 0;$c$6$lcssa = $c$123;
   }
   $196 = $197&255;
   $198 = ($196>>>0)<($$122>>>0);
   if ($198) {
    $199 = (___udivdi3(-1,-1,($$122|0),0)|0);
    $200 = tempRet0;
    $202 = $287;$205 = $286;$211 = $197;$c$744 = $c$6$lcssa;
    while(1) {
     $201 = ($202>>>0)>($200>>>0);
     $203 = ($202|0)==($200|0);
     $204 = ($205>>>0)>($199>>>0);
     $206 = $203 & $204;
     $207 = $201 | $206;
     if ($207) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $208 = (___muldi3(($205|0),($202|0),($$122|0),0)|0);
     $209 = tempRet0;
     $210 = $211&255;
     $212 = $210 ^ -1;
     $213 = ($209>>>0)>(4294967295);
     $214 = ($209|0)==(-1);
     $215 = ($208>>>0)>($212>>>0);
     $216 = $214 & $215;
     $217 = $213 | $216;
     if ($217) {
      $$121 = $$122;$284 = $205;$285 = $202;$c$8 = $c$744;
      label = 73;
      break L70;
     }
     $218 = (_i64Add(($210|0),0,($208|0),($209|0))|0);
     $219 = tempRet0;
     $220 = HEAP32[$3>>2]|0;
     $221 = HEAP32[$4>>2]|0;
     $222 = ($220>>>0)<($221>>>0);
     if ($222) {
      $223 = (($220) + 1|0);
      HEAP32[$3>>2] = $223;
      $224 = HEAP8[$220>>0]|0;
      $225 = $224&255;
      $c$7$be = $225;
     } else {
      $226 = (___shgetc($f)|0);
      $c$7$be = $226;
     }
     $$sum14 = (($c$7$be) + 1)|0;
     $227 = (10904 + ($$sum14)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = ($229>>>0)<($$122>>>0);
     if ($230) {
      $202 = $219;$205 = $218;$211 = $228;$c$744 = $c$7$be;
     } else {
      $$121 = $$122;$284 = $218;$285 = $219;$c$8 = $c$7$be;
      label = 73;
      break;
     }
    }
   } else {
    $$121 = $$122;$284 = $286;$285 = $287;$c$8 = $c$6$lcssa;
    label = 73;
   }
  }
 } while(0);
 if ((label|0) == 73) {
  $$sum11 = (($c$8) + 1)|0;
  $231 = (10904 + ($$sum11)|0);
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = ($233>>>0)<($$121>>>0);
  if ($234) {
   while(1) {
    $235 = HEAP32[$3>>2]|0;
    $236 = HEAP32[$4>>2]|0;
    $237 = ($235>>>0)<($236>>>0);
    if ($237) {
     $238 = (($235) + 1|0);
     HEAP32[$3>>2] = $238;
     $239 = HEAP8[$235>>0]|0;
     $240 = $239&255;
     $c$9$be = $240;
    } else {
     $241 = (___shgetc($f)|0);
     $c$9$be = $241;
    }
    $$sum12 = (($c$9$be) + 1)|0;
    $242 = (10904 + ($$sum12)|0);
    $243 = HEAP8[$242>>0]|0;
    $244 = $243&255;
    $245 = ($244>>>0)<($$121>>>0);
    if (!($245)) {
     break;
    }
   }
   $246 = (___errno_location()|0);
   HEAP32[$246>>2] = 34;
   $252 = $1;$255 = $0;
  } else {
   $252 = $285;$255 = $284;
  }
 }
 $247 = HEAP32[$4>>2]|0;
 $248 = ($247|0)==(0|0);
 if (!($248)) {
  $249 = HEAP32[$3>>2]|0;
  $250 = (($249) + -1|0);
  HEAP32[$3>>2] = $250;
 }
 $251 = ($252>>>0)<($1>>>0);
 $253 = ($252|0)==($1|0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = $253 & $254;
 $257 = $251 | $256;
 if (!($257)) {
  $258 = $0 & 1;
  $259 = ($258|0)==(0);
  $260 = (0)==(0);
  $261 = $259 & $260;
  $262 = ($neg$0|0)==(0);
  $or$cond20 = $261 & $262;
  if ($or$cond20) {
   $263 = (___errno_location()|0);
   HEAP32[$263>>2] = 34;
   $264 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $265 = tempRet0;
   $278 = $265;$279 = $264;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
  $266 = ($252>>>0)>($1>>>0);
  $267 = ($252|0)==($1|0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = $267 & $268;
  $270 = $266 | $269;
  if ($270) {
   $271 = (___errno_location()|0);
   HEAP32[$271>>2] = 34;
   $278 = $1;$279 = $0;
   tempRet0 = $278;
   STACKTOP = sp;return ($279|0);
  }
 }
 $272 = ($neg$0|0)<(0);
 $273 = $272 << 31 >> 31;
 $274 = $255 ^ $neg$0;
 $275 = $252 ^ $273;
 $276 = (_i64Subtract(($274|0),($275|0),($neg$0|0),($273|0))|0);
 $277 = tempRet0;
 $278 = $277;$279 = $276;
 tempRet0 = $278;
 STACKTOP = sp;return ($279|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$$i22 = 0, $$0 = 0.0, $$02$i = 0, $$08$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$10$i = 0, $$14$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$38$i = 0, $$388$i = 0, $$397$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa43$i = 0, $$lnz$0$i = 0;
 var $$neg20$i = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i17 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us53$i = 0, $$x$4$i = 0, $$y$3$i = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0.0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0.0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0.0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0.0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0.0, $435 = 0.0, $436 = 0.0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0.0, $447 = 0.0, $448 = 0.0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0.0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0, $482 = 0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0.0, $494 = 0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0.0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0.0, $667 = 0.0, $668 = 0.0, $669 = 0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0.0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0.0, $682 = 0, $683 = 0.0;
 var $684 = 0.0, $685 = 0.0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0.0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0.0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0.0, $707 = 0, $708 = 0, $709 = 0.0, $71 = 0, $710 = 0.0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa161$i = 0, $a$061$i = 0, $a$1$i = 0, $a$2$ph40$i = 0;
 var $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$427$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$07$i = 0.0, $bits$0$ph = 0, $brmerge = 0, $brmerge107 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$169 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$364 = 0, $c$4 = 0;
 var $c$5 = 0, $c$6 = 0, $carry$063$i = 0, $carry1$0$us$i = 0, $carry1$0$us49$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us54$i = 0, $carry3$030$i = 0, $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us44$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0;
 var $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i9 = 0, $gotdig$2$i = 0, $gotdig$2$i11 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$381$i = 0, $gotdig$393$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i12 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0;
 var $gotrad$194$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$025$i = 0, $i$068 = 0, $i$1$i = 0, $i$166 = 0, $i$263 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$086$i = 0, $j$096$i = 0, $j$2$i = 0, $j$371$i = 0, $k$0$lcssa$i = 0, $k$084$i = 0;
 var $k$095$i = 0, $k$2$i = 0, $k$3$i = 0, $k$462$i = 0, $k$5$in$us$i = 0, $k$5$in$us48$i = 0, $k$5$us$i = 0, $k$5$us50$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us56$i = 0, $k$628$i = 0, $lnz$0$lcssa$i = 0, $lnz$079$i = 0, $lnz$092$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0;
 var $or$cond106$not = 0, $or$cond11$i = 0, $or$cond12$us$i = 0, $or$cond12$us55$i = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond7$i = 0, $or$cond789$i = 0, $or$cond8 = 0, $rp$0$lcssa162$i = 0, $rp$060$i = 0, $rp$1$i18 = 0, $rp$2$ph38$i = 0, $rp$3$i$ph = 0;
 var $rp$3$ph33$i = 0, $rp$426$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$313$i = 0, $x$4$lcssa$i = 0, $x$48$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i24 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$39$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph39$i = 0, $z$1$us$i = 0, $z$1$us45$i = 0, $z$2$us$i = 0, $z$2$us47$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us57$i = 0, $z$4$i = 0, $z$5$ph$i = 0;
 var $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$169 = $c$0;$i$068 = 0;
 while(1) {
  $23 = $c$169 | 32;
  $24 = (11184 + ($i$068)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$169;$i$0$lcssa = $i$068;
   break;
  }
  $28 = ($i$068>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$169;
   }
  } while(0);
  $36 = (($i$068) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$169 = $c$2;$i$068 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)<(4);
   $39 = ($pok|0)==(0);
   $or$cond = $38 | $39;
   if (!($or$cond)) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $52 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($52) {
     $c$364 = $c$1$lcssa;$i$263 = 0;
     while(1) {
      $53 = $c$364 | 32;
      $54 = (11200 + ($i$263)|0);
      $55 = HEAP8[$54>>0]|0;
      $56 = $55 << 24 >> 24;
      $57 = ($53|0)==($56|0);
      if (!($57)) {
       $c$5 = $c$364;$i$3 = $i$263;
       break L34;
      }
      $58 = ($i$263>>>0)<(2);
      do {
       if ($58) {
        $59 = HEAP32[$0>>2]|0;
        $60 = HEAP32[$1>>2]|0;
        $61 = ($59>>>0)<($60>>>0);
        if ($61) {
         $62 = (($59) + 1|0);
         HEAP32[$0>>2] = $62;
         $63 = HEAP8[$59>>0]|0;
         $64 = $63&255;
         $c$4 = $64;
         break;
        } else {
         $65 = (___shgetc($f)|0);
         $c$4 = $65;
         break;
        }
       } else {
        $c$4 = $c$364;
       }
      } while(0);
      $66 = (($i$263) + 1)|0;
      $67 = ($66>>>0)<(3);
      if ($67) {
       $c$364 = $c$4;$i$263 = $66;
      } else {
       $c$5 = $c$4;$i$3 = $66;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 0)) {
    $113 = ($c$5|0)==(48);
    do {
     if ($113) {
      $114 = HEAP32[$0>>2]|0;
      $115 = HEAP32[$1>>2]|0;
      $116 = ($114>>>0)<($115>>>0);
      if ($116) {
       $117 = (($114) + 1|0);
       HEAP32[$0>>2] = $117;
       $118 = HEAP8[$114>>0]|0;
       $119 = $118&255;
       $122 = $119;
      } else {
       $120 = (___shgetc($f)|0);
       $122 = $120;
      }
      $121 = $122 | 32;
      $123 = ($121|0)==(120);
      if (!($123)) {
       $321 = HEAP32[$1>>2]|0;
       $322 = ($321|0)==(0|0);
       if ($322) {
        $c$6 = 48;
        break;
       }
       $323 = HEAP32[$0>>2]|0;
       $324 = (($323) + -1|0);
       HEAP32[$0>>2] = $324;
       $c$6 = 48;
       break;
      }
      $124 = HEAP32[$0>>2]|0;
      $125 = HEAP32[$1>>2]|0;
      $126 = ($124>>>0)<($125>>>0);
      if ($126) {
       $127 = (($124) + 1|0);
       HEAP32[$0>>2] = $127;
       $128 = HEAP8[$124>>0]|0;
       $129 = $128&255;
       $c$0$i = $129;$gotdig$0$i = 0;
      } else {
       $130 = (___shgetc($f)|0);
       $c$0$i = $130;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $131 = HEAP32[$0>>2]|0;
       $132 = HEAP32[$1>>2]|0;
       $133 = ($131>>>0)<($132>>>0);
       if ($133) {
        $134 = (($131) + 1|0);
        HEAP32[$0>>2] = $134;
        $135 = HEAP8[$131>>0]|0;
        $136 = $135&255;
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       } else {
        $137 = (___shgetc($f)|0);
        $c$0$i = $137;$gotdig$0$i = 1;
        continue;
       }
      }
      L71: do {
       if ((label|0) == 70) {
        $138 = HEAP32[$0>>2]|0;
        $139 = HEAP32[$1>>2]|0;
        $140 = ($138>>>0)<($139>>>0);
        if ($140) {
         $141 = (($138) + 1|0);
         HEAP32[$0>>2] = $141;
         $142 = HEAP8[$138>>0]|0;
         $143 = $142&255;
         $c$1$ph$i = $143;
        } else {
         $144 = (___shgetc($f)|0);
         $c$1$ph$i = $144;
        }
        $145 = ($c$1$ph$i|0)==(48);
        if ($145) {
         $155 = -1;$156 = -1;
         while(1) {
          $146 = HEAP32[$0>>2]|0;
          $147 = HEAP32[$1>>2]|0;
          $148 = ($146>>>0)<($147>>>0);
          if ($148) {
           $149 = (($146) + 1|0);
           HEAP32[$0>>2] = $149;
           $150 = HEAP8[$146>>0]|0;
           $151 = $150&255;
           $154 = $151;
          } else {
           $152 = (___shgetc($f)|0);
           $154 = $152;
          }
          $153 = ($154|0)==(48);
          if (!($153)) {
           $169 = 0;$172 = 0;$212 = $155;$214 = $156;$c$2$i = $154;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
           break L71;
          }
          $157 = (_i64Add(($155|0),($156|0),-1,-1)|0);
          $158 = tempRet0;
          $155 = $157;$156 = $158;
         }
        } else {
         $169 = 0;$172 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        }
       }
      } while(0);
      L84: while(1) {
       $159 = (($c$2$i) + -48)|0;
       $160 = ($159>>>0)<(10);
       do {
        if ($160) {
         $d$0$i = $159;
         label = 84;
        } else {
         $161 = $c$2$i | 32;
         $162 = (($161) + -97)|0;
         $163 = ($162>>>0)<(6);
         $164 = ($c$2$i|0)==(46);
         $or$cond$i = $163 | $164;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L84;
         }
         if ($164) {
          $165 = ($gotrad$0$i|0)==(0);
          if ($165) {
           $712 = $172;$713 = $169;$714 = $172;$715 = $169;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L84;
          }
         } else {
          $166 = ($c$2$i|0)>(57);
          $167 = (($161) + -87)|0;
          $$38$i = $166 ? $167 : $159;
          $d$0$i = $$38$i;
          label = 84;
          break;
         }
        }
       } while(0);
       if ((label|0) == 84) {
        label = 0;
        $168 = ($169|0)<(0);
        $170 = ($169|0)==(0);
        $171 = ($172>>>0)<(8);
        $173 = $170 & $171;
        $174 = $168 | $173;
        do {
         if ($174) {
          $175 = $x$0$i << 4;
          $176 = (($d$0$i) + ($175))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
         } else {
          $177 = ($169|0)<(0);
          $178 = ($169|0)==(0);
          $179 = ($172>>>0)<(14);
          $180 = $178 & $179;
          $181 = $177 | $180;
          if ($181) {
           $182 = (+($d$0$i|0));
           $183 = $scale$0$i * 0.0625;
           $184 = $183 * $182;
           $185 = $y$0$i + $184;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
           break;
          }
          $186 = ($d$0$i|0)!=(0);
          $187 = ($gottail$0$i|0)==(0);
          $or$cond3$i = $186 & $187;
          if ($or$cond3$i) {
           $188 = $scale$0$i * 0.5;
           $189 = $y$0$i + $188;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
          } else {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          }
         }
        } while(0);
        $190 = (_i64Add(($172|0),($169|0),1,0)|0);
        $191 = tempRet0;
        $712 = $212;$713 = $214;$714 = $190;$715 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $192 = HEAP32[$0>>2]|0;
       $193 = HEAP32[$1>>2]|0;
       $194 = ($192>>>0)<($193>>>0);
       if ($194) {
        $195 = (($192) + 1|0);
        HEAP32[$0>>2] = $195;
        $196 = HEAP8[$192>>0]|0;
        $197 = $196&255;
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $198 = (___shgetc($f)|0);
        $169 = $715;$172 = $714;$212 = $712;$214 = $713;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $199 = ($gotdig$2$i|0)==(0);
      if ($199) {
       $200 = HEAP32[$1>>2]|0;
       $201 = ($200|0)==(0|0);
       if (!($201)) {
        $202 = HEAP32[$0>>2]|0;
        $203 = (($202) + -1|0);
        HEAP32[$0>>2] = $203;
       }
       if ($39) {
        ___shlim($f,0);
       } else {
        if (!($201)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $172 : $212;
      $213 = $210 ? $169 : $214;
      $215 = ($169|0)<(0);
      $216 = ($169|0)==(0);
      $217 = ($172>>>0)<(8);
      $218 = $216 & $217;
      $219 = $215 | $218;
      if ($219) {
       $221 = $172;$222 = $169;$x$313$i = $x$0$i;
       while(1) {
        $220 = $x$313$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($224|0)==(0);
        $227 = ($223>>>0)<(8);
        $228 = $226 & $227;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$313$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         if ($39) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $237 = HEAP32[$1>>2]|0;
          $238 = ($237|0)==(0|0);
          if ($238) {
           $249 = 0;$250 = 0;
           break;
          }
          $239 = HEAP32[$0>>2]|0;
          $240 = (($239) + -1|0);
          HEAP32[$0>>2] = $240;
          $249 = 0;$250 = 0;
          break;
         }
        } else {
         $249 = $232;$250 = $233;
        }
       } else {
        $241 = HEAP32[$1>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $249 = 0;$250 = 0;
        } else {
         $243 = HEAP32[$0>>2]|0;
         $244 = (($243) + -1|0);
         HEAP32[$0>>2] = $244;
         $249 = 0;$250 = 0;
        }
       }
      } while(0);
      $245 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $246 = tempRet0;
      $247 = (_i64Add(($245|0),($246|0),-32,-1)|0);
      $248 = tempRet0;
      $251 = (_i64Add(($247|0),($248|0),($249|0),($250|0))|0);
      $252 = tempRet0;
      $253 = ($x$3$lcssa$i|0)==(0);
      if ($253) {
       $254 = (+($sign$0|0));
       $255 = $254 * 0.0;
       $$0 = $255;
       STACKTOP = sp;return (+$$0);
      }
      $256 = (0 - ($emin$0$ph))|0;
      $257 = ($252|0)>(0);
      $258 = ($252|0)==(0);
      $259 = ($251>>>0)>($256>>>0);
      $260 = $258 & $259;
      $261 = $257 | $260;
      if ($261) {
       $262 = (___errno_location()|0);
       HEAP32[$262>>2] = 34;
       $263 = (+($sign$0|0));
       $264 = $263 * 1.79769313486231570815E+308;
       $265 = $264 * 1.79769313486231570815E+308;
       $$0 = $265;
       STACKTOP = sp;return (+$$0);
      }
      $266 = (($emin$0$ph) + -106)|0;
      $267 = ($266|0)<(0);
      $268 = $267 << 31 >> 31;
      $269 = ($252|0)<($268|0);
      $270 = ($252|0)==($268|0);
      $271 = ($251>>>0)<($266>>>0);
      $272 = $270 & $271;
      $273 = $269 | $272;
      if ($273) {
       $275 = (___errno_location()|0);
       HEAP32[$275>>2] = 34;
       $276 = (+($sign$0|0));
       $277 = $276 * 2.22507385850720138309E-308;
       $278 = $277 * 2.22507385850720138309E-308;
       $$0 = $278;
       STACKTOP = sp;return (+$$0);
      }
      $274 = ($x$3$lcssa$i|0)>(-1);
      if ($274) {
       $283 = $251;$284 = $252;$x$48$i = $x$3$lcssa$i;$y$39$i = $y$0$i;
       while(1) {
        $279 = !($y$39$i >= 0.5);
        $280 = $x$48$i << 1;
        if ($279) {
         $$pn$i = $y$39$i;$x$5$i = $280;
        } else {
         $281 = $280 | 1;
         $282 = $y$39$i + -1.0;
         $$pn$i = $282;$x$5$i = $281;
        }
        $y$4$i = $y$39$i + $$pn$i;
        $285 = (_i64Add(($283|0),($284|0),-1,-1)|0);
        $286 = tempRet0;
        $287 = ($x$5$i|0)>(-1);
        if ($287) {
         $283 = $285;$284 = $286;$x$48$i = $x$5$i;$y$39$i = $y$4$i;
        } else {
         $292 = $285;$293 = $286;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $292 = $251;$293 = $252;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $288 = ($emin$0$ph|0)<(0);
      $289 = $288 << 31 >> 31;
      $290 = (_i64Subtract(32,0,($emin$0$ph|0),($289|0))|0);
      $291 = tempRet0;
      $294 = (_i64Add(($292|0),($293|0),($290|0),($291|0))|0);
      $295 = tempRet0;
      $296 = (0)>($295|0);
      $297 = (0)==($295|0);
      $298 = ($bits$0$ph>>>0)>($294>>>0);
      $299 = $297 & $298;
      $300 = $296 | $299;
      if ($300) {
       $301 = ($294|0)<(0);
       $$$i = $301 ? 0 : $294;
       $$02$i = $$$i;
      } else {
       $$02$i = $bits$0$ph;
      }
      $302 = ($$02$i|0)<(53);
      do {
       if ($302) {
        $303 = (84 - ($$02$i))|0;
        $304 = (+_scalbn(1.0,$303));
        $305 = (+($sign$0|0));
        $306 = (+_copysignl((+$304),(+$305)));
        $307 = ($$02$i|0)<(32);
        $308 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $307 & $308;
        if (!($or$cond4$i)) {
         $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
         break;
        }
        $309 = $x$4$lcssa$i & 1;
        $310 = ($309|0)==(0);
        $311 = $309 ^ 1;
        $$x$4$i = (($311) + ($x$4$lcssa$i))|0;
        $$y$3$i = $310 ? 0.0 : $y$3$lcssa$i;
        $$pre$phi$iZ2D = $305;$bias$07$i = $306;$x$6$i = $$x$4$i;$y$5$i = $$y$3$i;
       } else {
        $$pre$i = (+($sign$0|0));
        $$pre$phi$iZ2D = $$pre$i;$bias$07$i = 0.0;$x$6$i = $x$4$lcssa$i;$y$5$i = $y$3$lcssa$i;
       }
      } while(0);
      $312 = (+($x$6$i>>>0));
      $313 = $$pre$phi$iZ2D * $312;
      $314 = $bias$07$i + $313;
      $315 = $$pre$phi$iZ2D * $y$5$i;
      $316 = $315 + $314;
      $317 = $316 - $bias$07$i;
      $318 = $317 != 0.0;
      if (!($318)) {
       $319 = (___errno_location()|0);
       HEAP32[$319>>2] = 34;
      }
      $320 = (+_scalbnl($317,$292));
      $$0 = $320;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $325 = (0 - ($sum$i))|0;
    $$08$i = $c$6;$gotdig$0$i9 = 0;
    while(1) {
     if ((($$08$i|0) == 46)) {
      label = 139;
      break;
     } else if (!((($$08$i|0) == 48))) {
      $$2$i = $$08$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 0;
      break;
     }
     $326 = HEAP32[$0>>2]|0;
     $327 = HEAP32[$1>>2]|0;
     $328 = ($326>>>0)<($327>>>0);
     if ($328) {
      $329 = (($326) + 1|0);
      HEAP32[$0>>2] = $329;
      $330 = HEAP8[$326>>0]|0;
      $331 = $330&255;
      $$08$i = $331;$gotdig$0$i9 = 1;
      continue;
     } else {
      $332 = (___shgetc($f)|0);
      $$08$i = $332;$gotdig$0$i9 = 1;
      continue;
     }
    }
    L173: do {
     if ((label|0) == 139) {
      $333 = HEAP32[$0>>2]|0;
      $334 = HEAP32[$1>>2]|0;
      $335 = ($333>>>0)<($334>>>0);
      if ($335) {
       $336 = (($333) + 1|0);
       HEAP32[$0>>2] = $336;
       $337 = HEAP8[$333>>0]|0;
       $338 = $337&255;
       $$1$ph$i = $338;
      } else {
       $339 = (___shgetc($f)|0);
       $$1$ph$i = $339;
      }
      $340 = ($$1$ph$i|0)==(48);
      if ($340) {
       $349 = -1;$350 = -1;
       while(1) {
        $341 = HEAP32[$0>>2]|0;
        $342 = HEAP32[$1>>2]|0;
        $343 = ($341>>>0)<($342>>>0);
        if ($343) {
         $344 = (($341) + 1|0);
         HEAP32[$0>>2] = $344;
         $345 = HEAP8[$341>>0]|0;
         $346 = $345&255;
         $$1$be$i = $346;
        } else {
         $347 = (___shgetc($f)|0);
         $$1$be$i = $347;
        }
        $348 = ($$1$be$i|0)==(48);
        if (!($348)) {
         $$2$i = $$1$be$i;$716 = $349;$717 = $350;$gotdig$2$i11 = 1;$gotrad$0$i12 = 1;
         break L173;
        }
        $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
        $352 = tempRet0;
        $349 = $351;$350 = $352;
       }
      } else {
       $$2$i = $$1$ph$i;$716 = 0;$717 = 0;$gotdig$2$i11 = $gotdig$0$i9;$gotrad$0$i12 = 1;
      }
     }
    } while(0);
    HEAP32[$x$i>>2] = 0;
    $353 = (($$2$i) + -48)|0;
    $354 = ($353>>>0)<(10);
    $355 = ($$2$i|0)==(46);
    $or$cond789$i = $354 | $355;
    L187: do {
     if ($or$cond789$i) {
      $356 = (($x$i) + 496|0);
      $$397$i = $$2$i;$358 = 0;$359 = 0;$718 = $355;$719 = $353;$720 = $716;$721 = $717;$gotdig$393$i = $gotdig$2$i11;$gotrad$194$i = $gotrad$0$i12;$j$096$i = 0;$k$095$i = 0;$lnz$092$i = 0;
      while(1) {
       do {
        if ($718) {
         $cond$i = ($gotrad$194$i|0)==(0);
         if ($cond$i) {
          $722 = $358;$723 = $359;$724 = $358;$725 = $359;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = 1;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
         } else {
          $$388$i = $$397$i;$405 = $720;$406 = $721;$421 = $358;$424 = $359;$gotdig$381$i = $gotdig$393$i;$j$086$i = $j$096$i;$k$084$i = $k$095$i;$lnz$079$i = $lnz$092$i;
          break L187;
         }
        } else {
         $357 = ($k$095$i|0)<(125);
         $360 = (_i64Add(($358|0),($359|0),1,0)|0);
         $361 = tempRet0;
         $362 = ($$397$i|0)!=(48);
         if (!($357)) {
          if (!($362)) {
           $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
           break;
          }
          $372 = HEAP32[$356>>2]|0;
          $373 = $372 | 1;
          HEAP32[$356>>2] = $373;
          $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = $gotdig$393$i;$gotrad$2$i = $gotrad$194$i;$j$2$i = $j$096$i;$k$2$i = $k$095$i;$lnz$2$i = $lnz$092$i;
          break;
         }
         $$lnz$0$i = $362 ? $360 : $lnz$092$i;
         $363 = ($j$096$i|0)==(0);
         $364 = (($x$i) + ($k$095$i<<2)|0);
         if ($363) {
          $storemerge$i = $719;
         } else {
          $365 = HEAP32[$364>>2]|0;
          $366 = ($365*10)|0;
          $367 = (($$397$i) + -48)|0;
          $368 = (($367) + ($366))|0;
          $storemerge$i = $368;
         }
         HEAP32[$364>>2] = $storemerge$i;
         $369 = (($j$096$i) + 1)|0;
         $370 = ($369|0)==(9);
         $371 = $370&1;
         $$k$0$i = (($371) + ($k$095$i))|0;
         $$10$i = $370 ? 0 : $369;
         $722 = $720;$723 = $721;$724 = $360;$725 = $361;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$194$i;$j$2$i = $$10$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $374 = HEAP32[$0>>2]|0;
       $375 = HEAP32[$1>>2]|0;
       $376 = ($374>>>0)<($375>>>0);
       if ($376) {
        $377 = (($374) + 1|0);
        HEAP32[$0>>2] = $377;
        $378 = HEAP8[$374>>0]|0;
        $379 = $378&255;
        $$3$be$i = $379;
       } else {
        $380 = (___shgetc($f)|0);
        $$3$be$i = $380;
       }
       $381 = (($$3$be$i) + -48)|0;
       $382 = ($381>>>0)<(10);
       $383 = ($$3$be$i|0)==(46);
       $or$cond7$i = $382 | $383;
       if ($or$cond7$i) {
        $$397$i = $$3$be$i;$358 = $724;$359 = $725;$718 = $383;$719 = $381;$720 = $722;$721 = $723;$gotdig$393$i = $gotdig$4$i;$gotrad$194$i = $gotrad$2$i;$j$096$i = $j$2$i;$k$095$i = $k$2$i;$lnz$092$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$386 = $724;$387 = $722;$389 = $725;$390 = $723;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 162;
        break;
       }
      }
     } else {
      $$3$lcssa$i = $$2$i;$386 = 0;$387 = $716;$389 = 0;$390 = $717;$gotdig$3$lcssa$i = $gotdig$2$i11;$gotrad$1$lcssa$i = $gotrad$0$i12;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 162;
     }
    } while(0);
    if ((label|0) == 162) {
     $384 = ($gotrad$1$lcssa$i|0)==(0);
     $385 = $384 ? $386 : $387;
     $388 = $384 ? $389 : $390;
     $$388$i = $$3$lcssa$i;$405 = $385;$406 = $388;$421 = $386;$424 = $389;$gotdig$381$i = $gotdig$3$lcssa$i;$j$086$i = $j$0$lcssa$i;$k$084$i = $k$0$lcssa$i;$lnz$079$i = $lnz$0$lcssa$i;
    }
    $391 = ($gotdig$381$i|0)!=(0);
    if ($391) {
     $392 = $$388$i | 32;
     $393 = ($392|0)==(101);
     if ($393) {
      $394 = (_scanexp($f,$pok)|0);
      $395 = tempRet0;
      $396 = ($394|0)==(0);
      $397 = ($395|0)==(-2147483648);
      $398 = $396 & $397;
      do {
       if ($398) {
        if ($39) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $399 = HEAP32[$1>>2]|0;
         $400 = ($399|0)==(0|0);
         if ($400) {
          $403 = 0;$404 = 0;
          break;
         }
         $401 = HEAP32[$0>>2]|0;
         $402 = (($401) + -1|0);
         HEAP32[$0>>2] = $402;
         $403 = 0;$404 = 0;
         break;
        }
       } else {
        $403 = $394;$404 = $395;
       }
      } while(0);
      $407 = (_i64Add(($403|0),($404|0),($405|0),($406|0))|0);
      $408 = tempRet0;
      $420 = $407;$423 = $408;
     } else {
      label = 171;
     }
    } else {
     label = 171;
    }
    if ((label|0) == 171) {
     $409 = ($$388$i|0)>(-1);
     if ($409) {
      $410 = HEAP32[$1>>2]|0;
      $411 = ($410|0)==(0|0);
      if ($411) {
       $420 = $405;$423 = $406;
      } else {
       $412 = HEAP32[$0>>2]|0;
       $413 = (($412) + -1|0);
       HEAP32[$0>>2] = $413;
       $420 = $405;$423 = $406;
      }
     } else {
      $420 = $405;$423 = $406;
     }
    }
    if (!($391)) {
     $414 = (___errno_location()|0);
     HEAP32[$414>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $415 = HEAP32[$x$i>>2]|0;
    $416 = ($415|0)==(0);
    if ($416) {
     $417 = (+($sign$0|0));
     $418 = $417 * 0.0;
     $$0 = $418;
     STACKTOP = sp;return (+$$0);
    }
    $419 = ($420|0)==($421|0);
    $422 = ($423|0)==($424|0);
    $425 = $419 & $422;
    $426 = ($424|0)<(0);
    $427 = ($424|0)==(0);
    $428 = ($421>>>0)<(10);
    $429 = $427 & $428;
    $430 = $426 | $429;
    $or$cond$i15 = $425 & $430;
    do {
     if ($or$cond$i15) {
      $431 = ($bits$0$ph>>>0)>(30);
      if (!($431)) {
       $432 = $415 >>> $bits$0$ph;
       $433 = ($432|0)==(0);
       if (!($433)) {
        break;
       }
      }
      $434 = (+($sign$0|0));
      $435 = (+($415>>>0));
      $436 = $434 * $435;
      $$0 = $436;
      STACKTOP = sp;return (+$$0);
     }
    } while(0);
    $437 = (($emin$0$ph|0) / -2)&-1;
    $438 = ($437|0)<(0);
    $439 = $438 << 31 >> 31;
    $440 = ($423|0)>($439|0);
    $441 = ($423|0)==($439|0);
    $442 = ($420>>>0)>($437>>>0);
    $443 = $441 & $442;
    $444 = $440 | $443;
    if ($444) {
     $445 = (___errno_location()|0);
     HEAP32[$445>>2] = 34;
     $446 = (+($sign$0|0));
     $447 = $446 * 1.79769313486231570815E+308;
     $448 = $447 * 1.79769313486231570815E+308;
     $$0 = $448;
     STACKTOP = sp;return (+$$0);
    }
    $449 = (($emin$0$ph) + -106)|0;
    $450 = ($449|0)<(0);
    $451 = $450 << 31 >> 31;
    $452 = ($423|0)<($451|0);
    $453 = ($423|0)==($451|0);
    $454 = ($420>>>0)<($449>>>0);
    $455 = $453 & $454;
    $456 = $452 | $455;
    if ($456) {
     $457 = (___errno_location()|0);
     HEAP32[$457>>2] = 34;
     $458 = (+($sign$0|0));
     $459 = $458 * 2.22507385850720138309E-308;
     $460 = $459 * 2.22507385850720138309E-308;
     $$0 = $460;
     STACKTOP = sp;return (+$$0);
    }
    $461 = ($j$086$i|0)==(0);
    if ($461) {
     $k$3$i = $k$084$i;
    } else {
     $462 = ($j$086$i|0)<(9);
     if ($462) {
      $463 = (($x$i) + ($k$084$i<<2)|0);
      $$promoted$i = HEAP32[$463>>2]|0;
      $465 = $$promoted$i;$j$371$i = $j$086$i;
      while(1) {
       $464 = ($465*10)|0;
       $466 = (($j$371$i) + 1)|0;
       $exitcond$i = ($466|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $465 = $464;$j$371$i = $466;
       }
      }
      HEAP32[$463>>2] = $464;
     }
     $467 = (($k$084$i) + 1)|0;
     $k$3$i = $467;
    }
    $468 = ($lnz$079$i|0)<(9);
    do {
     if ($468) {
      $469 = ($lnz$079$i|0)<=($420|0);
      $470 = ($420|0)<(18);
      $or$cond3$i16 = $469 & $470;
      if ($or$cond3$i16) {
       $471 = ($420|0)==(9);
       if ($471) {
        $472 = (+($sign$0|0));
        $473 = HEAP32[$x$i>>2]|0;
        $474 = (+($473>>>0));
        $475 = $472 * $474;
        $$0 = $475;
        STACKTOP = sp;return (+$$0);
       }
       $476 = ($420|0)<(9);
       if ($476) {
        $477 = (+($sign$0|0));
        $478 = HEAP32[$x$i>>2]|0;
        $479 = (+($478>>>0));
        $480 = $477 * $479;
        $481 = (8 - ($420))|0;
        $482 = (11216 + ($481<<2)|0);
        $483 = HEAP32[$482>>2]|0;
        $484 = (+($483|0));
        $485 = $480 / $484;
        $$0 = $485;
        STACKTOP = sp;return (+$$0);
       }
       $486 = Math_imul($420, -3)|0;
       $$neg20$i = (($bits$0$ph) + 27)|0;
       $487 = (($$neg20$i) + ($486))|0;
       $488 = ($487|0)>(30);
       $$pre$i17 = HEAP32[$x$i>>2]|0;
       if (!($488)) {
        $489 = $$pre$i17 >>> $487;
        $490 = ($489|0)==(0);
        if (!($490)) {
         break;
        }
       }
       $491 = (+($sign$0|0));
       $492 = (+($$pre$i17>>>0));
       $493 = $491 * $492;
       $494 = (($420) + -10)|0;
       $495 = (11216 + ($494<<2)|0);
       $496 = HEAP32[$495>>2]|0;
       $497 = (+($496|0));
       $498 = $493 * $497;
       $$0 = $498;
       STACKTOP = sp;return (+$$0);
      }
     }
    } while(0);
    $499 = (($420|0) % 9)&-1;
    $500 = ($499|0)==(0);
    if ($500) {
     $a$2$ph40$i = 0;$e2$0$ph$i = 0;$rp$2$ph38$i = $420;$z$1$ph39$i = $k$3$i;
    } else {
     $501 = ($420|0)>(-1);
     $502 = (($499) + 9)|0;
     $503 = $501 ? $499 : $502;
     $504 = (8 - ($503))|0;
     $505 = (11216 + ($504<<2)|0);
     $506 = HEAP32[$505>>2]|0;
     $507 = ($k$3$i|0)==(0);
     if ($507) {
      $a$0$lcssa161$i = 0;$rp$0$lcssa162$i = $420;$z$0$i = 0;
     } else {
      $508 = (1000000000 / ($506|0))&-1;
      $a$061$i = 0;$carry$063$i = 0;$k$462$i = 0;$rp$060$i = $420;
      while(1) {
       $509 = (($x$i) + ($k$462$i<<2)|0);
       $510 = HEAP32[$509>>2]|0;
       $511 = (($510>>>0) % ($506>>>0))&-1;
       $512 = (($510>>>0) / ($506>>>0))&-1;
       $513 = (($512) + ($carry$063$i))|0;
       HEAP32[$509>>2] = $513;
       $514 = Math_imul($511, $508)|0;
       $515 = ($k$462$i|0)==($a$061$i|0);
       $516 = ($513|0)==(0);
       $or$cond11$i = $515 & $516;
       $517 = (($k$462$i) + 1)|0;
       if ($or$cond11$i) {
        $518 = $517 & 127;
        $519 = (($rp$060$i) + -9)|0;
        $a$1$i = $518;$rp$1$i18 = $519;
       } else {
        $a$1$i = $a$061$i;$rp$1$i18 = $rp$060$i;
       }
       $520 = ($517|0)==($k$3$i|0);
       if ($520) {
        break;
       } else {
        $a$061$i = $a$1$i;$carry$063$i = $514;$k$462$i = $517;$rp$060$i = $rp$1$i18;
       }
      }
      $521 = ($514|0)==(0);
      if ($521) {
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $k$3$i;
      } else {
       $522 = (($k$3$i) + 1)|0;
       $523 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$523>>2] = $514;
       $a$0$lcssa161$i = $a$1$i;$rp$0$lcssa162$i = $rp$1$i18;$z$0$i = $522;
      }
     }
     $524 = (9 - ($503))|0;
     $525 = (($524) + ($rp$0$lcssa162$i))|0;
     $a$2$ph40$i = $a$0$lcssa161$i;$e2$0$ph$i = 0;$rp$2$ph38$i = $525;$z$1$ph39$i = $z$0$i;
    }
    L285: while(1) {
     $526 = ($rp$2$ph38$i|0)<(18);
     $527 = (($x$i) + ($a$2$ph40$i<<2)|0);
     if ($526) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph39$i;
      while(1) {
       $529 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $529;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $530 = (($x$i) + ($k$5$us$i<<2)|0);
        $531 = HEAP32[$530>>2]|0;
        $532 = (_bitshift64Shl(($531|0),0,29)|0);
        $533 = tempRet0;
        $534 = (_i64Add(($532|0),($533|0),($carry1$0$us$i|0),0)|0);
        $535 = tempRet0;
        $536 = ($535>>>0)>(0);
        $537 = ($535|0)==(0);
        $538 = ($534>>>0)>(1000000000);
        $539 = $537 & $538;
        $540 = $536 | $539;
        if ($540) {
         $541 = (___udivdi3(($534|0),($535|0),1000000000,0)|0);
         $542 = tempRet0;
         $543 = (___uremdi3(($534|0),($535|0),1000000000,0)|0);
         $544 = tempRet0;
         $$sink$off0$us$i = $543;$carry1$1$us$i = $541;
        } else {
         $$sink$off0$us$i = $534;$carry1$1$us$i = 0;
        }
        HEAP32[$530>>2] = $$sink$off0$us$i;
        $545 = (($z$2$us$i) + 127)|0;
        $546 = $545 & 127;
        $547 = ($k$5$us$i|0)!=($546|0);
        $548 = ($k$5$us$i|0)==($a$2$ph40$i|0);
        $or$cond12$us$i = $547 | $548;
        if ($or$cond12$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $549 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $549 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $550 = (($k$5$us$i) + -1)|0;
        if ($548) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $550;$z$2$us$i = $z$3$us$i;
        }
       }
       $551 = (($e2$0$us$i) + -29)|0;
       $552 = ($carry1$1$us$i|0)==(0);
       if ($552) {
        $e2$0$us$i = $551;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa43$i = $551;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $528 = ($rp$2$ph38$i|0)==(18);
      if ($528) {
       $e2$0$us44$i = $e2$0$ph$i;$z$1$us45$i = $z$1$ph39$i;
      } else {
       $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph33$i = $rp$2$ph38$i;$z$5$ph$i = $z$1$ph39$i;
       break;
      }
      while(1) {
       $553 = HEAP32[$527>>2]|0;
       $554 = ($553>>>0)<(9007199);
       if (!($554)) {
        $a$3$ph$i = $a$2$ph40$i;$e2$1$ph$i = $e2$0$us44$i;$rp$3$ph33$i = 18;$z$5$ph$i = $z$1$us45$i;
        break L285;
       }
       $555 = (($z$1$us45$i) + 127)|0;
       $carry1$0$us49$i = 0;$k$5$in$us48$i = $555;$z$2$us47$i = $z$1$us45$i;
       while(1) {
        $k$5$us50$i = $k$5$in$us48$i & 127;
        $556 = (($x$i) + ($k$5$us50$i<<2)|0);
        $557 = HEAP32[$556>>2]|0;
        $558 = (_bitshift64Shl(($557|0),0,29)|0);
        $559 = tempRet0;
        $560 = (_i64Add(($558|0),($559|0),($carry1$0$us49$i|0),0)|0);
        $561 = tempRet0;
        $562 = ($561>>>0)>(0);
        $563 = ($561|0)==(0);
        $564 = ($560>>>0)>(1000000000);
        $565 = $563 & $564;
        $566 = $562 | $565;
        if ($566) {
         $567 = (___udivdi3(($560|0),($561|0),1000000000,0)|0);
         $568 = tempRet0;
         $569 = (___uremdi3(($560|0),($561|0),1000000000,0)|0);
         $570 = tempRet0;
         $$sink$off0$us53$i = $569;$carry1$1$us54$i = $567;
        } else {
         $$sink$off0$us53$i = $560;$carry1$1$us54$i = 0;
        }
        HEAP32[$556>>2] = $$sink$off0$us53$i;
        $571 = (($z$2$us47$i) + 127)|0;
        $572 = $571 & 127;
        $573 = ($k$5$us50$i|0)!=($572|0);
        $574 = ($k$5$us50$i|0)==($a$2$ph40$i|0);
        $or$cond12$us55$i = $573 | $574;
        if ($or$cond12$us55$i) {
         $z$3$us57$i = $z$2$us47$i;
        } else {
         $575 = ($$sink$off0$us53$i|0)==(0);
         $k$5$z$2$us56$i = $575 ? $k$5$us50$i : $z$2$us47$i;
         $z$3$us57$i = $k$5$z$2$us56$i;
        }
        $576 = (($k$5$us50$i) + -1)|0;
        if ($574) {
         break;
        } else {
         $carry1$0$us49$i = $carry1$1$us54$i;$k$5$in$us48$i = $576;$z$2$us47$i = $z$3$us57$i;
        }
       }
       $577 = (($e2$0$us44$i) + -29)|0;
       $578 = ($carry1$1$us54$i|0)==(0);
       if ($578) {
        $e2$0$us44$i = $577;$z$1$us45$i = $z$3$us57$i;
       } else {
        $$lcssa43$i = $577;$carry1$1$lcssa$lcssa$i = $carry1$1$us54$i;$z$3$lcssa$lcssa$i = $z$3$us57$i;
        break;
       }
      }
     }
     $579 = (($rp$2$ph38$i) + 9)|0;
     $580 = (($a$2$ph40$i) + 127)|0;
     $581 = $580 & 127;
     $582 = ($581|0)==($z$3$lcssa$lcssa$i|0);
     if ($582) {
      $583 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $584 = $583 & 127;
      $585 = (($x$i) + ($584<<2)|0);
      $586 = HEAP32[$585>>2]|0;
      $587 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $588 = $587 & 127;
      $589 = (($x$i) + ($588<<2)|0);
      $590 = HEAP32[$589>>2]|0;
      $591 = $590 | $586;
      HEAP32[$589>>2] = $591;
      $z$4$i = $584;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $592 = (($x$i) + ($581<<2)|0);
     HEAP32[$592>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph40$i = $581;$e2$0$ph$i = $$lcssa43$i;$rp$2$ph38$i = $579;$z$1$ph39$i = $z$4$i;
    }
    L316: while(1) {
     $629 = (($z$5$ph$i) + 1)|0;
     $627 = $629 & 127;
     $630 = (($z$5$ph$i) + 127)|0;
     $631 = $630 & 127;
     $632 = (($x$i) + ($631<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph33$i;
     while(1) {
      $605 = ($rp$3$i$ph|0)==(18);
      $633 = ($rp$3$i$ph|0)>(27);
      $$14$i = $633 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$025$i = 0;
       while(1) {
        $595 = (($i$025$i) + ($a$3$i))|0;
        $596 = $595 & 127;
        $597 = ($596|0)==($z$5$ph$i|0);
        if ($597) {
         $i$1$i = 2;
         break;
        }
        $598 = (($x$i) + ($596<<2)|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = (11208 + ($i$025$i<<2)|0);
        $601 = HEAP32[$600>>2]|0;
        $602 = ($599>>>0)<($601>>>0);
        if ($602) {
         $i$1$i = 2;
         break;
        }
        $603 = ($599>>>0)>($601>>>0);
        $594 = (($i$025$i) + 1)|0;
        if ($603) {
         $i$1$i = $i$025$i;
         break;
        }
        $593 = ($594|0)<(2);
        if ($593) {
         $i$025$i = $594;
        } else {
         $i$1$i = $594;
         break;
        }
       }
       $604 = ($i$1$i|0)==(2);
       $or$cond13$i = $604 & $605;
       if ($or$cond13$i) {
        break L316;
       }
       $608 = (($$14$i) + ($e2$1$i))|0;
       $609 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($609) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $608;
       } else {
        break;
       }
      }
      $610 = 1 << $$14$i;
      $611 = (($610) + -1)|0;
      $612 = 1000000000 >>> $$14$i;
      $a$427$i = $a$3$i;$carry3$030$i = 0;$k$628$i = $a$3$i;$rp$426$i = $rp$3$i$ph;
      while(1) {
       $613 = (($x$i) + ($k$628$i<<2)|0);
       $614 = HEAP32[$613>>2]|0;
       $615 = $614 & $611;
       $616 = $614 >>> $$14$i;
       $617 = (($616) + ($carry3$030$i))|0;
       HEAP32[$613>>2] = $617;
       $618 = Math_imul($615, $612)|0;
       $619 = ($k$628$i|0)==($a$427$i|0);
       $620 = ($617|0)==(0);
       $or$cond15$i = $619 & $620;
       $621 = (($k$628$i) + 1)|0;
       $622 = $621 & 127;
       $623 = (($rp$426$i) + -9)|0;
       $rp$5$i = $or$cond15$i ? $623 : $rp$426$i;
       $a$5$i = $or$cond15$i ? $622 : $a$427$i;
       $624 = ($622|0)==($z$5$ph$i|0);
       if ($624) {
        break;
       } else {
        $a$427$i = $a$5$i;$carry3$030$i = $618;$k$628$i = $622;$rp$426$i = $rp$5$i;
       }
      }
      $625 = ($618|0)==(0);
      if ($625) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $626 = ($627|0)==($a$5$i|0);
      if (!($626)) {
       break;
      }
      $634 = HEAP32[$632>>2]|0;
      $635 = $634 | 1;
      HEAP32[$632>>2] = $635;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $608;$rp$3$i$ph = $rp$5$i;
     }
     $628 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$628>>2] = $618;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $608;$rp$3$ph33$i = $rp$5$i;$z$5$ph$i = $627;
    }
    $606 = $a$3$i & 127;
    $607 = ($606|0)==($z$5$ph$i|0);
    if ($607) {
     $636 = (($627) + -1)|0;
     $637 = (($x$i) + ($636<<2)|0);
     HEAP32[$637>>2] = 0;
     $z$7$i = $627;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $638 = (($x$i) + ($606<<2)|0);
    $639 = HEAP32[$638>>2]|0;
    $640 = (+($639>>>0));
    $641 = (($a$3$i) + 1)|0;
    $642 = $641 & 127;
    $643 = ($642|0)==($z$7$i|0);
    if ($643) {
     $702 = (($z$7$i) + 1)|0;
     $703 = $702 & 127;
     $704 = (($703) + -1)|0;
     $705 = (($x$i) + ($704<<2)|0);
     HEAP32[$705>>2] = 0;
     $z$7$1$i = $703;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $706 = $640 * 1.0E+9;
    $707 = (($x$i) + ($642<<2)|0);
    $708 = HEAP32[$707>>2]|0;
    $709 = (+($708>>>0));
    $710 = $706 + $709;
    $667 = (+($sign$0|0));
    $649 = $667 * $710;
    $687 = (($e2$1$i) + 53)|0;
    $645 = (($687) - ($emin$0$ph))|0;
    $711 = ($645|0)<($bits$0$ph|0);
    if ($711) {
     $644 = ($645|0)<(0);
     $$$i22 = $644 ? 0 : $645;
     $$09$i = $$$i22;$denormal$0$i = 1;
    } else {
     $$09$i = $bits$0$ph;$denormal$0$i = 0;
    }
    $646 = ($$09$i|0)<(53);
    if ($646) {
     $647 = (105 - ($$09$i))|0;
     $648 = (+_scalbn(1.0,$647));
     $650 = (+_copysignl((+$648),(+$649)));
     $651 = (53 - ($$09$i))|0;
     $652 = (+_scalbn(1.0,$651));
     $653 = (+_fmodl((+$649),(+$652)));
     $654 = $649 - $653;
     $655 = $650 + $654;
     $bias$0$i = $650;$frac$0$i = $653;$y$1$i23 = $655;
    } else {
     $bias$0$i = 0.0;$frac$0$i = 0.0;$y$1$i23 = $649;
    }
    $656 = (($a$3$i) + 2)|0;
    $657 = $656 & 127;
    $658 = ($657|0)==($z$7$1$i|0);
    do {
     if ($658) {
      $frac$2$i = $frac$0$i;
     } else {
      $659 = (($x$i) + ($657<<2)|0);
      $660 = HEAP32[$659>>2]|0;
      $661 = ($660>>>0)<(500000000);
      do {
       if ($661) {
        $662 = ($660|0)==(0);
        if ($662) {
         $663 = (($a$3$i) + 3)|0;
         $664 = $663 & 127;
         $665 = ($664|0)==($z$7$1$i|0);
         if ($665) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $666 = $667 * 0.25;
        $668 = $666 + $frac$0$i;
        $frac$1$i = $668;
       } else {
        $669 = ($660>>>0)>(500000000);
        if ($669) {
         $670 = $667 * 0.75;
         $671 = $670 + $frac$0$i;
         $frac$1$i = $671;
         break;
        }
        $672 = (($a$3$i) + 3)|0;
        $673 = $672 & 127;
        $674 = ($673|0)==($z$7$1$i|0);
        if ($674) {
         $675 = $667 * 0.5;
         $676 = $675 + $frac$0$i;
         $frac$1$i = $676;
         break;
        } else {
         $677 = $667 * 0.75;
         $678 = $677 + $frac$0$i;
         $frac$1$i = $678;
         break;
        }
       }
      } while(0);
      $679 = (53 - ($$09$i))|0;
      $680 = ($679|0)>(1);
      if (!($680)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $681 = (+_fmodl((+$frac$1$i),1.0));
      $682 = $681 != 0.0;
      if ($682) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $683 = $frac$1$i + 1.0;
      $frac$2$i = $683;
     }
    } while(0);
    $684 = $y$1$i23 + $frac$2$i;
    $685 = $684 - $bias$0$i;
    $686 = $687 & 2147483647;
    $688 = (-2 - ($sum$i))|0;
    $689 = ($686|0)>($688|0);
    do {
     if ($689) {
      $690 = (+Math_abs((+$685)));
      $691 = !($690 >= 9007199254740992.0);
      if ($691) {
       $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i;$y$2$i24 = $685;
      } else {
       $692 = ($denormal$0$i|0)!=(0);
       $693 = ($$09$i|0)==($645|0);
       $or$cond16$i = $692 & $693;
       $denormal$1$i = $or$cond16$i ? 0 : $denormal$0$i;
       $694 = $685 * 0.5;
       $695 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $695;$y$2$i24 = $694;
      }
      $696 = (($e2$2$i) + 50)|0;
      $697 = ($696|0)>($325|0);
      if (!($697)) {
       $698 = ($denormal$2$i|0)!=(0);
       $699 = $frac$2$i != 0.0;
       $or$cond17$i = $698 & $699;
       if (!($or$cond17$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
        break;
       }
      }
      $700 = (___errno_location()|0);
      HEAP32[$700>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i24;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $685;
     }
    } while(0);
    $701 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $701;
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 3)) {
    $68 = HEAP32[$0>>2]|0;
    $69 = HEAP32[$1>>2]|0;
    $70 = ($68>>>0)<($69>>>0);
    if ($70) {
     $71 = (($68) + 1|0);
     HEAP32[$0>>2] = $71;
     $72 = HEAP8[$68>>0]|0;
     $73 = $72&255;
     $76 = $73;
    } else {
     $74 = (___shgetc($f)|0);
     $76 = $74;
    }
    $75 = ($76|0)==(40);
    if ($75) {
     $i$4 = 1;
    } else {
     $77 = HEAP32[$1>>2]|0;
     $78 = ($77|0)==(0|0);
     if ($78) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $79 = HEAP32[$0>>2]|0;
     $80 = (($79) + -1|0);
     HEAP32[$0>>2] = $80;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $81 = HEAP32[$0>>2]|0;
     $82 = HEAP32[$1>>2]|0;
     $83 = ($81>>>0)<($82>>>0);
     if ($83) {
      $84 = (($81) + 1|0);
      HEAP32[$0>>2] = $84;
      $85 = HEAP8[$81>>0]|0;
      $86 = $85&255;
      $89 = $86;
     } else {
      $87 = (___shgetc($f)|0);
      $89 = $87;
     }
     $88 = (($89) + -48)|0;
     $90 = ($88>>>0)<(10);
     $91 = (($89) + -65)|0;
     $92 = ($91>>>0)<(26);
     $or$cond8 = $90 | $92;
     if (!($or$cond8)) {
      $93 = (($89) + -97)|0;
      $94 = ($93>>>0)<(26);
      $95 = ($89|0)==(95);
      $or$cond5 = $94 | $95;
      if (!($or$cond5)) {
       break;
      }
     }
     $107 = (($i$4) + 1)|0;
     $i$4 = $107;
    }
    $96 = ($89|0)==(41);
    if ($96) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $97 = HEAP32[$1>>2]|0;
    $98 = ($97|0)==(0|0);
    if (!($98)) {
     $99 = HEAP32[$0>>2]|0;
     $100 = (($99) + -1|0);
     HEAP32[$0>>2] = $100;
    }
    if ($39) {
     $102 = (___errno_location()|0);
     HEAP32[$102>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $101 = ($i$4|0)==(0);
    $brmerge107 = $101 | $98;
    if ($brmerge107) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $103 = (($$in) + -1)|0;
     $104 = HEAP32[$0>>2]|0;
     $105 = (($104) + -1|0);
     HEAP32[$0>>2] = $105;
     $106 = ($103|0)==(0);
     if ($106) {
      $$0 = nan;
      break;
     } else {
      $$in = $103;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else {
    $108 = HEAP32[$1>>2]|0;
    $109 = ($108|0)==(0|0);
    if (!($109)) {
     $110 = HEAP32[$0>>2]|0;
     $111 = (($110) + -1|0);
     HEAP32[$0>>2] = $111;
    }
    $112 = (___errno_location()|0);
    HEAP32[$112>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond106$not = $notrhs | $notlhs;
  $brmerge = $or$cond106$not | $42;
  if (!($brmerge)) {
   $i$166 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$166) + -1)|0;
    $48 = ($47>>>0)>(3);
    if ($48) {
     $i$166 = $47;
    } else {
     break;
    }
   }
  }
 }
 $49 = (+($sign$0|0));
 $50 = $49 * inf;
 $51 = $50;
 $$0 = $51;
 STACKTOP = sp;return (+$$0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$18 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$23 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond = 0, $or$cond2 = 0, $phitmp16 = 0, $x$09 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = $9&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = (($12) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)<(10);
  $22 = ($pok|0)==(0);
  $or$cond = $21 | $22;
  if ($or$cond) {
   $c$0 = $20;$neg$0 = $11;
  } else {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $95 = -2147483648;$96 = 0;
   tempRet0 = $95;
   STACKTOP = sp;return ($96|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $95 = -2147483648;$96 = 0;
  tempRet0 = $95;
  STACKTOP = sp;return ($96|0);
 } else {
  $c$18 = $c$0;$x$09 = 0;
 }
 while(1) {
  $33 = (($c$18) + -48)|0;
  $34 = (($33) + ($x$09))|0;
  $35 = HEAP32[$0>>2]|0;
  $36 = HEAP32[$2>>2]|0;
  $37 = ($35>>>0)<($36>>>0);
  if ($37) {
   $38 = (($35) + 1|0);
   HEAP32[$0>>2] = $38;
   $39 = HEAP8[$35>>0]|0;
   $40 = $39&255;
   $c$1$be = $40;
  } else {
   $41 = (___shgetc($f)|0);
   $c$1$be = $41;
  }
  $42 = (($c$1$be) + -48)|0;
  $43 = ($42>>>0)<(10);
  $44 = ($34|0)<(214748364);
  $$ = $43 & $44;
  if (!($$)) {
   break;
  }
  $phitmp16 = ($34*10)|0;
  $c$18 = $c$1$be;$x$09 = $phitmp16;
 }
 $45 = ($34|0)<(0);
 $46 = $45 << 31 >> 31;
 $47 = (($c$1$be) + -48)|0;
 $48 = ($47>>>0)<(10);
 if ($48) {
  $51 = $34;$52 = $46;$c$23 = $c$1$be;
  while(1) {
   $53 = (___muldi3(($51|0),($52|0),10,0)|0);
   $54 = tempRet0;
   $55 = ($c$23|0)<(0);
   $56 = $55 << 31 >> 31;
   $57 = (_i64Add(($c$23|0),($56|0),-48,-1)|0);
   $58 = tempRet0;
   $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
   $60 = tempRet0;
   $61 = HEAP32[$0>>2]|0;
   $62 = HEAP32[$2>>2]|0;
   $63 = ($61>>>0)<($62>>>0);
   if ($63) {
    $64 = (($61) + 1|0);
    HEAP32[$0>>2] = $64;
    $65 = HEAP8[$61>>0]|0;
    $66 = $65&255;
    $c$2$be = $66;
   } else {
    $67 = (___shgetc($f)|0);
    $c$2$be = $67;
   }
   $68 = (($c$2$be) + -48)|0;
   $69 = ($68>>>0)<(10);
   $70 = ($60|0)<(21474836);
   $71 = ($60|0)==(21474836);
   $72 = ($59>>>0)<(2061584302);
   $73 = $71 & $72;
   $74 = $70 | $73;
   $or$cond2 = $69 & $74;
   if ($or$cond2) {
    $51 = $59;$52 = $60;$c$23 = $c$2$be;
   } else {
    $89 = $59;$90 = $60;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $89 = $34;$90 = $46;$c$2$lcssa = $c$1$be;
 }
 $49 = (($c$2$lcssa) + -48)|0;
 $50 = ($49>>>0)<(10);
 if ($50) {
  while(1) {
   $75 = HEAP32[$0>>2]|0;
   $76 = HEAP32[$2>>2]|0;
   $77 = ($75>>>0)<($76>>>0);
   if ($77) {
    $78 = (($75) + 1|0);
    HEAP32[$0>>2] = $78;
    $79 = HEAP8[$75>>0]|0;
    $80 = $79&255;
    $c$3$be = $80;
   } else {
    $81 = (___shgetc($f)|0);
    $c$3$be = $81;
   }
   $82 = (($c$3$be) + -48)|0;
   $83 = ($82>>>0)<(10);
   if (!($83)) {
    break;
   }
  }
 }
 $84 = HEAP32[$2>>2]|0;
 $85 = ($84|0)==(0|0);
 if (!($85)) {
  $86 = HEAP32[$0>>2]|0;
  $87 = (($86) + -1|0);
  HEAP32[$0>>2] = $87;
 }
 $88 = ($neg$0|0)!=(0);
 $91 = (_i64Subtract(0,0,($89|0),($90|0))|0);
 $92 = tempRet0;
 $93 = $88 ? $91 : $89;
 $94 = $88 ? $92 : $90;
 $95 = $94;$96 = $93;
 tempRet0 = $95;
 STACKTOP = sp;return ($96|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 18446744073709551616.0;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +0;
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.98846567431157953864E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.98846567431157953864E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.22507385850720138309E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.22507385850720138309E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = (($wc) + -57344)|0;
 $13 = ($12>>>0)<(8192);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 511]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 511]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre6 = HEAP32[$0>>2]|0;
    $8 = $$pre6;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 511]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 511]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _sprintf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsprintf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 511]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i104$i = 0, $$0$lcssa$i128$i = 0, $$0$lcssa$i143$i = 0, $$0$lcssa$i38 = 0, $$0$lcssa$i39$i = 0, $$0$lcssa$i44 = 0, $$0$lcssa$i46 = 0, $$0$lcssa$i46$i = 0, $$0$lcssa$i49$i = 0, $$0$lcssa$i53 = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i60 = 0, $$0$lcssa$i63$i = 0;
 var $$0$lcssa$i67 = 0, $$0$lcssa$i69$i = 0, $$0$lcssa$i76$i = 0, $$0$lcssa$i78 = 0, $$0$lcssa$i85$i = 0, $$0$lcssa$i97$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i102$i = 0, $$01$i126$i = 0, $$01$i141$i = 0, $$01$i36 = 0, $$01$i37$i = 0, $$01$i44$i = 0, $$01$i51 = 0, $$01$i54$i = 0, $$01$i58 = 0, $$01$i61$i = 0, $$01$i65 = 0, $$01$i67$i = 0;
 var $$01$i74$i = 0, $$01$i76 = 0, $$01$i95$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i86$i = 0, $$012$i = 0, $$012$i73 = 0, $$03$i41 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i80$i = 0, $$06$i = 0.0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i113$i = 0, $$113$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i111$i = 0;
 var $$12$i120$i = 0, $$12$i135$i = 0, $$12$i88$i = 0, $$14 = 0, $$15 = 0, $$16 = 0, $$18 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$2$us160$i = 0.0, $$20$i = 0, $$20$us$i = 0, $$21$i = 0, $$22$i = 0.0, $$24$i = 0, $$26$i = 0, $$29$$24$i = 0, $$29$$26$i = 0, $$29$i = 0;
 var $$3$i = 0.0, $$310$i = 0, $$32$i = 0, $$4$i = 0.0, $$411$lcssa$i = 0, $$411176$i = 0, $$5194$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us319$i = 0, $$a$3$us320$i = 0, $$a$3321$i = 0, $$a$3322$i = 0, $$fl$4 = 0, $$lcssa94 = 0, $$mask$i = 0, $$mask$i31 = 0, $$mask1$i = 0, $$mask1$i30 = 0, $$neg152$i = 0;
 var $$neg153$i = 0, $$not$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr147$i = 0, $$pre = 0, $$pre$i = 0, $$pre291 = 0, $$pre292 = 0, $$pre312$i = 0, $$sink = 0, $$sink300$off32 = 0, $$sum$i = 0, $$sum14$i = 0, $$sum15$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0.0, $104 = 0, $1040 = 0.0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1048$phi = 0, $1049 = 0, $1049$phi = 0, $105 = 0;
 var $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0.0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0.0, $422 = 0, $423 = 0, $424 = 0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0;
 var $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0.0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0.0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0.0;
 var $511 = 0.0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0.0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0.0, $585 = 0.0, $586 = 0.0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0;
 var $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0.0;
 var $728 = 0.0, $729 = 0, $73 = 0, $730 = 0.0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0;
 var $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0;
 var $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0;
 var $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0;
 var $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0;
 var $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0;
 var $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0;
 var $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0;
 var $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0;
 var $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0;
 var $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0;
 var $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0;
 var $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0;
 var $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0;
 var $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0;
 var $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1257$i = 0, $a$2 = 0, $a$2$i = 0, $a$3$lcssa$i = 0, $a$3245$i = 0, $a$3245$us$i = 0, $a$6$i = 0, $a$7$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0;
 var $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0;
 var $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0, $brmerge$i = 0, $buf = 0;
 var $buf$i = 0, $carry$0250$i = 0, $carry3$0239$i = 0, $carry3$0239$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0251$i = 0, $d$1238$i = 0, $d$1238$us$i = 0, $d$2$a$3$i = 0, $d$2$lcssa$i = 0, $d$2220$i = 0, $d$3$i = 0, $d$4184$i = 0, $d$5175$i = 0, $d$6193$i = 0, $e$0233$i = 0, $e$1$i = 0, $e$2215$i = 0, $e$3$i = 0;
 var $e$4$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1201$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0102 = 0, $fl$0106 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0167 = 0, $i$0169 = 0, $i$0234$i = 0;
 var $i$03$i = 0, $i$03$i23 = 0, $i$1$lcssa$i = 0, $i$1175 = 0, $i$1226$i = 0, $i$2216$i = 0, $i$291 = 0, $i$3210$i = 0, $i$390 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i25 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i22 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i24 = 0, $isdigittmp1$i = 0;
 var $isdigittmp1$i21 = 0, $isdigittmp11 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0225$i = 0, $j$0227$i = 0, $j$1211$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1$lcssa = 0, $l$1168 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or$cond = 0;
 var $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i101$i = 0, $or$cond$i36$i = 0, $or$cond$i43$i = 0, $or$cond$i50 = 0, $or$cond$i53$i = 0, $or$cond$i57 = 0, $or$cond$i60$i = 0, $or$cond$i64 = 0, $or$cond$i72 = 0, $or$cond$i73$i = 0, $or$cond$i75 = 0, $or$cond$i94$i = 0, $or$cond19$i = 0, $or$cond19315$i = 0, $or$cond23$i = 0, $or$cond29$i = 0, $or$cond29174$i = 0, $or$cond3$i = 0;
 var $or$cond30$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4296 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$7$i = 0, $re$0$i = 0;
 var $re$1166$i = 0, $round$0165$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$0$us159$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s$1$us161$i = 0, $s1$0$i = 0, $s7$0181$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0170$i = 0, $s9$0$i = 0, $s9$1189$i = 0, $s9$2$i = 0;
 var $sext = 0, $sext86 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8100 = 0, $storemerge8105 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$18$i = 0, $w$2 = 0, $w$31$i = 0, $wc = 0, $ws$0170 = 0, $ws$1176 = 0;
 var $y$03$i = 0, $y$03$i$i = 0, $y$03$i110$i = 0, $y$03$i119$i = 0, $y$03$i134$i = 0, $y$03$i87$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$095 = 0, $z$1$lcssa$i = 0, $z$1256$i = 0, $z$2 = 0, $z$2$i = 0, $z$2316$i = 0, $z$2317$i = 0, $z$3$lcssa$i = 0, $z$3244$i = 0, $z$3244$us$i = 0, $z$4$i = 0, $z$4$us$i = 0;
 var $z$5$i = 0, $z$6$i = 0, $z$7$$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 848|0;
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 812|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 800|0;
 $pad$i = sp + 544|0;
 $buf = sp + 504|0;
 $wc = sp;
 $mb = sp + 496|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = (($ebuf0$i) + 12|0);
 $7 = (($ebuf0$i) + 11|0);
 $8 = $6;
 $9 = (($8) - ($0))|0;
 $10 = (-2 - ($0))|0;
 $11 = (($8) + 2)|0;
 $12 = (($big$i) + 264|0);
 $13 = (($buf$i) + 9|0);
 $14 = $13;
 $15 = (($buf$i) + 8|0);
 $1048 = 0;$1049 = 0;$22 = $fmt;$cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$22>>0]|0;
  $23 = ($21<<24>>24)==(0);
  if ($23) {
   label = 339;
   break;
  } else {
   $1050 = $21;$25 = $22;
  }
  while(1) {
   if ((($1050<<24>>24) == 37)) {
    $27 = $25;$z$095 = $25;
    label = 9;
    break;
   } else if ((($1050<<24>>24) == 0)) {
    $$lcssa94 = $25;$z$0$lcssa = $25;
    break;
   }
   $24 = (($25) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1050 = $$pre;$25 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = (($27) + 1|0);
     $28 = HEAP8[$26>>0]|0;
     $29 = ($28<<24>>24)==(37);
     if (!($29)) {
      $$lcssa94 = $27;$z$0$lcssa = $z$095;
      break L12;
     }
     $30 = (($z$095) + 1|0);
     $31 = (($27) + 2|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = ($32<<24>>24)==(37);
     if ($33) {
      $27 = $31;$z$095 = $30;
      label = 9;
     } else {
      $$lcssa94 = $31;$z$0$lcssa = $30;
      break;
     }
    }
   }
  } while(0);
  $34 = $z$0$lcssa;
  $35 = $22;
  $36 = (($34) - ($35))|0;
  if ($1) {
   (___fwritex($22,$36,$f)|0);
  }
  $37 = ($z$0$lcssa|0)==($22|0);
  if (!($37)) {
   $l10n$0$phi = $l10n$0;$1049$phi = $1049;$1048$phi = $1048;$22 = $$lcssa94;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$0$phi;$1049 = $1049$phi;$1048 = $1048$phi;
   continue;
  }
  $38 = (($$lcssa94) + 1|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $isdigittmp = (($40) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $41 = (($$lcssa94) + 2|0);
   $42 = HEAP8[$41>>0]|0;
   $43 = ($42<<24>>24)==(36);
   if ($43) {
    $44 = (($$lcssa94) + 3|0);
    $$pre291 = HEAP8[$44>>0]|0;
    $46 = $$pre291;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $44;
   } else {
    $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
   }
  } else {
   $46 = $39;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $38;
  }
  $45 = $46 << 24 >> 24;
  $47 = (($45) + -32)|0;
  $48 = ($47>>>0)<(32);
  L25: do {
   if ($48) {
    $50 = $45;$55 = $46;$fl$0106 = 0;$storemerge8105 = $storemerge;
    while(1) {
     $49 = (($50) + -32)|0;
     $51 = 1 << $49;
     $52 = $51 & 75913;
     $53 = ($52|0)==(0);
     if ($53) {
      $65 = $55;$fl$0102 = $fl$0106;$storemerge8100 = $storemerge8105;
      break L25;
     }
     $54 = $55 << 24 >> 24;
     $56 = (($54) + -32)|0;
     $57 = 1 << $56;
     $58 = $57 | $fl$0106;
     $59 = (($storemerge8105) + 1|0);
     $60 = HEAP8[$59>>0]|0;
     $61 = $60 << 24 >> 24;
     $62 = (($61) + -32)|0;
     $63 = ($62>>>0)<(32);
     if ($63) {
      $50 = $61;$55 = $60;$fl$0106 = $58;$storemerge8105 = $59;
     } else {
      $65 = $60;$fl$0102 = $58;$storemerge8100 = $59;
      break;
     }
    }
   } else {
    $65 = $46;$fl$0102 = 0;$storemerge8100 = $storemerge;
   }
  } while(0);
  $64 = ($65<<24>>24)==(42);
  do {
   if ($64) {
    $66 = (($storemerge8100) + 1|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67 << 24 >> 24;
    $isdigittmp11 = (($68) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $69 = (($storemerge8100) + 2|0);
     $70 = HEAP8[$69>>0]|0;
     $71 = ($70<<24>>24)==(36);
     if ($71) {
      $72 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$72>>2] = 10;
      $73 = HEAP8[$66>>0]|0;
      $74 = $73 << 24 >> 24;
      $75 = (($74) + -48)|0;
      $76 = (($nl_arg) + ($75<<3)|0);
      $77 = $76;
      $78 = $77;
      $79 = HEAP32[$78>>2]|0;
      $80 = (($77) + 4)|0;
      $81 = $80;
      $82 = HEAP32[$81>>2]|0;
      $83 = (($storemerge8100) + 3|0);
      $l10n$2 = 1;$storemerge13 = $83;$w$0 = $79;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $84 = ($l10n$1|0)==(0);
     if (!($84)) {
      $$0 = -1;
      label = 357;
      break L1;
     }
     if (!($1)) {
      $100 = $66;$fl$1 = $fl$0102;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $85 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $66;$w$0 = $85;
    }
    $86 = ($w$0|0)<(0);
    if ($86) {
     $87 = $fl$0102 | 8192;
     $88 = (0 - ($w$0))|0;
     $100 = $storemerge13;$fl$1 = $87;$l10n$3 = $l10n$2;$w$1 = $88;
    } else {
     $100 = $storemerge13;$fl$1 = $fl$0102;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $89 = $65 << 24 >> 24;
    $isdigittmp1$i = (($89) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $92 = $89;$95 = $storemerge8100;$i$03$i = 0;
     while(1) {
      $90 = ($i$03$i*10)|0;
      $91 = (($92) + -48)|0;
      $93 = (($91) + ($90))|0;
      $94 = (($95) + 1|0);
      $96 = HEAP8[$94>>0]|0;
      $97 = $96 << 24 >> 24;
      $isdigittmp$i = (($97) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $92 = $97;$95 = $94;$i$03$i = $93;
      } else {
       break;
      }
     }
     $98 = ($93|0)<(0);
     if ($98) {
      $$0 = -1;
      label = 357;
      break L1;
     } else {
      $100 = $94;$fl$1 = $fl$0102;$l10n$3 = $l10n$1;$w$1 = $93;
     }
    } else {
     $100 = $storemerge8100;$fl$1 = $fl$0102;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $99 = HEAP8[$100>>0]|0;
  $101 = ($99<<24>>24)==(46);
  L46: do {
   if ($101) {
    $102 = (($100) + 1|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==(42);
    if (!($104)) {
     $125 = $103 << 24 >> 24;
     $isdigittmp1$i21 = (($125) + -48)|0;
     $isdigit2$i22 = ($isdigittmp1$i21>>>0)<(10);
     if ($isdigit2$i22) {
      $128 = $125;$131 = $102;$i$03$i23 = 0;
     } else {
      $1051 = $102;$p$0 = 0;
      break;
     }
     while(1) {
      $126 = ($i$03$i23*10)|0;
      $127 = (($128) + -48)|0;
      $129 = (($127) + ($126))|0;
      $130 = (($131) + 1|0);
      $132 = HEAP8[$130>>0]|0;
      $133 = $132 << 24 >> 24;
      $isdigittmp$i24 = (($133) + -48)|0;
      $isdigit$i25 = ($isdigittmp$i24>>>0)<(10);
      if ($isdigit$i25) {
       $128 = $133;$131 = $130;$i$03$i23 = $129;
      } else {
       $1051 = $130;$p$0 = $129;
       break L46;
      }
     }
    }
    $105 = (($100) + 2|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106 << 24 >> 24;
    $isdigittmp9 = (($107) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $108 = (($100) + 3|0);
     $109 = HEAP8[$108>>0]|0;
     $110 = ($109<<24>>24)==(36);
     if ($110) {
      $111 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$111>>2] = 10;
      $112 = HEAP8[$105>>0]|0;
      $113 = $112 << 24 >> 24;
      $114 = (($113) + -48)|0;
      $115 = (($nl_arg) + ($114<<3)|0);
      $116 = $115;
      $117 = $116;
      $118 = HEAP32[$117>>2]|0;
      $119 = (($116) + 4)|0;
      $120 = $119;
      $121 = HEAP32[$120>>2]|0;
      $122 = (($100) + 4|0);
      $1051 = $122;$p$0 = $118;
      break;
     }
    }
    $123 = ($l10n$3|0)==(0);
    if (!($123)) {
     $$0 = -1;
     label = 357;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $124 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $1051 = $105;$p$0 = $124;
    } else {
     $1051 = $105;$p$0 = 0;
    }
   } else {
    $1051 = $100;$p$0 = -1;
   }
  } while(0);
  $135 = $1051;$st$0 = 0;
  while(1) {
   $134 = HEAP8[$135>>0]|0;
   $136 = $134 << 24 >> 24;
   $137 = (($136) + -65)|0;
   $138 = ($137>>>0)>(57);
   if ($138) {
    $$0 = -1;
    label = 357;
    break L1;
   }
   $139 = (($135) + 1|0);
   $140 = ((11248 + (($st$0*58)|0)|0) + ($137)|0);
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = (($142) + -1)|0;
   $144 = ($143>>>0)<(8);
   if ($144) {
    $135 = $139;$st$0 = $142;
   } else {
    break;
   }
  }
  $145 = ($141<<24>>24)==(0);
  if ($145) {
   $$0 = -1;
   label = 357;
   break;
  }
  $146 = ($141<<24>>24)==(19);
  $147 = ($argpos$0|0)>(-1);
  L65: do {
   if ($146) {
    if ($147) {
     $$0 = -1;
     label = 357;
     break L1;
    }
    if ($1) {
     $198 = $134;$206 = $1049;$228 = $1048;
    } else {
     $1049$phi = $1049;$1048$phi = $1048;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;$1049 = $1049$phi;$1048 = $1048$phi;
     continue L1;
    }
   } else {
    L67: do {
     if ($147) {
      $148 = (($nl_type) + ($argpos$0<<2)|0);
      HEAP32[$148>>2] = $142;
      $149 = (($nl_arg) + ($argpos$0<<3)|0);
      $150 = $149;
      $151 = $150;
      $152 = HEAP32[$151>>2]|0;
      $153 = (($150) + 4)|0;
      $154 = $153;
      $155 = HEAP32[$154>>2]|0;
      $$sink = $152;$$sink300$off32 = $155;
      label = 64;
     } else {
      if (!($1)) {
       $$0 = 0;
       label = 357;
       break L1;
      }
      $156 = ($141&255)>(20);
      if ($156) {
       $198 = $134;$206 = $1049;$228 = $1048;
       break L65;
      }
      do {
       switch ($142|0) {
       case 18:  {
        $arglist_current32 = HEAP32[$ap>>2]|0;
        HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$193 = +HEAPF64[tempDoublePtr>>3];
        $arglist_next33 = (($arglist_current32) + 8|0);
        HEAP32[$ap>>2] = $arglist_next33;
        HEAPF64[tempDoublePtr>>3] = $193;$194 = HEAP32[tempDoublePtr>>2]|0;
        $195 = HEAP32[tempDoublePtr+4>>2]|0;
        $$sink = $194;$$sink300$off32 = $195;
        label = 64;
        break L67;
        break;
       }
       case 15:  {
        $arglist_current23 = HEAP32[$ap>>2]|0;
        $180 = HEAP32[$arglist_current23>>2]|0;
        $arglist_next24 = (($arglist_current23) + 4|0);
        HEAP32[$ap>>2] = $arglist_next24;
        $181 = $180&255;
        $182 = $181 << 24 >> 24;
        $183 = ($182|0)<(0);
        $184 = $183 << 31 >> 31;
        $sext = $180 << 24;
        $185 = $sext >> 24;
        $186 = $185;
        $1052 = $186;$1053 = $184;
        break L67;
        break;
       }
       case 9:  {
        $arglist_current5 = HEAP32[$ap>>2]|0;
        $157 = HEAP32[$arglist_current5>>2]|0;
        $arglist_next6 = (($arglist_current5) + 4|0);
        HEAP32[$ap>>2] = $arglist_next6;
        $1052 = $157;$1053 = $1048;
        break L67;
        break;
       }
       case 12:  {
        $arglist_current14 = HEAP32[$ap>>2]|0;
        $164 = $arglist_current14;
        $165 = $164;
        $166 = HEAP32[$165>>2]|0;
        $167 = (($164) + 4)|0;
        $168 = $167;
        $169 = HEAP32[$168>>2]|0;
        $arglist_next15 = (($arglist_current14) + 8|0);
        HEAP32[$ap>>2] = $arglist_next15;
        $170 = $166;
        $1052 = $170;$1053 = $169;
        break L67;
        break;
       }
       case 17:  {
        $arglist_current29 = HEAP32[$ap>>2]|0;
        HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$189 = +HEAPF64[tempDoublePtr>>3];
        $arglist_next30 = (($arglist_current29) + 8|0);
        HEAP32[$ap>>2] = $arglist_next30;
        HEAPF64[tempDoublePtr>>3] = $189;$190 = HEAP32[tempDoublePtr>>2]|0;
        $191 = HEAP32[tempDoublePtr+4>>2]|0;
        $192 = $190;
        $1052 = $192;$1053 = $191;
        break L67;
        break;
       }
       case 16:  {
        $arglist_current26 = HEAP32[$ap>>2]|0;
        $187 = HEAP32[$arglist_current26>>2]|0;
        $arglist_next27 = (($arglist_current26) + 4|0);
        HEAP32[$ap>>2] = $arglist_next27;
        $$mask$i31 = $187 & 255;
        $188 = $$mask$i31;
        $1052 = $188;$1053 = 0;
        break L67;
        break;
       }
       case 14:  {
        $arglist_current20 = HEAP32[$ap>>2]|0;
        $178 = HEAP32[$arglist_current20>>2]|0;
        $arglist_next21 = (($arglist_current20) + 4|0);
        HEAP32[$ap>>2] = $arglist_next21;
        $$mask1$i30 = $178 & 65535;
        $179 = $$mask1$i30;
        $1052 = $179;$1053 = 0;
        break L67;
        break;
       }
       case 11:  {
        $arglist_current11 = HEAP32[$ap>>2]|0;
        $162 = HEAP32[$arglist_current11>>2]|0;
        $arglist_next12 = (($arglist_current11) + 4|0);
        HEAP32[$ap>>2] = $arglist_next12;
        $163 = $162;
        $1052 = $163;$1053 = 0;
        break L67;
        break;
       }
       case 10:  {
        $arglist_current8 = HEAP32[$ap>>2]|0;
        $158 = HEAP32[$arglist_current8>>2]|0;
        $arglist_next9 = (($arglist_current8) + 4|0);
        HEAP32[$ap>>2] = $arglist_next9;
        $159 = ($158|0)<(0);
        $160 = $159 << 31 >> 31;
        $161 = $158;
        $1052 = $161;$1053 = $160;
        break L67;
        break;
       }
       case 13:  {
        $arglist_current17 = HEAP32[$ap>>2]|0;
        $171 = HEAP32[$arglist_current17>>2]|0;
        $arglist_next18 = (($arglist_current17) + 4|0);
        HEAP32[$ap>>2] = $arglist_next18;
        $172 = $171&65535;
        $173 = $172 << 16 >> 16;
        $174 = ($173|0)<(0);
        $175 = $174 << 31 >> 31;
        $sext86 = $171 << 16;
        $176 = $sext86 >> 16;
        $177 = $176;
        $1052 = $177;$1053 = $175;
        break L67;
        break;
       }
       default: {
        $1052 = $1049;$1053 = $1048;
        break L67;
       }
       }
      } while(0);
     }
    } while(0);
    if ((label|0) == 64) {
     label = 0;
     $196 = $$sink;
     if ($1) {
      $1052 = $196;$1053 = $$sink300$off32;
     } else {
      $1048 = $$sink300$off32;$1049 = $196;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
      continue L1;
     }
    }
    $$pre292 = HEAP8[$135>>0]|0;
    $198 = $$pre292;$206 = $1052;$228 = $1053;
   }
  } while(0);
  $197 = $198 << 24 >> 24;
  $199 = ($st$0|0)==(0);
  if ($199) {
   $t$0 = $197;
  } else {
   $200 = $197 & 15;
   $201 = ($200|0)==(3);
   $202 = $197 & -33;
   $$ = $201 ? $202 : $197;
   $t$0 = $$;
  }
  $203 = $fl$1 & 8192;
  $204 = ($203|0)==(0);
  $205 = $fl$1 & -65537;
  $fl$1$ = $204 ? $fl$1 : $205;
  L92: do {
   switch ($t$0|0) {
   case 111:  {
    $248 = $206;
    $249 = ($248|0)==(0);
    $250 = ($228|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i44 = $2;
    } else {
     $$03$i41 = $2;$253 = $248;$257 = $228;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = (($$03$i41) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i44 = $256;
       break;
      } else {
       $$03$i41 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $307 = $206;$310 = $228;$a$0 = $$0$lcssa$i44;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 11712;
     label = 95;
    } else {
     $$14 = $251 ? 11712 : ((11712 + 5|0));
     $265 = $251&1;
     $$15 = $265 ^ 1;
     $307 = $206;$310 = $228;$a$0 = $$0$lcssa$i44;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$15;$prefix$1 = $$14;
     label = 95;
    }
    break;
   }
   case 105: case 100:  {
    $266 = $206;
    $267 = ($228|0)<(0);
    if ($267) {
     $268 = (_i64Subtract(0,0,($266|0),($228|0))|0);
     $269 = tempRet0;
     $270 = $268;
     $276 = $270;$278 = $269;$pl$0 = 1;$prefix$0 = 11712;
     label = 90;
     break L92;
    }
    $271 = $fl$1$ & 2048;
    $272 = ($271|0)==(0);
    if ($272) {
     $273 = $fl$1$ & 1;
     $274 = ($273|0)==(0);
     $$16 = $274 ? 11712 : ((11712 + 2|0));
     $276 = $206;$278 = $228;$pl$0 = $273;$prefix$0 = $$16;
     label = 90;
    } else {
     $276 = $206;$278 = $228;$pl$0 = 1;$prefix$0 = ((11712 + 1|0));
     label = 90;
    }
    break;
   }
   case 67:  {
    $330 = $206;
    HEAP32[$wc>>2] = $330;
    HEAP32[$5>>2] = 0;
    $1056 = $wc;$1057 = $wc;$p$4296 = -1;
    label = 105;
    break;
   }
   case 83:  {
    $331 = ($p$0|0)==(0);
    if ($331) {
     $1058 = $206;$1059 = $206;$i$0167 = 0;
     label = 111;
    } else {
     $1056 = $206;$1057 = $206;$p$4296 = $p$0;
     label = 105;
    }
    break;
   }
   case 112:  {
    $221 = ($p$0>>>0)>(8);
    $222 = $221 ? $p$0 : 8;
    $223 = $fl$1$ | 8;
    $fl$3 = $223;$p$1 = $222;$t$1 = 120;
    label = 78;
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $367 = $206;
    HEAP32[tempDoublePtr>>2] = $367;HEAP32[tempDoublePtr+4>>2] = $228;$368 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $369 = ($228|0)<(0);
    if ($369) {
     $370 = -$368;
     $$06$i = $370;$pl$0$i = 1;$prefix$0$i = 11736;
    } else {
     $371 = $fl$1$ & 2048;
     $372 = ($371|0)==(0);
     if ($372) {
      $373 = $fl$1$ & 1;
      $374 = ($373|0)==(0);
      $$$i = $374 ? ((11736 + 1|0)) : ((11736 + 6|0));
      $$06$i = $368;$pl$0$i = $373;$prefix$0$i = $$$i;
     } else {
      $$06$i = $368;$pl$0$i = 1;$prefix$0$i = ((11736 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$06$i;$375 = HEAP32[tempDoublePtr>>2]|0;
    $376 = HEAP32[tempDoublePtr+4>>2]|0;
    $377 = $376 & 2146435072;
    $378 = ($377>>>0)<(2146435072);
    $379 = ($377|0)==(2146435072);
    $380 = (0)<(0);
    $381 = $379 & $380;
    $382 = $378 | $381;
    if (!($382)) {
     $383 = $t$0 & 32;
     $384 = ($383|0)!=(0);
     $385 = $384 ? 11760 : 11768;
     $386 = ($$06$i != $$06$i) | (0.0 != 0.0);
     if ($386) {
      $387 = $384 ? 11776 : 11784;
      $pl$1$i = 0;$s1$0$i = $387;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $385;
     }
     $388 = (($pl$1$i) + 3)|0;
     $389 = $fl$1$ & 8192;
     $390 = ($389|0)==(0);
     $391 = ($388|0)<($w$1|0);
     $or$cond$i36$i = $390 & $391;
     if ($or$cond$i36$i) {
      $392 = (($w$1) - ($388))|0;
      $393 = ($392>>>0)>(256);
      $394 = $393 ? 256 : $392;
      _memset(($pad$i|0),32,($394|0))|0;
      $395 = ($392>>>0)>(255);
      if ($395) {
       $$01$i37$i = $392;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $396 = (($$01$i37$i) + -256)|0;
        $397 = ($396>>>0)>(255);
        if ($397) {
         $$01$i37$i = $396;
        } else {
         $$0$lcssa$i39$i = $396;
         break;
        }
       }
      } else {
       $$0$lcssa$i39$i = $392;
      }
      (___fwritex($pad$i,$$0$lcssa$i39$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $398 = $fl$1$ & 73728;
     $399 = ($398|0)==(8192);
     $or$cond$i43$i = $399 & $391;
     if ($or$cond$i43$i) {
      $400 = (($w$1) - ($388))|0;
      $401 = ($400>>>0)>(256);
      $402 = $401 ? 256 : $400;
      _memset(($pad$i|0),32,($402|0))|0;
      $403 = ($400>>>0)>(255);
      if ($403) {
       $$01$i44$i = $400;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $404 = (($$01$i44$i) + -256)|0;
        $405 = ($404>>>0)>(255);
        if ($405) {
         $$01$i44$i = $404;
        } else {
         $$0$lcssa$i46$i = $404;
         break;
        }
       }
      } else {
       $$0$lcssa$i46$i = $400;
      }
      (___fwritex($pad$i,$$0$lcssa$i46$i,$f)|0);
     }
     $w$$i = $391 ? $w$1 : $388;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $406 = (+_frexpl($$06$i,$e2$i));
    $407 = $406 * 2.0;
    $408 = $407 != 0.0;
    if ($408) {
     $409 = HEAP32[$e2$i>>2]|0;
     $410 = (($409) + -1)|0;
     HEAP32[$e2$i>>2] = $410;
    }
    $411 = $t$0 | 32;
    $412 = ($411|0)==(97);
    if ($412) {
     $413 = $t$0 & 32;
     $414 = ($413|0)==(0);
     $415 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $414 ? $prefix$0$i : $415;
     $416 = $pl$0$i | 2;
     $417 = ($p$0>>>0)>(11);
     $418 = (12 - ($p$0))|0;
     $re$0$i = $417 ? 0 : $418;
     $419 = ($re$0$i|0)==(0);
     do {
      if ($419) {
       $$1$i = $407;
      } else {
       $re$1166$i = $re$0$i;$round$0165$i = 8.0;
       while(1) {
        $420 = (($re$1166$i) + -1)|0;
        $421 = $round$0165$i * 16.0;
        $422 = ($420|0)==(0);
        if ($422) {
         break;
        } else {
         $re$1166$i = $420;$round$0165$i = $421;
        }
       }
       $423 = HEAP8[$prefix$0$$i>>0]|0;
       $424 = ($423<<24>>24)==(45);
       if ($424) {
        $425 = -$407;
        $426 = $425 - $421;
        $427 = $421 + $426;
        $428 = -$427;
        $$1$i = $428;
        break;
       } else {
        $429 = $407 + $421;
        $430 = $429 - $421;
        $$1$i = $430;
        break;
       }
      }
     } while(0);
     $431 = HEAP32[$e2$i>>2]|0;
     $432 = ($431|0)<(0);
     $433 = (0 - ($431))|0;
     $434 = $432 ? $433 : $431;
     $435 = ($434|0)<(0);
     if ($435) {
      $436 = ($434|0)<(0);
      $437 = $436 << 31 >> 31;
      $$05$i$i = $6;$438 = $434;$439 = $437;
      while(1) {
       $440 = (___uremdi3(($438|0),($439|0),10,0)|0);
       $441 = tempRet0;
       $442 = $440 | 48;
       $443 = $442&255;
       $444 = (($$05$i$i) + -1|0);
       HEAP8[$444>>0] = $443;
       $445 = (___udivdi3(($438|0),($439|0),10,0)|0);
       $446 = tempRet0;
       $447 = ($439>>>0)>(9);
       $448 = ($439|0)==(9);
       $449 = ($438>>>0)>(4294967295);
       $450 = $448 & $449;
       $451 = $447 | $450;
       if ($451) {
        $$05$i$i = $444;$438 = $445;$439 = $446;
       } else {
        break;
       }
      }
      $$0$lcssa$i49$i = $444;$$01$lcssa$off0$i$i = $445;
     } else {
      $$0$lcssa$i49$i = $6;$$01$lcssa$off0$i$i = $434;
     }
     $452 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($452) {
      $$1$lcssa$i$i = $$0$lcssa$i49$i;
     } else {
      $$12$i$i = $$0$lcssa$i49$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $453 = (($y$03$i$i>>>0) % 10)&-1;
       $454 = $453 | 48;
       $455 = $454&255;
       $456 = (($$12$i$i) + -1|0);
       HEAP8[$456>>0] = $455;
       $457 = (($y$03$i$i>>>0) / 10)&-1;
       $458 = ($y$03$i$i>>>0)<(10);
       if ($458) {
        $$1$lcssa$i$i = $456;
        break;
       } else {
        $$12$i$i = $456;$y$03$i$i = $457;
       }
      }
     }
     $459 = ($$1$lcssa$i$i|0)==($6|0);
     if ($459) {
      HEAP8[$7>>0] = 48;
      $estr$0$i = $7;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $460 = HEAP32[$e2$i>>2]|0;
     $461 = $460 >> 31;
     $462 = $461 & 2;
     $463 = (($462) + 43)|0;
     $464 = $463&255;
     $465 = (($estr$0$i) + -1|0);
     HEAP8[$465>>0] = $464;
     $466 = (($t$0) + 15)|0;
     $467 = $466&255;
     $468 = (($estr$0$i) + -2|0);
     HEAP8[$468>>0] = $467;
     $469 = ($p$0|0)>(0);
     $470 = $fl$1$ & 8;
     $471 = ($470|0)==(0);
     if ($469) {
      if ($471) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $472 = (~~(($$2$us$us$i)));
        $473 = (11792 + ($472)|0);
        $474 = HEAP8[$473>>0]|0;
        $475 = $474&255;
        $476 = $475 | $413;
        $477 = $476&255;
        $478 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $477;
        $479 = (+($472|0));
        $480 = $$2$us$us$i - $479;
        $481 = $480 * 16.0;
        $482 = $478;
        $483 = (($482) - ($0))|0;
        $484 = ($483|0)==(1);
        if ($484) {
         $485 = (($s$0$us$us$i) + 2|0);
         HEAP8[$478>>0] = 46;
         $s$1$us$us$i = $485;
        } else {
         $s$1$us$us$i = $478;
        }
        $486 = $481 != 0.0;
        if ($486) {
         $$2$us$us$i = $481;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $487 = (~~(($$2$us$i)));
        $488 = (11792 + ($487)|0);
        $489 = HEAP8[$488>>0]|0;
        $490 = $489&255;
        $491 = $490 | $413;
        $492 = $491&255;
        $493 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $492;
        $494 = (+($487|0));
        $495 = $$2$us$i - $494;
        $496 = $495 * 16.0;
        $497 = $493;
        $498 = (($497) - ($0))|0;
        $499 = ($498|0)==(1);
        if ($499) {
         $500 = (($s$0$us$i) + 2|0);
         HEAP8[$493>>0] = 46;
         $s$1$us$i = $500;
        } else {
         $s$1$us$i = $493;
        }
        $501 = $496 != 0.0;
        if ($501) {
         $$2$us$i = $496;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      if ($471) {
       $$2$us160$i = $$1$i;$s$0$us159$i = $buf$i;
       while(1) {
        $502 = (~~(($$2$us160$i)));
        $503 = (11792 + ($502)|0);
        $504 = HEAP8[$503>>0]|0;
        $505 = $504&255;
        $506 = $505 | $413;
        $507 = $506&255;
        $508 = (($s$0$us159$i) + 1|0);
        HEAP8[$s$0$us159$i>>0] = $507;
        $509 = (+($502|0));
        $510 = $$2$us160$i - $509;
        $511 = $510 * 16.0;
        $512 = $508;
        $513 = (($512) - ($0))|0;
        $514 = ($513|0)==(1);
        $515 = $511 != 0.0;
        $or$cond$i72 = $514 & $515;
        if ($or$cond$i72) {
         $516 = (($s$0$us159$i) + 2|0);
         HEAP8[$508>>0] = 46;
         $s$1$us161$i = $516;
        } else {
         $s$1$us161$i = $508;
        }
        if ($515) {
         $$2$us160$i = $511;$s$0$us159$i = $s$1$us161$i;
        } else {
         $s$1$lcssa$i = $s$1$us161$i;
         break;
        }
       }
      } else {
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $517 = (~~(($$2$i)));
        $518 = (11792 + ($517)|0);
        $519 = HEAP8[$518>>0]|0;
        $520 = $519&255;
        $521 = $520 | $413;
        $522 = $521&255;
        $523 = (($s$0$i) + 1|0);
        HEAP8[$s$0$i>>0] = $522;
        $524 = (+($517|0));
        $525 = $$2$i - $524;
        $526 = $525 * 16.0;
        $527 = $523;
        $528 = (($527) - ($0))|0;
        $529 = ($528|0)==(1);
        if ($529) {
         $530 = (($s$0$i) + 2|0);
         HEAP8[$523>>0] = 46;
         $s$1$i = $530;
        } else {
         $s$1$i = $523;
        }
        $531 = $526 != 0.0;
        if ($531) {
         $$2$i = $526;$s$0$i = $s$1$i;
        } else {
         $s$1$lcssa$i = $s$1$i;
         break;
        }
       }
      }
     }
     $532 = ($p$0|0)==(0);
     $$pre312$i = $s$1$lcssa$i;
     do {
      if ($532) {
       label = 174;
      } else {
       $533 = (($10) + ($$pre312$i))|0;
       $534 = ($533|0)<($p$0|0);
       if (!($534)) {
        label = 174;
        break;
       }
       $535 = $468;
       $536 = (($11) + ($p$0))|0;
       $537 = (($536) - ($535))|0;
       $l$0$i = $537;
      }
     } while(0);
     if ((label|0) == 174) {
      label = 0;
      $538 = $468;
      $539 = (($9) - ($538))|0;
      $540 = (($539) + ($$pre312$i))|0;
      $l$0$i = $540;
     }
     $541 = (($l$0$i) + ($416))|0;
     $542 = $fl$1$ & 73728;
     $543 = ($542|0)==(0);
     $544 = ($541|0)<($w$1|0);
     $or$cond$i53$i = $543 & $544;
     if ($or$cond$i53$i) {
      $545 = (($w$1) - ($541))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i54$i = $545;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $549 = (($$01$i54$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i54$i = $549;
        } else {
         $$0$lcssa$i56$i = $549;
         break;
        }
       }
      } else {
       $$0$lcssa$i56$i = $545;
      }
      (___fwritex($pad$i,$$0$lcssa$i56$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$416,$f)|0);
     $551 = ($542|0)==(65536);
     $or$cond$i60$i = $551 & $544;
     if ($or$cond$i60$i) {
      $552 = (($w$1) - ($541))|0;
      $553 = ($552>>>0)>(256);
      $554 = $553 ? 256 : $552;
      _memset(($pad$i|0),48,($554|0))|0;
      $555 = ($552>>>0)>(255);
      if ($555) {
       $$01$i61$i = $552;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $556 = (($$01$i61$i) + -256)|0;
        $557 = ($556>>>0)>(255);
        if ($557) {
         $$01$i61$i = $556;
        } else {
         $$0$lcssa$i63$i = $556;
         break;
        }
       }
      } else {
       $$0$lcssa$i63$i = $552;
      }
      (___fwritex($pad$i,$$0$lcssa$i63$i,$f)|0);
     }
     $558 = (($$pre312$i) - ($0))|0;
     (___fwritex($buf$i,$558,$f)|0);
     $559 = $468;
     $560 = (($8) - ($559))|0;
     $561 = (($l$0$i) - ($560))|0;
     $562 = (($561) - ($558))|0;
     $563 = ($562|0)>(0);
     if ($563) {
      $564 = ($562>>>0)>(256);
      $565 = $564 ? 256 : $562;
      _memset(($pad$i|0),48,($565|0))|0;
      $566 = ($562>>>0)>(255);
      if ($566) {
       $$01$i67$i = $562;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $567 = (($$01$i67$i) + -256)|0;
        $568 = ($567>>>0)>(255);
        if ($568) {
         $$01$i67$i = $567;
        } else {
         $$0$lcssa$i69$i = $567;
         break;
        }
       }
      } else {
       $$0$lcssa$i69$i = $562;
      }
      (___fwritex($pad$i,$$0$lcssa$i69$i,$f)|0);
     }
     (___fwritex($468,$560,$f)|0);
     $569 = ($542|0)==(8192);
     $or$cond$i73$i = $569 & $544;
     if ($or$cond$i73$i) {
      $570 = (($w$1) - ($541))|0;
      $571 = ($570>>>0)>(256);
      $572 = $571 ? 256 : $570;
      _memset(($pad$i|0),32,($572|0))|0;
      $573 = ($570>>>0)>(255);
      if ($573) {
       $$01$i74$i = $570;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $574 = (($$01$i74$i) + -256)|0;
        $575 = ($574>>>0)>(255);
        if ($575) {
         $$01$i74$i = $574;
        } else {
         $$0$lcssa$i76$i = $574;
         break;
        }
       }
      } else {
       $$0$lcssa$i76$i = $570;
      }
      (___fwritex($pad$i,$$0$lcssa$i76$i,$f)|0);
     }
     $w$18$i = $544 ? $w$1 : $541;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$18$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $576 = ($p$0|0)<(0);
    $$p$i = $576 ? 6 : $p$0;
    if ($408) {
     $577 = $407 * 268435456.0;
     $578 = HEAP32[$e2$i>>2]|0;
     $579 = (($578) + -28)|0;
     HEAP32[$e2$i>>2] = $579;
     $$3$i = $577;$581 = $579;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $407;$581 = $$pre$i;
    }
    $580 = ($581|0)<(0);
    $$32$i = $580 ? $big$i : $12;
    $$4$i = $$3$i;$z$0$i = $$32$i;
    while(1) {
     $582 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $582;
     $583 = (($z$0$i) + 4|0);
     $584 = (+($582>>>0));
     $585 = $$4$i - $584;
     $586 = $585 * 1.0E+9;
     $587 = $586 != 0.0;
     if ($587) {
      $$4$i = $586;$z$0$i = $583;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $588 = ($$pr$i|0)>(0);
    if ($588) {
     $590 = $$pr$i;$a$1257$i = $$32$i;$z$1256$i = $583;
     while(1) {
      $589 = ($590|0)>(29);
      $591 = $589 ? 29 : $590;
      $592 = (($z$1256$i) + -4|0);
      $593 = ($592>>>0)<($a$1257$i>>>0);
      do {
       if ($593) {
        $594 = HEAP32[$592>>2]|0;
        $595 = ($594|0)==(0);
        $596 = ($z$1256$i>>>0)>($a$1257$i>>>0);
        $or$cond19315$i = $595 & $596;
        $z$2316$i = $or$cond19315$i ? $592 : $z$1256$i;
        $a$2$i = $a$1257$i;$z$2317$i = $z$2316$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $592;
        while(1) {
         $597 = HEAP32[$d$0251$i>>2]|0;
         $598 = (_bitshift64Shl(($597|0),0,($591|0))|0);
         $599 = tempRet0;
         $600 = (_i64Add(($598|0),($599|0),($carry$0250$i|0),0)|0);
         $601 = tempRet0;
         $602 = (___uremdi3(($600|0),($601|0),1000000000,0)|0);
         $603 = tempRet0;
         HEAP32[$d$0251$i>>2] = $602;
         $604 = (___udivdi3(($600|0),($601|0),1000000000,0)|0);
         $605 = tempRet0;
         $606 = (($d$0251$i) + -4|0);
         $607 = ($606>>>0)<($a$1257$i>>>0);
         if ($607) {
          break;
         } else {
          $carry$0250$i = $604;$d$0251$i = $606;
         }
        }
        $608 = HEAP32[$592>>2]|0;
        $609 = ($608|0)==(0);
        $610 = ($z$1256$i>>>0)>($a$1257$i>>>0);
        $or$cond19$i = $609 & $610;
        $z$2$i = $or$cond19$i ? $592 : $z$1256$i;
        $611 = ($604|0)==(0);
        if ($611) {
         $a$2$i = $a$1257$i;$z$2317$i = $z$2$i;
         break;
        }
        $612 = (($a$1257$i) + -4|0);
        HEAP32[$612>>2] = $604;
        $a$2$i = $612;$z$2317$i = $z$2$i;
       }
      } while(0);
      $613 = HEAP32[$e2$i>>2]|0;
      $614 = (($613) - ($591))|0;
      HEAP32[$e2$i>>2] = $614;
      $615 = ($614|0)>(0);
      if ($615) {
       $590 = $614;$a$1257$i = $a$2$i;$z$1256$i = $z$2317$i;
      } else {
       $$pr147$i = $614;$a$1$lcssa$i = $a$2$i;$z$1$lcssa$i = $z$2317$i;
       break;
      }
     }
    } else {
     $$pr147$i = $$pr$i;$a$1$lcssa$i = $$32$i;$z$1$lcssa$i = $583;
    }
    $616 = ($$pr147$i|0)<(0);
    L239: do {
     if ($616) {
      $617 = ($411|0)==(102);
      $618 = (($$p$i|0) / 9)&-1;
      $619 = (($618) + 2)|0;
      if ($617) {
       $620 = $$32$i;
       $621 = (($$32$i) + ($619<<2)|0);
       $623 = $$pr147$i;$a$3245$us$i = $a$1$lcssa$i;$z$3244$us$i = $z$1$lcssa$i;
       while(1) {
        $622 = (0 - ($623))|0;
        $624 = ($622|0)>(9);
        $$20$us$i = $624 ? 9 : $622;
        $625 = ($a$3245$us$i>>>0)<($z$3244$us$i>>>0);
        do {
         if ($625) {
          $650 = 1 << $$20$us$i;
          $644 = (($650) + -1)|0;
          $647 = 1000000000 >>> $$20$us$i;
          $carry3$0239$us$i = 0;$d$1238$us$i = $a$3245$us$i;
          while(1) {
           $642 = HEAP32[$d$1238$us$i>>2]|0;
           $643 = $642 & $644;
           $645 = $642 >>> $$20$us$i;
           $646 = (($645) + ($carry3$0239$us$i))|0;
           HEAP32[$d$1238$us$i>>2] = $646;
           $633 = Math_imul($643, $647)|0;
           $648 = (($d$1238$us$i) + 4|0);
           $649 = ($648>>>0)<($z$3244$us$i>>>0);
           if ($649) {
            $carry3$0239$us$i = $633;$d$1238$us$i = $648;
           } else {
            break;
           }
          }
          $629 = HEAP32[$a$3245$us$i>>2]|0;
          $630 = ($629|0)==(0);
          $631 = (($a$3245$us$i) + 4|0);
          $$a$3$us$i = $630 ? $631 : $a$3245$us$i;
          $632 = ($633|0)==(0);
          if ($632) {
           $$a$3$us320$i = $$a$3$us$i;$z$4$us$i = $z$3244$us$i;
           break;
          }
          $634 = (($z$3244$us$i) + 4|0);
          HEAP32[$z$3244$us$i>>2] = $633;
          $$a$3$us320$i = $$a$3$us$i;$z$4$us$i = $634;
         } else {
          $626 = HEAP32[$a$3245$us$i>>2]|0;
          $627 = ($626|0)==(0);
          $628 = (($a$3245$us$i) + 4|0);
          $$a$3$us319$i = $627 ? $628 : $a$3245$us$i;
          $$a$3$us320$i = $$a$3$us319$i;$z$4$us$i = $z$3244$us$i;
         }
        } while(0);
        $635 = $z$4$us$i;
        $636 = (($635) - ($620))|0;
        $637 = $636 >> 2;
        $638 = ($637|0)>($619|0);
        $$z$4$us$i = $638 ? $621 : $z$4$us$i;
        $639 = HEAP32[$e2$i>>2]|0;
        $640 = (($639) + ($$20$us$i))|0;
        HEAP32[$e2$i>>2] = $640;
        $641 = ($640|0)<(0);
        if ($641) {
         $623 = $640;$a$3245$us$i = $$a$3$us320$i;$z$3244$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us320$i;$z$3$lcssa$i = $$z$4$us$i;
         break L239;
        }
       }
      } else {
       $652 = $$pr147$i;$a$3245$i = $a$1$lcssa$i;$z$3244$i = $z$1$lcssa$i;
      }
      while(1) {
       $651 = (0 - ($652))|0;
       $653 = ($651|0)>(9);
       $$20$i = $653 ? 9 : $651;
       $654 = ($a$3245$i>>>0)<($z$3244$i>>>0);
       do {
        if ($654) {
         $658 = 1 << $$20$i;
         $659 = (($658) + -1)|0;
         $660 = 1000000000 >>> $$20$i;
         $carry3$0239$i = 0;$d$1238$i = $a$3245$i;
         while(1) {
          $661 = HEAP32[$d$1238$i>>2]|0;
          $662 = $661 & $659;
          $663 = $661 >>> $$20$i;
          $664 = (($663) + ($carry3$0239$i))|0;
          HEAP32[$d$1238$i>>2] = $664;
          $665 = Math_imul($662, $660)|0;
          $666 = (($d$1238$i) + 4|0);
          $667 = ($666>>>0)<($z$3244$i>>>0);
          if ($667) {
           $carry3$0239$i = $665;$d$1238$i = $666;
          } else {
           break;
          }
         }
         $668 = HEAP32[$a$3245$i>>2]|0;
         $669 = ($668|0)==(0);
         $670 = (($a$3245$i) + 4|0);
         $$a$3$i = $669 ? $670 : $a$3245$i;
         $671 = ($665|0)==(0);
         if ($671) {
          $$a$3322$i = $$a$3$i;$z$4$i = $z$3244$i;
          break;
         }
         $672 = (($z$3244$i) + 4|0);
         HEAP32[$z$3244$i>>2] = $665;
         $$a$3322$i = $$a$3$i;$z$4$i = $672;
        } else {
         $655 = HEAP32[$a$3245$i>>2]|0;
         $656 = ($655|0)==(0);
         $657 = (($a$3245$i) + 4|0);
         $$a$3321$i = $656 ? $657 : $a$3245$i;
         $$a$3322$i = $$a$3321$i;$z$4$i = $z$3244$i;
        }
       } while(0);
       $673 = $z$4$i;
       $674 = $$a$3322$i;
       $675 = (($673) - ($674))|0;
       $676 = $675 >> 2;
       $677 = ($676|0)>($619|0);
       if ($677) {
        $678 = (($$a$3322$i) + ($619<<2)|0);
        $z$5$i = $678;
       } else {
        $z$5$i = $z$4$i;
       }
       $679 = HEAP32[$e2$i>>2]|0;
       $680 = (($679) + ($$20$i))|0;
       HEAP32[$e2$i>>2] = $680;
       $681 = ($680|0)<(0);
       if ($681) {
        $652 = $680;$a$3245$i = $$a$3322$i;$z$3244$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3322$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $682 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    $683 = $$32$i;
    do {
     if ($682) {
      $684 = $a$3$lcssa$i;
      $685 = (($683) - ($684))|0;
      $686 = $685 >> 2;
      $687 = ($686*9)|0;
      $688 = HEAP32[$a$3$lcssa$i>>2]|0;
      $689 = ($688>>>0)<(10);
      if ($689) {
       $e$1$i = $687;
       break;
      } else {
       $e$0233$i = $687;$i$0234$i = 10;
      }
      while(1) {
       $690 = ($i$0234$i*10)|0;
       $691 = (($e$0233$i) + 1)|0;
       $692 = ($688>>>0)<($690>>>0);
       if ($692) {
        $e$1$i = $691;
        break;
       } else {
        $e$0233$i = $691;$i$0234$i = $690;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $693 = ($411|0)!=(102);
    $694 = $693 ? $e$1$i : 0;
    $695 = (($$p$i) - ($694))|0;
    $696 = ($411|0)==(103);
    $697 = ($$p$i|0)!=(0);
    $$21$i = $696 & $697;
    $$neg152$i = $$21$i << 31 >> 31;
    $698 = (($695) + ($$neg152$i))|0;
    $699 = $z$3$lcssa$i;
    $700 = (($699) - ($683))|0;
    $701 = $700 >> 2;
    $702 = ($701*9)|0;
    $703 = (($702) + -9)|0;
    $704 = ($698|0)<($703|0);
    if ($704) {
     $705 = (($698) + 9216)|0;
     $706 = (($705|0) / 9)&-1;
     $$sum$i = (($706) + -1023)|0;
     $707 = (($$32$i) + ($$sum$i<<2)|0);
     $708 = (($705|0) % 9)&-1;
     $j$0225$i = (($708) + 1)|0;
     $709 = ($j$0225$i|0)<(9);
     if ($709) {
      $i$1226$i = 10;$j$0227$i = $j$0225$i;
      while(1) {
       $710 = ($i$1226$i*10)|0;
       $j$0$i = (($j$0227$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $710;
        break;
       } else {
        $i$1226$i = $710;$j$0227$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $711 = HEAP32[$707>>2]|0;
     $712 = (($711>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $713 = ($712|0)==(0);
     if ($713) {
      $$sum14$i = (($706) + -1022)|0;
      $714 = (($$32$i) + ($$sum14$i<<2)|0);
      $715 = ($714|0)==($z$3$lcssa$i|0);
      if ($715) {
       $a$6$i = $a$3$lcssa$i;$d$3$i = $707;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $716 = (($711>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $717 = $716 & 1;
       $718 = ($717|0)==(0);
       $$22$i = $718 ? 9007199254740992.0 : 9007199254740994.0;
       $719 = (($i$1$lcssa$i|0) / 2)&-1;
       $720 = ($712>>>0)<($719>>>0);
       do {
        if ($720) {
         $small$0$i = 0.5;
        } else {
         $721 = ($712|0)==($719|0);
         if ($721) {
          $$sum15$i = (($706) + -1022)|0;
          $722 = (($$32$i) + ($$sum15$i<<2)|0);
          $723 = ($722|0)==($z$3$lcssa$i|0);
          if ($723) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $724 = ($pl$0$i|0)==(0);
       do {
        if ($724) {
         $round6$1$i = $$22$i;$small$1$i = $small$0$i;
        } else {
         $725 = HEAP8[$prefix$0$i>>0]|0;
         $726 = ($725<<24>>24)==(45);
         if (!($726)) {
          $round6$1$i = $$22$i;$small$1$i = $small$0$i;
          break;
         }
         $727 = $$22$i * -1.0;
         $728 = $small$0$i * -1.0;
         $round6$1$i = $727;$small$1$i = $728;
        }
       } while(0);
       $729 = (($711) - ($712))|0;
       HEAP32[$707>>2] = $729;
       $730 = $round6$1$i + $small$1$i;
       $731 = $730 != $round6$1$i;
       if (!($731)) {
        $a$6$i = $a$3$lcssa$i;$d$3$i = $707;$e$3$i = $e$1$i;
        break;
       }
       $732 = (($729) + ($i$1$lcssa$i))|0;
       HEAP32[$707>>2] = $732;
       $733 = ($732>>>0)>(999999999);
       if ($733) {
        $d$2220$i = $707;
        while(1) {
         $734 = (($d$2220$i) + -4|0);
         HEAP32[$d$2220$i>>2] = 0;
         $735 = HEAP32[$734>>2]|0;
         $736 = (($735) + 1)|0;
         HEAP32[$734>>2] = $736;
         $737 = ($736>>>0)>(999999999);
         if ($737) {
          $d$2220$i = $734;
         } else {
          $d$2$lcssa$i = $734;
          break;
         }
        }
       } else {
        $d$2$lcssa$i = $707;
       }
       $738 = ($d$2$lcssa$i>>>0)<($a$3$lcssa$i>>>0);
       $d$2$a$3$i = $738 ? $d$2$lcssa$i : $a$3$lcssa$i;
       $739 = $d$2$a$3$i;
       $740 = (($683) - ($739))|0;
       $741 = $740 >> 2;
       $742 = ($741*9)|0;
       $743 = HEAP32[$d$2$a$3$i>>2]|0;
       $744 = ($743>>>0)<(10);
       if ($744) {
        $a$6$i = $d$2$a$3$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $742;
        break;
       } else {
        $e$2215$i = $742;$i$2216$i = 10;
       }
       while(1) {
        $745 = ($i$2216$i*10)|0;
        $746 = (($e$2215$i) + 1)|0;
        $747 = ($743>>>0)<($745>>>0);
        if ($747) {
         $a$6$i = $d$2$a$3$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $746;
         break;
        } else {
         $e$2215$i = $746;$i$2216$i = $745;
        }
       }
      }
     } while(0);
     $748 = (($d$3$i) + 4|0);
     $749 = ($z$3$lcssa$i>>>0)>($748>>>0);
     $$z$3$i = $749 ? $748 : $z$3$lcssa$i;
     $z$6$i = $$z$3$i;
     while(1) {
      $750 = (($z$6$i) + -4|0);
      $751 = HEAP32[$750>>2]|0;
      $752 = ($751|0)==(0);
      $753 = ($z$6$i>>>0)>($a$6$i>>>0);
      $or$cond23$i = $752 & $753;
      if ($or$cond23$i) {
       $z$6$i = $750;
      } else {
       $a$7$i = $a$6$i;$e$4$i = $e$3$i;$z$7$i = $z$6$i;
       break;
      }
     }
    } else {
     $a$7$i = $a$3$lcssa$i;$e$4$i = $e$1$i;$z$7$i = $z$3$lcssa$i;
    }
    $754 = (0 - ($e$4$i))|0;
    do {
     if ($696) {
      $755 = ($$p$i|0)==(0);
      $756 = $755&1;
      $$$p$i = (($756) + ($$p$i))|0;
      $757 = ($$$p$i|0)>($e$4$i|0);
      $758 = ($e$4$i|0)>(-5);
      $or$cond3$i = $757 & $758;
      if ($or$cond3$i) {
       $759 = (($t$0) + -1)|0;
       $$neg153$i = (($$$p$i) + -1)|0;
       $760 = (($$neg153$i) - ($e$4$i))|0;
       $$012$i73 = $759;$$29$i = $760;
      } else {
       $761 = (($t$0) + -2)|0;
       $762 = (($$$p$i) + -1)|0;
       $$012$i73 = $761;$$29$i = $762;
      }
      $763 = $fl$1$ & 8;
      $764 = ($763|0)==(0);
      if (!($764)) {
       $$113$i = $$012$i73;$$310$i = $$29$i;
       break;
      }
      $765 = ($z$7$i>>>0)>($a$7$i>>>0);
      do {
       if ($765) {
        $766 = (($z$7$i) + -4|0);
        $767 = HEAP32[$766>>2]|0;
        $768 = ($767|0)==(0);
        if ($768) {
         $j$2$i = 9;
         break;
        }
        $769 = (($767>>>0) % 10)&-1;
        $770 = ($769|0)==(0);
        if ($770) {
         $i$3210$i = 10;$j$1211$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $771 = ($i$3210$i*10)|0;
         $772 = (($j$1211$i) + 1)|0;
         $773 = (($767>>>0) % ($771>>>0))&-1;
         $774 = ($773|0)==(0);
         if ($774) {
          $i$3210$i = $771;$j$1211$i = $772;
         } else {
          $j$2$i = $772;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $775 = $$012$i73 | 32;
      $776 = ($775|0)==(102);
      $777 = $z$7$i;
      $778 = (($777) - ($683))|0;
      $779 = $778 >> 2;
      $780 = ($779*9)|0;
      $781 = (($780) + -9)|0;
      if ($776) {
       $782 = (($781) - ($j$2$i))|0;
       $783 = ($782|0)<(0);
       $$24$i = $783 ? 0 : $782;
       $784 = ($$29$i|0)<($$24$i|0);
       $$29$$24$i = $784 ? $$29$i : $$24$i;
       $$113$i = $$012$i73;$$310$i = $$29$$24$i;
       break;
      } else {
       $785 = (($781) + ($e$4$i))|0;
       $786 = (($785) - ($j$2$i))|0;
       $787 = ($786|0)<(0);
       $$26$i = $787 ? 0 : $786;
       $788 = ($$29$i|0)<($$26$i|0);
       $$29$$26$i = $788 ? $$29$i : $$26$i;
       $$113$i = $$012$i73;$$310$i = $$29$$26$i;
       break;
      }
     } else {
      $$113$i = $t$0;$$310$i = $$p$i;
     }
    } while(0);
    $789 = ($$310$i|0)!=(0);
    if ($789) {
     $793 = 1;
    } else {
     $790 = $fl$1$ & 8;
     $791 = ($790|0)!=(0);
     $793 = $791;
    }
    $792 = $793&1;
    $794 = $$113$i | 32;
    $795 = ($794|0)==(102);
    if ($795) {
     $796 = ($e$4$i|0)>(0);
     $797 = $796 ? $e$4$i : 0;
     $$pn$i = $797;$estr$2$i = 0;
    } else {
     $798 = ($e$4$i|0)<(0);
     $799 = $798 ? $754 : $e$4$i;
     $800 = ($799|0)<(0);
     if ($800) {
      $801 = ($799|0)<(0);
      $802 = $801 << 31 >> 31;
      $$05$i80$i = $6;$803 = $799;$804 = $802;
      while(1) {
       $805 = (___uremdi3(($803|0),($804|0),10,0)|0);
       $806 = tempRet0;
       $807 = $805 | 48;
       $808 = $807&255;
       $809 = (($$05$i80$i) + -1|0);
       HEAP8[$809>>0] = $808;
       $810 = (___udivdi3(($803|0),($804|0),10,0)|0);
       $811 = tempRet0;
       $812 = ($804>>>0)>(9);
       $813 = ($804|0)==(9);
       $814 = ($803>>>0)>(4294967295);
       $815 = $813 & $814;
       $816 = $812 | $815;
       if ($816) {
        $$05$i80$i = $809;$803 = $810;$804 = $811;
       } else {
        break;
       }
      }
      $$0$lcssa$i85$i = $809;$$01$lcssa$off0$i86$i = $810;
     } else {
      $$0$lcssa$i85$i = $6;$$01$lcssa$off0$i86$i = $799;
     }
     $817 = ($$01$lcssa$off0$i86$i|0)==(0);
     if ($817) {
      $estr$1$ph$i = $$0$lcssa$i85$i;
     } else {
      $$12$i88$i = $$0$lcssa$i85$i;$y$03$i87$i = $$01$lcssa$off0$i86$i;
      while(1) {
       $818 = (($y$03$i87$i>>>0) % 10)&-1;
       $819 = $818 | 48;
       $820 = $819&255;
       $821 = (($$12$i88$i) + -1|0);
       HEAP8[$821>>0] = $820;
       $822 = (($y$03$i87$i>>>0) / 10)&-1;
       $823 = ($y$03$i87$i>>>0)<(10);
       if ($823) {
        $estr$1$ph$i = $821;
        break;
       } else {
        $$12$i88$i = $821;$y$03$i87$i = $822;
       }
      }
     }
     $824 = $estr$1$ph$i;
     $825 = (($8) - ($824))|0;
     $826 = ($825|0)<(2);
     if ($826) {
      $estr$1201$i = $estr$1$ph$i;
      while(1) {
       $827 = (($estr$1201$i) + -1|0);
       HEAP8[$827>>0] = 48;
       $828 = $827;
       $829 = (($8) - ($828))|0;
       $830 = ($829|0)<(2);
       if ($830) {
        $estr$1201$i = $827;
       } else {
        $estr$1$lcssa$i = $827;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $831 = $e$4$i >> 31;
     $832 = $831 & 2;
     $833 = (($832) + 43)|0;
     $834 = $833&255;
     $835 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$835>>0] = $834;
     $836 = $$113$i&255;
     $837 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$837>>0] = $836;
     $838 = $837;
     $839 = (($8) - ($838))|0;
     $$pn$i = $839;$estr$2$i = $837;
    }
    $840 = (($pl$0$i) + 1)|0;
    $841 = (($840) + ($$310$i))|0;
    $l$1$i = (($841) + ($792))|0;
    $842 = (($l$1$i) + ($$pn$i))|0;
    $843 = $fl$1$ & 73728;
    $844 = ($843|0)==(0);
    $845 = ($842|0)<($w$1|0);
    $or$cond$i94$i = $844 & $845;
    if ($or$cond$i94$i) {
     $846 = (($w$1) - ($842))|0;
     $847 = ($846>>>0)>(256);
     $848 = $847 ? 256 : $846;
     _memset(($pad$i|0),32,($848|0))|0;
     $849 = ($846>>>0)>(255);
     if ($849) {
      $$01$i95$i = $846;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $850 = (($$01$i95$i) + -256)|0;
       $851 = ($850>>>0)>(255);
       if ($851) {
        $$01$i95$i = $850;
       } else {
        $$0$lcssa$i97$i = $850;
        break;
       }
      }
     } else {
      $$0$lcssa$i97$i = $846;
     }
     (___fwritex($pad$i,$$0$lcssa$i97$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $852 = ($843|0)==(65536);
    $or$cond$i101$i = $852 & $845;
    if ($or$cond$i101$i) {
     $853 = (($w$1) - ($842))|0;
     $854 = ($853>>>0)>(256);
     $855 = $854 ? 256 : $853;
     _memset(($pad$i|0),48,($855|0))|0;
     $856 = ($853>>>0)>(255);
     if ($856) {
      $$01$i102$i = $853;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $857 = (($$01$i102$i) + -256)|0;
       $858 = ($857>>>0)>(255);
       if ($858) {
        $$01$i102$i = $857;
       } else {
        $$0$lcssa$i104$i = $857;
        break;
       }
      }
     } else {
      $$0$lcssa$i104$i = $853;
     }
     (___fwritex($pad$i,$$0$lcssa$i104$i,$f)|0);
    }
    do {
     if ($795) {
      $859 = ($a$7$i>>>0)>($$32$i>>>0);
      $r$0$a$7$i = $859 ? $$32$i : $a$7$i;
      $d$4184$i = $r$0$a$7$i;
      while(1) {
       $860 = HEAP32[$d$4184$i>>2]|0;
       $861 = ($860|0)==(0);
       if ($861) {
        $$1$lcssa$i113$i = $13;
       } else {
        $$12$i111$i = $13;$y$03$i110$i = $860;
        while(1) {
         $862 = (($y$03$i110$i>>>0) % 10)&-1;
         $863 = $862 | 48;
         $864 = $863&255;
         $865 = (($$12$i111$i) + -1|0);
         HEAP8[$865>>0] = $864;
         $866 = (($y$03$i110$i>>>0) / 10)&-1;
         $867 = ($y$03$i110$i>>>0)<(10);
         if ($867) {
          $$1$lcssa$i113$i = $865;
          break;
         } else {
          $$12$i111$i = $865;$y$03$i110$i = $866;
         }
        }
       }
       $868 = ($d$4184$i|0)==($r$0$a$7$i|0);
       do {
        if ($868) {
         $872 = ($$1$lcssa$i113$i|0)==($13|0);
         if (!($872)) {
          $s7$1$i = $$1$lcssa$i113$i;
          break;
         }
         HEAP8[$15>>0] = 48;
         $s7$1$i = $15;
        } else {
         $869 = ($$1$lcssa$i113$i>>>0)>($buf$i>>>0);
         if ($869) {
          $s7$0181$i = $$1$lcssa$i113$i;
         } else {
          $s7$1$i = $$1$lcssa$i113$i;
          break;
         }
         while(1) {
          $870 = (($s7$0181$i) + -1|0);
          HEAP8[$870>>0] = 48;
          $871 = ($870>>>0)>($buf$i>>>0);
          if ($871) {
           $s7$0181$i = $870;
          } else {
           $s7$1$i = $870;
           break;
          }
         }
        }
       } while(0);
       $873 = $s7$1$i;
       $874 = (($14) - ($873))|0;
       (___fwritex($s7$1$i,$874,$f)|0);
       $875 = (($d$4184$i) + 4|0);
       $876 = ($875>>>0)>($$32$i>>>0);
       if ($876) {
        break;
       } else {
        $d$4184$i = $875;
       }
      }
      if (!($789)) {
       $877 = $fl$1$ & 8;
       $878 = ($877|0)==(0);
       if ($878) {
        break;
       }
      }
      (___fwritex(11808,1,$f)|0);
      $879 = ($875>>>0)<($z$7$i>>>0);
      $880 = ($$310$i|0)>(0);
      $or$cond29174$i = $879 & $880;
      if ($or$cond29174$i) {
       $$411176$i = $$310$i;$d$5175$i = $875;
       while(1) {
        $881 = HEAP32[$d$5175$i>>2]|0;
        $882 = ($881|0)==(0);
        if ($882) {
         $s8$0170$i = $13;
         label = 295;
        } else {
         $$12$i120$i = $13;$y$03$i119$i = $881;
         while(1) {
          $883 = (($y$03$i119$i>>>0) % 10)&-1;
          $884 = $883 | 48;
          $885 = $884&255;
          $886 = (($$12$i120$i) + -1|0);
          HEAP8[$886>>0] = $885;
          $887 = (($y$03$i119$i>>>0) / 10)&-1;
          $888 = ($y$03$i119$i>>>0)<(10);
          if ($888) {
           break;
          } else {
           $$12$i120$i = $886;$y$03$i119$i = $887;
          }
         }
         $889 = ($886>>>0)>($buf$i>>>0);
         if ($889) {
          $s8$0170$i = $886;
          label = 295;
         } else {
          $s8$0$lcssa$i = $886;
         }
        }
        if ((label|0) == 295) {
         while(1) {
          label = 0;
          $890 = (($s8$0170$i) + -1|0);
          HEAP8[$890>>0] = 48;
          $891 = ($890>>>0)>($buf$i>>>0);
          if ($891) {
           $s8$0170$i = $890;
           label = 295;
          } else {
           $s8$0$lcssa$i = $890;
           break;
          }
         }
        }
        $892 = ($$411176$i|0)>(9);
        $893 = $892 ? 9 : $$411176$i;
        (___fwritex($s8$0$lcssa$i,$893,$f)|0);
        $894 = (($d$5175$i) + 4|0);
        $895 = (($$411176$i) + -9)|0;
        $896 = ($894>>>0)<($z$7$i>>>0);
        $897 = ($895|0)>(0);
        $or$cond29$i = $896 & $897;
        if ($or$cond29$i) {
         $$411176$i = $895;$d$5175$i = $894;
        } else {
         $$411$lcssa$i = $895;
         break;
        }
       }
      } else {
       $$411$lcssa$i = $$310$i;
      }
      $898 = ($$411$lcssa$i|0)>(0);
      if (!($898)) {
       break;
      }
      $899 = ($$411$lcssa$i>>>0)>(256);
      $900 = $899 ? 256 : $$411$lcssa$i;
      _memset(($pad$i|0),48,($900|0))|0;
      $901 = ($$411$lcssa$i>>>0)>(255);
      if ($901) {
       $$01$i126$i = $$411$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $902 = (($$01$i126$i) + -256)|0;
        $903 = ($902>>>0)>(255);
        if ($903) {
         $$01$i126$i = $902;
        } else {
         $$0$lcssa$i128$i = $902;
         break;
        }
       }
      } else {
       $$0$lcssa$i128$i = $$411$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i128$i,$f)|0);
     } else {
      $904 = ($z$7$i>>>0)>($a$7$i>>>0);
      $905 = (($a$7$i) + 4|0);
      $z$7$$i = $904 ? $z$7$i : $905;
      $906 = ($$310$i|0)>(-1);
      do {
       if ($906) {
        $907 = $fl$1$ & 8;
        $$not$i = ($907|0)!=(0);
        $$5194$i = $$310$i;$d$6193$i = $a$7$i;
        while(1) {
         $908 = HEAP32[$d$6193$i>>2]|0;
         $909 = ($908|0)==(0);
         if ($909) {
          label = 306;
         } else {
          $$12$i135$i = $13;$y$03$i134$i = $908;
          while(1) {
           $910 = (($y$03$i134$i>>>0) % 10)&-1;
           $911 = $910 | 48;
           $912 = $911&255;
           $913 = (($$12$i135$i) + -1|0);
           HEAP8[$913>>0] = $912;
           $914 = (($y$03$i134$i>>>0) / 10)&-1;
           $915 = ($y$03$i134$i>>>0)<(10);
           if ($915) {
            break;
           } else {
            $$12$i135$i = $913;$y$03$i134$i = $914;
           }
          }
          $916 = ($913|0)==($13|0);
          if ($916) {
           label = 306;
          } else {
           $s9$0$i = $913;
          }
         }
         if ((label|0) == 306) {
          label = 0;
          HEAP8[$15>>0] = 48;
          $s9$0$i = $15;
         }
         $917 = ($d$6193$i|0)==($a$7$i|0);
         do {
          if ($917) {
           $921 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $922 = ($$5194$i|0)>(0);
           $brmerge$i = $922 | $$not$i;
           if (!($brmerge$i)) {
            $s9$2$i = $921;
            break;
           }
           (___fwritex(11808,1,$f)|0);
           $s9$2$i = $921;
          } else {
           $918 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($918) {
            $s9$1189$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $919 = (($s9$1189$i) + -1|0);
            HEAP8[$919>>0] = 48;
            $920 = ($919>>>0)>($buf$i>>>0);
            if ($920) {
             $s9$1189$i = $919;
            } else {
             $s9$2$i = $919;
             break;
            }
           }
          }
         } while(0);
         $923 = $s9$2$i;
         $924 = (($14) - ($923))|0;
         $925 = ($924|0)<($$5194$i|0);
         $$$5$i = $925 ? $924 : $$5194$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $926 = (($$5194$i) - ($924))|0;
         $927 = (($d$6193$i) + 4|0);
         $928 = ($927>>>0)<($z$7$$i>>>0);
         $929 = ($926|0)>(-1);
         $or$cond30$i = $928 & $929;
         if ($or$cond30$i) {
          $$5194$i = $926;$d$6193$i = $927;
         } else {
          break;
         }
        }
        $930 = ($926|0)>(0);
        if (!($930)) {
         break;
        }
        $931 = ($926>>>0)>(256);
        $932 = $931 ? 256 : $926;
        _memset(($pad$i|0),48,($932|0))|0;
        $933 = ($926>>>0)>(255);
        if ($933) {
         $$01$i141$i = $926;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $934 = (($$01$i141$i) + -256)|0;
          $935 = ($934>>>0)>(255);
          if ($935) {
           $$01$i141$i = $934;
          } else {
           $$0$lcssa$i143$i = $934;
           break;
          }
         }
        } else {
         $$0$lcssa$i143$i = $926;
        }
        (___fwritex($pad$i,$$0$lcssa$i143$i,$f)|0);
       }
      } while(0);
      $936 = $estr$2$i;
      $937 = (($8) - ($936))|0;
      (___fwritex($estr$2$i,$937,$f)|0);
     }
    } while(0);
    $938 = ($843|0)==(8192);
    $or$cond$i$i = $938 & $845;
    if ($or$cond$i$i) {
     $939 = (($w$1) - ($842))|0;
     $940 = ($939>>>0)>(256);
     $941 = $940 ? 256 : $939;
     _memset(($pad$i|0),32,($941|0))|0;
     $942 = ($939>>>0)>(255);
     if ($942) {
      $$01$i$i = $939;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $943 = (($$01$i$i) + -256)|0;
       $944 = ($943>>>0)>(255);
       if ($944) {
        $$01$i$i = $943;
       } else {
        $$0$lcssa$i$i = $943;
        break;
       }
      }
     } else {
      $$0$lcssa$i$i = $939;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$31$i = $845 ? $w$1 : $842;
    $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$31$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 117:  {
    $276 = $206;$278 = $228;$pl$0 = 0;$prefix$0 = 11712;
    label = 90;
    break;
   }
   case 99:  {
    $318 = $206;
    $319 = $318&255;
    HEAP8[$4>>0] = $319;
    $1054 = $228;$1055 = $206;$a$2 = $4;$fl$6 = $205;$p$5 = 1;$pl$2 = 0;$prefix$2 = 11712;$z$2 = $2;
    break;
   }
   case 109:  {
    $320 = (___errno_location()|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = (_strerror(($321|0))|0);
    $a$1 = $322;
    label = 100;
    break;
   }
   case 115:  {
    $323 = ($206|0)==(0|0);
    $$18 = $323 ? 11728 : $206;
    $a$1 = $$18;
    label = 100;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 2:  {
     $207 = ($cnt$1|0)<(0);
     $208 = $207 << 31 >> 31;
     $209 = $206;
     $210 = $209;
     HEAP32[$210>>2] = $cnt$1;
     $211 = (($209) + 4)|0;
     $212 = $211;
     HEAP32[$212>>2] = $208;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $213 = $cnt$1&65535;
     HEAP16[$206>>1] = $213;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $214 = $cnt$1&255;
     HEAP8[$206>>0] = $214;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     HEAP32[$206>>2] = $cnt$1;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $215 = ($cnt$1|0)<(0);
     $216 = $215 << 31 >> 31;
     $217 = $206;
     $218 = $217;
     HEAP32[$218>>2] = $cnt$1;
     $219 = (($217) + 4)|0;
     $220 = $219;
     HEAP32[$220>>2] = $216;
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1048 = $228;$1049 = $206;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $36;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 78;
    break;
   }
   default: {
    $1054 = $228;$1055 = $206;$a$2 = $22;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 11712;$z$2 = $2;
   }
   }
  } while(0);
  L437: do {
   if ((label|0) == 78) {
    label = 0;
    $224 = $206;
    $225 = $t$1 & 32;
    $226 = ($224|0)==(0);
    $227 = ($228|0)==(0);
    $229 = $226 & $227;
    if ($229) {
     $307 = $206;$310 = $228;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 11712;
     label = 95;
    } else {
     $$012$i = $2;$231 = $224;$238 = $228;
     while(1) {
      $230 = $231 & 15;
      $232 = (11792 + ($230)|0);
      $233 = HEAP8[$232>>0]|0;
      $234 = $233&255;
      $235 = $234 | $225;
      $236 = $235&255;
      $237 = (($$012$i) + -1|0);
      HEAP8[$237>>0] = $236;
      $239 = (_bitshift64Lshr(($231|0),($238|0),4)|0);
      $240 = tempRet0;
      $241 = ($239|0)==(0);
      $242 = ($240|0)==(0);
      $243 = $241 & $242;
      if ($243) {
       break;
      } else {
       $$012$i = $237;$231 = $239;$238 = $240;
      }
     }
     $244 = $fl$3 & 8;
     $245 = ($244|0)==(0);
     if ($245) {
      $307 = $206;$310 = $228;$a$0 = $237;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 11712;
      label = 95;
     } else {
      $246 = $t$1 >> 4;
      $247 = (11712 + ($246)|0);
      $307 = $206;$310 = $228;$a$0 = $237;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $247;
      label = 95;
     }
    }
   }
   else if ((label|0) == 90) {
    label = 0;
    $275 = $276;
    $277 = ($278>>>0)>(0);
    $279 = ($278|0)==(0);
    $280 = ($275>>>0)>(4294967295);
    $281 = $279 & $280;
    $282 = $277 | $281;
    if ($282) {
     $$05$i = $2;$283 = $275;$284 = $278;
     while(1) {
      $285 = (___uremdi3(($283|0),($284|0),10,0)|0);
      $286 = tempRet0;
      $287 = $285 | 48;
      $288 = $287&255;
      $289 = (($$05$i) + -1|0);
      HEAP8[$289>>0] = $288;
      $290 = (___udivdi3(($283|0),($284|0),10,0)|0);
      $291 = tempRet0;
      $292 = ($284>>>0)>(9);
      $293 = ($284|0)==(9);
      $294 = ($283>>>0)>(4294967295);
      $295 = $293 & $294;
      $296 = $292 | $295;
      if ($296) {
       $$05$i = $289;$283 = $290;$284 = $291;
      } else {
       break;
      }
     }
     $$0$lcssa$i46 = $289;$$01$lcssa$off0$i = $290;
    } else {
     $$0$lcssa$i46 = $2;$$01$lcssa$off0$i = $275;
    }
    $297 = ($$01$lcssa$off0$i|0)==(0);
    if ($297) {
     $307 = $276;$310 = $278;$a$0 = $$0$lcssa$i46;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 95;
    } else {
     $$12$i = $$0$lcssa$i46;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $298 = (($y$03$i>>>0) % 10)&-1;
      $299 = $298 | 48;
      $300 = $299&255;
      $301 = (($$12$i) + -1|0);
      HEAP8[$301>>0] = $300;
      $302 = (($y$03$i>>>0) / 10)&-1;
      $303 = ($y$03$i>>>0)<(10);
      if ($303) {
       $307 = $276;$310 = $278;$a$0 = $301;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 95;
       break;
      } else {
       $$12$i = $301;$y$03$i = $302;
      }
     }
    }
   }
   else if ((label|0) == 100) {
    label = 0;
    $324 = (_memchr($a$1,0,$p$0)|0);
    $325 = ($324|0)==(0|0);
    if ($325) {
     $326 = (($a$1) + ($p$0)|0);
     $1054 = $228;$1055 = $206;$a$2 = $a$1;$fl$6 = $205;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 11712;$z$2 = $326;
     break;
    } else {
     $327 = $324;
     $328 = $a$1;
     $329 = (($327) - ($328))|0;
     $1054 = $228;$1055 = $206;$a$2 = $a$1;$fl$6 = $205;$p$5 = $329;$pl$2 = 0;$prefix$2 = 11712;$z$2 = $324;
     break;
    }
   }
   else if ((label|0) == 105) {
    label = 0;
    $i$0169 = 0;$l$1168 = 0;$ws$0170 = $1056;
    while(1) {
     $335 = HEAP32[$ws$0170>>2]|0;
     $336 = ($335|0)==(0);
     if ($336) {
      $i$0$lcssa = $i$0169;$l$1$lcssa = $l$1168;
      break;
     }
     $337 = (_wctomb($mb,$335)|0);
     $338 = ($337|0)>(-1);
     if (!($338)) {
      $$0 = -1;
      label = 357;
      break L1;
     }
     $339 = (($p$4296) - ($i$0169))|0;
     $340 = ($337>>>0)>($339>>>0);
     $334 = (($337) + ($i$0169))|0;
     if ($340) {
      $1058 = $1056;$1059 = $1057;$i$0167 = $i$0169;
      label = 111;
      break L437;
     }
     $332 = (($ws$0170) + 4|0);
     $333 = ($334>>>0)<($p$4296>>>0);
     if ($333) {
      $i$0169 = $334;$l$1168 = $337;$ws$0170 = $332;
     } else {
      $i$0$lcssa = $334;$l$1$lcssa = $337;
      break;
     }
    }
    $341 = ($l$1$lcssa|0)<(0);
    if ($341) {
     $$0 = -1;
     label = 357;
     break L1;
    } else {
     $1058 = $1056;$1059 = $1057;$i$0167 = $i$0$lcssa;
     label = 111;
    }
   }
  } while(0);
  if ((label|0) == 95) {
   label = 0;
   $304 = ($p$2|0)>(-1);
   $305 = $fl$4 & -65537;
   $$fl$4 = $304 ? $305 : $fl$4;
   $306 = $307;
   $308 = ($306|0)==(0);
   $309 = ($310|0)==(0);
   $311 = $308 & $309;
   $312 = ($p$2|0)==(0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $1054 = $310;$1055 = $307;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $313 = $a$0;
    $314 = (($3) - ($313))|0;
    $315 = $311&1;
    $316 = (($315) + ($314))|0;
    $317 = ($p$2|0)>($316|0);
    $p$2$ = $317 ? $p$2 : $316;
    $1054 = $310;$1055 = $307;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 111) {
   label = 0;
   $342 = $fl$1$ & 73728;
   $343 = ($342|0)==(0);
   $344 = ($i$0167|0)<($w$1|0);
   $or$cond$i57 = $343 & $344;
   if ($or$cond$i57) {
    $345 = (($w$1) - ($i$0167))|0;
    $346 = ($345>>>0)>(256);
    $347 = $346 ? 256 : $345;
    _memset(($pad$i|0),32,($347|0))|0;
    $348 = ($345>>>0)>(255);
    if ($348) {
     $$01$i58 = $345;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $349 = (($$01$i58) + -256)|0;
      $350 = ($349>>>0)>(255);
      if ($350) {
       $$01$i58 = $349;
      } else {
       $$0$lcssa$i60 = $349;
       break;
      }
     }
    } else {
     $$0$lcssa$i60 = $345;
    }
    (___fwritex($pad$i,$$0$lcssa$i60,$f)|0);
   }
   $351 = ($i$0167|0)==(0);
   L473: do {
    if (!($351)) {
     $i$1175 = 0;$ws$1176 = $1058;
     while(1) {
      $352 = HEAP32[$ws$1176>>2]|0;
      $353 = ($352|0)==(0);
      if ($353) {
       break L473;
      }
      $354 = (_wctomb($mb,$352)|0);
      $355 = (($354) + ($i$1175))|0;
      $356 = ($355|0)>($i$0167|0);
      if ($356) {
       break L473;
      }
      $357 = (($ws$1176) + 4|0);
      (___fwritex($mb,$354,$f)|0);
      $358 = ($355>>>0)<($i$0167>>>0);
      if ($358) {
       $i$1175 = $355;$ws$1176 = $357;
      } else {
       break;
      }
     }
    }
   } while(0);
   $359 = ($342|0)==(8192);
   $or$cond$i64 = $359 & $344;
   if ($or$cond$i64) {
    $360 = (($w$1) - ($i$0167))|0;
    $361 = ($360>>>0)>(256);
    $362 = $361 ? 256 : $360;
    _memset(($pad$i|0),32,($362|0))|0;
    $363 = ($360>>>0)>(255);
    if ($363) {
     $$01$i65 = $360;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $364 = (($$01$i65) + -256)|0;
      $365 = ($364>>>0)>(255);
      if ($365) {
       $$01$i65 = $364;
      } else {
       $$0$lcssa$i67 = $364;
       break;
      }
     }
    } else {
     $$0$lcssa$i67 = $360;
    }
    (___fwritex($pad$i,$$0$lcssa$i67,$f)|0);
   }
   $366 = $344 ? $w$1 : $i$0167;
   $1048 = $228;$1049 = $1059;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $366;$l10n$0 = $l10n$3;
   continue;
  }
  $945 = $z$2;
  $946 = $a$2;
  $947 = (($945) - ($946))|0;
  $948 = ($p$5|0)<($947|0);
  $$p$5 = $948 ? $947 : $p$5;
  $949 = (($pl$2) + ($$p$5))|0;
  $950 = ($w$1|0)<($949|0);
  $w$2 = $950 ? $949 : $w$1;
  $951 = $fl$6 & 73728;
  $952 = ($951|0)==(0);
  $953 = ($949|0)<($w$2|0);
  $or$cond$i75 = $952 & $953;
  if ($or$cond$i75) {
   $954 = (($w$2) - ($949))|0;
   $955 = ($954>>>0)>(256);
   $956 = $955 ? 256 : $954;
   _memset(($pad$i|0),32,($956|0))|0;
   $957 = ($954>>>0)>(255);
   if ($957) {
    $$01$i76 = $954;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $958 = (($$01$i76) + -256)|0;
     $959 = ($958>>>0)>(255);
     if ($959) {
      $$01$i76 = $958;
     } else {
      $$0$lcssa$i78 = $958;
      break;
     }
    }
   } else {
    $$0$lcssa$i78 = $954;
   }
   (___fwritex($pad$i,$$0$lcssa$i78,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $960 = ($951|0)==(65536);
  $or$cond$i50 = $960 & $953;
  if ($or$cond$i50) {
   $961 = (($w$2) - ($949))|0;
   $962 = ($961>>>0)>(256);
   $963 = $962 ? 256 : $961;
   _memset(($pad$i|0),48,($963|0))|0;
   $964 = ($961>>>0)>(255);
   if ($964) {
    $$01$i51 = $961;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $965 = (($$01$i51) + -256)|0;
     $966 = ($965>>>0)>(255);
     if ($966) {
      $$01$i51 = $965;
     } else {
      $$0$lcssa$i53 = $965;
      break;
     }
    }
   } else {
    $$0$lcssa$i53 = $961;
   }
   (___fwritex($pad$i,$$0$lcssa$i53,$f)|0);
  }
  $967 = ($947|0)<($$p$5|0);
  if ($967) {
   $968 = (($$p$5) - ($947))|0;
   $969 = ($968>>>0)>(256);
   $970 = $969 ? 256 : $968;
   _memset(($pad$i|0),48,($970|0))|0;
   $971 = ($968>>>0)>(255);
   if ($971) {
    $$01$i36 = $968;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $972 = (($$01$i36) + -256)|0;
     $973 = ($972>>>0)>(255);
     if ($973) {
      $$01$i36 = $972;
     } else {
      $$0$lcssa$i38 = $972;
      break;
     }
    }
   } else {
    $$0$lcssa$i38 = $968;
   }
   (___fwritex($pad$i,$$0$lcssa$i38,$f)|0);
  }
  (___fwritex($a$2,$947,$f)|0);
  $974 = ($951|0)==(8192);
  $or$cond$i = $974 & $953;
  if (!($or$cond$i)) {
   $1048 = $1054;$1049 = $1055;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $975 = (($w$2) - ($949))|0;
  $976 = ($975>>>0)>(256);
  $977 = $976 ? 256 : $975;
  _memset(($pad$i|0),32,($977|0))|0;
  $978 = ($975>>>0)>(255);
  if ($978) {
   $$01$i = $975;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $979 = (($$01$i) + -256)|0;
    $980 = ($979>>>0)>(255);
    if ($980) {
     $$01$i = $979;
    } else {
     $$0$lcssa$i = $979;
     break;
    }
   }
  } else {
   $$0$lcssa$i = $975;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1048 = $1054;$1049 = $1055;$22 = $139;$cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 339) {
  $981 = ($f|0)==(0|0);
  if (!($981)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $982 = ($l10n$0|0)==(0);
  if ($982) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$291 = 1;
  }
  while(1) {
   $983 = (($nl_type) + ($i$291<<2)|0);
   $984 = HEAP32[$983>>2]|0;
   $985 = ($984|0)==(0);
   if ($985) {
    $i$390 = $i$291;
    break;
   }
   $986 = (($nl_arg) + ($i$291<<3)|0);
   $987 = ($984>>>0)>(20);
   L523: do {
    if (!($987)) {
     do {
      switch ($984|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $988 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$986>>2] = $988;
       break L523;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $989 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $990 = ($989|0)<(0);
       $991 = $990 << 31 >> 31;
       $992 = $986;
       $993 = $992;
       HEAP32[$993>>2] = $989;
       $994 = (($992) + 4)|0;
       $995 = $994;
       HEAP32[$995>>2] = $991;
       break L523;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $996 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $997 = $986;
       $998 = $997;
       HEAP32[$998>>2] = $996;
       $999 = (($997) + 4)|0;
       $1000 = $999;
       HEAP32[$1000>>2] = 0;
       break L523;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $1001 = $arglist_current44;
       $1002 = $1001;
       $1003 = HEAP32[$1002>>2]|0;
       $1004 = (($1001) + 4)|0;
       $1005 = $1004;
       $1006 = HEAP32[$1005>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $1007 = $986;
       $1008 = $1007;
       HEAP32[$1008>>2] = $1003;
       $1009 = (($1007) + 4)|0;
       $1010 = $1009;
       HEAP32[$1010>>2] = $1006;
       break L523;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $1011 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $1012 = $1011&65535;
       $1013 = $1012 << 16 >> 16;
       $1014 = ($1013|0)<(0);
       $1015 = $1014 << 31 >> 31;
       $1016 = $986;
       $1017 = $1016;
       HEAP32[$1017>>2] = $1013;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = $1015;
       break L523;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1020 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1020 & 65535;
       $1021 = $986;
       $1022 = $1021;
       HEAP32[$1022>>2] = $$mask1$i;
       $1023 = (($1021) + 4)|0;
       $1024 = $1023;
       HEAP32[$1024>>2] = 0;
       break L523;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1025 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1026 = $1025&255;
       $1027 = $1026 << 24 >> 24;
       $1028 = ($1027|0)<(0);
       $1029 = $1028 << 31 >> 31;
       $1030 = $986;
       $1031 = $1030;
       HEAP32[$1031>>2] = $1027;
       $1032 = (($1030) + 4)|0;
       $1033 = $1032;
       HEAP32[$1033>>2] = $1029;
       break L523;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1034 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1034 & 255;
       $1035 = $986;
       $1036 = $1035;
       HEAP32[$1036>>2] = $$mask$i;
       $1037 = (($1035) + 4)|0;
       $1038 = $1037;
       HEAP32[$1038>>2] = 0;
       break L523;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1039 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$986>>3] = $1039;
       break L523;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1040 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$986>>3] = $1040;
       break L523;
       break;
      }
      default: {
       break L523;
      }
      }
     } while(0);
    }
   } while(0);
   $1041 = (($i$291) + 1)|0;
   $1042 = ($1041|0)<(10);
   if ($1042) {
    $i$291 = $1041;
   } else {
    $$0 = 1;
    label = 357;
    break;
   }
  }
  if ((label|0) == 357) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1045 = (($nl_type) + ($i$390<<2)|0);
   $1046 = HEAP32[$1045>>2]|0;
   $1047 = ($1046|0)==(0);
   $1044 = (($i$390) + 1)|0;
   if (!($1047)) {
    $$0 = -1;
    label = 357;
    break;
   }
   $1043 = ($1044|0)<(10);
   if ($1043) {
    $i$390 = $1044;
   } else {
    $$0 = 1;
    label = 357;
    break;
   }
  }
  if ((label|0) == 357) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 357) {
  STACKTOP = sp;return ($$0|0);
 }
 return 0|0;
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=11816+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _vsprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_vsnprintf($s,2147483647,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$1$ph = 0, $$12 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else {
  $$1$ph = $$0;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$4>>0]|0;
  $$1$ph = $4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  STACKTOP = sp;return ($22|0);
 } else {
  $$12 = $$1$ph;$n$03 = 0;
 }
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $n$0$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 STACKTOP = sp;return ($22|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa34 = 0, $$013 = 0, $$1$lcssa = 0, $$17 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond12 = 0, $s$0$lcssa = 0, $s$0$lcssa33 = 0, $s$014 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 $4 = ($n|0)==(0);
 $or$cond12 = $3 | $4;
 L1: do {
  if ($or$cond12) {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  } else {
   $5 = $c&255;
   $$013 = $n;$s$014 = $src;
   while(1) {
    $6 = HEAP8[$s$014>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa34 = $$013;$s$0$lcssa33 = $s$014;
     label = 6;
     break L1;
    }
    $8 = (($s$014) + 1|0);
    $9 = (($$013) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)==(0);
    $13 = ($9|0)==(0);
    $or$cond = $12 | $13;
    if ($or$cond) {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    } else {
     $$013 = $9;$s$014 = $8;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$3 = 0;$s$2 = $s$0$lcssa;
  } else {
   $$0$lcssa34 = $$0$lcssa;$s$0$lcssa33 = $s$0$lcssa;
   label = 6;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa33>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa34;$s$2 = $s$0$lcssa33;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa34>>>0)>(3);
    L11: do {
     if ($18) {
      $$17 = $$0$lcssa34;$w$08 = $s$0$lcssa33;
      while(1) {
       $19 = HEAP32[$w$08>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$17;$w$0$lcssa = $w$08;
        break L11;
       }
       $26 = (($w$08) + 4|0);
       $27 = (($$17) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$17 = $27;$w$08 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa34;$w$0$lcssa = $s$0$lcssa33;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$15>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$24;$s$2 = $s$15;
       break L8;
      }
      $32 = (($s$15) + 1|0);
      $33 = (($$24) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$24 = $33;$s$15 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$027 = 0, $$08 = 0, $$lcssa = 0, $$lcssa4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond36 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond5 = $2 | $3;
 $4 = ($1<<24>>24)==(0);
 $or$cond36 = $or$cond5 | $4;
 if ($or$cond36) {
  $$lcssa = $0;$$lcssa4 = $1;
  $12 = $$lcssa&255;
  $13 = $$lcssa4&255;
  $14 = (($12) - ($13))|0;
  STACKTOP = sp;return ($14|0);
 } else {
  $$027 = $l;$$08 = $r;
 }
 while(1) {
  $5 = (($$027) + 1|0);
  $6 = (($$08) + 1|0);
  $7 = HEAP8[$5>>0]|0;
  $8 = HEAP8[$6>>0]|0;
  $9 = ($7<<24>>24)!=($8<<24>>24);
  $10 = ($7<<24>>24)==(0);
  $or$cond = $9 | $10;
  $11 = ($8<<24>>24)==(0);
  $or$cond3 = $or$cond | $11;
  if ($or$cond3) {
   $$lcssa = $7;$$lcssa4 = $8;
   break;
  } else {
   $$027 = $5;$$08 = $6;
  }
 }
 $12 = $$lcssa&255;
 $13 = $$lcssa4&255;
 $14 = (($12) - ($13))|0;
 STACKTOP = sp;return ($14|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$06 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
  STACKTOP = sp;return ($$03|0);
 }
 $1 = HEAP8[$_l>>0]|0;
 $2 = ($1<<24>>24)==(0);
 L4: do {
  if ($2) {
   $11 = 0;$r$0$lcssa = $_r;
  } else {
   $$08$in = $n;$5 = $1;$l$06 = $_l;$r$07 = $_r;
   while(1) {
    $$08 = (($$08$in) + -1)|0;
    $3 = HEAP8[$r$07>>0]|0;
    $notlhs = ($3<<24>>24)!=(0);
    $notrhs = ($$08|0)!=(0);
    $or$cond$not = $notrhs & $notlhs;
    $4 = ($5<<24>>24)==($3<<24>>24);
    $or$cond4 = $or$cond$not & $4;
    if (!($or$cond4)) {
     $11 = $5;$r$0$lcssa = $r$07;
     break L4;
    }
    $6 = (($l$06) + 1|0);
    $7 = (($r$07) + 1|0);
    $8 = HEAP8[$6>>0]|0;
    $9 = ($8<<24>>24)==(0);
    if ($9) {
     $11 = 0;$r$0$lcssa = $7;
     break;
    } else {
     $$08$in = $$08;$5 = $8;$l$06 = $6;$r$07 = $7;
    }
   }
  }
 } while(0);
 $10 = $11&255;
 $12 = HEAP8[$r$0$lcssa>>0]|0;
 $13 = $12&255;
 $14 = (($10) - ($13))|0;
 $$03 = $14;
 STACKTOP = sp;return ($$03|0);
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _strncpy(pdest, psrc, num) {
    pdest = pdest|0; psrc = psrc|0; num = num|0;
    var padding = 0, curr = 0, i = 0;
    while ((i|0) < (num|0)) {
      curr = padding ? 0 : ((HEAP8[(((psrc)+(i))>>0)])|0);
      HEAP8[(((pdest)+(i))>>0)]=curr;
      padding = padding ? 1 : (((HEAP8[(((psrc)+(i))>>0)])|0) == 0);
      i = (i+1)|0;
    }
    return pdest|0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _saveSetjmp(env, label, table) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < 20) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        return 0;
      }
      i = i+1|0;
    }
    _putchar(116);_putchar(111);_putchar(111);_putchar(32);_putchar(109);_putchar(97);_putchar(110);_putchar(121);_putchar(32);_putchar(115);_putchar(101);_putchar(116);_putchar(106);_putchar(109);_putchar(112);_putchar(115);_putchar(32);_putchar(105);_putchar(110);_putchar(32);_putchar(97);_putchar(32);_putchar(102);_putchar(117);_putchar(110);_putchar(99);_putchar(116);_putchar(105);_putchar(111);_putchar(110);_putchar(32);_putchar(99);_putchar(97);_putchar(108);_putchar(108);_putchar(44);_putchar(32);_putchar(98);_putchar(117);_putchar(105);_putchar(108);_putchar(100);_putchar(32);_putchar(119);_putchar(105);_putchar(116);_putchar(104);_putchar(32);_putchar(97);_putchar(32);_putchar(104);_putchar(105);_putchar(103);_putchar(104);_putchar(101);_putchar(114);_putchar(32);_putchar(118);_putchar(97);_putchar(108);_putchar(117);_putchar(101);_putchar(32);_putchar(102);_putchar(111);_putchar(114);_putchar(32);_putchar(77);_putchar(65);_putchar(88);_putchar(95);_putchar(83);_putchar(69);_putchar(84);_putchar(74);_putchar(77);_putchar(80);_putchar(83);_putchar(10);
    abort(0);
    return 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _testSetjmp(id, table) {
    id = id|0;
    table = table|0;
    var i = 0, curr = 0;
    while ((i|0) < 20) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

    
    function dynCall_iiii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      return FUNCTION_TABLE_iiii[index&511](a1|0,a2|0,a3|0)|0;
    }
  

    function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
      FUNCTION_TABLE_viiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
    }
  

    function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      FUNCTION_TABLE_viiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0);
    }
  

    function dynCall_vi(index,a1) {
      index = index|0;
      a1=a1|0;
      FUNCTION_TABLE_vi[index&511](a1|0);
    }
  

    function dynCall_vii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      FUNCTION_TABLE_vii[index&511](a1|0,a2|0);
    }
  

    function dynCall_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
      return FUNCTION_TABLE_iiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0)|0;
    }
  

    function dynCall_ii(index,a1) {
      index = index|0;
      a1=a1|0;
      return FUNCTION_TABLE_ii[index&255](a1|0)|0;
    }
  

    function dynCall_viii(index,a1,a2,a3) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0;
      FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
    }
  

    function dynCall_iiiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      return FUNCTION_TABLE_iiiii[index&511](a1|0,a2|0,a3|0,a4|0)|0;
    }
  

    function dynCall_iii(index,a1,a2) {
      index = index|0;
      a1=a1|0; a2=a2|0;
      return FUNCTION_TABLE_iii[index&255](a1|0,a2|0)|0;
    }
  

    function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
      return FUNCTION_TABLE_iiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
    }
  

    function dynCall_viiii(index,a1,a2,a3,a4) {
      index = index|0;
      a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
      FUNCTION_TABLE_viiii[index&511](a1|0,a2|0,a3|0,a4|0);
    }
  
function b0(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(1); }
  function b2(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(2); }
  function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
  function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
  function b5(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_iiiiiii(5);return 0; }
  function b6(p0) { p0 = p0|0; nullFunc_ii(6);return 0; }
  function _strlen__wrapper(p0) { p0 = p0|0; return _strlen(p0|0)|0; }
  function _fclose__wrapper(p0) { p0 = p0|0; return _fclose(p0|0)|0; }
  function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(7); }
  function b8(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(8);return 0; }
  function b9(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0; }
  function _fopen__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _fopen(p0|0,p1|0)|0; }
  function b10(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(10);return 0; }
  function b11(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiii = [b0,_sn_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_strncmp,b0,b0,b0,_sscanf,b0,b0,b0,b0,_jpeg_read_scanlines,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_jpeg_write_scanlines,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,_alloc_small,_alloc_large,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,_do_read,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0];
  var FUNCTION_TABLE_viiiiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_forward_DCT,_forward_DCT_float,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,_pre_process_context,_pre_process_data,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_merged_2v_upsample,b1,_merged_1v_upsample,b1,b1,_post_process_1pass,_post_process_prepass,_post_process_2pass,b1,_sep_upsample,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_viiiii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_grayscale_convert,b2
  ,_rgb_gray_convert,_rgb_convert,_rgb_rgb1_convert,_rgb_ycc_convert,_null_convert,_cmyk_ycck_convert,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,_sep_downsample,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,_grayscale_convert30,_rgb_gray_convert31,_rgb1_gray_convert,_gray_rgb_convert,_ycc_rgb_convert,_rgb_convert32,_rgb1_rgb_convert,_ycck_cmyk_convert,_null_convert33,b2,_jpeg_idct_1x1,_jpeg_idct_2x2,_jpeg_idct_3x3,_jpeg_idct_4x4,_jpeg_idct_5x5,_jpeg_idct_6x6,_jpeg_idct_7x7,_jpeg_idct_9x9,_jpeg_idct_10x10,_jpeg_idct_11x11,_jpeg_idct_12x12,_jpeg_idct_13x13,_jpeg_idct_14x14
  ,_jpeg_idct_15x15,_jpeg_idct_16x16,_jpeg_idct_16x8,_jpeg_idct_14x7,_jpeg_idct_12x6,_jpeg_idct_10x5,_jpeg_idct_8x4,_jpeg_idct_6x3,_jpeg_idct_4x2,_jpeg_idct_2x1,_jpeg_idct_8x16,_jpeg_idct_7x14,_jpeg_idct_6x12,_jpeg_idct_5x10,_jpeg_idct_4x8,_jpeg_idct_3x6,_jpeg_idct_2x4,_jpeg_idct_1x2,_jpeg_idct_islow,_jpeg_idct_ifast,_jpeg_idct_float,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,b3,b3,__epeg_fatal_error_handler,_epeg_close,b3,b3,b3,b3,__jpeg_init_source,b3,b3,b3,__jpeg_term_source,b3,_free,b3,b3,b3,b3,b3,b3,b3,_jpeg_calc_output_dimensions,b3,_jpeg_abort_decompress,b3,b3,b3
  ,b3,b3,__jpeg_init_destination,b3,__jpeg_term_destination,_jpeg_set_defaults,b3,b3,b3,b3,b3,b3,_jpeg_finish_compress,_jpeg_destroy_decompress,b3,_jpeg_destroy_compress,b3,_finish_pass,b3,b3,b3,b3,b3,b3,b3,b3,b3,_null_method,b3,_rgb_ycc_start
  ,b3,b3,b3,b3,b3,b3,_start_pass_fdctmgr,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_finish_pass_gather,_finish_pass_huff,b3,b3,b3,b3,b3,b3,b3,b3,_write_file_header,_write_frame_header,_write_scan_header,_write_file_trailer,_write_tables_only,b3
  ,b3,_prepare_for_pass,_pass_startup,_finish_pass_master,b3,b3,b3,_start_pass_downsample,b3,b3,b3,b3,b3,b3,b3,_start_pass27,_finish_pass28,b3,b3,b3,b3,b3,_init_destination,b3,_term_destination,_init_source,b3,b3,_term_source,_start_input_pass
  ,_start_output_pass,b3,b3,b3,b3,b3,_start_pass_dcolor,b3,b3,b3,b3,b3,b3,b3,b3,b3,_start_pass34,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_start_pass_huff_decoder,_finish_pass_huff35,b3,b3,b3,b3,b3,b3,b3
  ,_reset_input_controller,_start_input_pass44,_finish_input_pass,b3,b3,b3,b3,_reset_marker_reader,b3,b3,b3,b3,b3,_prepare_for_output_pass,_finish_output_pass,_start_pass_merged_upsample,b3,b3,b3,b3,b3,b3,b3,b3,_start_pass_upsample,b3,b3,b3,b3,b3
  ,b3,_error_exit,b3,_output_message,b3,_reset_error_mgr,b3,_finish_pass_1_quant,_new_color_map_1_quant,b3,b3,b3,b3,b3,b3,_new_color_map_2_quant,b3,_finish_pass1,b3,b3,_finish_pass2,b3,b3,b3,b3,b3,b3,_realize_virt_arrays,b3,b3
  ,b3,_self_destruct,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,b4,_jpeg_stdio_src,b4,b4,b4,__jpeg_skip_input_data,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,_jpeg_stdio_dest,b4,b4,b4,b4,b4,_jpeg_start_compress,b4,b4,b4,b4,b4,b4,b4,b4,_start_pass,b4,b4,b4,b4,b4,b4,_start_pass_coef,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_start_pass_huff,b4,b4,b4,b4,b4,b4,b4,b4,_start_pass_main,b4,b4,b4,b4,b4,b4,b4
  ,_write_marker_byte,b4,b4,b4,_start_pass_prep,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_skip_input_data,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,_start_pass_main47,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_start_pass_dpost,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,_emit_message,b4,_format_message,b4,_start_pass_1_quant,b4,b4,b4,b4,b4,b4,b4,_start_pass_2_quant,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,_free_pool,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4];
  var FUNCTION_TABLE_iiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_request_virt_sarray,_request_virt_barray,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5];
  var FUNCTION_TABLE_ii = [b6,b6,_jpeg_std_error,b6,b6,b6,b6,b6,b6,b6,__jpeg_fill_input_buffer,b6,b6,b6,b6,b6,_malloc,b6,b6,b6,___strdup,b6,_atoi,b6,_jpeg_start_decompress,b6,b6,_jpeg_finish_decompress,b6
  ,b6,b6,b6,__jpeg_empty_output_buffer,b6,b6,b6,b6,_strlen__wrapper,b6,b6,b6,b6,b6,_fclose__wrapper,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_empty_output_buffer,b6,b6,_fill_input_buffer,b6,b6,b6
  ,b6,_consume_data,b6,_dummy_consume_data,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_consume_markers
  ,b6,b6,b6,b6,b6,b6,b6,b6,_read_markers,_read_restart_marker,_skip_variable,_get_interesting_appn,_save_marker,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_viii = [b7,b7,b7,b7,b7,_jpeg_CreateDecompress,_jpeg_save_markers,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,_jpeg_CreateCompress,b7,b7,b7,b7,b7,_jpeg_set_quality,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,_jpeg_fdct_1x1,_jpeg_fdct_2x2,_jpeg_fdct_3x3,_jpeg_fdct_4x4,_jpeg_fdct_5x5,_jpeg_fdct_6x6,_jpeg_fdct_7x7,_jpeg_fdct_9x9,_jpeg_fdct_10x10,_jpeg_fdct_11x11,_jpeg_fdct_12x12,_jpeg_fdct_13x13,_jpeg_fdct_14x14,_jpeg_fdct_15x15,_jpeg_fdct_16x16,_jpeg_fdct_16x8,_jpeg_fdct_14x7,_jpeg_fdct_12x6,_jpeg_fdct_10x5,_jpeg_fdct_8x4,_jpeg_fdct_6x3,_jpeg_fdct_4x2,_jpeg_fdct_2x1
  ,_jpeg_fdct_8x16,_jpeg_fdct_7x14,_jpeg_fdct_6x12,_jpeg_fdct_5x10,_jpeg_fdct_4x8,_jpeg_fdct_3x6,_jpeg_fdct_2x4,_jpeg_fdct_1x2,_jpeg_fdct_islow,_jpeg_fdct_ifast,_jpeg_fdct_float,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_write_marker_header
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_iiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_snprintf,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_alloc_sarray,_alloc_barray,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8];
  var FUNCTION_TABLE_iii = [b9,b9,b9,b9,b9,b9,b9,b9,_calloc,b9,b9,b9,_jpeg_resync_to_restart,b9,_jpeg_read_header,b9,b9,b9,_strchr,_strcmp,b9,b9,b9,b9,b9,b9,b9,b9,_fopen__wrapper,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_encode_mcu_DC_first,_encode_mcu_AC_first,_encode_mcu_DC_refine,_encode_mcu_AC_refine,_encode_mcu,b9,_compress_data,_compress_first_pass,_compress_output,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_encode_mcu_DC_first1,_encode_mcu_AC_first2,_encode_mcu_DC_refine3,_encode_mcu_AC_refine4,_encode_mcu_gather,_encode_mcu_huff,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_decode_mcu_DC_first,_decode_mcu_AC_first,_decode_mcu_DC_refine,_decode_mcu_AC_refine,_decode_mcu,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,_decompress_data,b9,_decompress_onepass,_decompress_smooth_data,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_decode_mcu_DC_first36,_decode_mcu_AC_first37,_decode_mcu_DC_refine38,_decode_mcu_AC_refine39,_decode_mcu_sub,_decode_mcu40,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_iiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_access_virt_sarray,_access_virt_barray
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10];
  var FUNCTION_TABLE_viiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,_jpeg_write_marker,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_process_data_simple_main,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,_fullsize_smooth_downsample,_fullsize_downsample,_h2v1_downsample,_h2v2_smooth_downsample,_h2v2_downsample,_int_downsample,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,_process_data_context_main,_process_data_simple_main48,_process_data_crank_post,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,_h2v2_merged_upsample,b11,_h2v1_merged_upsample,b11,b11,b11,b11,b11,b11,_noop_upsample,_fullsize_upsample,_h2v1_upsample,_h2v2_upsample
  ,_int_upsample,b11,b11,b11,b11,b11,b11,b11,b11,_color_quantize3,_color_quantize,_quantize3_ord_dither,_quantize_ord_dither,_quantize_fs_dither,b11,b11,_prescan_quantize,b11,_pass2_fs_dither,_pass2_no_dither,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11];

    return { _strlen: _strlen, _epeg_file_open: _epeg_file_open, _bitshift64Lshr: _bitshift64Lshr, _calloc: _calloc, _bitshift64Shl: _bitshift64Shl, _strncpy: _strncpy, _memset: _memset, _memcpy: _memcpy, _epeg_colorspace_get: _epeg_colorspace_get, _epeg_memory_output_set: _epeg_memory_output_set, _epeg_memory_open: _epeg_memory_open, _epeg_size_get: _epeg_size_get, _epeg_decode_bounds_set: _epeg_decode_bounds_set, _i64Subtract: _i64Subtract, _realloc: _realloc, _i64Add: _i64Add, _epeg_close: _epeg_close, _epeg_encode: _epeg_encode, _testSetjmp: _testSetjmp, _saveSetjmp: _saveSetjmp, _free: _free, _epeg_quality_set: _epeg_quality_set, _epeg_file_output_set: _epeg_file_output_set, _malloc: _malloc, _epeg_decode_size_set: _epeg_decode_size_set, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_iiiii: dynCall_iiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
  })
  // EMSCRIPTEN_END_ASM
  ({ "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array }, { "abort": abort, "assert": assert, "asmPrintInt": asmPrintInt, "asmPrintFloat": asmPrintFloat, "min": Math_min, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_iiiii": invoke_iiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_send": _send, "_fread": _fread, "_fmod": _fmod, "_fmodl": _fmodl, "_fstat": _fstat, "___buildEnvironment": ___buildEnvironment, "_longjmp": _longjmp, "_fflush": _fflush, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_open": _open, "_sbrk": _sbrk, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_fileno": _fileno, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_ferror": _ferror, "_putchar": _putchar, "_pread": _pread, "_getenv": _getenv, "_fclose": _fclose, "__reallyNegative": __reallyNegative, "_write": _write, "_fsync": _fsync, "___errno_location": ___errno_location, "_stat": _stat, "_recv": _recv, "_copysign": _copysign, "_fputc": _fputc, "_mkport": _mkport, "__exit": __exit, "_read": _read, "_copysignl": _copysignl, "_abort": _abort, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "_emscripten_longjmp": _emscripten_longjmp, "__formatString": __formatString, "_fopen": _fopen, "_exit": _exit, "_close": _close, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "_stderr": _stderr }, buffer);
  var _strlen = Module["_strlen"] = asm["_strlen"];
var _epeg_file_open = Module["_epeg_file_open"] = asm["_epeg_file_open"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _calloc = Module["_calloc"] = asm["_calloc"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _strncpy = Module["_strncpy"] = asm["_strncpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _epeg_colorspace_get = Module["_epeg_colorspace_get"] = asm["_epeg_colorspace_get"];
var _epeg_memory_output_set = Module["_epeg_memory_output_set"] = asm["_epeg_memory_output_set"];
var _epeg_memory_open = Module["_epeg_memory_open"] = asm["_epeg_memory_open"];
var _epeg_size_get = Module["_epeg_size_get"] = asm["_epeg_size_get"];
var _epeg_decode_bounds_set = Module["_epeg_decode_bounds_set"] = asm["_epeg_decode_bounds_set"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _epeg_close = Module["_epeg_close"] = asm["_epeg_close"];
var _epeg_encode = Module["_epeg_encode"] = asm["_epeg_encode"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _free = Module["_free"] = asm["_free"];
var _epeg_quality_set = Module["_epeg_quality_set"] = asm["_epeg_quality_set"];
var _epeg_file_output_set = Module["_epeg_file_output_set"] = asm["_epeg_file_output_set"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _epeg_decode_size_set = Module["_epeg_decode_size_set"] = asm["_epeg_decode_size_set"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
  
  Runtime.stackAlloc = asm['stackAlloc'];
  Runtime.stackSave = asm['stackSave'];
  Runtime.stackRestore = asm['stackRestore'];
  Runtime.setTempRet0 = asm['setTempRet0'];
  Runtime.getTempRet0 = asm['getTempRet0'];
  

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram'] || '/bin/this.program'), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



//# sourceMappingURL=libepeg.js.map